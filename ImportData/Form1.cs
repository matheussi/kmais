using System;
using System.IO;
using System.Data;
using System.Linq;
using System.Text;
using System.Drawing;
using System.Net.Mail;
using System.Data.OleDb;
using System.Windows.Forms;
using System.ComponentModel;
using System.Collections.Generic;

using System.Data.SqlClient;

using LC.Framework.Phantom;
using LC.Web.PadraoSeguros.Entity;
using LC.Web.PadraoSeguros.Facade;
using LC.Framework.BusinessLayer;
using System.Globalization;
using System.Security.Cryptography;
using System.Collections;
using System.Configuration;

namespace ImportData
{
    public partial class Form1 : Form
    {
        String mdbPath = @"C:\padrao_import\___beneficiarios.accdb";

        String toString(Object param)
        {
            if (param == null || param == DBNull.Value)
                return String.Empty;
            else
                return Convert.ToString(param);
        }
        Int32 toInt32(Object param)
        {
            if (param == null || param == DBNull.Value)
                return 0;
            else
                return Convert.ToInt32(param);
        }

        DateTime toDateTime(Object param)
        {
            try
            {
                if (param == null || param == DBNull.Value)
                    return DateTime.MinValue;
                else if (Convert.ToString(param).IndexOf('/') == -1)
                {
                    int ano = Convert.ToInt32(Convert.ToString(param).Substring(0, 4));
                    int mes = Convert.ToInt32(Convert.ToString(param).Substring(4, 2));
                    int dia = Convert.ToInt32(Convert.ToString(param).Substring(6, 2));

                    return new DateTime(ano, mes, dia);
                }
                else
                    return Convert.ToDateTime(param, new System.Globalization.CultureInfo("pt-Br"));
            }
            catch
            {
                return DateTime.Now;
            }
        }
        Decimal toDecimal(Object param)
        {
            if (param == null || param == DBNull.Value)
                return Decimal.Zero;
            else
                return Convert.ToDecimal(param, new System.Globalization.CultureInfo("pt-Br"));
        }

        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(Object sender, EventArgs e)
        {
            lblStatus.Text = "";
        }

        #region Importacao K+ 

        //String k_mdbPath = @"C:\Users\ACER E1 572 6830\Desktop\sispag\k+\dados\importacao.accdb";

        void k_importaPessoasContratos()
        {
            DateTime agora = DateTime.Now, vencimento = DateTime.MinValue;

            DataSet dsSOCIOS = new DataSet();
            DataSet dsDEPENDS = new DataSet();
            DataSet dsMANUTS = new DataSet();

            //using (OleDbConnection conn = new OleDbConnection("Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + k_mdbPath + ";Persist Security Info=False;"))
            //using(System.Data.SqlClient.SqlConnection conn = new SqlConnection("Server=DEV01;Database=kMais01;Uid=sa;Pwd=lcmaster0000;timeout=1999999999"))
            using (System.Data.SqlClient.SqlConnection conn = new SqlConnection(@"Server=clint\sqlserver2008;Database=cmc2;Uid=sa;Pwd=lcmaster0000;timeout=1999999999"))
            {
                try
                {
                    conn.Open();
                }
                catch
                {
                    MessageBox.Show("erro na primeira conexao"); return;
                }

                SqlDataAdapter adp = new SqlDataAdapter("SELECT * FROM SOCIOS", conn);
                adp.Fill(dsSOCIOS, "SOCIOS");

                adp.SelectCommand.CommandText = "SELECT * FROM DEPENDS";
                adp.Fill(dsDEPENDS, "DEPENDS");

                adp.SelectCommand.CommandText = "SELECT * FROM MANUTS";
                adp.Fill(dsMANUTS, "MANUTS");

                adp.Dispose();
                conn.Close();
            }

            using (PersistenceManager pm = new PersistenceManager())
            {
                pm.UseSingleCommandInstance();
                //pm.BeginTransactionContext();

                NonQueryHelper.Instance.ExecuteNonQuery(
                    "truncate table contrato_beneficiario;truncate table cobranca;truncate table contrato;truncate table endereco;truncate table beneficiario", pm);

                int cont = 0, contDep = 0;

                try
                {
                    object aux = null;
                    Contrato contrato = null;
                    Endereco endereco = null;
                    Cobranca cobranca = null;
                    Beneficiario titular = null;
                    Beneficiario dependente = null;
                    ContratoBeneficiario cbTit = null;
                    ContratoBeneficiario cbDep = null;

                    DataRow[] res_depends = null;
                    DataRow[] res_cobrancas = null;

                    #region titulares

                    foreach (DataRow socio in dsSOCIOS.Tables[0].Rows)
                    {
                        try
                        {
                            //if (cont > 300) break;
                            cont++;

                            //if (cont == 301) { int temp = 0; }

                            titular = new Beneficiario();

                            aux = LocatorHelper.Instance.ExecuteScalar(
                                string.Concat("select beneficiario_id from beneficiario where beneficiario_matriculaAssociativa='", socio["TIT_"], "'"),
                                null, null, pm);

                            if (aux == null || aux == DBNull.Value)
                            {
                                titular.CPF = toString(socio["CPF_"]).Replace(".", "").Replace("-", "").Replace(" ", "");
                                titular.DataNascimento = toDateTime(socio["NASC_"]);
                                titular.MatriculaAssociativa = toString(socio["TIT_"]);
                                //titular.ImportID = toInt32(socio["ID_"]);
                                titular.Nome = toString(socio["NOME_"]).Trim();
                                titular.NomeMae = toString(socio["MAE_"]);
                                titular.Telefone = toString(socio["TEL_"]);
                                titular.Sexo = "1";

                                if (string.IsNullOrEmpty(titular.Nome)) continue;

                                try
                                {
                                    pm.Save(titular);
                                }
                                catch { continue; }
                            }
                            else
                            {
                                titular.ID = aux;
                                pm.Load(titular);
                            }

                            #region Endereço

                            endereco = null;

                            aux = LocatorHelper.Instance.ExecuteScalar(
                                string.Concat("select endereco_id from endereco where endereco_donotipo=0 and endereco_donoId=", titular.ID),
                                null, null, pm);

                            if (aux == null || aux == DBNull.Value)
                            {
                                endereco = new Endereco();
                                endereco.Bairro = toString(socio["BAIR_"]).Trim();
                                endereco.CEP = toString(socio["CEP_"]).Replace("-", "").Trim();
                                endereco.Cidade = toString(socio["MUNI_"]).Trim();
                                endereco.DonoId = titular.ID;
                                endereco.DonoTipo = 0;
                                endereco.Logradouro = toString(socio["ENDE_"]).Trim();
                                endereco.Tipo = 0;
                                endereco.UF = toString(socio["ESTA_"]).Trim();
                                try
                                {
                                    pm.Save(endereco);
                                }
                                catch { continue; }
                            }
                            #endregion

                            #region Contrato

                            contrato = null;

                            if (endereco != null)
                            {
                                aux = LocatorHelper.Instance.ExecuteScalar(
                                string.Concat("select contrato_id from contrato where contrato_numero='", titular.MatriculaAssociativa, "'"),
                                null, null, pm);

                                if (aux == null || aux == DBNull.Value)
                                {
                                    contrato = new Contrato();
                                    contrato.Adimplente = true;
                                    contrato.Admissao = toDateTime(socio["DATIT_"]);
                                    if (contrato.Admissao == DateTime.MinValue) contrato.Admissao = agora;
                                    contrato.Cancelado = toString(socio["STATUS_"]) != "A" ? true : false;
                                    contrato.Inativo = contrato.Cancelado;
                                    contrato.CobrarTaxaAssociativa = false;
                                    contrato.CodCobranca = -1;
                                    contrato.ContratoADMID = 1;
                                    contrato.Data = agora;
                                    contrato.Desconto = 0;
                                    contrato.EnderecoCobrancaID = endereco.ID;
                                    contrato.EnderecoReferenciaID = endereco.ID;
                                    contrato.EstipulanteID = 114;
                                    contrato.FilialID = 2;
                                    contrato.Legado = true;
                                    contrato.Numero = titular.MatriculaAssociativa;
                                    contrato.NumeroMatricula = contrato.NumeroMatricula;
                                    contrato.OperadoraID = 6;
                                    contrato.PlanoID = 1; /////////////////?????????
                                    contrato.Rascunho = false;
                                    contrato.Status = 0;
                                    contrato.TipoContratoID = 1;
                                    contrato.UsuarioID = 1;
                                    contrato.Vencimento = agora; /////// será arrumado na importacao de cobrancas
                                    contrato.Vigencia = agora;   ///////???????
                                    contrato.DonoID = 1;

                                    contrato.TipoContratoID = 1;//////??????

                                    try
                                    {
                                        pm.Save(contrato);

                                        contrato.CodCobranca = Convert.ToInt32(contrato.ID);
                                        pm.Save(contrato);
                                    }
                                    catch { continue; }
                                }
                                else
                                {
                                    contrato.ID = aux;
                                    pm.Load(contrato);
                                }
                            }

                            #endregion

                            #region ContratoBeneficiario - Titular

                            cbTit = null;

                            aux = LocatorHelper.Instance.ExecuteScalar(
                                string.Concat("select contratobeneficiario_id from contrato_beneficiario where contratobeneficiario_tipo=0 and contratobeneficiario_contratoId=", contrato.ID, " and contratobeneficiario_beneficiarioID=", titular.ID),
                                null, null, pm);

                            if (aux == null || aux == DBNull.Value)
                            {
                                cbTit = new ContratoBeneficiario();

                                cbTit.Altura = 1.7M;
                                cbTit.Ativo = true;
                                cbTit.ContratoID = contrato.ID;
                                cbTit.Data = contrato.Admissao;
                                cbTit.EstadoCivilID = 1; //solteiro
                                if (toString(socio["ECIV_"]).ToLower().IndexOf("cas") > -1) cbTit.EstadoCivilID = 2;
                                cbTit.NumeroMatriculaSaude = titular.MatriculaAssociativa;
                                cbTit.NumeroSequencial = 0;
                                cbTit.Peso = 70M;
                                cbTit.Status = 0;
                                cbTit.Tipo = 0;
                                cbTit.Valor = 0M;
                                cbTit.Vigencia = contrato.Vigencia;
                                cbTit.BeneficiarioID = titular.ID;
                                //cbTit.CarenciaContratoTempo = 0;

                                try
                                {
                                    pm.Save(cbTit);
                                }
                                catch { continue; }
                            }

                            #endregion

                            #region Dependentes

                            res_depends = dsDEPENDS.Tables[0].Select(string.Concat("TIT_='", titular.MatriculaAssociativa, "'"));
                            if (res_depends != null && res_depends.Length > 0)
                            {
                                contDep = 0;

                                foreach (DataRow depend in res_depends)
                                {
                                    contDep++;

                                    aux = LocatorHelper.Instance.ExecuteScalar(
                                        string.Concat("select beneficiario_id from beneficiario where beneficiario_matriculaAssociativa='", socio["TIT_"], "-", toString(depend["DEP_"]).Replace(" ", "").Replace("'", ""), "'"),
                                        null, null, pm);

                                    dependente = new Beneficiario();

                                    if (aux == null || aux == DBNull.Value)
                                    {
                                        dependente.CPF = "99999999999";
                                        dependente.DataNascimento = toDateTime(depend["DTN_"]);
                                        dependente.MatriculaAssociativa = string.Concat(socio["TIT_"], "-", toString(depend["DEP_"]).Replace(" ", "").Replace("'", ""));
                                        //dependente.ImportID = toInt32(socio["ID_"]);
                                        dependente.Nome = toString(depend["DEP_"]).Trim();
                                        dependente.Sexo = "1";
                                        dependente.Legado = true;

                                        if (string.IsNullOrEmpty(dependente.Nome)) continue;

                                        try
                                        {
                                            pm.Save(dependente);
                                        }
                                        catch { continue; }
                                    }
                                    else
                                    {
                                        dependente.ID = aux;
                                        pm.Load(dependente);
                                    }

                                    #region ContratoBeneficiario - Dependente

                                    cbTit = null;

                                    aux = LocatorHelper.Instance.ExecuteScalar(
                                        string.Concat("select contratobeneficiario_id from contrato_beneficiario where contratobeneficiario_contratoId=", contrato.ID, " and contratobeneficiario_beneficiarioID=", dependente.ID),
                                        null, null, pm);

                                    if (aux == null || aux == DBNull.Value)
                                    {
                                        cbDep = new ContratoBeneficiario();

                                        cbDep.Altura = 1.7M;
                                        cbDep.Ativo = true;
                                        cbDep.ContratoID = contrato.ID;
                                        cbDep.Data = contrato.Admissao;
                                        cbDep.EstadoCivilID = 1; //solteiro
                                        cbDep.NumeroMatriculaSaude = titular.MatriculaAssociativa;
                                        cbDep.NumeroSequencial = contDep;
                                        cbDep.Peso = 70M;
                                        cbDep.Status = 0;
                                        cbDep.Tipo = 1;
                                        cbDep.Valor = 0M;
                                        cbDep.Vigencia = contrato.Vigencia;
                                        cbDep.ParentescoID = 15; //outros
                                        cbDep.BeneficiarioID = dependente.ID;
                                        //cbTit.CarenciaContratoTempo = 0;

                                        try
                                        {
                                            pm.Save(cbDep);
                                        }
                                        catch { continue; }
                                    }
                                    else
                                        contDep--;

                                    #endregion
                                }
                            }

                            #endregion

                            #region Cobrancas

                            res_cobrancas = dsMANUTS.Tables[0].Select(string.Concat("TIT_='", titular.MatriculaAssociativa, "'"));
                            if (res_cobrancas != null && res_cobrancas.Length > 0)
                            {
                                foreach (DataRow rcob in res_cobrancas)
                                {
                                    vencimento = toDateTime(rcob["DV_"]);

                                    aux = LocatorHelper.Instance.ExecuteScalar(
                                        string.Concat("select cobranca_id from cobranca where cobranca_propostaId=", contrato.ID, " and day(cobranca_datavencimento)=", vencimento.Day, " and month(cobranca_datavencimento)=", vencimento.Month, " and year(cobranca_datavencimento)=", vencimento.Year),
                                        null, null, pm);

                                    if (aux == null || aux == DBNull.Value)
                                    {
                                        cobranca = new Cobranca();
                                        cobranca.Cancelada = false;
                                        cobranca.DataCriacao = agora;
                                        cobranca.DataPgto = toDateTime(rcob["DP_"]);
                                        cobranca.DataVencimento = vencimento;
                                        cobranca.Pago = false;
                                        cobranca.Parcela = 0;
                                        cobranca.PropostaID = contrato.ID;
                                        cobranca.Tipo = 0;
                                        cobranca.Valor = toDecimal(rcob["VL_"]);
                                        cobranca.ValorPgto = toDecimal(rcob["VP_"]);
                                        cobranca.Pago = cobranca.ValorPgto > 0;

                                        if (contrato.Vencimento == agora)
                                        {
                                            contrato.Vencimento = cobranca.DataVencimento;
                                            pm.Save(contrato);
                                        }

                                        pm.Save(cobranca);
                                    }
                                }
                            }

                            #endregion
                        }
                        catch
                        {
                            continue;
                        }
                    }

                    #endregion

                    try
                    {
                        //NonQueryHelper.Instance.ExecuteNonQuery("update beneficiario set beneficiario_legado=1", pm);
                    }
                    catch
                    {
                    }
                    //pm.Commit();
                }
                catch
                {
                    //pm.Rollback();
                    pm.CloseSingleCommandInstance();
                    throw;
                }
                finally
                {
                    pm.Dispose();
                }
            }
        }

        #endregion

        #region Chubb e RSPP 

        void MapeiaRSPP()
        {
            DataTable rspp = null;
            string straux = null;
            object aux = null; int count = 0;

            using (PersistenceManager pm = new PersistenceManager())
            {
                pm.UseSingleCommandInstance();

                try
                {
                    rspp = LocatorHelper.Instance.ExecuteQuery("select id,orgao_ave,mat_func,nome,status,data from __rspp where beneficiarioID is null order by mat_func", "result").Tables[0];

                    foreach (DataRow origem in rspp.Rows)
                    {
                        if (Convert.ToString(origem["mat_func"]).StartsWith("0000"))
                            straux = Convert.ToString(origem["mat_func"]).Substring(3);
                        else
                            straux = Convert.ToString(origem["mat_func"]);

                        count = Convert.ToInt32(LocatorHelper.Instance.ExecuteScalar(
                            string.Concat("select count(*) from beneficiario where beneficiario_matriculaFuncional like '%", straux, "%'"), null, null, pm));

                        if (count == 1)
                        {
                            //achou
                            aux = LocatorHelper.Instance.ExecuteScalar(
                                string.Concat("select beneficiario_id from beneficiario where beneficiario_matriculaFuncional like '%", straux, "%'"), null, null, pm);

                            NonQueryHelper.Instance.ExecuteNonQuery(
                                string.Concat("update __rspp set beneficiarioID=", aux, " where id=", origem["id"]), pm);
                        }
                        else
                        {
                            //não achou
                            if (count > 1)
                            {
                                //tenta pelo nome e matricula
                                count = Convert.ToInt32(LocatorHelper.Instance.ExecuteScalar(
                                    string.Concat("select count(*) from beneficiario where beneficiario_matriculaFuncional like '%", straux, "%' and beneficiario_nome like '", Convert.ToString(origem["nome"]).Substring(0, 10), "%'"), null, null, pm));

                                if(count == 1)
                                {
                                    aux = LocatorHelper.Instance.ExecuteScalar(
                                        string.Concat("select beneficiario_id from beneficiario where beneficiario_matriculaFuncional like '%", straux, "%' and beneficiario_nome like '", Convert.ToString(origem["nome"]).Substring(0, 10), "%'"), null, null, pm);

                                    NonQueryHelper.Instance.ExecuteNonQuery(
                                        string.Concat("update __rspp set beneficiarioID=", aux, " where id=", origem["id"]), pm);
                                }
                                else
                                {
                                    //tenta pelo nome
                                    count = Convert.ToInt32(LocatorHelper.Instance.ExecuteScalar(
                                        string.Concat("select count(*) from beneficiario where beneficiario_nome = '", Convert.ToString(origem["nome"]), "'"), null, null, pm));

                                    if (count == 1)
                                    {
                                        aux = LocatorHelper.Instance.ExecuteScalar(
                                            string.Concat("select beneficiario_id from beneficiario where beneficiario_nome = '", Convert.ToString(origem["nome"]), "'"), null, null, pm);

                                        NonQueryHelper.Instance.ExecuteNonQuery(
                                            string.Concat("update __rspp set beneficiarioID=", aux, " where id=", origem["id"]), pm);
                                    }
                                }
                            }
                            else if (count == 0)
                            {
                                //tenta pelo nome
                                count = Convert.ToInt32(LocatorHelper.Instance.ExecuteScalar(
                                    string.Concat("select count(*) from beneficiario where beneficiario_nome = '", Convert.ToString(origem["nome"]), "'"), null, null, pm));

                                if (count == 1)
                                {
                                    aux = LocatorHelper.Instance.ExecuteScalar(
                                        string.Concat("select beneficiario_id from beneficiario where beneficiario_nome = '", Convert.ToString(origem["nome"]), "'"), null, null, pm);

                                    NonQueryHelper.Instance.ExecuteNonQuery(
                                        string.Concat("update __rspp set beneficiarioID=", aux, " where id=", origem["id"]), pm);
                                }
                            }
                        }
                    }
                }
                catch
                {
                    throw;
                }
                finally
                {
                    pm.CloseSingleCommandInstance();
                }
            }
            /*
             
update __rspp set beneficiarioid=36552 where id=94

select id,nome,beneficiarioid,orgao_ave,mat_func,FUNC_ANTIG,status from __rspp  where beneficiarioid is null order by nome

select * from beneficiario where beneficiario_matriculaFuncional like '%1634520308100%' --0000000000129
select * from beneficiario where beneficiario_nome like 'WALTER ALVES%'--  00000000129

select * from ___pessoas where mat_func like '%896123%'
select * from ___pessoas where nome like '%JUSTINO DE MATTOS RAMOS JUNIOR%'

select * from ___seguros where mat_ass like '%32672%'
select * from ___previdencia where mat_ass like '%406587%'
             
             */
        }

        void MapeiaChubb()
        {
            DataTable chubb = null;
            string straux = null;
            object aux = null; int count = 0;

            using (PersistenceManager pm = new PersistenceManager())
            {
                pm.UseSingleCommandInstance();

                try
                {
                    chubb = LocatorHelper.Instance.ExecuteQuery("select id,orgao_ave,mat_ass,cpf,prvg,vgmn,vgma,vgiea,vgipa,vgipd,prap,apma,apipa,apdmh,prfu,funeral,controle,nome from __chubb_envio2016 where beneficiarioID is null order by mat_ass", "result").Tables[0];

                    foreach (DataRow origem in chubb.Rows)
                    {
                        if (Convert.ToString(origem["mat_ass"]).StartsWith("0000"))
                            straux = Convert.ToString(origem["mat_ass"]).Substring(3);
                        else
                            straux = Convert.ToString(origem["mat_ass"]);

                        count = Convert.ToInt32(LocatorHelper.Instance.ExecuteScalar(
                            string.Concat("select count(*) from beneficiario where beneficiario_matriculaAssociativa='", straux, "'"), null, null, pm));

                        if (count == 1)
                        {
                            //achou
                            aux = LocatorHelper.Instance.ExecuteScalar(
                                string.Concat("select beneficiario_id from beneficiario where beneficiario_matriculaAssociativa like '%", straux, "%'"), null, null, pm);

                            NonQueryHelper.Instance.ExecuteNonQuery(
                                string.Concat("update __chubb_envio2016 set beneficiarioID=", aux, " where id=", origem["id"]), pm);
                        }
                        else
                        {
                            //não achou
                            if (count > 1)
                            {
                                //tenta pelo nome e matricula
                                count = Convert.ToInt32(LocatorHelper.Instance.ExecuteScalar(
                                    string.Concat("select count(*) from beneficiario where beneficiario_matriculaAssociativa like '%", straux, "%' and beneficiario_nome like '", Convert.ToString(origem["nome"]).Substring(0, 10), "%'"), null, null, pm));

                                if (count == 1)
                                {
                                    aux = LocatorHelper.Instance.ExecuteScalar(
                                        string.Concat("select beneficiario_id from beneficiario where beneficiario_matriculaAssociativa like '%", straux, "%' and beneficiario_nome like '", Convert.ToString(origem["nome"]).Substring(0, 10), "%'"), null, null, pm);

                                    NonQueryHelper.Instance.ExecuteNonQuery(
                                        string.Concat("update __chubb_envio2016 set beneficiarioID=", aux, " where id=", origem["id"]), pm);
                                }
                                else
                                {
                                    //tenta pelo nome
                                    count = Convert.ToInt32(LocatorHelper.Instance.ExecuteScalar(
                                        string.Concat("select count(*) from beneficiario where beneficiario_nome = '", Convert.ToString(origem["nome"]), "'"), null, null, pm));

                                    if (count == 1)
                                    {
                                        aux = LocatorHelper.Instance.ExecuteScalar(
                                            string.Concat("select beneficiario_id from beneficiario where beneficiario_nome = '", Convert.ToString(origem["nome"]), "'"), null, null, pm);

                                        NonQueryHelper.Instance.ExecuteNonQuery(
                                            string.Concat("update __chubb_envio2016 set beneficiarioID=", aux, " where id=", origem["id"]), pm);
                                    }
                                }
                            }
                            else if (count == 0)
                            {
                                //tenta pelo nome
                                count = Convert.ToInt32(LocatorHelper.Instance.ExecuteScalar(
                                    string.Concat("select count(*) from beneficiario where beneficiario_nome = '", Convert.ToString(origem["nome"]), "'"), null, null, pm));

                                if (count == 1)
                                {
                                    aux = LocatorHelper.Instance.ExecuteScalar(
                                        string.Concat("select beneficiario_id from beneficiario where beneficiario_nome = '", Convert.ToString(origem["nome"]), "'"), null, null, pm);

                                    NonQueryHelper.Instance.ExecuteNonQuery(
                                        string.Concat("update __chubb_envio2016 set beneficiarioID=", aux, " where id=", origem["id"]), pm);
                                }
                            }
                        }
                    }
                }
                catch
                {
                    throw;
                }
                finally
                {
                    pm.CloseSingleCommandInstance();
                }
            }
            /*
             
update __rspp set beneficiarioid=36552 where id=94

select id,nome,beneficiarioid,orgao_ave,mat_func,FUNC_ANTIG,status from __rspp  where beneficiarioid is null order by nome

select * from beneficiario where beneficiario_matriculaFuncional like '%1634520308100%' --0000000000129
select * from beneficiario where beneficiario_nome like 'WALTER ALVES%'--  00000000129

select * from ___pessoas where mat_func like '%896123%'
select * from ___pessoas where nome like '%JUSTINO DE MATTOS RAMOS JUNIOR%'

select * from ___seguros where mat_ass like '%32672%'
select * from ___previdencia where mat_ass like '%406587%'
             
             */
        }

        #endregion 


        private void button1_Click(Object sender, EventArgs e)
        {
            //this.MapeiaChubb();

            this.k_importaPessoasContratos();

            //this.gerarMemoriaCobrancas2011();
            //this.importaListagemAntiga();
            //this.importaAMIL_CNPJ();
            //this.importaCorretoresQUALICORP();

            //this.importaAMIL_CNPJ();

            /*
                        String strArquivoNome = null;
                        ArqTransacionalAmil arqTrans = new ArqTransacionalAmil(@"C:\");
                        arqTrans.GerarArquivoPorStatus(17,
                            ref strArquivoNome, ContratoBeneficiario.eStatus.Novo,
                            new Object[] { "306" }, null, new DateTime(2013, 2, 15));
                        // 180, 181 -> Amil RJ 49 –> UBES AMIL/MEDIAL, UBES DIX VIG. 01
                        // 305, 306 -> Amil RJ 49 –> Ubes Amil Medial, Ubes Dix Vig. 15

                        MessageBox.Show(strArquivoNome);
             */

            //baixaCobrancasZeradas();
            //baixaCobrancasDaFrancesinha();
            //baixaCobrancasManualmente();

            ////geracao de arquivo de exclusao
            //ArqTransacionalUnimed main = new ArqTransacionalUnimed(@"C:\");
            //String file = "";
            //main.GerarArquivoUNIMED_Exclusao_temp(ref file);

            #region mail tests
            //MailMessage msg = new MailMessage(
            //    new MailAddress("noreplay@pspadrao.com.br", "PS Padrão"),
            //    new MailAddress("denis@linkecerebro.com.br"));
            //msg.Subject = "Demonstrativo de Pagamentos 2012";
            //msg.IsBodyHtml = true;
            //msg.Body = "corpo..";

            //try
            //{
            //    SmtpClient client = new SmtpClient("localhost");
            //    client.Send(msg);
            //    msg.Dispose();
            //    client = null;
            //    //base.Alerta(null, this, "_ok", "E-mail enviado com sucesso.");
            //    MessageBox.Show("ok");
            //}
            //catch (Exception err) 
            //{
            //    MessageBox.Show(err.Message);  
            //}
            #endregion

            //this.localizaContratoEmArquivosDeCombranca();

            //baixaCobrancas();

            //this.restauraCobrancasDeletadasPorEngano();

            //de_x_para_nossonumeroerrado();

            // corrigeDuplicidade();

            //this.corrigeVencimento25122013();

            //this.gerarMemoriaCobrancas2013();
            //this.geraTabelaAuxiliarIR();


            //this.arrumaGrupoFamiliar();
            //this.checaLenghtDasLinhas();

            //gerarDadosAna();

            //gerarTabela_mailsaida();

            MessageBox.Show("ok");
        }


        #region Padrao/Qualicorp/Ubrasp

        private void cmdImportarCorretores_Click(Object sender, EventArgs e)
        {
            if (MessageBox.Show("Importar corretores?", "Corretores", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                lblStatus.Text = "importando corretores...";
                Application.DoEvents();
                ImportFacade.Instance.ImportarCorretores_Acerto();
                MessageBox.Show("corretores importados.");
                lblStatus.Text = "corretores importados";
            }
        }

        private void cmdBeneficiarios_Click(Object sender, EventArgs e)
        {
            if (MessageBox.Show("Importar beneficiários?", "Beneficiários", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                lblStatus.Text = "importando beneficiários...";
                Application.DoEvents();
                ImportFacade.Instance.ImportarBeneficiarios();
                MessageBox.Show("beneficiários importados.");
                lblStatus.Text = "beneficiários importados";
            }
        }

        private void cmdImportarEnderecos_Click(Object sender, EventArgs e)
        {
            if (MessageBox.Show("Importar endereços?", "Endereços", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                lblStatus.Text = "importando endereços...";
                Application.DoEvents();
                ImportFacade.Instance.ImportarEnderecosBeneficiarios();
                MessageBox.Show("endereços importados.");
                lblStatus.Text = "endereços importados";
            }
        }

        private void cmdImportarPropostas_Click(Object sender, EventArgs e)
        {
            if (MessageBox.Show("Importar propostas?", "Propostas", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {

                List<ErroSumario> errors = new List<ErroSumario>();
                lblStatus.Text = "importando propostas...";
                Application.DoEvents();
                ImportFacade.Instance.ImportarPropostas(ref errors);
                lblStatus.Text = "propostas importadas";

                String msg = "";

                foreach (ErroSumario erro in errors)
                {
                    msg += erro.MSG;// "Contrato ADM: " + erro.ContratoAdmNumero + " | Cód.: " + erro.Codigo + " | Proposta: " + erro.SubPlano;
                    msg += Environment.NewLine;
                }

                txtErros.Text = msg;
            }

            //List<ErroSumario> errors = new List<ErroSumario>();
            //lblStatus.Text = "acertando propostas...";
            //Application.DoEvents();
            //ImportFacade.Instance.ArrumaStatusDePropostas2(ref errors);
            //lblStatus.Text = "propostas acertadas";

            //String msg = "";

            //foreach (ErroSumario erro in errors)
            //{
            //    msg += erro.MSG;// "Contrato ADM: " + erro.ContratoAdmNumero + " | Cód.: " + erro.Codigo + " | Proposta: " + erro.SubPlano;
            //    msg += Environment.NewLine;
            //}

            //txtErros.Text = msg;

            //ImportFacade.Instance.DuplicaLayoutsCustomizados();
        }

        private void cmdPropBenef_Click(Object sender, EventArgs e)
        {
            if (MessageBox.Show("Importar beneficiários das propostas?", "Beneficiários e propostas", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                lblStatus.Text = "importando beneficiários das propostas...";
                Application.DoEvents();
                ImportFacade.Instance.ImportarPropostaBeneficiarios();
                MessageBox.Show("beneficiários das propostas importados.");
                lblStatus.Text = "beneficiários das propostas importados";
            }

            //ImportFacade.Instance.ArrumaCobrancaDeTaxasAssociativasEmPropostas();

            //for (int i = 1; i <= 170; i++)
            //{
            //    try
            //    {
            //        txtErros.Text = i.ToString() + Environment.NewLine;
            //        Application.DoEvents();
            //        ImportFacade.Instance.ImportarCobrancas_V2(i);
            //    }
            //    catch (Exception ex)
            //    {
            //        MessageBox.Show(i.ToString() + Environment.NewLine + ex.Message);
            //    }
            //}

            MessageBox.Show("TERMINOU!");
        }

        private void cmdImportarCobrancas_Click(Object sender, EventArgs e)
        {
            //if (MessageBox.Show("Importar cobranças?", "Cobranças", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            //{
            //    lblStatus.Text = "importando cobranças...";
            //    Application.DoEvents();

            //    for (int i = 1; i <= 250; i++)
            //    {
            //        String ret = ImportFacade.Instance.ImportarCobrancas_V2(i);
            //        txtErros.Text = ret;
            //        Application.DoEvents();
            //    }
            //    MessageBox.Show("Cobranças importadas.");
            //}

            //ImportFacade.Instance.SetaCobrancasPAGAS();
            //SetaComoComissaoPAGA();
            //ConfiguraQuaisContratosDevemSerInativadosEInativa();
            //this.levantaCobrancasNaoEnviadasMasQueDeveriamTerSido();
            //this.setaMarcaDagua();
            //this.levantamentoTabelaFaixaEtariaTRATADO();

            //new ImportacaoProposta().AtualizaCorretoresDePropostasImportadas();
            //levantamentoAMIL();
            //conferenciaFatura();
            //RelacaoAdriano();
        }

        ////////////////////////////////////////////////////////////////////////////////

        private void cmdImportarFiliaisParaProdutores_Click(Object sender, EventArgs e)
        {
            if (MessageBox.Show("Importar filiais para produtores (configurar)?", "Filiais x Produtores", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                lblStatus.Text = "importando (configurando) filiais e produtores...";
                Application.DoEvents();
                ImportFacade.Instance.ImportarFiliaisParaProdutores();
                MessageBox.Show("filiais x produtores importados.");
                lblStatus.Text = "filiais x produtores importados";
            }
        }

        private void cmdImportarGruposDeVendaParaProdutores_Click(Object sender, EventArgs e)
        {
            if (MessageBox.Show("Importar grupos de venda para produtores (configurar)?", "Grupos de venda x Produtores", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                lblStatus.Text = "importando (configurando) grupos de venda e produtores...";
                Application.DoEvents();
                ImportFacade.Instance.ImportarGruposDeVendaParaProdutores();
                MessageBox.Show("grupos de venda x produtores importados.");
                lblStatus.Text = "grupos de venda x produtores importados";
            }
        }

        private void cmdImportarEquipesParaProdutores_Click(Object sender, EventArgs e)
        {
            if (MessageBox.Show("Importar equipes para produtores (configurar)?", "Equipes de Produtores", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                lblStatus.Text = "importando (configurando) equipes de produtores...";
                Application.DoEvents();
                ImportFacade.Instance.ImportarConfiguracoesDeEquipes_Acerto();
                MessageBox.Show("equipes de produtores importadas.");
                lblStatus.Text = "equipes de produtores importadas";
            }
        }

        private void cmdImportarTabelasValor_Click(Object sender, EventArgs e)
        {
            if (MessageBox.Show("Importar tabelas de valor?", "Tabelas de valor", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                lblStatus.Text = "importando tabelas de valor...";
                Application.DoEvents();
                ImportFacade.Instance.ImportarTabelasDeValor();
                MessageBox.Show("tabelas de valor importadas.");
                lblStatus.Text = "tabelas de valor importadas";
            }
        }

        //--------------------------------------------------

        #region

        void RecalculaCobrancas()
        {
            #region
            /*
            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();

            DataTable cobrancas = LocatorHelper.Instance.ExecuteQuery("* FROM cobranca_pagas", "result", pm).Tables[0];
            Object operadoraId = null, contratoId = null;

            int i = cobrancas.Rows.Count;
            int j = 0;
            foreach (DataRow cobranca in cobrancas.Rows)
            {
                j++;
                //contrato = Contrato.CarregarParcial(cobranca.PropostaID, pm);
                operadoraId = LocatorHelper.Instance.ExecuteScalar("SELECT operadora_id FROM operadora WHERE operadora_nome='" + cobranca["OPERADORA"] + "'", null, null, pm);

                contratoId = LocatorHelper.Instance.ExecuteScalar("SELECT contrato_id FROM contrato WHERE contrato_numero='" + cobranca["CONTR_NUM"] + "' AND contrato_operadoraId=" + operadoraId, null, null, pm);

                j = NonQueryHelper.Instance.ExecuteNonQuery("UPDATE cobranca_pagas SET CONTR_ID=" + contratoId + " WHERE OPERADORA='" + cobranca["OPERADORA"] + "' AND CONTR_NUM='" + cobranca["CONTR_NUM"] + "'", pm);

                if (j < 1) { string temp = ""; }
            }


            pm.CloseSingleCommandInstance();
            */
            #endregion

            #region atualiza tabela cobranca com os dados na tabela cobranca_temp
            //PersistenceManager pm = new PersistenceManager();
            //pm.UseSingleCommandInstance();

            //IList<Cobranca> cobrancas = LocatorHelper.Instance.ExecuteQuery<Cobranca>("cobranca_id, cobranca_valor from cobranca_temp where atualizado=1 ", typeof(Cobranca), pm);

            //foreach (Cobranca cobranca in cobrancas)
            //{
            //    NonQueryHelper.Instance.ExecuteNonQuery("UPDATE cobranca SET cobranca_valor='" + cobranca.Valor.ToString("N2").Replace(".", "").Replace(",", ".") + "' WHERE cobranca_id=" + cobranca.ID, pm);
            //}

            //pm.CloseSingleCommandInstance();
            #endregion

            #region calcula valores
            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();

            //IList<Cobranca> cobrancas = LocatorHelper.Instance.ExecuteQuery<Cobranca>("c.cobranca_id,c.cobranca_propostaid,c.cobranca_datavencimento from cobranca c inner join cobranca_temp ct on c.cobranca_id=ct.cobranca_id WHERE ct.atualizado is null AND c.cobranca_dataVencimento BETWEEN '2011-05-25 00:00:00.000' AND '2011-06-25 23:59:59.990' ", typeof(Cobranca), pm);
            IList<Cobranca> cobrancas = LocatorHelper.Instance.ExecuteQuery<Cobranca>("cobranca_id,cobranca_propostaid,cobranca_datavencimento from cobranca WHERE cobranca_tipo=0 and cobranca_dataVencimento BETWEEN '2011-07-01 00:00:00.000' AND '2011-07-10 23:59:59.000' ", typeof(Cobranca), pm);
            Decimal valor = 0;

            int i = cobrancas.Count;
            int j = 0; List<CobrancaComposite> lista = null;
            foreach (Cobranca cobranca in cobrancas)
            {
                j++;
                //contrato = Contrato.CarregarParcial(cobranca.PropostaID, pm);
                valor = Contrato.CalculaValorDaProposta2(cobranca.PropostaID, cobranca.DataVencimento, pm, false, true, ref lista, false);

                //NonQueryHelper.Instance.ExecuteNonQuery("UPDATE cobranca_temp SET atualizado=1, cobranca_valor='" + valor.ToString("N2").Replace(".", "").Replace(",", ".") + "' WHERE cobranca_id=" + cobranca.ID, pm);
                NonQueryHelper.Instance.ExecuteNonQuery("UPDATE cobranca SET cobranca_valor='" + valor.ToString("N2").Replace(".", "").Replace(",", ".") + "' WHERE cobranca_id=" + cobranca.ID, pm);
                txtErros.Text = j.ToString();
                Application.DoEvents();
            }


            pm.CloseSingleCommandInstance();
            MessageBox.Show("cobrancas fim");
            #endregion
        }

        void ArrumarAdicionais()
        {
            DataSet ds = new DataSet();
            using (OleDbConnection conn = new OleDbConnection("Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + mdbPath + ";Persist Security Info=False;"))
            {
                conn.Open();
                OleDbDataAdapter adp = new OleDbDataAdapter("SELECT * FROM adicional", conn);
                adp.Fill(ds, "adicional");
                adp.Dispose();
                conn.Close();
            }

            Contrato contrato = null; ContratoADM contratoAdm = null;
            Adicional adicional = null; AdicionalBeneficiario ab = null;
            IList<ContratoBeneficiario> beneficiarios = null;

            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();

            foreach (DataRow row in ds.Tables[0].Rows)
            {
                //localiza o adicional no sistema novo
                contrato = Contrato.CarregarParcialPorCodCobranca(row["ID_SEG"], pm);
                if (contrato == null) { continue; }

                if (Convert.ToInt32(contrato.OperadoraID) != 16)
                {
                    adicional = Adicional.CarregarPorOperadoraID(contrato.OperadoraID, Convert.ToString(row["OPICIONAL"]), pm);
                }
                else
                {
                    //carrega o contrato adm para saber qual adicional deve ser procurado...
                    contratoAdm = new ContratoADM(contrato.ContratoADMID);
                    pm.Load(contratoAdm);
                    if (contratoAdm.Descricao.IndexOf("MEDIAL") > -1)
                        adicional = Adicional.CarregarPorOperadoraID(contrato.OperadoraID, "DENTAL MEDIAL", pm);
                    else
                        adicional = Adicional.CarregarPorOperadoraID(contrato.OperadoraID, "DENTAL AMIL", pm);

                }
                if (adicional == null) { continue; }

                //carrega os beneficiarios do contrato
                beneficiarios = ContratoBeneficiario.CarregarPorContratoID_Parcial(contrato.ID, true, false, pm);
                if (beneficiarios == null) { continue; }

                foreach (ContratoBeneficiario benef in beneficiarios)
                {
                    if (benef.Tipo != 0 && Convert.ToString(row["APLICA-SE"]) == "TODOS")
                    {
                        ab = AdicionalBeneficiario.CarregarParaBeneficiario(benef.ContratoID, benef.BeneficiarioID, adicional.ID, pm);
                        if (ab == null)
                        {
                            //insere o adicional para ele
                            ab = new AdicionalBeneficiario();
                            ab.AdicionalID = adicional.ID;
                            ab.BeneficiarioID = benef.BeneficiarioID;
                            ab.PropostaID = benef.ContratoID;
                            pm.Save(ab);
                        }
                    }
                    else if (benef.Tipo == 0)
                    {
                        ab = AdicionalBeneficiario.CarregarParaBeneficiario(benef.ContratoID, benef.BeneficiarioID, adicional.ID, pm);
                        if (ab == null)
                        {
                            //insere o adicional para ele
                            ab = new AdicionalBeneficiario();
                            ab.AdicionalID = adicional.ID;
                            ab.BeneficiarioID = benef.BeneficiarioID;
                            ab.PropostaID = benef.ContratoID;
                            pm.Save(ab);
                        }
                    }
                    else
                    {
                        ab = AdicionalBeneficiario.CarregarParaBeneficiario(benef.ContratoID, benef.BeneficiarioID, adicional.ID, pm);
                        if (ab != null) { int a = 0; }
                    }

                    //break;//////////////////////////
                }

                //break;/////////////////////
            }

            pm.CloseSingleCommandInstance();
        }

        void ArrumaBeneficiariosANTIGOSFantasmas()
        {
            DataSet dsBeneficiarios = new DataSet();
            DataSet dsBeneficiariosPropostas = new DataSet();
            using (OleDbConnection conn = new OleDbConnection("Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + mdbPath + ";Persist Security Info=False;"))
            {
                conn.Open();
                OleDbDataAdapter adp = new OleDbDataAdapter("SELECT * FROM BENEFICIARIOS", conn);
                adp.Fill(dsBeneficiarios, "beneficiarios");

                adp.SelectCommand.CommandText = "SELECT * FROM BENEFICIARIOS_PROPOSTA";
                adp.Fill(dsBeneficiariosPropostas, "beneficiarios_propostas");
                adp.Dispose();

                conn.Close();
            }

            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();
            DataTable dt = LocatorHelper.Instance.ExecuteQuery("select beneficiario_id,beneficiario_nome, beneficiario_cpf from beneficiario left join contrato_beneficiario on beneficiario_id=contratobeneficiario_beneficiarioId where contratobeneficiario_beneficiarioId is null and importId <> 0 order by beneficiario_id, beneficiario_nome ", "result", null).Tables[0];

            Object ret = null, operadoraId = null, contratoAdmId = null;
            DataRow[] rowsBen = null, rowsRel = null;
            ContratoBeneficiario cb = null; Contrato contrato = null;
            ContratoADMParentescoAgregado parentesco = null;
            foreach (DataRow row in dt.Rows)
            {
                //acha na tabela SEG o beneficiario que está sem proposta
                rowsBen = dsBeneficiarios.Tables[0].Select("NOME='" + row["beneficiario_nome"] + "' AND CPF='" + row["beneficiario_cpf"] + "'");
                if (rowsBen.Length == 0) { continue; }

                //acha na tabela SEG o relacionamento do beneficiario com a proposta
                rowsRel = dsBeneficiariosPropostas.Tables[0].Select("ID_BENEFICIARIO=" + rowsBen[0]["ID"]);
                if (rowsRel.Length == 0) { continue; }

                cb = new ContratoBeneficiario();
                cb.BeneficiarioID = row["beneficiario_id"];
                cb.Altura = toDecimal(rowsRel[0]["ALTURA"]);
                cb.Ativo = true;
                cb.CarenciaCodigo = null; //TODO
                cb.CarenciaContratoTempo = toInt32(rowsRel[0]["TEMPO_CONTRATO"]);
                cb.CarenciaMatriculaNumero = toString(rowsRel[0]["MATRICULA_ANT"]);
                cb.CarenciaOperadora = null; //TODO:
                cb.CarenciaOperadoraDescricao = toString(rowsRel[0]["COMPRA_CAR_OPERADORA"]);

                operadoraId = Operadora.CarregarIDPorCNPJ(toString(rowsRel[0]["CNPJ_OPERADORA"]), pm);
                cb.ContratoID = Contrato.CarregaContratoID(operadoraId, toString(rowsRel[0]["NUM_CONTRATO_FK"]), pm);

                if (cb.ContratoID == null) { continue; }

                contrato = Contrato.CarregarParcial(cb.ContratoID, pm);

                cb.Data = contrato.Admissao; //toDateTime(rowsRel[0]["DATA_ADM"]);
                cb.DataCasamento = DateTime.MinValue;
                cb.EstadoCivilID = EstadoCivil.CarregarID(toString(rowsRel[0]["EST_CIVIL"]), operadoraId, pm);
                if (cb.EstadoCivilID == null)
                {
                    EstadoCivil ec = new EstadoCivil();
                    ec.Codigo = toString(rowsRel[0]["EST_CIVIL"]);
                    ec.Descricao = toString(rowsRel[0]["EST_CIVIL"]);
                    ec.OperadoraID = operadoraId;
                    pm.Save(ec);
                    cb.EstadoCivilID = ec.ID;
                }
                cb.NumeroSequencial = toInt32(rowsRel[0]["SEQUENCIA"]);

                if (toString(rowsRel[0]["PARENTESCO"]).Trim().ToUpper() != "TITULAR")
                {
                    contratoAdmId = contrato.ContratoADMID;
                    parentesco = ContratoADMParentescoAgregado.Carregar(contratoAdmId, toString(rowsRel[0]["PARENTESCO"]).Trim().ToUpper(), pm);
                    if (parentesco != null)
                        cb.ParentescoID = parentesco.ID;
                    else
                    {
                        parentesco = new ContratoADMParentescoAgregado();
                        parentesco.ContratoAdmID = contratoAdmId;
                        parentesco.ParentescoDescricao = toString(rowsRel[0]["PARENTESCO"]).Trim().ToUpper();
                        parentesco.ParentescoCodigo = parentesco.ParentescoDescricao;
                        parentesco.ParentescoTipo = Convert.ToInt32(Parentesco.eTipo.Dependente);
                        pm.Save(parentesco);
                        cb.ParentescoID = parentesco.ID;
                    }
                }
                else
                    cb.ParentescoID = null;

                cb.Peso = toDecimal(rowsRel[0]["PESO"]);
                cb.Status = Convert.ToInt32(ContratoBeneficiario.eStatus.Incluido);

                if (toString(rowsRel[0]["TIT_DEP"]).ToUpper().Trim() == "T")
                    cb.Tipo = Convert.ToInt32(ContratoBeneficiario.TipoRelacao.Titular);
                else
                    cb.Tipo = Convert.ToInt32(ContratoBeneficiario.TipoRelacao.Dependente);

                cb.Valor = -1; //toDecimal(rowsRel[0]["VALOR_PRÊMIO"]) + toDecimal(row["VALORES_ADICIONAIS"]);
                cb.Vigencia = contrato.Vigencia; //toDateTime(rowsRel[0]["DATA_VIGENCIA"]);

                ret = LocatorHelper.Instance.ExecuteScalar("SELECT contratobeneficiario_id FROM contrato_beneficiario WHERE contratobeneficiario_beneficiarioid=" + cb.BeneficiarioID + " AND contratobeneficiario_contratoId=" + cb.ContratoID, null, null, pm);
                if (ret == null || ret == DBNull.Value)
                {
                    pm.Save(cb);
                }

                //break;////////////////////////

            }

            pm.CloseSingleCommandInstance();
        }

        void ChecaDuplicidade()
        {
            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();
            //DataTable dt = LocatorHelper.Instance.ExecuteQuery("select contrato_id, COUNT(contratobeneficiario_contratoId) From contrato inner join contrato_beneficiario on contrato_id=contratobeneficiario_contratoId and contratobeneficiario_tipo=0 where contrato_operadoraId in (16, 17,18,19) group by contrato_id having COUNT(contratobeneficiario_contratoId) > 1 ", "result", pm).Tables[0];
            //DataTable dt = LocatorHelper.Instance.ExecuteQuery("select beneficiario_nome, COUNT(beneficiario_nome), beneficiario_cpf from beneficiario left join contrato_beneficiario on beneficiario_id=contratobeneficiario_beneficiarioid group by beneficiario_nome, beneficiario_cpf having COUNT(beneficiario_nome) > 1 order by beneficiario_nome ", "result", pm).Tables[0];
            DataTable dt = LocatorHelper.Instance.ExecuteQuery("select beneficiario_nome, COUNT(beneficiario_nome), beneficiario_cpf from beneficiario group by beneficiario_nome, beneficiario_cpf having COUNT(beneficiario_nome) > 1 order by beneficiario_nome ", "result", pm).Tables[0];

            Object ret = null; String qry = "";
            DataTable dtin = null;
            foreach (DataRow row in dt.Rows)
            {
                dtin = LocatorHelper.Instance.ExecuteQuery("select beneficiario_id from beneficiario where beneficiario_cpf='" + row["beneficiario_cpf"] + "' AND beneficiario_nome='" + row["beneficiario_nome"] + "'", "result", pm).Tables[0];

                foreach (DataRow rowin in dtin.Rows)
                {
                    ret = LocatorHelper.Instance.ExecuteScalar("select contratobeneficiario_id from contrato_beneficiario WHERE contratobeneficiario_beneficiarioId=" + rowin["beneficiario_id"], null, null, pm);
                    if (ret == null || ret == DBNull.Value)
                    {
                        //delete pelo id do beneficiario
                        try
                        {
                            NonQueryHelper.Instance.ExecuteNonQuery("DELETE FROM beneficiario WHERE beneficiario_id=" + rowin["beneficiario_id"], pm);
                        }
                        catch (Exception ex)
                        {
                            String msg = ex.Message;
                        }
                    }
                }

                dtin.Dispose();
            }

            pm.CloseSingleCommandInstance();
        }

        void ChegaAcomodacoesDeContratos()
        {
            DataSet ds = new DataSet();
            using (OleDbConnection conn = new OleDbConnection("Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + mdbPath + ";Persist Security Info=False;"))
            {
                conn.Open();
                OleDbDataAdapter adp = new OleDbDataAdapter("SELECT * FROM PROPOSTAS", conn);
                adp.Fill(ds, "propostas");
                adp.Dispose();
            }

            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();

            DataTable dt = LocatorHelper.Instance.ExecuteQuery("SELECT contrato_id, contrato_planoid, contrato_numero FROM contrato where contrato_cancelado <> 1 AND contrato_inativo <> 1", "result").Tables[0];

            StringBuilder sb = new StringBuilder();
            StringBuilder sql = new StringBuilder();
            Contrato contrato = null; Plano plano = null;
            int i = 0;
            DataRow[] rows = null;
            foreach (DataRow row in dt.Rows)
            {
                i++;
                plano = new Plano(row[1]);
                pm.Load(plano);
                if (plano.QuartoComum && plano.QuartoParticular) { continue; }

                contrato = new Contrato(row[0]);
                pm.Load(contrato);

                if (contrato.TipoAcomodacao == 0 && plano.QuartoComum == false)
                {
                    sb.Append(row[0]); sb.Append(" - ");
                    sb.Append(contrato.Numero);
                    sb.Append(" - Contrato com quarto coletivo e plano não possui quarto coletivo");
                    sb.Append(" (COD.: "); sb.Append(plano.CodigoParticular);
                    sb.Append(" - SUB.: "); sb.Append(plano.SubPlanoParticular);

                    rows = ds.Tables[0].Select("NUM_CONTRATO='" + row["contrato_numero"] + "'");
                    if (rows != null && rows.Length == 1)
                    {
                        sb.Append(" (COD. SEG: "); sb.Append(rows[0]["PLANO"]);
                        sb.Append(" - SUB. SEG: "); sb.Append(rows[0]["SUB_PLANO"]);
                    }

                    sb.Append(")");

                    sb.Append(Environment.NewLine);
                }
                else if (contrato.TipoAcomodacao == 1 && plano.QuartoParticular == false)
                {
                    sb.Append(row[0]); sb.Append(" - ");
                    sb.Append(contrato.Numero);
                    sb.Append(" - Contrato com quarto particular e plano não possui quarto particular");
                    sb.Append(" (COD.: "); sb.Append(plano.Codigo);
                    sb.Append(" - SUB.: "); sb.Append(plano.SubPlano);

                    rows = ds.Tables[0].Select("NUM_CONTRATO='" + row["contrato_numero"] + "'");
                    if (rows != null && rows.Length == 1)
                    {
                        sb.Append(" (COD. SEG: "); sb.Append(rows[0]["PLANO"]);
                        sb.Append(" - SUB. SEG: "); sb.Append(rows[0]["SUB_PLANO"]);
                    }

                    sb.Append(")");
                    sb.Append(Environment.NewLine);
                    sql.Append("UPDATE contrato SET contrato_tipoAcomodacao=0 WHERE contrato_id=");
                    sql.Append(row["contrato_id"]); sql.Append("; ");
                }
            }

            txtErros.Text = sb.ToString();
            //NonQueryHelper.Instance.ExecuteNonQuery(sql.ToString(), pm);
            pm.CloseSingleCommandInstance();
        }

        void SetaComoComissaoPAGA()
        {
            PersistenceManager pm = new PersistenceManager();
            DataTable dt = LocatorHelper.Instance.ExecuteQuery("select * FROM ___cobrancasSEG ", "result", null).Tables[0];

            String qry = "";
            Object ret = null;

            pm.UseSingleCommandInstance();

            StringBuilder sb = new StringBuilder();
            foreach (DataRow row in dt.Rows)
            {
                qry = "SELECT contrato_Id FROM contrato WHERE contrato_codcobranca=" + row["ID_ASSOCIADO"];
                ret = LocatorHelper.Instance.ExecuteScalar(qry, null, null, pm);

                if (ret == null || ret == DBNull.Value) { continue; }

                qry = "update cobranca set cobranca_comissaoPaga=1 WHERE cobranca_parcela=" + row["NUM_PARCELA"] + " AND cobranca_propostaId=" + ret + "; ";
                sb.Append(qry);
                //ret = NonQueryHelper.Instance.ExecuteNonQuery(qry, null, null, pm);

                //if (Convert.ToInt32(ret) != 1) { continue; }
            }

            NonQueryHelper.Instance.ExecuteNonQuery(sb.ToString(), null, null, pm);
            pm.CloseSingleCommandInstance();
        }

        void ImportaDadosRG()
        {
            DataSet ds = new DataSet();
            using (OleDbConnection conn = new OleDbConnection("Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + mdbPath + ";Persist Security Info=False;"))
            {
                conn.Open();
                OleDbDataAdapter adp = new OleDbDataAdapter("SELECT * FROM dados", conn);
                adp.Fill(ds, "dados");
                adp.Dispose();
                conn.Close();
            }

            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();

            Object beneficiarioId = null;
            foreach (DataRow row in ds.Tables[0].Rows)
            {
                beneficiarioId = LocatorHelper.Instance.ExecuteScalar("SELECT beneficiario_id FROM beneficiario WHERE beneficiario_rg='" + row["rg"] + "'", null, null, pm);
                if (beneficiarioId == null || beneficiarioId == DBNull.Value) { continue; }

                NonQueryHelper.Instance.ExecuteNonQuery(
                    String.Concat("UPDATE beneficiario SET beneficiario_rgUF='", row["rgUF"],
                    "', beneficiario_rgOrgaoExp='", row["rgOrgaoExp"], "' WHERE beneficiario_id=", beneficiarioId), pm);
            }

            pm.CloseSingleCommandInstance();
        }

        void ArrumaCobrancasDuplicadas()
        {
            StringBuilder sb = new StringBuilder();
            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();

            String qry = "select operadora_nome, contrato_numero, cobranca_propostaid, cobranca_parcela from  cobranca inner join contrato on contrato_id=cobranca_propostaId inner join operadora on contrato_operadoraid=operadora_id group by operadora_nome,contrato_numero,cobranca_propostaid, cobranca_parcela having COUNT(cobranca_propostaId) > 1";
            DataTable dt = LocatorHelper.Instance.ExecuteQuery(qry, "resultset", pm).Tables[0];
            DataTable dtSub = null;

            foreach (DataRow rowout in dt.Rows)
            {
                dtSub = LocatorHelper.Instance.ExecuteQuery("select * from cobranca where cobranca_propostaId=" + rowout["cobranca_propostaId"] + " and cobranca_parcela=" + rowout["cobranca_parcela"], "resultset", pm).Tables[0];

                foreach (DataRow row in dtSub.Rows)
                {
                    if (Convert.ToInt32(row["cobranca_tipo"]) == 0) { continue; }

                    if (Convert.ToInt32(row["cobranca_tipo"]) == 1 && Convert.ToInt32(row["cobranca_pago"]) == 0)
                    {
                        NonQueryHelper.Instance.ExecuteNonQuery(
                            String.Concat("DELETE FROM cobranca WHERE cobranca_tipo=1 AND cobranca_pago=0 AND cobranca_parcela=",
                            row["cobranca_parcela"], " AND cobranca_propostaid=", row["cobranca_propostaId"]), pm);
                        sb.Append(row["cobranca_propostaId"]);
                        sb.Append(Environment.NewLine);
                        break;
                    }
                }
            }

            pm.CloseSingleCommandInstance();
        }

        void ArrumaCobrancasDuplas()
        {
            System.Globalization.CultureInfo ci = new System.Globalization.CultureInfo("pt-Br");

            StringBuilder sb = new StringBuilder();
            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();

            String qry = "SELECT * FROM cobranca WHERE cobranca_tipo=2 AND cobranca_pago=1 AND cobranca_dataVencimento BETWEEN '2011-05-01' AND '2011-07-01'";
            DataTable dt = LocatorHelper.Instance.ExecuteQuery(qry, "resultset", pm).Tables[0];
            DataTable dtSub = null;

            Int32 parcela, contratoId, cobrancaDuplaId;
            Decimal novoValor, valorCobrancaNormal;

            Cobranca cobranca = null;

            foreach (DataRow rowout in dt.Rows)
            {
                parcela = Convert.ToInt32(rowout["cobranca_parcela"]);
                contratoId = Convert.ToInt32(rowout["cobranca_propostaId"]);
                cobrancaDuplaId = Convert.ToInt32(rowout["cobranca_id"]);

                dtSub = LocatorHelper.Instance.ExecuteQuery(String.Concat("SELECT * FROM cobranca WHERE cobranca_tipo=0 AND cobranca_parcela=", (parcela - 1), " AND cobranca_propostaId=", contratoId), "resultset", pm).Tables[0];
                if (dtSub.Rows.Count > 0)
                {
                    valorCobrancaNormal = Convert.ToDecimal(dtSub.Rows[0]["cobranca_valor"], ci);

                    //baixa a cobranca normal, se necessario
                    if (Convert.ToInt32(dtSub.Rows[0]["cobranca_pago"]) == 0)
                    {
                        cobranca = new Cobranca(dtSub.Rows[0]["cobranca_id"]);
                        pm.Load(cobranca);
                        cobranca.Pago = true;
                        cobranca.DataPgto = Convert.ToDateTime(rowout["cobranca_dataPagto"], ci);
                        cobranca.ValorPgto = cobranca.Valor;
                        pm.Save();
                    }

                    //atualiza o valor da cobrança dupla
                    novoValor = Convert.ToDecimal(rowout["cobranca_valorPagto"], ci) - valorCobrancaNormal;
                    NonQueryHelper.Instance.ExecuteNonQuery("UPDATE cobranca SET cobranca_valorPagto='" + novoValor.ToString("N2").Replace(".", "").Replace(",", ".") + "' WHERE cobranca_id=" + rowout["cobranca_id"], pm);
                }
                dt.Dispose();
            }

            pm.CloseSingleCommandInstance();
            pm.Dispose();
        }

        void ArrumaCobrancasSaltadas()
        {
            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();

            DataTable dtContrato = LocatorHelper.Instance.ExecuteQuery("SELECT contrato_id, contrato_numero from contrato where contrato_inativo <> 1 and contrato_cancelado <> 1", "result", pm).Tables[0];
            DataTable dtCobrancas = null;
            int i = 0; DateTime data = DateTime.MinValue;

            System.Collections.Hashtable problemas = new System.Collections.Hashtable();
            foreach (DataRow row in dtContrato.Rows)
            {
                dtCobrancas = LocatorHelper.Instance.ExecuteQuery("SELECT * from cobranca where cobranca_tipo=0 AND cobranca_propostaId=" + row["contrato_id"] + " and cobranca_parcela > 1 ORDER BY cobranca_parcela", "result", pm).Tables[0];

                if (dtCobrancas.Rows.Count == 0) { continue; }
                i = i = Convert.ToDateTime(dtCobrancas.Rows[0]["cobranca_datavencimento"]).Month;

                foreach (DataRow cobranca in dtCobrancas.Rows)
                {
                    if (i != Convert.ToDateTime(cobranca["cobranca_datavencimento"]).Month)
                    {
                        problemas.Add(Convert.ToString(row["contrato_id"]),
                            Convert.ToString(row["contrato_numero"]));

                        dtCobrancas.Dispose();
                        break;
                    }

                    i++;
                    if (i == 13) { i = 1; }
                }

                dtCobrancas.Dispose();
            }

            pm.CloseSingleCommandInstance();
            pm.Dispose();

            foreach (System.Collections.DictionaryEntry entry in problemas)
            {
                txtErros.Text += String.Concat(entry.Key, " - numero: ", entry.Value, Environment.NewLine);
            }
        }

        /// <summary>
        /// Arruma os períodos de vencimento das tabelas de valor
        /// </summary>
        void ArrumaTabelasDeValoresComPeriodoDeVencimento()
        {
            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();

            DataTable dt = LocatorHelper.Instance.ExecuteQuery("SELECT tabelavalor_id, tabelavalor_contratoId, tabelavalor_inicio, tabelavalor_fim FROM tabela_valor where tabelavalor_vencimentoInicio IS NULL", "resultset", pm).Tables[0];

            DateTime admDe, admAte, vigencia, vencimentoDe, vencimentoAte = DateTime.MinValue;
            int diaSemJuros = 0;
            Object valorLimite = null;
            CalendarioVencimento rcv = null;

            foreach (DataRow row in dt.Rows)
            {
                admDe = toDateTime(row["tabelavalor_inicio"]);
                admAte = toDateTime(row["tabelavalor_fim"]);

                CalendarioAdmissaoVigencia.CalculaDatasDeVigenciaEVencimento(row["tabelavalor_contratoId"],
                    admDe, out vigencia, out vencimentoDe, out diaSemJuros, out valorLimite, out rcv, pm);

                CalendarioAdmissaoVigencia.CalculaDatasDeVigenciaEVencimento(row["tabelavalor_contratoId"],
                    admAte, out vigencia, out vencimentoAte, out diaSemJuros, out valorLimite, out rcv, pm);

                if (vencimentoDe != DateTime.MinValue && vencimentoAte != DateTime.MinValue)
                {
                    NonQueryHelper.Instance.ExecuteNonQuery(
                        String.Concat("UPDATE tabela_valor SET tabelavalor_vencimentoInicio='",
                        vencimentoDe.ToString("yyyy-MM-dd"), "', tabelavalor_vencimentoFim='",
                        vencimentoAte.ToString("yyyy-MM-dd 23:59:59:995"), "' WHERE tabelavalor_id=", row["tabelavalor_id"]), pm);
                }
                else
                {
                    NonQueryHelper.Instance.ExecuteNonQuery(
                        String.Concat("UPDATE tabela_valor SET tabelavalor_vencimentoInicio='",
                        admDe.ToString("yyyy-MM-dd"), "', tabelavalor_vencimentoFim='",
                        admAte.ToString("yyyy-MM-dd 23:59:59:995"), "' WHERE tabelavalor_id=", row["tabelavalor_id"]), pm);
                }
            }

            pm.CloseSingleCommandInstance();
        }

        void ConfiguraQuaisContratosDevemSerInativadosEInativa()
        {
            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();

            IList<Operadora> operadoras = Operadora.CarregarTodas();

            //DataTable dt = LocatorHelper.Instance.ExecuteQuery("SELECT * from ____inativar WHERE deveInativar IS NULL", "resultset", pm).Tables[0];
            DataTable dt = LocatorHelper.Instance.ExecuteQuery("SELECT * from ____inativar WHERE deveInativar=1", "resultset", pm).Tables[0];

            String operadoraId;
            Object contratoId = null; Contrato contrato = null;
            int i = 1;
            foreach (DataRow row in dt.Rows)
            {
                //operadoraId = pegaIdDaOperadora(operadoras, Convert.ToString(row["OPERADORA"]));

                //if (operadoraId == null) { continue; }

                //contratoId = Contrato.CarregaContratoID(operadoraId, Convert.ToString(row["NUM_CONTR"]), pm);

                //if (contratoId == null) { continue; }

                //contrato = new Contrato(contratoId);
                //pm.Load(contrato);

                //if (contrato.Inativo || contrato.Cancelado)
                //{
                //    NonQueryHelper.Instance.ExecuteNonQuery(String.Concat("update ____inativar set deveInativar=0, contratoId=", 
                //        contratoId, " WHERE id=", row["id"]), pm);
                //}
                //else
                //{
                //    NonQueryHelper.Instance.ExecuteNonQuery(String.Concat("update ____inativar set deveInativar=1, contratoId=",
                //        contratoId, " WHERE id=", row["id"],
                //        "; update contrato set contrato_datacancelamento='1900-07-26',contrato_inativo=1 where contrato_id=", contratoId), pm);
                //}

                NonQueryHelper.Instance.ExecuteNonQuery("UPDATE contrato set contrato_inativo=0 WHERE contrato_id=" + row["contratoid"], pm);

                i++;
            }

            pm.CloseSingleCommandInstance();
            pm.Dispose();
        }

        String pegaIdDaOperadora(IList<Operadora> operadoras, String operadoraNome)
        {
            foreach (Operadora operadora in operadoras)
            {
                if (operadora.Nome.Split('-')[0].Trim() == operadoraNome.Split('-')[0].Trim())
                    return Convert.ToString(operadora.ID);
            }

            return null;
        }

        void fazRelatorioDaRenata()
        {
            //fazRelatorioDaRenata(new DateTime(2011, 4, 10));
            //fazRelatorioDaRenata(new DateTime(2011, 4, 25));

            //fazRelatorioDaRenata(new DateTime(2011, 5, 10));
            //fazRelatorioDaRenata(new DateTime(2011, 5, 25));

            //fazRelatorioDaRenata(new DateTime(2011, 6, 10));
            //fazRelatorioDaRenata(new DateTime(2011, 6, 25));
            fazRelatorioDaRenataExplodido();
        }
        void fazRelatorioDaRenata(DateTime vencimento)
        {
            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();

            String qry = String.Concat(
                //                "select operadora_nome, SUM(cobranca_valorPagto) as ValorPago, SUM(cobranca_valor) as ValorCobrado ",
                //"select operadora_nome, cobranca.*, contrato_contratoAdmId, contrato_planoId, contrato_tipoAcomodacao, contrato_admissao, contrato_vigencia ",
                "select cobranca.*, contrato_codcobranca, contrato_contratoAdmId, contrato_planoId, contrato_tipoAcomodacao, contrato_admissao, contrato_vigencia ",
                "   from cobranca ",
                "       inner join contrato on contrato_id=cobranca_propostaId ",
                //                "       inner join operadora on operadora_id = contrato_operadoraId ",
                "   where cobranca_tipo=0 and cobranca_valor > 0 and cobranca_datavencimento between '2011-04-01' and '2011-06-30 23:59:59.998'");
            //"       cobranca_pago=1 and cobranca_valor > 0 and ",
            //"       YEAR(cobranca_dataPagto) = ", vencimento.Year, " and ",
            //"       MONTH(cobranca_dataPagto) = ", vencimento.Month, " and ",
            //"       operadora_id in (4,5,6,16,12,14,13,17,18,19) "); //and cobranca_id=1037470
            //                "   group by operadora_nome ");

            DataTable dt = LocatorHelper.Instance.ExecuteQuery(qry, "resultset", pm).Tables[0];

            Decimal totalCobrado = 0, totalPago = 0, totalNet = 0;

            List<String> operadoras = new List<String>();

            foreach (DataRow row in dt.Rows)
            {
                if (!operadoras.Contains(Convert.ToString(row["operadora_nome"])))
                {
                    operadoras.Add(Convert.ToString(row["operadora_nome"]));
                }
            }

            Contrato contrato = null;
            DataTable resultado = new DataTable();
            resultado.Columns.Add("Operadora");
            resultado.Columns.Add("ValorNET");
            resultado.Columns.Add("ValorCobrado");
            resultado.Columns.Add("ValorPago");

            DateTime vigencia, _vencto, admissao;
            Int32 diaDataSemJuros; Object valorDataLimite;
            CalendarioVencimento rcv = null;

            foreach (String operadora in operadoras)
            {
                totalCobrado = 0; totalPago = 0; totalNet = 0;

                foreach (DataRow row in dt.Rows)
                {
                    if (!Convert.ToString(row["operadora_nome"]).Equals(operadora)) { continue; }

                    if (row["contrato_vigencia"] == DBNull.Value) { continue; }

                    contrato = new Contrato(row["cobranca_propostaId"]);
                    contrato.ContratoADMID = row["contrato_contratoAdmId"];
                    contrato.PlanoID = row["contrato_planoId"];
                    contrato.TipoAcomodacao = Convert.ToInt32(row["contrato_tipoAcomodacao"]);

                    if (Convert.ToDateTime(row["cobranca_dataVencimento"]).Day != vencimento.Day && Convert.ToInt32(row["cobranca_tipo"]) == 0)
                    {
                        admissao = Convert.ToDateTime(row["contrato_admissao"]);
                        vigencia = Convert.ToDateTime(row["contrato_vigencia"]);

                        CalendarioAdmissaoVigencia.CalculaDatasDeVigenciaEVencimento(contrato.ContratoADMID,
                            admissao, out vigencia, out _vencto, out diaDataSemJuros, out valorDataLimite, out rcv, pm);

                        if (_vencto.Day != vencimento.Day) { continue; }
                    }

                    totalCobrado += Convert.ToDecimal(row["cobranca_valor"]);
                    totalPago += Convert.ToDecimal(row["cobranca_valorPagto"]);

                    if (Convert.ToInt32(row["cobranca_tipo"]) != 1)
                    {
                        try
                        {
                            totalNet += TabelaValor.CalculaValorNET(contrato, pm, Convert.ToDateTime(row["contrato_admissao"]), Convert.ToDateTime(row["cobranca_datavencimento"]), Convert.ToDateTime(row["cobranca_datavencimento"]));
                        }
                        catch
                        {
                            Decimal cobrancaValor = Convert.ToDecimal(row["cobranca_valor"]);
                            IList<TabelaValor> tabela = TabelaValor.CarregarTabelaVigente(contrato.ContratoADMID, contrato.Admissao, Convert.ToDateTime(row["cobranca_datavencimento"]), pm); //TabelaValor.CarregarTabelaAtual(contrato.ContratoADMID, pm);
                            if (tabela != null && tabela.Count > 0)
                            {
                                Taxa taxa = Taxa.CarregarPorTabela(tabela[0].ID, pm);
                                tabela = null;

                                if (taxa != null)
                                {
                                    //row["OVER_PERC"] = taxa.Over.ToString("N2");
                                    //row["FIXO"] = taxa.Fixo.ToString("N2");
                                    cobrancaValor -= taxa.Fixo;

                                    if (taxa.Embutido)
                                    {
                                        cobrancaValor -= taxa.ValorEmbutido;
                                        //row["TAXA_BANCO"] = taxa.ValorEmbutido.ToString("N2");
                                    }
                                    taxa = null;
                                }
                            }

                            //Taxa associativa
                            pm.Load(contrato);
                            if (contrato.CobrarTaxaAssociativa)
                            {
                                Decimal valorTaxaAssociativa = Contrato.CalculaValorDaTaxaAssociativa(contrato, -1, null, pm);
                                cobrancaValor -= valorTaxaAssociativa;
                            }

                            totalNet += cobrancaValor;// Convert.ToDecimal(row["OVER_VALOR"]) + Convert.ToDecimal(row["TAXA_ASSOC"]) + cobrancaValor;
                        }
                    }
                }

                DataRow rowResultado = resultado.NewRow();
                rowResultado["Operadora"] = operadora;
                rowResultado["ValorNET"] = totalNet;
                rowResultado["ValorCobrado"] = totalCobrado;
                rowResultado["ValorPago"] = totalPago;
                resultado.Rows.Add(rowResultado);
            }

            StringBuilder sb = new StringBuilder();
            foreach (DataRow row in resultado.Rows)
            {
                if (sb.Length > 0) { sb.Append("; "); }
                sb.Append("INSERT INTO __temp_relatorioRenata VALUES ('");
                sb.Append(row["Operadora"]); sb.Append("', '");
                sb.Append(Convert.ToString(row["ValorNET"]).Replace(".", "").Replace(",", ".")); sb.Append("', '");
                sb.Append(Convert.ToString(row["ValorCobrado"]).Replace(".", "").Replace(",", ".")); sb.Append("', '");
                sb.Append(Convert.ToString(row["ValorPago"]).Replace(".", "").Replace(",", ".")); sb.Append("', '");
                sb.Append(vencimento.ToString("yyyy-MM-dd")); sb.Append("')");
            }

            //NonQueryHelper.Instance.ExecuteNonQuery(sb.ToString(), pm);

            pm.CloseSingleCommandInstance();
            pm.Dispose();
        }

        void fazRelatorioDaRenataExplodido()
        {
            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();

            String qry = String.Concat(
                "select cobranca.*, contrato_codcobranca, contrato_contratoAdmId, contrato_planoId, contrato_tipoAcomodacao, contrato_admissao, contrato_vigencia ",
                "   from cobranca ",
                "       inner join contrato on contrato_id=cobranca_propostaId ",
                "   where cobranca_valor > 0 and cobranca_datavencimento between '2011-04-01' and '2011-06-30 23:59:59.998'");

            DataTable dt = LocatorHelper.Instance.ExecuteQuery(qry, "resultset", pm).Tables[0];

            Decimal totalNet = 0;

            Contrato contrato = null;
            DataTable resultado = new DataTable();
            resultado.Columns.Add("IDCobranca");
            resultado.Columns.Add("ValorNET");
            resultado.Columns.Add("Parcela");

            //DateTime vigencia, _vencto, admissao;
            //Int32 diaDataSemJuros; Object valorDataLimite;
            //CalendarioVencimento rcv = null;

            totalNet = 0;
            StringBuilder sb = new StringBuilder();

            DateTime admissao = DateTime.MinValue, vencimento = DateTime.MinValue, referencia = DateTime.MinValue;
            String[] arr = null;

            foreach (DataRow row in dt.Rows)
            {
                if (row["contrato_vigencia"] == DBNull.Value) { continue; }

                contrato = new Contrato(row["cobranca_propostaId"]);
                contrato.ContratoADMID = row["contrato_contratoAdmId"];
                contrato.PlanoID = row["contrato_planoId"];
                contrato.TipoAcomodacao = Convert.ToInt32(row["contrato_tipoAcomodacao"]);

                if (Convert.ToInt32(row["cobranca_tipo"]) != 1)
                {
                    try
                    {
                        arr = Convert.ToString(row["contrato_admissao"]).Split('/');
                        admissao = new DateTime(Int32.Parse(arr[2].Split(' ')[0]), Int32.Parse(arr[1]), Int32.Parse(arr[0]));
                        arr = Convert.ToString(row["cobranca_datavencimento"]).Split('/');
                        vencimento = new DateTime(Int32.Parse(arr[2].Split(' ')[0]), Int32.Parse(arr[1]), Int32.Parse(arr[0]));
                        arr = Convert.ToString(row["cobranca_dataCriacao"]).Split('/');
                        referencia = new DateTime(Int32.Parse(arr[2].Split(' ')[0]), Int32.Parse(arr[1]), Int32.Parse(arr[0]));

                        totalNet = TabelaValor.CalculaValorNET(contrato, pm, admissao, vencimento, referencia);
                    }
                    catch
                    {
                        totalNet = Convert.ToDecimal(row["cobranca_valor"]);
                    }
                }
                else
                {
                    totalNet = 0;
                }

                DataRow rowResultado = resultado.NewRow();
                rowResultado["IDCobranca"] = row["contrato_codcobranca"];
                rowResultado["ValorNET"] = totalNet;
                rowResultado["Parcela"] = row["cobranca_parcela"];
                //resultado.Rows.Add(rowResultado);

                sb = new StringBuilder();
                sb.Append("INSERT INTO __temp_relatorioRenata_explodido VALUES (");
                sb.Append(row["cobranca_id"]); sb.Append(",");
                sb.Append(rowResultado["Parcela"]); sb.Append(", '");
                sb.Append(Convert.ToString(rowResultado["ValorNET"]).Replace(".", "").Replace(",", ".")); sb.Append("', '");
                sb.Append(rowResultado["IDCobranca"]); sb.Append("')");
                NonQueryHelper.Instance.ExecuteNonQuery(sb.ToString(), pm);
                sb.Remove(0, sb.Length);
                sb = null;
            }

            pm.CloseSingleCommandInstance();
            pm.Dispose();
        }

        void levantaCobrancasNaoEnviadasMasQueDeveriamTerSido()
        {
            String qry = "select cobranca_id, cobranca_propostaId, cobranca_parcela, cobranca_valor, cobranca_valorPagto, contrato_codcobranca	from cobranca		inner join contrato on contrato_id=cobranca_propostaId		inner join operadora on operadora_id=contrato_operadoraId	where 	cobranca_parcela > 1 and operadora_id=10 and 		cobranca_id not in (select arqitem_cobrancaId from arquivoCobrancaUnibanco_cobanca) and		cobranca_arquivoUltimoEnvioId is null and 		cobranca_dataVencimento between '2011-06-01' and '2011-07-31 23:59:59.998' and cobranca_tipo=0 and 		contrato_inativo <> 1 and 		contrato_cancelado <> 1 and		contrato_rascunho <> 1 order by contrato_id, cobranca_parcela";

            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();
            DataTable dt = LocatorHelper.Instance.ExecuteQuery(qry, "result", pm).Tables[0];

            Cobranca cobranca = null;
            foreach (DataRow row in dt.Rows)
            {
                cobranca = Cobranca.CarregarPor(row["cobranca_propostaId"],
                    (Convert.ToInt32(row["cobranca_parcela"]) - 1), 0, pm);

                if (!cobranca.Pago)
                {
                    continue;
                }

                NonQueryHelper.Instance.ExecuteNonQuery("insert into ____cobrancaSep values (" + Convert.ToString(row["cobranca_id"]) + ")", pm);
            }

            pm.CloseSingleCommandInstance();
            pm = null;
        }

        void setaMarcaDagua()
        {
            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();

            DataTable dt = LocatorHelper.Instance.ExecuteQuery("SELECT NUM_PROPOSTA,ID_PROPOSTA,MARCA_OTICA FROM ___contratoMarca", "resultset", pm).Tables[0];

            int i = -1;
            foreach (DataRow row in dt.Rows)
            {
                i = NonQueryHelper.Instance.ExecuteNonQuery(String.Concat("UPDATE contrato SET contrato_numeroMatricula='", row["MARCA_OTICA"], "' WHERE contrato_id=", row["ID_PROPOSTA"], " AND contrato_numero='", row["NUM_PROPOSTA"], "'"), pm);

                if (i != 1)
                {
                    i = 1;
                }
            }

            pm.CloseSingleCommandInstance();
            dt.Dispose();
            pm.Dispose();
        }

        void levantamentoTabelaFaixaEtaria()
        {
            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();

            String qry = String.Concat(
                "select operadora_nome,estipulante_descricao,contrato_id,contrato_numero,beneficiario_nome,beneficiario_sexo,contrato_donoId,usuario_filialId, contratobeneficiario_tipo,beneficiario_dataNascimento,contrato_vigencia,contrato_admissao,contrato_contratoAdmId,contrato_planoId, filial_nome ",
                "   from contrato ",
                "       inner join contrato_beneficiario on contrato_id=contratobeneficiario_contratoId and contratobeneficiario_ativo=1 ",
                "       inner join beneficiario on beneficiario_id=contratobeneficiario_beneficiarioId and contratobeneficiario_ativo=1 ",
                "       inner join operadora on operadora_id=contrato_operadoraId ",
                "       inner join usuario on usuario_id=contrato_donoId ",
                "       inner join estipulante on estipulante_id=contrato_estipulanteid ",
                "       left join filial on filial_id=usuario_filialId ",
                "   where contrato_vigencia <= '2011-09-15 23:59:59.997' and contrato_cancelado <> 1 and contrato_cancelado <> 1 and contrato_rascunho <> 1 and contrato_numero not in ('1','2') ",
                "   order by contrato_numero,contratobeneficiario_tipo");

            DataTable dt = LocatorHelper.Instance.ExecuteQuery(qry, "result", pm).Tables[0];

            DateTime nascimento, vigencia, admissao;
            Int32 idade;
            System.Globalization.CultureInfo ci = new System.Globalization.CultureInfo("pt-Br");
            IList<TabelaValor> tvs = null; IList<TabelaValorItem> tabelaItens = null;
            UsuarioFilial uf = null; Filial filial = null;

            FaixaEtariaVO vo = null;
            foreach (DataRow row in dt.Rows)
            {
                if (row["beneficiario_dataNascimento"] == DBNull.Value) { continue; }

                vo = new FaixaEtariaVO();

                vo.Operadora = Convert.ToString(row["operadora_nome"]);
                vo.Estipulante = Convert.ToString(row["estipulante_descricao"]);

                admissao = Convert.ToDateTime(row["contrato_admissao"], ci);
                vigencia = Convert.ToDateTime(row["contrato_vigencia"], ci);
                nascimento = Convert.ToDateTime(row["beneficiario_dataNascimento"], ci);

                idade = Beneficiario.CalculaIdade(nascimento, DateTime.Now);
                vo.BeneficiarioIdade = idade.ToString();

                tvs = TabelaValor.CarregarTabelaVigente(row["contrato_contratoAdmId"], vigencia, null, pm);

                if (tvs == null)
                {
                    tvs = TabelaValor.CarregarTabelaAtual(row["contrato_contratoAdmId"], pm);
                }

                if (tvs == null) { continue; }

                tabelaItens = TabelaValorItem.CarregarPorTabela(tvs[0].ID, row["contrato_planoId"], pm);

                foreach (TabelaValorItem _item in tabelaItens)
                {
                    if (idade >= _item.IdadeInicio && _item.IdadeFim == 0)
                    {
                        vo.FaixaEtaria = String.Concat("acima de ", (_item.IdadeInicio - 1));
                        break;
                    }
                    else if (idade >= _item.IdadeInicio && idade <= _item.IdadeFim)
                    {
                        vo.FaixaEtaria = String.Concat("de ", _item.IdadeInicio, " a ", _item.IdadeFim);
                        break;
                    }
                }

                vo.BeneficiarioNome = Convert.ToString(row["beneficiario_nome"]);
                vo.SetaSexo(row["beneficiario_sexo"]);
                vo.NumeroProposta = Convert.ToString(row["contrato_numero"]);
                vo.IDProposta = Convert.ToInt32(row["contrato_id"]);

                if (row["filial_nome"] != DBNull.Value)
                    vo.Filial = Convert.ToString(row["filial_nome"]);
                else
                {
                    uf = UsuarioFilial.CarregarVigente(row["contrato_donoId"], admissao, pm);
                    if (uf == null)
                    {
                        uf = UsuarioFilial.CarregarVigente(row["contrato_donoId"], DateTime.Now, pm);
                    }
                    if (uf != null)
                    {
                        filial = new Filial();
                        filial.ID = uf.FilialID;
                        pm.Load(filial);
                        vo.Filial = filial.Nome;
                    }
                }

                pm.Save(vo);
            }

            pm.CloseSingleCommandInstance();
        }

        void levantamentoTabelaFaixaEtariaTRATADO()
        {
            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();

            String qry = "select a.operadora,a.estipulante,a.filial,a.faixaetaria,count(a.beneficiariosexo) as qtdMasc from ____levantamentoFaixaEtaria a		inner join contrato on contrato_id=a.idProposta			where a.beneficiariosexo='masculino'				and contrato_inativo <> 1 and contrato_cancelado <> 1 and contrato_rascunho <> 1	group by a.operadora,a.estipulante,a.filial,faixaetaria order by a.operadora,a.estipulante,a.filial,a.faixaetaria";
            int ret = 0;
            DataTable dt = LocatorHelper.Instance.ExecuteQuery(qry, "result", pm).Tables[0];

            foreach (DataRow row in dt.Rows)
            {
                ret = NonQueryHelper.Instance.ExecuteNonQuery(String.Concat("update ____levantamentoFaixaEtariaTRATADO set qtdMASC=", row["qtdMasc"], " WHERE operadora='", row["operadora"], "' and estipulante='", row["estipulante"], "' and filial='", row["filial"], "' and faixaetaria='", row["faixaetaria"], "'"), pm);
                if (ret > 1)
                {
                    ret = 1;
                }
            }

            pm.CloseSingleCommandInstance();
        }

        void levantamentoAMIL()
        {
            PersistenceManager pm = new PersistenceManager();
            //pm.BeginTransactionContext();
            pm.UseSingleCommandInstance();

            #region levanta todos que existem na amil, mas nao existem (ou existem) na padrao RJ
            /*
            DataTable dt = LocatorHelper.Instance.ExecuteQuery("SELECT id, Marca_Otica FROM ___tabelaAmilRJ", "resultset", pm).Tables[0];
            Object ret = null;

            foreach (DataRow row in dt.Rows)
            {
                ret = LocatorHelper.Instance.ExecuteScalar(String.Concat("SELECT contrato_inativo FROM contrato WHERE contrato_numeroMatricula='", row["Marca_Otica"], "'"), null, null, pm);

                if (ret == null)
                {
                    //nao tem na padrao
                    NonQueryHelper.Instance.ExecuteNonQuery(String.Concat("UPDATE ___tabelaAmilRJ SET temAMil_naoTemPadrao=1,statusNaPadrao='nao existe na padrao' WHERE id=", row["id"]), pm);
                }
                else if (Convert.ToInt32(ret) == 1) //inativo
                {
                    NonQueryHelper.Instance.ExecuteNonQuery(String.Concat("UPDATE ___tabelaAmilRJ SET temAMil_naoTemPadrao=0,statusNaPadrao='inativo na padrao' WHERE id=", row["id"]), pm);
                }
                else
                {
                    //tem na padrao
                    NonQueryHelper.Instance.ExecuteNonQuery(String.Concat("UPDATE ___tabelaAmilRJ SET temAMil_naoTemPadrao=0,statusNaPadrao='ativo na padrao' WHERE id=", row["id"]), pm);
                }
            }
            */
            #endregion

            #region levanta todos que existem na amil, mas nao existem (ou existem) na padrao SP

            //DataTable dt = LocatorHelper.Instance.ExecuteQuery("SELECT id, Marca_Otica FROM ___tabelaAmilSP", "resultset", pm).Tables[0];
            //Object ret = null;

            //foreach (DataRow row in dt.Rows)
            //{
            //    ret = LocatorHelper.Instance.ExecuteScalar(String.Concat("SELECT contrato_inativo FROM contrato WHERE contrato_numeroMatricula='", row["Marca_Otica"], "'"), null, null, pm);

            //    if (ret == null)
            //    {
            //        //nao tem na padrao
            //        NonQueryHelper.Instance.ExecuteNonQuery(String.Concat("UPDATE ___tabelaAmilSP SET temAMil_naoTemPadrao=1,statusNaPadrao='nao existe na padrao' WHERE id=", row["id"]), pm);
            //    }
            //    else if (Convert.ToInt32(ret) == 1) //inativo
            //    {
            //        NonQueryHelper.Instance.ExecuteNonQuery(String.Concat("UPDATE ___tabelaAmilSP SET temAMil_naoTemPadrao=0,statusNaPadrao='inativo na padrao' WHERE id=", row["id"]), pm);
            //    }
            //    else
            //    {
            //        //tem na padrao
            //        NonQueryHelper.Instance.ExecuteNonQuery(String.Concat("UPDATE ___tabelaAmilSP SET temAMil_naoTemPadrao=0,statusNaPadrao='ativo na padrao' WHERE id=", row["id"]), pm);
            //    }
            //}

            #endregion

            #region levanta todos que existem na padrao e nao existem na amil RJ

            //String qry = String.Concat(
            //    "SELECT contrato_id,contrato_numero,contrato_numeroMatricula,contrato_vigencia,contrato_dataCancelamento,contrato_inativo,contrato_cancelado,beneficiario_nome,operadora_nome ",
            //    "       FROM contrato ",
            //    "           INNER JOIN contrato_beneficiario ON contratobeneficiario_contratoId=contrato_id AND contratobeneficiario_tipo=0 AND contratobeneficiario_ativo=1 ",
            //    "           INNER JOIN beneficiario ON contratobeneficiario_beneficiarioId=beneficiario_id AND contratobeneficiario_tipo=0 AND contratobeneficiario_ativo=1 ",
            //    "           INNER JOIN operadora ON operadora_id=contrato_operadoraId ",
            //    "   WHERE contrato_vigencia <= '2011-08-01 23:59:59.997' AND ((contrato_inativo <> 1 and contrato_cancelado <> 1) /* OR contrato_dataCancelamento >= '2011-09-01' */) and contrato_operadoraId IN (12,13,14,17)");

            //DataTable dt = LocatorHelper.Instance.ExecuteQuery(qry, "result", pm).Tables[0];
            //Object ret = null;

            //LevantamentoAmilPADRAOVO vo = null;
            //List<String> idsUsados = new List<String>();
            //Object adimplente = -1;

            //foreach (DataRow row in dt.Rows)
            //{
            //    ret = LocatorHelper.Instance.ExecuteScalar(String.Concat("SELECT id FROM ___tabelaAmilRJ WHERE Marca_Otica='", Convert.ToString(row["contrato_numeroMatricula"]).Replace("'", ""), "'"), null, null, pm);

            //    vo = new LevantamentoAmilPADRAOVO();
            //    if (toString(row["contrato_inativo"]) == "1" || toString(row["contrato_cancelado"]) == "1")
            //    {
            //        vo.Cancelamento = Convert.ToDateTime(row["contrato_dataCancelamento"]).ToString("dd/MM/yyyy");
            //    }
            //    vo.IDProposta = Convert.ToInt32(row["contrato_id"]);
            //    vo.MatriculaProposta = toString(row["contrato_numeroMatricula"]);
            //    vo.NumeroProposta = toString(row["contrato_numero"]);
            //    vo.Operadora = toString(row["operadora_nome"]);
            //    vo.TitularNome = toString(row["beneficiario_nome"]);
            //    vo.Vigencia = Convert.ToDateTime(row["contrato_vigencia"]).ToString("dd/MM/yyyy");

            //    if (ret == null)
            //    {
            //        //NAO tem na amil
            //        vo.TemNaAmil = "NÃO";
            //    }
            //    else
            //    {
            //        //tem na amil
            //        vo.TemNaAmil = "SIM";
            //    }

            //    adimplente = LocatorHelper.Instance.ExecuteScalar(
            //        "SELECT TOP 1 cobranca_id FROM cobranca WHERE cobranca_pago=0 AND cobranca_dataVencimento < 2011-9-25 and cobranca_propostaid=" + vo.IDProposta.ToString(), null, null, pm);

            //    if (adimplente == null || adimplente == DBNull.Value)
            //        vo.Adimplente = "SIM";
            //    else
            //        vo.Adimplente = "NAO";

            //    if (idsUsados.Contains(vo.IDProposta.ToString())) { continue; }

            //    idsUsados.Add(vo.IDProposta.ToString());
            //    pm.Save(vo);
            //}

            #endregion

            #region levanta todos que existem na padrao e nao existem na amil SP

            //String qry = String.Concat(
            //    "SELECT contrato_id,contrato_numero,contrato_numeroMatricula,contrato_vigencia,contrato_dataCancelamento,contrato_inativo,contrato_cancelado,beneficiario_nome,operadora_nome ",
            //    "       FROM contrato ",
            //    "           INNER JOIN contrato_beneficiario ON contratobeneficiario_contratoId=contrato_id AND contratobeneficiario_tipo=0 AND contratobeneficiario_ativo=1 ",
            //    "           INNER JOIN beneficiario ON contratobeneficiario_beneficiarioId=beneficiario_id AND contratobeneficiario_tipo=0 AND contratobeneficiario_ativo=1 ",
            //    "           INNER JOIN operadora ON operadora_id=contrato_operadoraId ",
            //    "   WHERE contrato_vigencia <= '2011-08-01 23:59:59.997' AND ((contrato_inativo <> 1 and contrato_cancelado <> 1) /* OR contrato_dataCancelamento >= '2011-09-01' */) and contrato_operadoraId IN (4,5,6,9,16)");

            //DataTable dt = LocatorHelper.Instance.ExecuteQuery(qry, "result", pm).Tables[0];
            //Object ret = null;

            //LevantamentoAmilPADRAOVO vo = null;
            //List<String> idsUsados = new List<String>();
            //Object adimplente = -1;

            //foreach (DataRow row in dt.Rows)
            //{
            //    ret = LocatorHelper.Instance.ExecuteScalar(String.Concat("SELECT id FROM ___tabelaAmilSP WHERE Marca_Otica='", Convert.ToString(row["contrato_numeroMatricula"]).Replace("'", ""), "'"), null, null, pm);

            //    vo = new LevantamentoAmilPADRAOVO();
            //    if (toString(row["contrato_inativo"]) == "1" || toString(row["contrato_cancelado"]) == "1")
            //    {
            //        vo.Cancelamento = Convert.ToDateTime(row["contrato_dataCancelamento"]).ToString("dd/MM/yyyy");
            //    }
            //    vo.IDProposta = Convert.ToInt32(row["contrato_id"]);
            //    vo.MatriculaProposta = toString(row["contrato_numeroMatricula"]);
            //    vo.NumeroProposta = toString(row["contrato_numero"]);
            //    vo.Operadora = toString(row["operadora_nome"]);
            //    vo.TitularNome = toString(row["beneficiario_nome"]);
            //    vo.Vigencia = Convert.ToDateTime(row["contrato_vigencia"]).ToString("dd/MM/yyyy");

            //    if (ret == null)
            //    {
            //        //NAO tem na amil
            //        vo.TemNaAmil = "NÃO";
            //    }
            //    else
            //    {
            //        //tem na amil
            //        vo.TemNaAmil = "SIM";
            //    }

            //    adimplente = LocatorHelper.Instance.ExecuteScalar(
            //        "SELECT TOP 1 cobranca_id FROM cobranca WHERE cobranca_pago=0 AND cobranca_dataVencimento < 2011-9-25 and cobranca_propostaid=" + vo.IDProposta.ToString(), null, null, pm);

            //    if (adimplente == null || adimplente == DBNull.Value)
            //        vo.Adimplente = "SIM";
            //    else
            //        vo.Adimplente = "NAO";

            //    if (idsUsados.Contains(vo.IDProposta.ToString())) { continue; }

            //    idsUsados.Add(vo.IDProposta.ToString());
            //    pm.Save(vo);
            //}

            #endregion

            #region processa para gerar cobrancas

            txtErros.Text = "";

            String qry = String.Concat(
                "select contrato_id,contrato_contratoadmid,contrato_admissao,contrato_vigencia,beneficiario_id,endereco_id, beneficiario_nome, contrato_numeroMatricula, endereco_logradouro,endereco_numero,endereco_complemento,endereco_bairro,endereco_cidade,endereco_uf,endereco_cep,contratobeneficiario_id ",
                "    from beneficiario  ",
                "        inner join contrato_beneficiario on contratobeneficiario_beneficiarioid=beneficiario_id and contratobeneficiario_tipo=0 and contratobeneficiario_ativo=1 ",
                "        inner join contrato on contratobeneficiario_contratoId=contrato_id and contratobeneficiario_tipo=0 and contratobeneficiario_ativo=1 ",
                "        inner join endereco on contrato_enderecoCobrancaId=endereco_id ",
                "    where ",
                "        contrato_numeroMatricula in (select marca_otica from ___tabelaAmilSP_b) and contrato_id not in (61076,66446,65794) order by contrato_id");

            DataTable dt = LocatorHelper.Instance.ExecuteQuery(qry, "resultset").Tables[0];

            System.Globalization.CultureInfo cinfo = new System.Globalization.CultureInfo("pt-Br");
            IList<Cobranca> _cobrancas = null;
            Cobranca cobranca = null;
            Int32 parcela = 0, parcelasEmAberto = 0, diaDataSemJuros;
            Decimal valor = 0;
            DateTime auxdt, vigencia, vencimento = DateTime.MinValue;
            Object valorDataLimite = null; CalendarioVencimento rcv = null;
            //String ids = "";
            CobrancaEstudoAmilPadrao ceap = null;
            try
            {
                foreach (DataRow row in dt.Rows)
                {
                    parcela = 0; valor = 0; parcelasEmAberto = 0; vencimento = DateTime.MinValue;
                    _cobrancas = LocatorHelper.Instance.ExecuteQuery<Cobranca>("select * from cobranca where cobranca_tipo=0 and cobranca_propostaId=" + row["contrato_id"] + " order by cobranca_parcela", typeof(Cobranca));

                    if (_cobrancas[_cobrancas.Count - 1].DataVencimento.Month >= 10 && _cobrancas[_cobrancas.Count - 1].DataVencimento.Year >= 2011 || _cobrancas[_cobrancas.Count - 1].DataVencimento.Year > 2011)
                    {
                        if (_cobrancas[_cobrancas.Count - 1].DataVencimento.Month == 10 && _cobrancas[_cobrancas.Count - 1].DataVencimento.Year == 2011 && !_cobrancas[_cobrancas.Count - 1].Pago)
                        {
                            ceap = new CobrancaEstudoAmilPadrao();
                            ceap.Bairro = toString(row["endereco_bairro"]);
                            ceap.BeneficiarioNome = toString(row["beneficiario_nome"]);
                            ceap.CEP = toString(row["endereco_cep"]);
                            ceap.Cidade = toString(row["endereco_cidade"]);
                            ceap.CobrancaID = toString(_cobrancas[_cobrancas.Count - 1].ID);
                            ceap.CobrancasEmAberto = parcelasEmAberto.ToString();
                            ceap.CobrancaValor = _cobrancas[_cobrancas.Count - 1].Valor.ToString("N2");
                            ceap.Complemento = toString(row["endereco_complemento"]);
                            ceap.ContratoBeneficiarioId = toString(row["contratobeneficiario_id"]);
                            ceap.ContratoNumeroMatricula = toString(row["contrato_numeroMatricula"]);
                            ceap.IntervaloCobrancas = ""; //ids;
                            ceap.Logradouro = toString(row["endereco_logradouro"]);
                            ceap.Numero = toString(row["endereco_numero"]);
                            ceap.UF = toString(row["endereco_uf"]);
                            ceap.CobrancaParcela = _cobrancas[_cobrancas.Count - 1].Parcela;
                            ceap.PropostaID = Convert.ToInt32(_cobrancas[_cobrancas.Count - 1].PropostaID);

                            txtErros.Text = "salvando ceap (cobrança ja existente)";
                            Application.DoEvents();
                            pm.Save(ceap);
                        }

                        continue;
                    }
                    else
                    {
                        auxdt = _cobrancas[_cobrancas.Count - 1].DataVencimento;
                        parcela = _cobrancas[_cobrancas.Count - 1].Parcela;
                        List<CobrancaComposite> composite = null;

                        while (true)
                        {
                            auxdt = auxdt.AddMonths(1);
                            parcela++;

                            cobranca = new Cobranca();
                            cobranca.ContratoEnderecoCobrancaID = row["endereco_id"];
                            cobranca.DataCriacao = DateTime.Now;

                            cobranca.Pago = false;
                            cobranca.Parcela = parcela;
                            cobranca.PropostaID = row["contrato_id"];
                            cobranca.Tipo = (Int32)Cobranca.eTipo.Normal;
                            cobranca.Carteira = (Int32)Cobranca.eCarteira.Unibanco;
                            cobranca.TipoTemp = 11;

                            if (vencimento == DateTime.MinValue)
                            {
                                CalendarioAdmissaoVigencia.CalculaDatasDeVigenciaEVencimento(row["contrato_contratoadmid"],
                                    Convert.ToDateTime(row["contrato_admissao"], cinfo), out vigencia, out vencimento, out diaDataSemJuros, out valorDataLimite, out rcv, pm);
                            }

                            cobranca.DataVencimento = new DateTime(auxdt.Year, auxdt.Month, vencimento.Day, 23, 59, 59, 995);
                            cobranca.Valor = Contrato.CalculaValorDaProposta2(row["contrato_id"], cobranca.DataVencimento, pm, false, true, ref composite, false);
                            valor = cobranca.Valor;

                            txtErros.Text = String.Concat("Proposta ", cobranca.PropostaID, " - salvando parcela ", cobranca.Parcela.ToString());
                            Application.DoEvents();
                            pm.Save(cobranca);

                            ceap = new CobrancaEstudoAmilPadrao();
                            ceap.Bairro = toString(row["endereco_bairro"]);
                            ceap.BeneficiarioNome = toString(row["beneficiario_nome"]);
                            ceap.CEP = toString(row["endereco_cep"]);
                            ceap.Cidade = toString(row["endereco_cidade"]);
                            ceap.CobrancaID = toString(cobranca.ID);
                            ceap.CobrancasEmAberto = parcelasEmAberto.ToString();
                            ceap.CobrancaValor = cobranca.Valor.ToString("N2");
                            ceap.Complemento = toString(row["endereco_complemento"]);
                            ceap.ContratoBeneficiarioId = toString(row["contratobeneficiario_id"]);
                            ceap.ContratoNumeroMatricula = toString(row["contrato_numeroMatricula"]);
                            ceap.IntervaloCobrancas = ""; //ids;
                            ceap.Logradouro = toString(row["endereco_logradouro"]);
                            ceap.Numero = toString(row["endereco_numero"]);
                            ceap.UF = toString(row["endereco_uf"]);
                            ceap.CobrancaParcela = cobranca.Parcela;
                            ceap.PropostaID = Convert.ToInt32(cobranca.PropostaID);

                            txtErros.Text = "salvando ceap";
                            Application.DoEvents();
                            pm.Save(ceap);

                            if (cobranca.DataVencimento.Month >= 10 && cobranca.DataVencimento.Year == 2011)
                            {
                                txtErros.Text = "saiu do loop";
                                Application.DoEvents();
                                //System.Threading.Thread.Sleep(3000);
                                break;
                            }
                            //else
                            //{
                            //    parcelasEmAberto++;
                            //}
                        }
                    }
                }

                //pm.Rollback();
            }
            catch (Exception ex)
            {
                //pm.Rollback();
                //throw ex;
                txtErros.Text = ex.Message + Environment.NewLine + Environment.NewLine + ex.StackTrace; ;
            }

            #endregion

            pm.CloseSingleCommandInstance();
            pm.Dispose();
            //txtErros.Text = "terminado";
            MessageBox.Show("terminado");
        }

        void importaListagemAntiga()
        {
            String[] arr = File.ReadAllLines(@"C:\Users\matheussi\Desktop\padrao\listagem\20111216\ce.txt");

            String referencia = "CE-20111216";

            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();

            Int32 result = 0, index = 0, parcela = 0;
            Object operadoraId = null, cobrancaId = null, contratoId = null;
            String[] arrLine = null;
            String numeroContrato = null, cmd = null, temp = "", percentual = "";
            Decimal valorPago = -1, deresult = -1;
            DateTime dtresult = DateTime.MinValue, admissao = DateTime.MinValue, pgto = DateTime.MinValue;

            System.Globalization.CultureInfo cinf = new System.Globalization.CultureInfo("pt-Br");

            Boolean passouValorPago = false;

            int i = 0;
            foreach (String line in arr)
            {
                i++;
                txtErros.Text = String.Concat("Linha ", i.ToString(), " de ", arr.Length.ToString());
                Application.DoEvents();

                if (line.Trim() == "") { continue; }

                admissao = DateTime.MinValue;
                pgto = DateTime.MinValue;
                parcela = -1;
                valorPago = -1;
                cobrancaId = null;
                percentual = "";
                passouValorPago = false;

                //if (line.StartsWith("Filial:"))
                //{
                //    arrLine = line.Split(new String[] { " " }, StringSplitOptions.None);
                //    continue;
                //}

                if (line.StartsWith("EMPRESA:"))
                {
                    if (line.IndexOf("11 - UNIMED PAULISTANA") > -1)
                        operadoraId = 3;
                    else if (line.IndexOf("BRASILSAUDE CIA DE SEGUROS") > -1)
                        operadoraId = 8;
                    else if (line.IndexOf("49 - GRUPO AMIL RJ") > -1)
                        operadoraId = 17;
                    else if (line.IndexOf("50 - GRUPO AMIL DF") > -1)
                        operadoraId = 18;
                    else if (line.IndexOf("51 - GRUPO AMIL PR") > -1)
                        operadoraId = 19;
                    else if (line.IndexOf("52 - UNIMED FORTALEZA COOPERATIVA DE TRABALHO MEDICO LTDA") > -1)
                        operadoraId = 20;
                    else
                        operadoraId = LocatorHelper.Instance.ExecuteScalar("SELECT operadora_id from operadora where operadora_nome='" + line.Replace("EMPRESA:", "").Trim() + "'", null, null, pm);
                    continue;
                }

                if (!Int32.TryParse(line.Substring(1, 1), out result)) { continue; }

                arrLine = line.Split(new String[] { " " }, StringSplitOptions.None);

                if (arrLine.Length <= 1) { continue; }

                numeroContrato = arrLine[0];

                #region obtém admissao, dt pagamento, parcela, e valor pago

                for (index = 0; index < arrLine.Length; index++)
                {
                    if (index <= 1) { continue; }

                    if (DateTime.TryParse(arrLine[index].Trim(), cinf, System.Globalization.DateTimeStyles.None, out dtresult))
                    {
                        if (admissao == DateTime.MinValue) { admissao = dtresult; }
                        else if (pgto == DateTime.MinValue) { pgto = dtresult; }
                    }
                    else if (Int32.TryParse(arrLine[index].Trim(), out result) && parcela == -1)
                    {
                        parcela = result;
                    }
                    else if (!passouValorPago && Decimal.TryParse(arrLine[index].Trim(), out deresult))//else if (Decimal.TryParse(arrLine[index].Trim().Replace(".","").Replace(",","."), System.Globalization.NumberStyles.None, cinf, out deresult))
                    {
                        valorPago = deresult;
                        passouValorPago = true;
                    }
                    else if (arrLine[index].IndexOf('%') > -1)// && arrLine[index].Trim() != "0,00%")
                    {
                        percentual = arrLine[index];
                        break;
                    }
                }
                Decimal.TryParse(arrLine[arrLine.Length - 1].Trim(), out deresult);
                valorPago = deresult;
                #endregion

                contratoId = LocatorHelper.Instance.ExecuteScalar("SELECT contrato_id from contrato WHERE contrato_numero='" + numeroContrato + "' AND contrato_operadoraId=" + operadoraId, null, null, pm);

                if (contratoId == null || contratoId == DBNull.Value) { continue; }
                cobrancaId = LocatorHelper.Instance.ExecuteScalar("SELECT cobranca_id from cobranca where cobranca_tipo=0 AND cobranca_parcela=" + parcela.ToString() + " AND cobranca_propostaId=" + contratoId, null, null, pm);

                if (pgto == DateTime.MinValue)
                {
                    if (temp.Length > 0) { temp += ", "; }
                    temp += numeroContrato;
                    continue;
                }
                cmd = String.Concat("INSERT INTO ___comissaoTratamento (cobrancaid,contratonumero,admissao,pagamento,parcela,premio, percentual, grupo) VALUES(", cobrancaId, ", '", numeroContrato, "', '", admissao.ToString("yyyy-MM-dd"), "', '", pgto.ToString("yyyy-MM-dd"), "', ", parcela, ",'", valorPago.ToString("N2").Replace(".", "").Replace(",", "."), "', '", percentual, "', '" + referencia + "')");
                NonQueryHelper.Instance.ExecuteNonQuery(cmd, pm);
            }

            pm.CloseSingleCommandInstance();
            pm.Dispose();

            if (!String.IsNullOrEmpty(temp))
                txtErros.Text = temp;
            else
                txtErros.Text = "Ok";

            #region query posterior
            /*

select beneficiario_nome,cobranca_id, cobranca_parcela, cobranca_valor,cobranca_datapagto
	from cobranca
		inner join contrato on contrato_id=cobranca_propostaId
		inner join contrato_beneficiario on contrato_id=contratobeneficiario_contratoId and contratobeneficiario_tipo=0 and contratobeneficiario_ativo=1
		inner join beneficiario on beneficiario_id=contratobeneficiario_beneficiarioId and contratobeneficiario_tipo=0 and contratobeneficiario_ativo=1
	where 
		cobranca_pago=1 and cobranca_tipo=0 and contrato_donoId=1017 and cobranca_parcela=2
		and cobranca_dataPagto between '2011-06-01' and '2011-07-25 10:30:00.000'
		--and contrato_numero='21043390' 
		and cobranca_id not in (
			select cobrancaid from ___comissaoTratamento
				inner join cobranca on cobranca_id=cobrancaid
				inner join contrato on contrato_id=cobranca_propostaid
			where 
				contrato_donoId=1017) 
	order by beneficiario_nome
             
             */
            #endregion query posterior
        }

        void conferenciaFatura()
        {
            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();
            DataTable dt = LocatorHelper.Instance.ExecuteQuery("SELECT * FROM ___conferenciaFatura where status is null", "resultset").Tables[0];

            Object operId = null, contratoId = null, inatCanc = null;
            foreach (DataRow row in dt.Rows)
            {
                operId = LocatorHelper.Instance.ExecuteScalar("SELECT operadora_id FROM operadora WHERE operadora_nome='" + row["operadora"] + "'", null, null, pm);
                contratoId = LocatorHelper.Instance.ExecuteScalar("SELECT contrato_id FROM contrato WHERE contrato_numero='" + row["contratoNumero"] + "' and contrato_operadoraId=" + operId, null, null, pm);

                inatCanc = LocatorHelper.Instance.ExecuteScalar("SELECT contrato_inativo FROM contrato WHERE contrato_id=" + contratoId, null, null, pm);
                if (inatCanc != null && Convert.ToInt32(inatCanc) == 1)
                {
                    NonQueryHelper.Instance.ExecuteNonQuery("update ___conferenciaFatura set status='inativo' where id=" + row["id"], pm);
                    continue;
                }

                inatCanc = LocatorHelper.Instance.ExecuteScalar("SELECT contrato_cancelado FROM contrato WHERE contrato_id=" + contratoId, null, null, pm);
                if (inatCanc != null && Convert.ToInt32(inatCanc) == 1)
                {
                    NonQueryHelper.Instance.ExecuteNonQuery("update ___conferenciaFatura set status='cancelado' where id=" + row["id"], pm);
                    continue;
                }

                NonQueryHelper.Instance.ExecuteNonQuery("update ___conferenciaFatura set status='ativo' where id=" + row["id"], pm);
            }

            pm.CloseSingleCommandInstance();

            //    String qry = String.Concat("select contrato_id, operadora_nome,estipulante_descricao,contratoadm_id,contratoadm_numero,contratoadm_descricao,contrato_vencimento,contrato_numeroMatricula,contrato_tipoAcomodacao,contrato_numero, ",
            //        "    beneficiario_id, beneficiario_nome,beneficiario_cpf, ",
            //        "    CONVERT(varchar(14), beneficiario_dataNascimento, 103) as beneficiario_dataNascimento, ",
            //        "    plano_id, plano_descricao, ",
            //        "    CONVERT(varchar(14), contrato_admissao, 103) as contrato_admissao, ",
            //        "    CONVERT(varchar(14), contrato_vigencia, 103) as contrato_vigencia,contratobeneficiario_numeroSequencia, day(contrato_vigencia) as diaVig ",
            //        "from contrato ",
            //        "    inner join contratoADM on contratoadm_id=contrato_contratoAdmId ",
            //        "    inner join operadora on contrato_operadoraId=operadora_id ",
            //        "    inner join estipulante on estipulante_id=contrato_estipulanteId ",
            //        "    inner join plano on plano_id = contrato_planoId ",
            //        "    inner join contrato_beneficiario on contratobeneficiario_contratoId=contrato_id and contratobeneficiario_ativo=1 ",
            //        "    inner join beneficiario on contratobeneficiario_beneficiarioId=beneficiario_id and contratobeneficiario_ativo=1 ",
            //        "where ",
            //        "    contrato_numero not in ('1','2') and contrato_inativo <> 1 and contrato_cancelado <> 1 ",
            //        "order by diaVig, operadora_nome,contrato_vigencia,contrato_numero,contratobeneficiario_numeroSequencia ");

            //    DataTable dt = LocatorHelper.Instance.ExecuteQuery(qry, "resultset").Tables[0];

            //    PersistenceManager pm = new PersistenceManager();
            //    pm.UseSingleCommandInstance();

            //    System.Globalization.CultureInfo cinfo = new System.Globalization.CultureInfo("pt-Br");
            //    Int32 idade;
            //    DateTime vencimento;
            //    Cobranca cobranca = null;
            //    ConferenciaFatura cf = null;
            //    foreach (DataRow row in dt.Rows)
            //    {
            //        cf = new ConferenciaFatura();
            //        cf.BeneficiarioCPF = toString(row["beneficiario_cpf"]);
            //        cf.BeneficiarioDataNascimento = toString(row["beneficiario_dataNascimento"]);
            //        cf.BeneficiarioNome = toString(row["beneficiario_nome"]);
            //        cf.BeneficiarioSequencia = toString(row["contratobeneficiario_numeroSequencia"]);
            //        cf.ContratoAdmDescricao = toString(row["contratoadm_descricao"]);
            //        cf.ContratoAdmissao = toString(row["contrato_admissao"]);
            //        cf.ContratoAdmNumero = toString(row["contratoadm_numero"]);
            //        cf.ContratoDiaVigencia = toString(row["diaVig"]);
            //        cf.ContratoMatricula = toString(row["contrato_numeroMatricula"]);
            //        cf.ContratoNumero = toString(row["contrato_numero"]);
            //        cf.ContratoVigencia = toString(row["contrato_vigencia"]);
            //        cf.Estipulante = toString(row["estipulante_descricao"]);
            //        cf.Operadora = toString(row["operadora_nome"]);
            //        cf.Plano = toString(row["plano_descricao"]);

            //        cobranca = Cobranca.CarregarPor(row["contrato_id"], 10, 2011, Cobranca.eTipo.Normal, pm);
            //        if(cobranca != null)
            //        {
            //            vencimento = cobranca.DataVencimento;
            //            if (cobranca.Pago) { cf.CobrancaPago = "Sim"; }
            //            else { cf.CobrancaPago = "Nao"; }
            //            cf.CobrancaGerado = "Sim";
            //            cf.CobrancaID = Convert.ToString(cobranca.ID);
            //        }
            //        else
            //        {
            //            vencimento = new DateTime(2011,10,Convert.ToDateTime(row["contrato_vencimento"], cinfo).Day);
            //            cf.CobrancaPago = "Nao";
            //            cf.CobrancaGerado = "Nao";
            //        }

            //        cf.ValorNet = TabelaValor.CalculaValorNET(row["contrato_id"], row["contratoadm_id"],
            //            row["plano_id"], row["beneficiario_id"], Convert.ToInt32(row["contrato_tipoAcomodacao"]),
            //            Convert.ToDateTime(cf.ContratoAdmissao, cinfo),
            //            Convert.ToDateTime(cf.BeneficiarioDataNascimento, cinfo), 
            //            vencimento, vencimento, out idade, pm);

            //        cf.Idade = idade.ToString();

            //        pm.Save(cf);
            //    }

            //    pm.CloseSingleCommandInstance();
            //    pm.Dispose();
        }

        void RelacaoAdriano()
        {
            String qry = String.Concat("select contrato_numero, beneficiario_dataNascimento, contrato_codcobranca, contrato_id, operadora_nome, estipulante_descricao,",
                "                       CONVERT(varchar(14), contrato_vigencia, 103) as contrato_vigencia, ",
                "                       (SELECT COUNT(*) from contrato_beneficiario where contratobeneficiario_contratoId=contrato_id and contratobeneficiario_ativo=1) as qtdVidas ",
                "   from contrato ",
                "       inner join contrato_beneficiario on contratobeneficiario_contratoId=contrato_id and contratobeneficiario_tipo=0 and contratobeneficiario_ativo=1 ",
                "       inner join beneficiario on beneficiario_id=contratobeneficiario_beneficiarioId and contratobeneficiario_tipo=0 and contratobeneficiario_ativo=1 ",
                "       inner join operadora on operadora_id = contrato_operadoraId ",
                "       inner join estipulante on estipulante_id = contrato_estipulanteId ",
                "   where ",
                "       contrato_operadoraId=3 and contrato_numero not in ('1','2') and contrato_cancelado <> 1 and contrato_inativo <> 1 ",
                "   order by operadora_nome,contrato_numero,contrato_vigencia ");

            DataTable dt = LocatorHelper.Instance.ExecuteQuery(qry, "resultset").Tables[0];

            Boolean menor = false, vinteSete = false;
            int auxIdade = -1;
            //System.Globalization.CultureInfo cinfo = new System.Globalization.CultureInfo("pt-Br");
            IList<ContratoBeneficiario> contratoBeneficiarios = null;
            DateTime auxDataNascimento = DateTime.MinValue;
            RelatorioAdriano ra = null;

            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();

            foreach (DataRow row in dt.Rows)
            {
                if (Convert.ToInt32(row["qtdVidas"]) != 2) { continue; }

                contratoBeneficiarios = ContratoBeneficiario.CarregarPorContratoID(row["contrato_id"], true, false, pm);

                menor = false; vinteSete = false;

                auxIdade = Beneficiario.CalculaIdade(contratoBeneficiarios[0].BeneficiarioDataNascimento);
                if (auxIdade < 18) { menor = true; }
                else if (auxIdade == 27) { vinteSete = true; }

                auxIdade = Beneficiario.CalculaIdade(contratoBeneficiarios[1].BeneficiarioDataNascimento);
                if (auxIdade < 18) { menor = true; }
                else if (auxIdade == 27) { vinteSete = true; }

                if (menor && vinteSete)
                {
                    ra = new RelatorioAdriano();
                    ra.ContratoID = row["contrato_id"];
                    ra.IDCobranca = Convert.ToString(row["contrato_codcobranca"]);
                    ra.NomeTitular = contratoBeneficiarios[0].BeneficiarioNome;
                    ra.NumProposta = Convert.ToString(row["contrato_numero"]);
                    pm.Save(ra);
                }
            }

            pm.CloseSingleCommandInstance();
            pm.Dispose();
        }

        void gerarMemoriaCobrancas2013()
        {
            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();
            Object ret = null;
            List<CobrancaComposite> composite = null;

            String qry = "cobranca_id,cobranca_dataVencimento,cobranca_propostaId,cobranca_parcela from cobranca where cobranca_cancelada <> 1 and cobranca_parcela > 1 and YEAR(cobranca_dataVencimento) = 2013 and cobranca_tipo=0 and cobranca_id not in(select cobrancacomp_cobranaid from cobranca_composicao where cobrancacomp_tipo=0) order by cobranca_propostaId, cobranca_parcela";

            //qry = "cobranca_id,cobranca_dataVencimento,cobranca_propostaId,cobranca_parcela from cobranca where cobranca_id=1224465 order by cobranca_propostaId, cobranca_parcela";

            IList<Cobranca> cobrancas = LocatorHelper.Instance.ExecuteQuery<Cobranca>(qry, typeof(Cobranca), pm);

            if (cobrancas != null)
            {
                foreach (Cobranca cob in cobrancas)
                {
                    qry = String.Concat("select top 1 cobrancacomp_id from cobranca_composicao where cobrancacomp_cobranaId=", cob.ID);
                    ret = LocatorHelper.Instance.ExecuteScalar(qry, null, null, pm);
                    //if (ret != null) { continue; }

                    composite = new List<CobrancaComposite>();
                    Contrato.CalculaValorDaProposta2(cob.PropostaID, cob.DataVencimento, pm, false, true, ref composite, true);
                    //CobrancaComposite.Salvar(cob.ID, composite, pm);
                }
            }

            pm.CloseSingleCommandInstance();
            pm.Dispose();
        }

        #endregion

        public void gerarTabela_mailsaida()
        {
            DataTable dt = LocatorHelper.Instance.ExecuteQuery("select top 2 cobr.*,refe.*,beneficiario_nome,beneficiario_email,cobranca.*,contrato_numero from cobranca inner join contrato on contrato_id = cobranca_propostaid inner join contrato_beneficiario on contratobeneficiario_contratoId = contrato_id and contratobeneficiario_tipo = 0 and contratobeneficiario_ativo = 1 inner join beneficiario on contratobeneficiario_beneficiarioId = beneficiario_id left join endereco cobr on cobr.endereco_id = contrato_enderecoCobrancaId left join endereco refe on refe.endereco_id = contrato_enderecoReferenciaId where cobranca_datavencimento between '2014-3-10' and '2014-3-25 23:59:59.999' and cobranca_pago=0 and cobranca_tipo=0 and cobranca_cancelada=0", "result").Tables[0];

            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();

            string insert = "", nome = "", link = "", msgLimitePagto = "<br>Não receber após o vencimento.", demonst1 = "", end1 = "", end2 = "", final = "";
            DateTime dataVenc = DateTime.Now, agora = DateTime.Now;

            string corpo = string.Concat("<html><head></head><body>Ilmo(a) Sr(a)Dr(a) [NOME]",
                ".<br>Conforme solicitado a 2a. via do Boleto se encontra no link abaixo:<br><br>",
                "<a href=\"[LINK]\">Para visualizar o seu boleto, clique aqui.</a>  <br><br>");

            Endereco endereco = null;

            CultureInfo cinfo = new CultureInfo("pt-Br");

            foreach (DataRow row in dt.Rows)
            {
                dataVenc = Convert.ToDateTime(row["cobranca_dataVencimento"], cinfo);
                nome = Convert.ToString(row["beneficiario_nome"]).Trim();

                demonst1 = String.Concat("<br>Este boleto é referente ao período de cobertura de ", dataVenc.ToString("MM"), "/", dataVenc.Year, ".");

                #region endereco

                if (row[0] != null && row[0] != DBNull.Value)
                {
                    endereco = new Endereco(row[0]);
                    pm.Load(endereco);
                }
                else if (row[11] != null && row[11] != DBNull.Value)
                {
                    endereco = new Endereco(row[11]);
                    pm.Load(endereco);
                }
                else
                {
                    continue;
                }

                end1 = string.Concat(endereco.Logradouro, ", ", endereco.Numero);
                if (!string.IsNullOrEmpty(endereco.Complemento)) { end1 += string.Concat(" - ", endereco.Complemento); }
                if (!string.IsNullOrEmpty(endereco.Bairro)) { end1 += string.Concat(" - ", endereco.Bairro); }

                end2 = string.Concat(endereco.Cidade, " - ", endereco.UF, " - CEP: ", endereco.CEP);

                #endregion

                link = string.Concat(
                    "http://186.233.90.19/?nossonum=",
                    Convert.ToString(row["cobranca_id"]).PadLeft(8, '0'),
                    "&valor=", Convert.ToDecimal(row["cobranca_valor"], cinfo).ToString("N2"),
                    "&d_dia=", agora.Day.ToString().PadLeft(2, '0'), "&d_mes=", agora.Month.ToString().PadLeft(2, '0'), "&d_ano=", agora.Year,
                    "&p_dia=", agora.Day.ToString().PadLeft(2, '0'), "&p_mes=", agora.Month.ToString().PadLeft(2, '0'), "&p_ano=", agora.Year,
                    "&v_dia=", dataVenc.Day.ToString().PadLeft(2, '0'), "&v_mes=", dataVenc.Month.ToString().PadLeft(2, '0'), "&v_ano=", dataVenc.Year,
                    "&numdoc2=", row["contrato_numero"], "&nome=", nome, "&mailto=", row["beneficiario_email"],
                    "&instr1=", msgLimitePagto, "&end1=", end1, "&end2=", end2, "&demonst1=", demonst1);

                final = string.Concat("http://186.233.90.19/boleto_itau.php?param=", EncryptBetweenPHP(link));

                insert = string.Concat("INSERT INTO mailsaida (Destinatario, Remetente, Assunto, Mensagem) VALUES ('",
                    row["beneficiario_email"], "','atendimento@qualicorp.com.br','ASSUNTO','",
                    corpo.Replace("[NOME]", nome.Split('(')[0].Trim()).Replace("[LINK]", final), "')");

                NonQueryHelper.Instance.ExecuteNonQuery(insert, pm);
            }

            pm.Dispose();
        }

        string EncryptBetweenPHP(string param)
        {
            byte[] key = Encoding.UTF8.GetBytes("passwordDR0wSS@P6660juht");
            byte[] iv = Encoding.UTF8.GetBytes("password");
            byte[] data = Encoding.UTF8.GetBytes(param);
            byte[] enc = new byte[0];
            TripleDES tdes = TripleDES.Create();
            tdes.IV = iv;
            tdes.Key = key;
            tdes.Mode = CipherMode.CBC;
            tdes.Padding = PaddingMode.Zeros;
            ICryptoTransform ict = tdes.CreateEncryptor();
            enc = ict.TransformFinalBlock(data, 0, data.Length);
            return Bin2Hex(enc);
        }
        static string DecryptBetweenPHP(string Data)
        {
            byte[] key = Encoding.UTF8.GetBytes("passwordDR0wSS@P6660juht");
            byte[] iv = Encoding.UTF8.GetBytes("password");
            byte[] data = StringToByteArray(Data);
            byte[] enc = new byte[0];
            TripleDES tdes = TripleDES.Create();
            tdes.IV = iv;
            tdes.Key = key;
            tdes.Mode = CipherMode.CBC;
            tdes.Padding = PaddingMode.Zeros;
            ICryptoTransform ict = tdes.CreateDecryptor();
            enc = ict.TransformFinalBlock(data, 0, data.Length);
            return Encoding.UTF8.GetString(enc);
        }
        public static string ByteArrayToString(byte[] ba)
        {
            string hex = BitConverter.ToString(ba);
            return hex.Replace("-", "");
        }
        public static byte[] StringToByteArray(String hex)
        {
            int NumberChars = hex.Length;
            byte[] bytes = new byte[NumberChars / 2];
            for (int i = 0; i < NumberChars; i += 2)
                bytes[i / 2] = Convert.ToByte(hex.Substring(i, 2), 16);
            return bytes;
        }
        string Bin2Hex(byte[] bin)
        {
            StringBuilder sb = new StringBuilder(bin.Length * 2);
            foreach (byte b in bin)
            {
                sb.Append(b.ToString("x").PadLeft(2, '0'));
            }
            return sb.ToString();
        }
        string RetiraAcentos(String Texto)
        {
            if (String.IsNullOrEmpty(Texto)) { return Texto; }
            String comAcentos = "ÄÅÁÂÀÃäáâàãÉÊËÈéêëèÍÎÏÌíîïìÖÓÔÒÕöóôòõÜÚÛüúûùÇç";
            String semAcentos = "AAAAAAaaaaaEEEEeeeeIIIIiiiiOOOOOoooooUUUuuuuCc";

            for (int i = 0; i < comAcentos.Length; i++)
                Texto = Texto.Replace(comAcentos[i].ToString(), semAcentos[i].ToString());

            return Texto.Replace("'", "");
        }


        void gerarDadosAna()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("<table><tr><td>Nome</td><td>Contrato</td><td>Operadora</td><td>Valor Dental</td><td>Valor Dental Boleto</td></tr>");
            using (SqlConnection conn = new SqlConnection("Server=172.22.39.132;Database=padrao_producaoDB;USER ID=qlcdbsabe;PWD=qlcdbs@b$;timeout=2147483647"))
            {
                conn.Open();

                SqlCommand cmd = conn.CreateCommand();

                cmd.CommandText = "truncate table __dados";
                cmd.ExecuteNonQuery();

                cmd.CommandText = string.Concat(
                    "select contrato_id, beneficiario_id,beneficiario_nome, contrato_numero,operadora_nome,adicional_id,adicional_descricao ",
                    "   from adicional_beneficiario",
                    "       inner join beneficiario on beneficiario_id = adicionalbeneficiario_beneficiarioid ",
                    "       inner join contrato on contrato_id = adicionalbeneficiario_propostaId ",
                    "       inner join adicional on adicional_id = adicionalbeneficiario_adicionalid ",
                    "       inner join operadora on operadora_id = contrato_operadoraId ",
                    "   where (contrato_dataCancelamento is null OR year(contrato_dataCancelamento) >= 2014) and adicional_dental=1",
                    "   order by contrato_id");

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                adp.Fill(dt);

                PersistenceManager pm = new PersistenceManager();
                pm.UseSingleCommandInstance();

                object aux = null, aux2 = null;
                //bool achouValor = false;

                string str = "";

                int i = 0;
                foreach (DataRow row in dt.Rows)
                {
                    i++;
                    txtErros.Text = string.Concat(i.ToString(), " de ", dt.Rows.Count.ToString());
                    Application.DoEvents();

                    //cmd.CommandText = string.Concat("select 1 from __dados where beneficiarioid=", row["beneficiario_id"], " and contratoid=",
                    //    row["contrato_id"], " and adicional_id=", row["adicional_id"]);
                    //aux = cmd.ExecuteScalar();

                    //if (aux != null) { continue; }

                    str = string.Concat("insert into __dados (contratoid,beneficiarioid,adicionalid,adicionalvalor,adicionalvalorboleto,cobrancaid) values (",
                        row["contrato_id"], ",", row["beneficiario_id"], ",", row["adicional_id"], ", '");

                    sb.Append("<tr>");

                    sb.Append("<td>");
                    sb.Append(row["beneficiario_nome"]);
                    sb.Append("</td>");

                    sb.Append("<td>");
                    sb.Append(row["contrato_numero"]);
                    sb.Append("</td>");

                    sb.Append("<td>");
                    sb.Append(row["operadora_nome"]);
                    sb.Append("</td>");

                    //valor dental: somente a ultima vigencia
                    cmd.CommandText = string.Concat("select top 1 adicionalfaixa_valor from adicional_faixa (nolock) where adicionalfaixa_adicionalId = ", row["adicional_id"], " order by adicionalfaixa_vigencia desc"); // 00:00:00.000 adicionalfaixa_vigencia >= '2013-07-01' and 
                    aux = cmd.ExecuteScalar();
                    sb.Append("<td>");
                    if (aux != null && aux != DBNull.Value)
                    {
                        sb.Append(toDecimal(aux).ToString("N2"));
                        str = string.Concat(str, toDecimal(aux).ToString("N2"), "', '");

                        if (toDecimal(aux) > 0) { int k = 0; }
                    }
                    else
                    {
                        sb.Append("0,00");

                        str = string.Concat(str, "0,00", "', '");
                    }
                    sb.Append("</td>");

                    //achouValor = false;

                    //carrega o ID da ultima cobranca do contrato
                    cmd.CommandText = string.Concat("select top 1 cobranca_id from cobranca (nolock) where cobranca_tipo=0 and cobranca_propostaid=", row["contrato_id"], " order by cobranca_datavencimento desc");
                    aux = cmd.ExecuteScalar();

                    if (aux == null || aux == DBNull.Value)
                    {
                        sb.Append("<td>");
                        sb.Append("0,00");
                        sb.Append("</td>");
                        sb.Append("</tr>");
                        str = string.Concat(str, "0,00", "',", "null", ")");
                        cmd.CommandText = str;
                        cmd.ExecuteNonQuery();

                        continue;
                    }

                    //carrega o valor do dental para a COBRANCA carregada
                    cmd.CommandText = string.Concat("select cobrancacomp_valor from cobranca_composicao (nolock) where cobrancacomp_tipo=3 and cobrancacomp_cobranaId=", aux, " and cobrancacomp_beneficiarioId=", row["beneficiario_id"]);
                    aux2 = cmd.ExecuteScalar();

                    if (aux2 != null && aux2 != DBNull.Value)
                    {
                        //achouValor = true;
                        sb.Append("<td>");
                        sb.Append(toDecimal(aux2).ToString("N2"));
                        sb.Append("</td>");
                        sb.Append("</tr>");

                        str = string.Concat(str, toDecimal(aux2).ToString("N2"), "',", aux, ")");
                        cmd.CommandText = str;
                        cmd.ExecuteNonQuery();
                        continue;
                    }

                    //2a tentativa
                    cmd.CommandText = string.Concat("select top 1 cobranca_id from cobranca (nolock) where cobranca_tipo=0 and cobranca_propostaid=", row["contrato_id"], " and cobranca_id < ", aux, " order by cobranca_datavencimento desc");
                    aux = cmd.ExecuteScalar();

                    if (aux != null)
                    {
                        cmd.CommandText = string.Concat("select cobrancacomp_valor from cobranca_composicao (nolock) where cobrancacomp_tipo=3 and cobrancacomp_cobranaId=", aux, " and cobrancacomp_beneficiarioId=", row["beneficiario_id"]);
                        aux2 = cmd.ExecuteScalar();

                        if (aux2 != null && aux2 != DBNull.Value)
                        {
                            sb.Append("<td>");
                            sb.Append(toDecimal(aux2).ToString("N2"));
                            sb.Append("</td>");
                            sb.Append("</tr>");

                            str = string.Concat(str, toDecimal(aux2).ToString("N2"), "',", aux, ")");
                            cmd.CommandText = str;
                            cmd.ExecuteNonQuery();
                            continue;
                        }

                        //3a tentativa
                        cmd.CommandText = string.Concat("select top 1 cobranca_id from cobranca (nolock) where cobranca_tipo=0 and cobranca_propostaid=", row["contrato_id"], " and cobranca_id < ", aux, " order by cobranca_datavencimento desc");
                        aux = cmd.ExecuteScalar();

                        if (aux != null)
                        {
                            cmd.CommandText = string.Concat("select cobrancacomp_valor from cobranca_composicao (nolock) where cobrancacomp_tipo=3 and cobrancacomp_cobranaId=", aux, " and cobrancacomp_beneficiarioId=", row["beneficiario_id"]);
                            aux2 = cmd.ExecuteScalar();

                            if (aux2 != null && aux2 != DBNull.Value)
                            {
                                sb.Append("<td>");
                                sb.Append(toDecimal(aux2).ToString("N2"));
                                sb.Append("</td>");
                                sb.Append("</tr>");

                                str = string.Concat(str, toDecimal(aux2).ToString("N2"), "',", aux, ")");
                                cmd.CommandText = str;
                                cmd.ExecuteNonQuery();
                                continue;
                            }
                        }
                    }


                    sb.Append("<td>");
                    sb.Append("0,00");
                    sb.Append("</td>");
                    sb.Append("</tr>");

                    str = string.Concat(str, "0,00", "',", "null", ")");
                    cmd.CommandText = str;
                    cmd.ExecuteNonQuery();

                }

                sb.Append("</table>");

                pm.CloseSingleCommandInstance();
                pm.Dispose();

                File.WriteAllText(@"c:\plan.xls", sb.ToString());
            }
        }

        /// <summary>
        /// usado no layout de cadastro
        /// </summary>
        void arrumaGrupoFamiliar()
        {
            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();

            DataTable dados = LocatorHelper.Instance.ExecuteQuery("select * from TB_LAYOUT_CADASTRO (nolock) where VALOR_GRUPO_FAMILIAR='00000000000' --where contrato_id=41", "result").Tables[0];
            List<string> ids = new List<string>();

            foreach (DataRow row in dados.Rows)
            {
                if (ids.Contains(Convert.ToString(row[1]))) continue;

                ids.Add(Convert.ToString(row[1]));
            }

            int sum = 0;
            int i = 1;
            foreach (string id in ids)
            {
                txtErros.Text = string.Concat(i.ToString(), " de ", ids.Count.ToString());
                Application.DoEvents();
                sum = Convert.ToInt32(dados.Compute("SUM(VALOR_PLANO)", "contrato_id=" + id));
                NonQueryHelper.Instance.ExecuteNonQuery(string.Concat("update TB_LAYOUT_CADASTRO set VALOR_GRUPO_FAMILIAR='", sum.ToString(), "' where contrato_id=", id), pm);
                i++;
            }
        }

        /// <summary>
        /// usado no layout de cadastro
        /// </summary>
        void checaLenghtDasLinhas()
        {
            string[] lines = File.ReadAllLines(@"C:\Users\matheussi\Desktop\atendimento.txt", System.Text.Encoding.GetEncoding("ISO-8859-1"));

            for (int i = 0; i < lines.Length; i++)
            {
                if (lines[i].Length != 6226) //1249
                {
                    txtErros.Text += (i + 1).ToString() + Environment.NewLine;
                    Application.DoEvents();
                }
                //txtErros.Text += lines[i].Length.ToString() + Environment.NewLine;
                //if (i == 10) { break; }
            }
        }

        void geraTabelaAuxiliarIR()
        {
            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();

            NonQueryHelper.Instance.ExecuteNonQuery("truncate table IR_DADOS_PREPROD_SP_AUX", pm);
            IList<Cobranca> espec = LocatorHelper.Instance.ExecuteQuery<Cobranca>("* from cobranca where cobranca_pago=1 and cobranca_cancelada <> 1 and cobranca_tipo in (1,4) and year(cobranca_dataPagto)=2014 ", typeof(Cobranca), pm); //and cobranca_propostaId=64779

            if (espec == null) { pm.Dispose(); return; }

            IRAuxiliar item = null;
            List<IRAuxiliar> itens = new List<IRAuxiliar>();
            IList<CobrancaComposite> list = null;

            decimal perc = 0, valorPart = 0, valorTotal = 0;

            foreach (Cobranca especial in espec)
            {
                if (especial.Tipo == (int)Cobranca.eTipo.Parcelamento)
                {
                    // identifica uma cobranca original com composicao
                    list = LocatorHelper.Instance.ExecuteQuery<CobrancaComposite>("select cobranca_composicao.* from cobranca_parcelamentoItem inner join cobranca_parcelamentoHeader on parcitem_headerId=parcheader_id inner join cobranca_parcelamentoCobrancaOriginal on parccob_headerId = parcheader_id inner join cobranca_composicao on parccob_cobrancaId = cobrancacomp_cobranaId and cobrancacomp_beneficiarioId is not null where cobrancacomp_tipo in (0,3) and parcitem_cobrancaId=" + especial.ID, typeof(CobrancaComposite), pm);
                    if (list == null) { continue; }

                    valorTotal = 0;
                    foreach (CobrancaComposite comp in list) { valorTotal += comp.Valor; }

                    foreach (CobrancaComposite comp in list)
                    {
                        perc = ((comp.Valor * 100) / valorTotal) / 100;
                        valorPart = (perc * especial.Valor);

                        item = itens.FirstOrDefault(i =>
                            i.BeneficiarioId.ToString() == Convert.ToString(comp.BeneficiarioID) &&
                            i.ContratoId.ToString() == Convert.ToString(especial.PropostaID));

                        if (item != null)
                        {
                            item.SetaValor(valorPart, especial.DataPgto.Month);
                        }
                        else
                        {
                            IRAuxiliar novo = new IRAuxiliar();
                            novo.BeneficiarioId = Convert.ToInt32(comp.BeneficiarioID);
                            novo.ContratoId = Convert.ToInt32(especial.PropostaID);
                            novo.ProponenteId = Convert.ToInt32(ContratoBeneficiario.CarregaID(especial.PropostaID, comp.BeneficiarioID, pm));
                            novo.SetaValor(valorPart, especial.DataPgto.Month);
                            itens.Add(novo);
                        }
                    }
                }
                else if (especial.Tipo == (int)Cobranca.eTipo.Complementar)
                {
                    IList<Cobranca> cobrNormal = LocatorHelper.Instance.ExecuteQuery<Cobranca>("select top 1 * from cobranca where cobranca_tipo=0 and cobranca_datavencimento between '" + especial.DataVencimento.AddMonths(-1).ToString("yyyy-MM-dd") + "' and '" + especial.DataVencimento.AddMonths(1).ToString("yyyy-MM-dd 23:59:59:999") + "' and cobranca_propostaId=" + especial.PropostaID, typeof(Cobranca), pm);
                    if (cobrNormal == null || cobrNormal.Count == 0) continue;

                    list = LocatorHelper.Instance.ExecuteQuery<CobrancaComposite>("select cobranca_composicao.* from cobranca_composicao where cobrancacomp_tipo in (0,3) and cobrancacomp_beneficiarioId is not null and cobrancacomp_cobranaId=" + cobrNormal[0].ID, typeof(CobrancaComposite), pm);
                    if (list == null) { continue; }

                    valorTotal = 0;
                    foreach (CobrancaComposite comp in list) { valorTotal += comp.Valor; }

                    foreach (CobrancaComposite comp in list)
                    {
                        perc = ((comp.Valor * 100) / valorTotal) / 100;
                        valorPart = (perc * especial.Valor);

                        item = itens.FirstOrDefault(i =>
                            i.BeneficiarioId.ToString() == Convert.ToString(comp.BeneficiarioID) &&
                            i.ContratoId.ToString() == Convert.ToString(especial.PropostaID));

                        if (item != null)
                        {
                            item.SetaValor(valorPart, especial.DataPgto.Month);
                        }
                        else
                        {
                            IRAuxiliar novo = new IRAuxiliar();
                            novo.BeneficiarioId = Convert.ToInt32(comp.BeneficiarioID);
                            novo.ContratoId = Convert.ToInt32(especial.PropostaID);
                            novo.ProponenteId = Convert.ToInt32(ContratoBeneficiario.CarregaID(especial.PropostaID, comp.BeneficiarioID, pm));
                            novo.SetaValor(valorPart, especial.DataPgto.Month);
                            itens.Add(novo);
                        }
                    }
                }
            }

            foreach (IRAuxiliar obj in itens)
            {
                pm.Save(obj);
            }

            pm.CloseSingleCommandInstance();
            pm.Dispose();
        }

        void corrigeVencimento25122013()
        {
            string qry = "select cobranca.* from cobranca  where day(cobranca_datavencimento)=25 and month(cobranca_datavencimento)=12 and year(cobranca_datavencimento)=2013";
            //, contrato_contratoadmid,contrato_admissao,  inner join contrato on contrato_id=cobranca_propostaid

            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();
            decimal valor = 0;

            //IList<TabelaValor> tabelas = null;
            IList<Cobranca> cobrancas = LocatorHelper.Instance.ExecuteQuery<Cobranca>(qry, typeof(Cobranca), pm);

            try
            {
                List<CobrancaComposite> comp = new List<CobrancaComposite>();
                DateTime? admissao, vencimento; int i = 0;
                foreach (Cobranca cobranca in cobrancas)
                {
                    i++;
                    txtErros.Text = i.ToString();
                    Application.DoEvents();

                    admissao = cobranca.ContratoDataAdmissao;
                    vencimento = new DateTime(cobranca.DataVencimento.Year, cobranca.DataVencimento.Month, cobranca.DataVencimento.Day, 23, 59, 59, 500);
                    valor = Contrato.CalculaValorDaProposta2(cobranca.PropostaID, cobranca.DataVencimento, pm, false, true, ref comp, false);

                    if (valor != cobranca.Valor)
                    {
                        cobranca.Valor = valor;
                        cobranca.DataVencimento = vencimento.Value;
                        pm.Save(cobranca);
                    }
                }

                pm.CloseSingleCommandInstance();
            }
            catch
            {
            }
            finally
            {
                pm.Dispose();
            }
        }

        void corrigeDuplicidade()
        {
            String qry = "select cobranca_propostaid,cobranca_parcela,cobranca_tipo,cobranca_cancelada,count(cobranca_propostaid) as qtd from cobranca where cobranca_tipo=0 and cobranca_cancelada=0 and cobranca_parcela <> 0 group by cobranca_propostaid,cobranca_parcela,cobranca_tipo,cobranca_cancelada  having count(cobranca_propostaid) > 1 order by cobranca_propostaid,cobranca_parcela,cobranca_tipo,cobranca_cancelada";

            Object ret = null;
            DataTable dt = null;
            PersistenceManager pm = new PersistenceManager();
            pm.IsoLevel = IsolationLevel.ReadUncommitted;
            pm.BeginTransactionContext();


            try
            {
                dt = LocatorHelper.Instance.ExecuteQuery(qry, "result", pm).Tables[0];
                List<String> parcelas = new List<String>();
                List<String> contratoIds = new List<String>();

                foreach (DataRow row in dt.Rows)
                {
                    if (Convert.ToInt32(row["qtd"]) != 2) { continue; }
                    parcelas.Add(Convert.ToString(row["cobranca_parcela"]));
                    contratoIds.Add(Convert.ToString(row["cobranca_propostaid"]));
                }

                Cobranca cob1 = null, cob2 = null;
                dt.Rows.Clear();
                dt.Dispose();

                //foreach (String contratoid in contratoIds)
                for (int i = 0; i < contratoIds.Count; i++)
                {
                    if (contratoIds[i] != "220272") { continue; }

                    dt = LocatorHelper.Instance.ExecuteQuery("select cobranca_id from cobranca where cobranca_propostaId=" + contratoIds[i] + " and cobranca_parcela=" + parcelas[i] + " order by cobranca_dataVencimento", "result", pm).Tables[0];

                    cob1 = new Cobranca(dt.Rows[0]["cobranca_id"]);
                    pm.Load(cob1);

                    cob2 = new Cobranca(dt.Rows[1]["cobranca_id"]);
                    pm.Load(cob2);


                    if (cob1.DataVencimento.Day == cob2.DataVencimento.Day &&
                        cob1.DataVencimento.Month == cob2.DataVencimento.Month &&
                        cob1.DataVencimento.Year == cob2.DataVencimento.Year)
                    {
                        #region Data de vencto igual //////////////////////////////////

                        //if (cob1.Pago && !cob2.Pago && cob2.ArquivoIDUltimoEnvio == null)
                        //{
                        //    //cancela cob2
                        //    cob2.Cancelada = true;
                        //    pm.Save(cob2);
                        //    txtErros.Text += Convert.ToString(cob2.PropostaID) + ",";
                        //}
                        //else if (!cob1.Pago && cob1.ArquivoIDUltimoEnvio == null && cob2.Pago)
                        //{
                        //    //cancela cob1
                        //    cob1.Cancelada = true;
                        //    pm.Save(cob1);
                        //    txtErros.Text += Convert.ToString(cob1.PropostaID) + ",";
                        //}
                        //else if (!cob1.Pago && cob1.ArquivoIDUltimoEnvio == null)
                        //{
                        //    //cancela cob1
                        //    cob1.Cancelada = true;
                        //    pm.Save(cob1);
                        //    txtErros.Text += Convert.ToString(cob1.PropostaID) + ",";
                        //}
                        //else if (!cob2.Pago && cob2.ArquivoIDUltimoEnvio == null)
                        //{
                        //    //cancela cob2
                        //    cob2.Cancelada = true;
                        //    pm.Save(cob2);
                        //    txtErros.Text += Convert.ToString(cob2.PropostaID) + ",";
                        //}
                        #endregion ////////////////////////////////////////////////////////////

                        #region 3a tentativa Data de vencto igual (enviados): 3619220,3628074

                        //if (cob1.Pago && !cob2.Pago)
                        //{
                        //    //cancela cob2
                        //    cob2.Cancelada = true;
                        //    pm.Save(cob2);
                        //    txtErros.Text += Convert.ToString(cob2.ID) + ",";
                        //}
                        //else if (!cob1.Pago && cob2.Pago)
                        //{
                        //    //cancela cob1
                        //    cob1.Cancelada = true;
                        //    pm.Save(cob1);
                        //    txtErros.Text += Convert.ToString(cob1.ID) + ",";
                        //}
                        //else if (!cob1.Pago)
                        //{
                        //    //cancela cob1
                        //    cob1.Cancelada = true;
                        //    pm.Save(cob1);
                        //    txtErros.Text += Convert.ToString(cob1.ID) + ",";
                        //}
                        //else if (!cob2.Pago)
                        //{
                        //    //cancela cob2
                        //    cob2.Cancelada = true;
                        //    pm.Save(cob2);
                        //    txtErros.Text += Convert.ToString(cob2.ID) + ",";
                        //}
                        #endregion ////////////////////////////////////////////////////////////
                    }
                    else
                    {
                        //cob1 = new Cobranca(dt.Rows[1]["cobranca_id"]);
                        //pm.Load(cob1);

                        #region comentado 2a vez: 3617204,3684549,3684548,3582620,3684552,3628197
                        //if (!cob1.Pago)
                        //{
                        //    qry = String.Concat("select cobranca_id from cobranca where cobranca_cancelada=0 and cobranca_parcela <> ",
                        //        cob1.Parcela, 
                        //        " and month(cobranca_dataVencimento)=", cob1.DataVencimento.Month,
                        //        " and day(cobranca_dataVencimento)=",cob1.DataVencimento.Day,
                        //        " and year(cobranca_dataVencimento)=", cob1.DataVencimento.Year, 
                        //        " and cobranca_propostaId=", cob1.PropostaID, " and cobranca_tipo=", cob1.Tipo);
                        //    ret = LocatorHelper.Instance.ExecuteScalar(qry, null, null, pm);

                        //    if (ret != null)
                        //    {
                        //        cob1.Cancelada = true;
                        //        pm.Save(cob1);
                        //        txtErros.Text += Convert.ToString(cob1.ID) + ",";
                        //    }
                        //}
                        #endregion

                        #region comentado 4a vez: 3619041
                        //if (!cob1.Pago && cob1.ArquivoIDUltimoEnvio == null)
                        //{
                        //    qry = String.Concat("select cobranca_id from cobranca where cobranca_cancelada=0 ",
                        //        " and month(cobranca_dataVencimento)=", cob1.DataVencimento.Month,
                        //        " and day(cobranca_dataVencimento)=", cob1.DataVencimento.Day,
                        //        " and year(cobranca_dataVencimento)=", cob1.DataVencimento.Year,
                        //        " and cobranca_propostaId=", cob1.PropostaID, " and cobranca_tipo=", cob1.Tipo);
                        //    ret = LocatorHelper.Instance.ExecuteScalar(qry, null, null, pm);

                        //    if (ret != null)
                        //    {
                        //        cob1.Cancelada = true;
                        //        pm.Save(cob1);
                        //        txtErros.Text += Convert.ToString(cob1.ID) + ",";
                        //    }
                        //}
                        #endregion

                        #region comentado 5a vez:
                        //if (!cob1.Pago && cob1.ArquivoIDUltimoEnvio == null)
                        //{
                        //    qry = String.Concat("select cobranca_id from cobranca where cobranca_cancelada=0 ",
                        //        " and month(cobranca_dataVencimento)=", cob1.DataVencimento.Month,
                        //        " and day(cobranca_dataVencimento)=", cob1.DataVencimento.Day,
                        //        " and year(cobranca_dataVencimento)=", cob1.DataVencimento.Year,
                        //        " and cobranca_propostaId=", cob1.PropostaID, " and cobranca_tipo=", cob1.Tipo,
                        //        " and cobranca_id <> ", cob1.ID);
                        //    ret = LocatorHelper.Instance.ExecuteScalar(qry, null, null, pm);

                        //    if (ret != null)
                        //    {
                        //        cob1.Cancelada = true;
                        //        pm.Save(cob1);
                        //        txtErros.Text += Convert.ToString(cob1.ID) + ",";
                        //    }
                        //}
                        #endregion

                        #region comentado 6a vez: 3684778,3688313,3685037,3685020,3628901,3628908,3685079,3663577,3686841,3687106,3688557,3684917,3670535,3629089,3685425,3688581,3685367,3685444,3685432,3688322,3685408,3685457,3689127,3685436,3685400,3689238,3628939,3688468,3687717,3629301,3686924,3688523,3688514,3689183,3685491,3688486,3688895,3685523,3686738,3685009,3688546,3688644,3686934,3687595,3688879,3685089,3628246,3685421,3684543,3685482,3628645,3688620,3685450,3685441,3686775,3628708,3685530,3628745,3685527,3685489,3685525,3689188,3689014,3686875,3688230,3686741,3687347,3687764,3688465,3686860,3688752,3688383,3687522,3688295,3686790,3687617,3687621,3687624,3688165,3688326,

                        //cob1 = new Cobranca(dt.Rows[0]["cobranca_id"]);
                        //pm.Load(cob1);

                        //if (!cob1.Pago && cob1.ArquivoIDUltimoEnvio == null)
                        //{
                        //    qry = String.Concat("select cobranca_id from cobranca where cobranca_cancelada=0 ",
                        //        " and month(cobranca_dataVencimento)=", cob1.DataVencimento.Month,
                        //        " and day(cobranca_dataVencimento)=", cob1.DataVencimento.Day,
                        //        " and year(cobranca_dataVencimento)=", cob1.DataVencimento.Year,
                        //        " and cobranca_propostaId=", cob1.PropostaID, " and cobranca_tipo=", cob1.Tipo,
                        //        " and cobranca_id <> ", cob1.ID);

                        //    ret = LocatorHelper.Instance.ExecuteScalar(qry, null, null, pm);

                        //    if (ret != null)
                        //    {
                        //        cob1.Cancelada = true;
                        //        pm.Save(cob1);
                        //        txtErros.Text += Convert.ToString(cob1.ID) + ",";
                        //    }
                        //}
                        #endregion

                        #region comentado 7a vez: 3685995,3628761,3629139,3628683,3684924,3685309,3685460,3629006,3685755,3684908,3684858,3628957,3629136,3684895,3673300,3683706,3684237,3685961,3685979,3685217,3685982,3685966,3628457,3686183,3685382,3685374,

                        //cob1 = new Cobranca(dt.Rows[0]["cobranca_id"]);
                        //pm.Load(cob1);

                        //if (!cob1.Pago)
                        //{
                        //    qry = String.Concat("select cobranca_id from cobranca where cobranca_cancelada=0 ",
                        //        " and month(cobranca_dataVencimento)=", cob1.DataVencimento.Month,
                        //        " and day(cobranca_dataVencimento)=", cob1.DataVencimento.Day,
                        //        " and year(cobranca_dataVencimento)=", cob1.DataVencimento.Year,
                        //        " and cobranca_propostaId=", cob1.PropostaID, " and cobranca_tipo=", cob1.Tipo,
                        //        " and cobranca_id <> ", cob1.ID);

                        //    ret = LocatorHelper.Instance.ExecuteScalar(qry, null, null, pm);

                        //    if (ret != null)
                        //    {
                        //        cob1.Cancelada = true;
                        //        pm.Save(cob1);
                        //        txtErros.Text += Convert.ToString(cob1.ID) + ",";
                        //    }
                        //}
                        #endregion

                        #region comentado 8a vez:

                        //cob1 = new Cobranca(dt.Rows[1]["cobranca_id"]);
                        //pm.Load(cob1);

                        //if (!cob1.Pago && cob1.ArquivoIDUltimoEnvio == null)
                        //{
                        //    qry = String.Concat("select cobranca_id from cobranca where cobranca_cancelada=0 ",
                        //        " and cobranca_parcela=", cob1.Parcela,
                        //        " and cobranca_dataVencimento > '", cob1.DataVencimento.ToString("yyyy-MM-dd"),"' ",
                        //        " and cobranca_propostaId=", cob1.PropostaID, " and cobranca_tipo=", cob1.Tipo,
                        //        " and cobranca_id <> ", cob1.ID);

                        //    ret = LocatorHelper.Instance.ExecuteScalar(qry, null, null, pm);

                        //    if (ret != null)
                        //    {
                        //        cob1.Cancelada = true;
                        //        pm.Save(cob1);
                        //        txtErros.Text += Convert.ToString(cob1.ID) + ",";
                        //    }
                        //}
                        #endregion

                    }

                    dt.Rows.Clear();
                    dt.Dispose();
                    dt = null;
                }

                pm.Commit();
            }
            catch (Exception ex)
            {
                pm.Rollback();
                throw ex;
            }
            finally
            {
                pm.Dispose();
            }
        }

        void refazNumeroDeParcelas()
        {
            String[] ids = new String[] { "220272", "219489", "220972", "221493", "221617", "222834", "222869", "223653", "224270", "224344", "224430", "224636", "224685", "224798", "224956", "227583" };

            PersistenceManager pm = new PersistenceManager();
            pm.IsoLevel = IsolationLevel.ReadUncommitted;
            pm.BeginTransactionContext();

            try
            {
                int i = 1;
                IList<Cobranca> cobrancas = null;
                foreach (String id in ids)
                {
                    cobrancas = Cobranca.CarregarTodasORDERBYVencto(id, pm);
                    i = 1;

                    foreach (Cobranca cobranca in cobrancas)
                    {
                        cobranca.Parcela = i;
                        i++;
                        pm.Save(cobranca);
                    }
                }

                pm.Commit();
            }
            catch (Exception ex)
            {
                pm.Rollback();
                throw;
            }
            finally
            {
                pm.Dispose();
            }
        }

        void corrigiFuroEmCadeia()
        {
            String err = "";
            Cobranca.ArrumaFurosNaCadeia(ref err);
            txtErros.Text = err;
        }

        void checaBaixaInput()
        {
            String texto = Convert.ToString(
                LocatorHelper.Instance.ExecuteScalar("select retornoinput_texto from retornoinput where retornoinput_id=834",
                null, null));

            txtErros.Text = texto;
        }

        /////////////////////////////////////////////////////////////////////////////////////////////////

        void ativar()
        {
            DataTable dt = LocatorHelper.Instance.ExecuteQuery("select * from ____ativar where obs is null", "result").Tables[0];

            PersistenceManager pm = new PersistenceManager();
            pm.BeginTransactionContext();

            try
            {
                int aux = 0; Contrato contrato = null;
                foreach (DataRow row in dt.Rows)
                {
                    aux = Convert.ToInt32(LocatorHelper.Instance.ExecuteScalar("select count(*) from contrato where contrato_numero='" + toString(row["Proposta"]) + "'", null, null, pm));

                    if (aux == 0)
                        NonQueryHelper.Instance.ExecuteNonQuery("update ____ativar set obs='nao localizado' where id=" + row["id"], pm);
                    else if (aux > 2)
                        NonQueryHelper.Instance.ExecuteNonQuery("update ____ativar set obs='mais de um contrato localizado' where id=" + row["id"], pm);
                    else
                    {
                        contrato = new Contrato();
                        try
                        {
                            contrato.ID = LocatorHelper.Instance.ExecuteScalar("select contrato_id from contrato where contrato_numero='" + row["Proposta"] + "'", null, null, pm);
                        }
                        catch (Exception ex)
                        {
                            NonQueryHelper.Instance.ExecuteNonQuery("update ____ativar set obs='erro' where id=" + row["id"], pm);
                            continue;
                        }
                        pm.Load(contrato);

                        if (contrato.Inativo || contrato.Cancelado)
                            NonQueryHelper.Instance.ExecuteNonQuery("update ____ativar set obs='ok1' where id=" + row["id"], pm);
                        else
                            NonQueryHelper.Instance.ExecuteNonQuery("update ____ativar set obs='ok2' where id=" + row["id"], pm);

                        contrato.Inativo = false; contrato.Cancelado = false; contrato.Rascunho = false;
                        contrato.DataCancelamento = DateTime.MinValue;

                        if (!String.IsNullOrEmpty(contrato.Obs))
                            contrato.Obs = String.Concat(contrato.Obs, Environment.NewLine, "Reativado automaticamente em ", DateTime.Now.ToString("dd/MM/yyyy HH:mm"));
                        else
                            contrato.Obs = String.Concat("Reativado automaticamente em ", DateTime.Now.ToString("dd/MM/yyyy HH:mm"));
                        pm.Save(contrato);
                    }
                }

                pm.Commit();
            }
            catch (Exception ex)
            {
                pm.Rollback();
                throw;
            }
            finally
            {
                pm.Dispose();
            }
        }

        #region cópia de contratos adm (tabela de valor, calendario, planos)

        void AtribuiTabelaValor_GRP49_DIX()
        {
            PersistenceManager pm = new PersistenceManager();
            pm.IsoLevel = IsolationLevel.ReadUncommitted;
            pm.BeginTransactionContext();

            try
            {
                TabelaValor tabela = new TabelaValor(939);
                pm.Load(tabela);
                IList<TabelaValorItem> itens = TabelaValorItem.CarregarPorTabela(tabela.ID, pm);

                Taxa taxa = Taxa.CarregarPorTabela(tabela.ID, pm);

                IList<ContratoADM> contratos = LocatorHelper.Instance.ExecuteQuery<ContratoADM>("select contratoadm_id, contratoadm_descricao from contratoadm  where contratoadm_id > 414 and contratoadm_operadoraId=17 and contratoadm_descricao like '%DIX%'", typeof(ContratoADM), pm);

                Plano plano = null;

                IList<Plano> planos = Plano.CarregarPorContratoID(tabela.ContratoID);

                foreach (ContratoADM contrato in contratos)
                {
                    NonQueryHelper.Instance.ExecuteNonQuery("delete from taxa where taxa_tabelavalorid in (select tabelavalor_id from tabela_valor where tabelavalor_contratoId=" + contrato.ID + ")", pm);
                    NonQueryHelper.Instance.ExecuteNonQuery("delete from tabela_valor_item where tabelavaloritem_tabelaid in (select tabelavalor_id from tabela_valor where tabelavalor_contratoId=" + contrato.ID + ")", pm);
                    NonQueryHelper.Instance.ExecuteNonQuery("delete from tabela_valor where tabelavalor_contratoid=" + contrato.ID, pm);

                    tabela.ID = null;
                    tabela.ContratoID = contrato.ID;
                    pm.Save(tabela);

                    taxa.ID = null;
                    taxa.TabelaValorID = tabela.ID;
                    pm.Save(taxa);

                    NonQueryHelper.Instance.ExecuteNonQuery("delete from plano where plano_contratoID=" + contrato.ID, pm);
                    foreach (Plano _plano in planos)
                    {
                        _plano.ID = null;
                        _plano.ContratoID = contrato.ID;
                        pm.Save(_plano);
                    }

                    foreach (TabelaValorItem item in itens)
                    {
                        plano = new Plano(item.PlanoID);
                        pm.Load(plano);
                        plano.ID = LocatorHelper.Instance.ExecuteScalar("select plano_id from plano where plano_descricao='" + plano.Descricao + "' and plano_contratoId=" + contrato.ID, null, null, pm);

                        item.ID = null;
                        item.PlanoID = plano.ID;
                        item.TabelaID = tabela.ID;
                        pm.Save(item);
                    }
                }

                pm.Commit();
            }
            catch
            {
                pm.Rollback();
            }
            finally
            {
                pm.Dispose();
            }
        }

        /************************************ MEDIAL *************************************************/

        void AtribuiTabelaValor_GRP49_VIG01_MEDIAL()
        {
            PersistenceManager pm = new PersistenceManager();
            pm.IsoLevel = IsolationLevel.ReadUncommitted;
            pm.BeginTransactionContext();

            try
            {
                TabelaValor tabela = new TabelaValor(938); //---//---
                pm.Load(tabela);
                IList<TabelaValorItem> itens = TabelaValorItem.CarregarPorTabela(tabela.ID, pm);

                Taxa taxa = Taxa.CarregarPorTabela(tabela.ID, pm);

                IList<ContratoADM> contratos = LocatorHelper.Instance.ExecuteQuery<ContratoADM>("select contratoadm_id, contratoadm_descricao from contratoadm  where contratoadm_id > 751 and contratoadm_descricao like '% 01%' and contratoadm_operadoraId=17 and contratoadm_descricao like '%MEDIAL%'", typeof(ContratoADM), pm);

                Plano plano = null;

                IList<Plano> planos = Plano.CarregarPorContratoID(tabela.ContratoID);

                foreach (ContratoADM contrato in contratos)
                {
                    if (Convert.ToInt32(contrato.ID) == 751) { continue; } //modelo

                    NonQueryHelper.Instance.ExecuteNonQuery("delete from taxa where taxa_tabelavalorid in (select tabelavalor_id from tabela_valor where tabelavalor_contratoId=" + contrato.ID + ")", pm);
                    NonQueryHelper.Instance.ExecuteNonQuery("delete from tabela_valor_item where tabelavaloritem_tabelaid in (select tabelavalor_id from tabela_valor where tabelavalor_contratoId=" + contrato.ID + ")", pm);
                    NonQueryHelper.Instance.ExecuteNonQuery("delete from tabela_valor where tabelavalor_contratoid=" + contrato.ID, pm);

                    tabela.ID = null;
                    tabela.ContratoID = contrato.ID;
                    pm.Save(tabela);

                    taxa.ID = null;
                    taxa.TabelaValorID = tabela.ID;
                    pm.Save(taxa);

                    NonQueryHelper.Instance.ExecuteNonQuery("delete from plano where plano_contratoID=" + contrato.ID, pm);
                    foreach (Plano _plano in planos)
                    {
                        _plano.ID = null;
                        _plano.ContratoID = contrato.ID;
                        pm.Save(_plano);
                    }

                    foreach (TabelaValorItem item in itens)
                    {
                        plano = new Plano(item.PlanoID);
                        pm.Load(plano);
                        plano.ID = LocatorHelper.Instance.ExecuteScalar("select plano_id from plano where plano_descricao='" + plano.Descricao + "' and plano_contratoId=" + contrato.ID, null, null, pm);

                        item.ID = null;
                        item.PlanoID = plano.ID;
                        item.TabelaID = tabela.ID;
                        pm.Save(item);
                    }
                }

                pm.Commit();
            }
            catch
            {
                pm.Rollback();
            }
            finally
            {
                pm.Dispose();
            }
        }

        void AtribuiTabelaValor_GRP49_VIG15_MEDIAL()
        {
            PersistenceManager pm = new PersistenceManager();
            pm.IsoLevel = IsolationLevel.ReadUncommitted;
            pm.BeginTransactionContext();

            try
            {
                TabelaValor tabela = new TabelaValor(938); //---//---
                pm.Load(tabela);
                IList<TabelaValorItem> itens = TabelaValorItem.CarregarPorTabela(tabela.ID, pm);

                Taxa taxa = Taxa.CarregarPorTabela(tabela.ID, pm);

                IList<ContratoADM> contratos = LocatorHelper.Instance.ExecuteQuery<ContratoADM>("select contratoadm_id, contratoadm_descricao from contratoadm  where contratoadm_id > 751 and contratoadm_descricao like '% 15%' and contratoadm_operadoraId=17 and contratoadm_descricao like '%MEDIAL%'", typeof(ContratoADM), pm);

                Plano plano = null;

                IList<Plano> planos = Plano.CarregarPorContratoID(tabela.ContratoID);

                foreach (ContratoADM contrato in contratos)
                {
                    if (Convert.ToInt32(contrato.ID) == 751) { continue; } //modelo

                    NonQueryHelper.Instance.ExecuteNonQuery("delete from taxa where taxa_tabelavalorid in (select tabelavalor_id from tabela_valor where tabelavalor_contratoId=" + contrato.ID + ")", pm);
                    NonQueryHelper.Instance.ExecuteNonQuery("delete from tabela_valor_item where tabelavaloritem_tabelaid in (select tabelavalor_id from tabela_valor where tabelavalor_contratoId=" + contrato.ID + ")", pm);
                    NonQueryHelper.Instance.ExecuteNonQuery("delete from tabela_valor where tabelavalor_contratoid=" + contrato.ID, pm);

                    tabela.ID = null;
                    tabela.ContratoID = contrato.ID;
                    pm.Save(tabela);

                    taxa.ID = null;
                    taxa.TabelaValorID = tabela.ID;
                    pm.Save(taxa);

                    NonQueryHelper.Instance.ExecuteNonQuery("delete from plano where plano_contratoID=" + contrato.ID, pm);
                    foreach (Plano _plano in planos)
                    {
                        _plano.ID = null;
                        _plano.ContratoID = contrato.ID;
                        pm.Save(_plano);
                    }

                    foreach (TabelaValorItem item in itens)
                    {
                        plano = new Plano(item.PlanoID);
                        pm.Load(plano);
                        plano.ID = LocatorHelper.Instance.ExecuteScalar("select plano_id from plano where plano_descricao='" + plano.Descricao + "' and plano_contratoId=" + contrato.ID, null, null, pm);

                        item.ID = null;
                        item.PlanoID = plano.ID;
                        item.TabelaID = tabela.ID;
                        pm.Save(item);
                    }
                }

                pm.Commit();
            }
            catch
            {
                pm.Rollback();
            }
            finally
            {
                pm.Dispose();
            }
        }

        //void AtribuiTabelaValor_GRP49_VIG15_MEDIAL()
        //{
        //    PersistenceManager pm = new PersistenceManager();
        //    pm.IsoLevel = IsolationLevel.ReadUncommitted;
        //    pm.BeginTransactionContext();

        //    try
        //    {
        //        TabelaValor tabela = new TabelaValor(937);
        //        pm.Load(tabela);
        //        IList<TabelaValorItem> itens = TabelaValorItem.CarregarPorTabela(tabela.ID, pm);

        //        Taxa taxa = Taxa.CarregarPorTabela(tabela.ID, pm);

        //        IList<ContratoADM> contratos = LocatorHelper.Instance.ExecuteQuery<ContratoADM>("select contratoadm_id, contratoadm_descricao from contratoadm  where contratoadm_id > 413 and contratoadm_descricao like '% 15%' and contratoadm_operadoraId=17 and contratoadm_descricao like '%MEDIAL%' order by contratoadm_id", typeof(ContratoADM), pm);

        //        Plano plano = null;

        //        IList<Plano> planos = Plano.CarregarPorContratoID(tabela.ContratoID);

        //        foreach (ContratoADM contrato in contratos)
        //        {
        //            tabela.ID = null;
        //            tabela.ContratoID = contrato.ID;
        //            pm.Save(tabela);

        //            taxa.ID = null;
        //            taxa.TabelaValorID = tabela.ID;
        //            pm.Save(taxa);

        //            foreach (Plano _plano in planos)
        //            {
        //                _plano.ID = null;
        //                _plano.ContratoID = contrato.ID;
        //                pm.Save(_plano);
        //            }

        //            foreach (TabelaValorItem item in itens)
        //            {
        //                plano = new Plano(item.PlanoID);
        //                pm.Load(plano);
        //                plano.ID = LocatorHelper.Instance.ExecuteScalar("select plano_id from plano where plano_descricao='" + plano.Descricao + "' and plano_contratoId=" + contrato.ID, null, null, pm);

        //                item.ID = null;
        //                item.PlanoID = plano.ID;
        //                item.TabelaID = tabela.ID;
        //                pm.Save(item);
        //            }
        //        }

        //        pm.Commit();
        //    }
        //    catch
        //    {
        //        pm.Rollback();
        //    }
        //    finally
        //    {
        //        pm.Dispose();
        //    }
        //}

        /*********************************************************************************************/

        /*********************************** AMIL ****************************************************/

        void AtribuiTabelaValor_GRP49_VIG15_AMIL()
        {
            PersistenceManager pm = new PersistenceManager();
            pm.IsoLevel = IsolationLevel.ReadUncommitted;
            pm.BeginTransactionContext();

            try
            {
                TabelaValor tabela = new TabelaValor(944);
                pm.Load(tabela);
                IList<TabelaValorItem> itens = TabelaValorItem.CarregarPorTabela(tabela.ID, pm);

                Taxa taxa = Taxa.CarregarPorTabela(tabela.ID, pm);

                IList<ContratoADM> contratos = LocatorHelper.Instance.ExecuteQuery<ContratoADM>("select contratoadm_id, contratoadm_descricao from contratoadm  where contratoadm_id > 413 and contratoadm_descricao like '% 15%' and contratoadm_operadoraId=17 and contratoadm_descricao like '%AMIL%' order by contratoadm_id", typeof(ContratoADM), pm);

                Plano plano = null;

                IList<Plano> planos = Plano.CarregarPorContratoID(tabela.ContratoID);

                foreach (ContratoADM contrato in contratos)
                {
                    NonQueryHelper.Instance.ExecuteNonQuery("delete from taxa where taxa_tabelavalorid in (select tabelavalor_id from tabela_valor where tabelavalor_contratoId=" + contrato.ID + ")", pm);
                    NonQueryHelper.Instance.ExecuteNonQuery("delete from tabela_valor_item where tabelavaloritem_tabelaid in (select tabelavalor_id from tabela_valor where tabelavalor_contratoId=" + contrato.ID + ")", pm);
                    NonQueryHelper.Instance.ExecuteNonQuery("delete from tabela_valor where tabelavalor_contratoid=" + contrato.ID, pm);

                    tabela.ID = null;
                    tabela.ContratoID = contrato.ID;
                    pm.Save(tabela);

                    taxa.ID = null;
                    taxa.TabelaValorID = tabela.ID;
                    pm.Save(taxa);

                    NonQueryHelper.Instance.ExecuteNonQuery("delete from plano where plano_contratoID=" + contrato.ID, pm);
                    foreach (Plano _plano in planos)
                    {
                        _plano.ID = null;
                        _plano.ContratoID = contrato.ID;
                        pm.Save(_plano);
                    }

                    foreach (TabelaValorItem item in itens)
                    {
                        plano = new Plano(item.PlanoID);
                        pm.Load(plano);
                        plano.ID = LocatorHelper.Instance.ExecuteScalar("select plano_id from plano where plano_descricao='" + plano.Descricao + "' and plano_contratoId=" + contrato.ID, null, null, pm);

                        item.ID = null;
                        item.PlanoID = plano.ID;
                        item.TabelaID = tabela.ID;
                        pm.Save(item);
                    }
                }

                pm.Commit();
            }
            catch
            {
                pm.Rollback();
            }
            finally
            {
                pm.Dispose();
            }
        }

        void AtribuiTabelaValor_GRP49_VIG01_AMIL()
        {
            PersistenceManager pm = new PersistenceManager();
            pm.IsoLevel = IsolationLevel.ReadUncommitted;
            pm.BeginTransactionContext();

            try
            {
                TabelaValor tabela = new TabelaValor(937);
                pm.Load(tabela);
                IList<TabelaValorItem> itens = TabelaValorItem.CarregarPorTabela(tabela.ID, pm);

                Taxa taxa = Taxa.CarregarPorTabela(tabela.ID, pm);

                //IList<ContratoADM> contratos = LocatorHelper.Instance.ExecuteQuery<ContratoADM>("select contratoadm_id, contratoadm_descricao from contratoadm  where contratoadm_id > 413 and contratoadm_descricao like '% 15%'", typeof(ContratoADM), pm);
                //IList<ContratoADM> contratos = LocatorHelper.Instance.ExecuteQuery<ContratoADM>("select contratoadm_id, contratoadm_descricao from contratoadm  where contratoadm_id=413", typeof(ContratoADM), pm);
                IList<ContratoADM> contratos = LocatorHelper.Instance.ExecuteQuery<ContratoADM>("select contratoadm_id, contratoadm_descricao from contratoadm  where contratoadm_id in (788,794,806,812,818,824,830,836,842,848,854,860)", typeof(ContratoADM), pm);

                Plano plano = null;

                IList<Plano> planos = Plano.CarregarPorContratoID(tabela.ContratoID);

                foreach (ContratoADM contrato in contratos)
                {
                    NonQueryHelper.Instance.ExecuteNonQuery("delete from taxa where taxa_tabelavalorid in (select tabelavalor_id from tabela_valor where tabelavalor_contratoId=" + contrato.ID + ")", pm);
                    NonQueryHelper.Instance.ExecuteNonQuery("delete from tabela_valor_item where tabelavaloritem_tabelaid in (select tabelavalor_id from tabela_valor where tabelavalor_contratoId=" + contrato.ID + ")", pm);
                    NonQueryHelper.Instance.ExecuteNonQuery("delete from tabela_valor where tabelavalor_contratoid=" + contrato.ID, pm);

                    tabela.ID = null;
                    tabela.ContratoID = contrato.ID;
                    pm.Save(tabela);

                    taxa.ID = null;
                    taxa.TabelaValorID = tabela.ID;
                    pm.Save(taxa);

                    NonQueryHelper.Instance.ExecuteNonQuery("delete from plano where plano_contratoID=" + contrato.ID, pm);
                    foreach (Plano _plano in planos)
                    {
                        _plano.ID = null;
                        _plano.ContratoID = contrato.ID;
                        pm.Save(_plano);
                    }

                    foreach (TabelaValorItem item in itens)
                    {
                        plano = new Plano(item.PlanoID);
                        pm.Load(plano);
                        plano.ID = LocatorHelper.Instance.ExecuteScalar("select plano_id from plano where plano_descricao='" + plano.Descricao + "' and plano_contratoId=" + contrato.ID, null, null, pm);

                        item.ID = null;
                        item.PlanoID = plano.ID;
                        item.TabelaID = tabela.ID;
                        pm.Save(item);
                    }
                }

                pm.Commit();
            }
            catch
            {
                pm.Rollback();
            }
            finally
            {
                pm.Dispose();
            }
        }

        /*********************************************************************************************/

        void AtribuiCalendario_V15()
        {
            PersistenceManager pm = new PersistenceManager();
            pm.IsoLevel = IsolationLevel.ReadUncommitted;
            pm.BeginTransactionContext();

            try
            {
                CalendarioAdmissaoVigencia cav = new CalendarioAdmissaoVigencia(627);
                pm.Load(cav);
                IList<CalendarioVencimento> calVencto = CalendarioVencimento.CarregarTodos(cav.ID, pm);

                IList<ContratoADM> contratos = LocatorHelper.Instance.ExecuteQuery<ContratoADM>("select contratoadm_id, contratoadm_descricao from contratoadm  where contratoadm_id > 413 and contratoadm_descricao like '% 15%'", typeof(ContratoADM), pm);

                foreach (ContratoADM contrato in contratos)
                {
                    cav.ID = null;
                    cav.ContratoID = contrato.ID;
                    pm.Save(cav);

                    calVencto[0].ID = null;
                    calVencto[0].CalendarioAdmissaoID = cav.ID;
                    pm.Save(calVencto[0]);
                }

                pm.Commit();
            }
            catch
            {
                pm.Rollback();
            }
            finally
            {
                pm.Dispose();
            }
        }

        void AtribuiCalendario_V01()
        {
            PersistenceManager pm = new PersistenceManager();
            pm.IsoLevel = IsolationLevel.ReadUncommitted;
            pm.BeginTransactionContext();

            try
            {
                CalendarioAdmissaoVigencia cav = new CalendarioAdmissaoVigencia(628);
                pm.Load(cav);
                IList<CalendarioVencimento> calVencto = CalendarioVencimento.CarregarTodos(cav.ID, pm);

                IList<ContratoADM> contratos = LocatorHelper.Instance.ExecuteQuery<ContratoADM>("select contratoadm_id, contratoadm_descricao from contratoadm  where contratoadm_id > 414 and contratoadm_descricao like '% 01%'", typeof(ContratoADM), pm);

                foreach (ContratoADM contrato in contratos)
                {
                    cav.ID = null;
                    cav.ContratoID = contrato.ID;
                    pm.Save(cav);

                    calVencto[0].ID = null;
                    calVencto[0].CalendarioAdmissaoID = cav.ID;
                    pm.Save(calVencto[0]);
                }

                pm.Commit();
            }
            catch
            {
                pm.Rollback();
            }
            finally
            {
                pm.Dispose();
            }
        }

        /*********************************************************************************************/

        /******************************** CÓPIA ******************************************************/

        void CopiaCalendario_Plano_TabelaValor(Object contratoAdmID_De, Object contratoAdmID_Para)
        {
            PersistenceManager pm = new PersistenceManager();
            pm.IsoLevel = IsolationLevel.ReadUncommitted;
            pm.BeginTransactionContext();

            try
            {
                IList<CalendarioAdmissaoVigencia> cals = CalendarioAdmissaoVigencia.CarregarPorContrato(contratoAdmID_De, pm);
                CalendarioAdmissaoVigencia cav = cals[cals.Count - 1];
                IList<CalendarioVencimento> calVencto = CalendarioVencimento.CarregarTodos(cav.ID, pm);

                IList<TabelaValor> tabelas = TabelaValor.CarregarPorContratoID(contratoAdmID_De, pm);
                TabelaValor tabela = tabelas[0];
                IList<TabelaValorItem> itens = TabelaValorItem.CarregarPorTabela(tabela.ID, pm);
                Taxa taxa = Taxa.CarregarPorTabela(tabela.ID, pm);

                Plano plano = null;
                IList<Plano> planos = Plano.CarregarPorContratoID(tabela.ContratoID);

                IList<ContratoADM> contratos = LocatorHelper.Instance.ExecuteQuery<ContratoADM>("select contratoadm_id, contratoadm_descricao from contratoadm  where contratoadm_id=" + contratoAdmID_Para, typeof(ContratoADM), pm);

                foreach (ContratoADM contrato in contratos)
                {
                    NonQueryHelper.Instance.ExecuteNonQuery("delete from taxa where taxa_tabelavalorid in (select tabelavalor_id from tabela_valor where tabelavalor_contratoId=" + contrato.ID + ")", pm);
                    NonQueryHelper.Instance.ExecuteNonQuery("delete from tabela_valor_item where tabelavaloritem_tabelaid in (select tabelavalor_id from tabela_valor where tabelavalor_contratoId=" + contrato.ID + ")", pm);
                    NonQueryHelper.Instance.ExecuteNonQuery("delete from tabela_valor where tabelavalor_contratoid=" + contrato.ID, pm);

                    tabela.ID = null;
                    tabela.ContratoID = contrato.ID;
                    pm.Save(tabela);

                    taxa.ID = null;
                    taxa.TabelaValorID = tabela.ID;
                    pm.Save(taxa);

                    NonQueryHelper.Instance.ExecuteNonQuery("delete from plano where plano_contratoID=" + contrato.ID, pm);
                    foreach (Plano _plano in planos)
                    {
                        _plano.ID = null;
                        _plano.ContratoID = contrato.ID;
                        pm.Save(_plano);
                    }

                    foreach (TabelaValorItem item in itens)
                    {
                        plano = new Plano(item.PlanoID);
                        pm.Load(plano);
                        plano.ID = LocatorHelper.Instance.ExecuteScalar("select plano_id from plano where plano_descricao='" + plano.Descricao + "' and plano_contratoId=" + contrato.ID, null, null, pm);

                        item.ID = null;
                        item.PlanoID = plano.ID;
                        item.TabelaID = tabela.ID;
                        pm.Save(item);
                    }

                    #region calendario

                    NonQueryHelper.Instance.ExecuteNonQuery("delete from calendarioVencimento where calendariovencto_calendarioAdmissaoId in (select calendario_id from calendario where calendario_contratoid=" + contrato.ID + ")", pm);
                    NonQueryHelper.Instance.ExecuteNonQuery("delete from calendario where calendario_contratoid=" + contrato.ID, pm);

                    cav.ID = null;
                    cav.ContratoID = contrato.ID;
                    pm.Save(cav);

                    calVencto[0].ID = null;
                    calVencto[0].CalendarioAdmissaoID = cav.ID;
                    pm.Save(calVencto[0]);

                    #endregion
                }

                pm.Commit();
                txtErros.Text = "OK";
            }
            catch
            {
                pm.Rollback();
            }
            finally
            {
                pm.Dispose();
            }
        }

        /*********************************************************************************************/

        #endregion

        public void restauraCobrancasDeletadasPorEngano()
        {
            IList<CobrancaTemp> cobrancasRestore = CobrancaTemp.CarregaTodasQueNaoExistam();

            if (cobrancasRestore == null) { return; }

            PersistenceManager pm = new PersistenceManager();
            pm.BeginTransactionContext();

            foreach (CobrancaTemp rest in cobrancasRestore)
            {
                try
                {
                    #region preenche instancia

                    Cobranca cob = new Cobranca(rest.ID);
                    cob.ArquivoIDUltimoEnvio = rest.ArquivoIDUltimoEnvio;
                    cob.BeneficiarioEmail = rest.BeneficiarioEmail;
                    cob.BeneficiarioId = rest.BeneficiarioId;
                    cob.Cancelada = rest.Cancelada;
                    cob.Carteira = rest.Carteira;
                    cob.CobrancaRefID = rest.CobrancaRefID;
                    cob.ComissaoPaga = rest.ComissaoPaga;
                    cob.ComposicaoBeneficiarioID = rest.ComposicaoBeneficiarioID;
                    //cob.ComposicaoResumo = rest.ComposicaoResumo;
                    cob.ComposicaoTipo = rest.ComposicaoTipo;
                    cob.ComposicaoValor = rest.ComposicaoValor;
                    cob.ContratoCodCobranca = rest.ContratoCodCobranca;
                    cob.ContratoEnderecoCobrancaID = rest.ContratoEnderecoCobrancaID;
                    cob.ContratoNumero = rest.ContratoNumero;
                    cob.ContratoTitularNome = rest.ContratoTitularNome;
                    cob.Criterio = rest.Criterio;
                    cob.DataCriacao = rest.DataCriacao;
                    cob.DataPgto = rest.DataPgto;
                    cob.DataVencimento = rest.DataVencimento;
                    cob.DataVencimentoForcada = rest.DataVencimentoForcada;
                    cob.DataVencimentoISENCAOJURO = rest.DataVencimentoISENCAOJURO;
                    cob.EstipulanteNome = rest.EstipulanteNome;
                    cob.FilialNome = rest.FilialNome;
                    cob.NossoNumero = rest.NossoNumero;
                    cob.OperadoraID = rest.OperadoraID;
                    cob.OperadoraNome = rest.OperadoraNome;
                    cob.Pago = rest.Pago;
                    cob.Parcela = rest.Parcela;
                    cob.PropostaID = rest.PropostaID;
                    //cob.strDataPago = rest.strDataPago;
                    //cob.strEnviado = rest.strEnviado;
                    //cob.STRNossoNumero = rest.STRNossoNumero;
                    //cob.strPago = rest.strPago;
                    cob.Tipo = rest.Tipo;
                    cob.TipoTemp = 101; // rest.TipoTemp;
                    cob.Valor = rest.Valor;
                    cob.ValorNominal = rest.ValorNominal;
                    cob.ValorPgto = rest.ValorPgto;

                    pm.Save(cob);
                    cob = null;

                    #endregion
                }
                catch (Exception ex)
                {
                    if (ex.Message.ToUpper().IndexOf("DUPLICATE") > -1) { continue; }
                    pm.Rollback();
                    MessageBox.Show(ex.Message);
                    return;
                }
            }

            pm.Commit();

        }

        String de_x_para_localiza(DataTable dt, String nossonumeroErrado)
        {
            String aux = "";
            foreach (DataRow row in dt.Rows)
            {
                aux = Convert.ToString(row["Nossonum"]).Split('-')[0].Replace("175/", "");
                if (aux == nossonumeroErrado)
                {
                    return Convert.ToString(row["NossonumCorreto"]);
                }
            }

            return null;
        }
        /// <summary>
        /// 
        /// </summary>
        void de_x_para_nossonumeroerrado()
        {
            String[] files = Directory.GetFiles(@"C:\arquivos\nossonumero", "*.ret", SearchOption.TopDirectoryOnly);
            String[] content = null;
            String nossoNumeroErrado = "", nossoNumeroCorreto = "", codigoRegistro = "";
            Cobranca cobranca = null;
            Decimal valorBruto = 0;
            Taxa taxa = null;
            Contrato contrato = null;
            IList<TabelaValor> tabela = null;
            System.Globalization.CultureInfo cinfo = new System.Globalization.CultureInfo("pt-Br");

            DataTable dt = LocatorHelper.Instance.ExecuteQuery("select * from ___boletomail", "result").Tables[0];
            txtErros.Text = "";

            PersistenceManager pm = new PersistenceManager();
            pm.IsoLevel = IsolationLevel.ReadUncommitted;
            pm.BeginTransactionContext();

            try
            {
                foreach (String file in files)
                {
                    content = File.ReadAllLines(file);

                    foreach (String line in content)
                    {
                        if (line == null || line.Trim() == "") { continue; }
                        codigoRegistro = line.Substring(0, 1);
                        if (codigoRegistro == "0" || codigoRegistro == "9") { continue; }

                        nossoNumeroErrado = line.Substring(62, 8);

                        ///////////////////////////////////////////////////////////////////////////////////
                        ///////////// PARA ACHAR COBRANÇAS BAIXADAS POR ENGANDO
                        ///////////////////////////////////////////////////////////////////////////////////
                        //if (String.IsNullOrEmpty(nossoNumeroErrado) ||
                        //    Convert.ToString(Convert.ToInt64(nossoNumeroErrado)).Length < 7)
                        //{
                        //    try
                        //    {
                        //        Cobranca baixadaerr = new Cobranca(Convert.ToInt64(nossoNumeroErrado));
                        //        baixadaerr.Carregar();
                        //        if (baixadaerr.Pago && baixadaerr.DataPgto.Year == 2013)
                        //        {
                        //            baixadaerr.Pago = false;
                        //            //baixadaerr.Salvar();
                        //            if (txtErros.Text.Length > 0) { txtErros.Text += ","; }
                        //            txtErros.Text += Convert.ToInt64(baixadaerr.ID).ToString();
                        //        }
                        //    }
                        //    catch
                        //    {
                        //        continue;
                        //    }
                        //    continue;
                        //}
                        ///////////////////////////////////////////////////////////////////////////////////

                        nossoNumeroCorreto = de_x_para_localiza(dt, nossoNumeroErrado);
                        if (nossoNumeroCorreto == null)
                        {
                            if (txtErros.Text.Length > 0) { txtErros.Text += ","; }
                            txtErros.Text += "*" + Convert.ToInt64(nossoNumeroErrado).ToString(); // +Environment.NewLine;

                            Application.DoEvents();
                            continue;

                            #region comentado
                            ////baixa cobrança
                            //cobranca = new Cobranca(nossoNumeroErrado);
                            //pm.Load(cobranca);

                            //if (cobranca.Pago) { continue; }

                            //contrato = new Contrato(cobranca.PropostaID);
                            //pm.Load(contrato);

                            //cobranca.DataPgto = CToDateTime(line.Substring(110, 6), 0, 0, 0, true);
                            //cobranca.ValorPgto = Convert.ToDecimal(line.Substring(254, 12), cinfo) / 100;

                            //tabela = TabelaValor.CarregarTabelaVigente(contrato.ContratoADMID, contrato.Admissao, cobranca.DataVencimento, pm);
                            //if (tabela != null)
                            //    taxa = Taxa.CarregarPorTabela(tabela[0].ID, pm);
                            //else
                            //    taxa = null;

                            //valorBruto = cobranca.ValorPgto;
                            //if (taxa != null && !taxa.Embutido) { valorBruto -= taxa.ValorEmbutido; }

                            //cobranca.Pago = true;
                            //cobranca.DataBaixaAutomatica = DateTime.Now;
                            //cobranca.ValorPgto = valorBruto;
                            //pm.Save(cobranca);
                            #endregion
                        }
                        else
                        {
                            //baixa cobrança
                            cobranca = new Cobranca(nossoNumeroCorreto);
                            pm.Load(cobranca);

                            //if (String.IsNullOrEmpty(nossoNumeroErrado) ||
                            //Convert.ToString(Convert.ToInt64(nossoNumeroErrado)).Length >= 7)
                            //{
                            //    // ja entra no if acima, quando nao eh encontrado o nosso numero correto
                            //    //nosso numero ok
                            //    continue;
                            //}

                            if (txtErros.Text.Length > 0) { txtErros.Text += ","; }
                            txtErros.Text += Convert.ToInt64(cobranca.ID).ToString();
                            Application.DoEvents();

                            if (cobranca.Pago) { continue; }

                            contrato = new Contrato(cobranca.PropostaID);
                            pm.Load(contrato);

                            cobranca.Pago = true;
                            cobranca.DataPgto = CToDateTime(line.Substring(110, 6), 0, 0, 0, true);
                            cobranca.ValorPgto = Convert.ToDecimal(line.Substring(254, 12), cinfo) / 100;

                            tabela = TabelaValor.CarregarTabelaVigente(contrato.ContratoADMID, contrato.Admissao, cobranca.DataVencimento, pm);
                            if (tabela != null)
                                taxa = Taxa.CarregarPorTabela(tabela[0].ID, pm);
                            else
                                taxa = null;

                            valorBruto = cobranca.ValorPgto;
                            if (taxa != null && !taxa.Embutido) { valorBruto -= taxa.ValorEmbutido; }

                            cobranca.Pago = true;
                            cobranca.ValorPgto = valorBruto;
                            pm.Save(cobranca);

                            IList<CobrancaBaixa> baixas = CobrancaBaixa.CarregarTodos(cobranca.ID, pm);
                            if (baixas == null)
                            {
                                CobrancaBaixa baixa = new CobrancaBaixa();
                                baixa.BaixaFinanceira = true;
                                baixa.CobrancaID = cobranca.ID;
                                baixa.Data = DateTime.Now;
                                baixa.MotivoID = 5;
                                baixa.Obs = "2a VIA COM NOSSO NUMERO ERRADO, PAGAMENTO LOCALIZADO E BAIXADO EM ROTINA";
                                baixa.Tipo = 0;
                                baixa.UsuarioID = 1;
                                pm.Save(baixa);
                            }
                        }
                    }
                }

                pm.Commit();
            }
            catch (Exception ex)
            {
                pm.Rollback();
                throw ex;
            }
            finally
            {
                pm.Dispose();
            }
        }

        void localizaContratoEmArquivosDeCombranca()
        {
            String[] files = Directory.GetFiles(@"C:\arquivos", "*.dat");
            String[] content = null;
            foreach (String file in files)
            {
                content = File.ReadAllLines(file);
                foreach (String line in content)
                {
                    //if(line.IndexOf("042511557") > -1) 
                    if (line.IndexOf("042516192") > -1) //if(line.IndexOf("04166919") > -1 || line.IndexOf("04074651") > -1 || line.IndexOf("03987398") > -1)
                    {
                        if (txtErros.Text == "")
                            txtErros.Text = String.Concat("[", Path.GetFileName(file), "] ", ""); //line);
                        else
                            txtErros.Text = String.Concat(txtErros.Text, Environment.NewLine, "[", Path.GetFileName(file), "] ", ""); //line);

                        Application.DoEvents();
                    }
                }
            }

            MessageBox.Show("OK");
        }

        /////////////////////////////////////////////////////////////////////////////////////////////////

        /// <summary>
        /// Usa os dados de nossonumero zerado do boleto mail para tentar encontrar nos arquivos de baixa as 
        /// cobranças correspondentes.
        /// Lê os arquivos de retorno em disco.
        /// </summary>
        void baixaCobrancasZeradas()
        {
            //RetornoInput input = new RetornoInput();
            //input.ID = 612;
            //input.Carregar();
            //String a = input.Texto;
            //return;

            int i = 0;
            String[] arrLinhas = null;
            String rootPath = @"C:\Users\matheussi\Desktop\temp_cob_padrao", linhaAtual = "", codigoRegistro = "", strDataVencimento = "";
            //String strvalor = "", strvalorPgto = "";
            String nossoNumero = "", temp = "";
            String[] arquivos = Directory.GetFiles(rootPath, "*.RET", SearchOption.TopDirectoryOnly);
            Decimal valor = 0, valorPgto = 0;
            DateTime DataPagto = DateTime.MinValue;
            System.Globalization.CultureInfo cinfo = new System.Globalization.CultureInfo("pt-Br");
            //DataRow[] result = null;

            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();

            DataTable zerados = null; //LocatorHelper.Instance.ExecuteQuery("select * from ___zerados_temp", "result", pm).Tables[0];

            int certo = 0;
            //String data1 = "10/02/2013";
            foreach (String arquivo in arquivos)
            {
                arrLinhas = File.ReadAllLines(arquivo); //arquivo.Split(new String[] { "\n" }, StringSplitOptions.RemoveEmptyEntries);
                for (i = 0; i < arrLinhas.Length; i++)
                {
                    linhaAtual = arrLinhas[i];
                    if (linhaAtual == null || linhaAtual.Trim() == "") { continue; }
                    codigoRegistro = linhaAtual.Substring(0, 1);
                    if (codigoRegistro == "0" || codigoRegistro == "9") { continue; }

                    //nossoNumero = linhaAtual.Substring(37, 16);   //UNIBANCO
                    nossoNumero = linhaAtual.Substring(62, 8);  //ITAU
                    temp = linhaAtual.Substring(62, 8);  //ITAU

                    if (Convert.ToInt64(nossoNumero) > 900) { continue; }

                    try
                    {
                        strDataVencimento = linhaAtual.Substring(146, 6);
                        DataPagto = CToDateTime(strDataVencimento, 23, 59, 59, true);
                    }
                    catch
                    {
                        continue;
                    }

                    valor = Convert.ToDecimal(linhaAtual.Substring(153, 12), cinfo) / 100;
                    valorPgto = Convert.ToDecimal(linhaAtual.Substring(254, 12), cinfo) / 100;

                    zerados = LocatorHelper.Instance.ExecuteQuery(
                        string.Concat("select nome, valordec,numdoc,vencimento, COUNT(*) as total from ___zerados_temp where cobrancaid is null and vencimento='" + DataPagto.ToString("dd/MM/yyyy") + "' and valordec='", valor.ToString("N2").Replace(".", "").Replace(",", "."), "' group by nome, valordec,numdoc,vencimento"),
                        "result").Tables[0];

                    if (zerados.Rows.Count == 1)
                    {
                        certo++;
                        setaBaixaCobrancasZeradas(pm, DataPagto, Convert.ToString(zerados.Rows[0]["nome"]), valor.ToString("N2"), Convert.ToString(zerados.Rows[0]["numdoc"]), DataPagto.ToString("dd/MM/yyyy"), valorPgto);
                    }

                    //zerados = LocatorHelper.Instance.ExecuteQuery(
                    //    string.Concat("select nome, valordec,numdoc,vencimento, COUNT(*) as total from ___zerados_temp where cobrancaid is null and vencimento='" + "10/01/2013" + "' and valordec='", valor.ToString("N2").Replace(".", "").Replace(",", "."), "' group by nome, valordec,numdoc,vencimento"), 
                    //    "result").Tables[0];

                    //if (zerados.Rows.Count == 1)
                    //{
                    //    certo++;
                    //    setaBaixaCobrancasZeradas(pm, DataPagto, Convert.ToString(zerados.Rows[0]["nome"]), valor.ToString("N2"), Convert.ToString(zerados.Rows[0]["numdoc"]), "10/01/2013", valorPgto);
                    //}
                    //else
                    //{
                    //    zerados = LocatorHelper.Instance.ExecuteQuery(
                    //        string.Concat("select nome,valordec,numdoc,vencimento, COUNT(*) as total from ___zerados_temp where cobrancaid is null and vencimento='25/01/2013' and valordec='", valor.ToString("N2").Replace(".", "").Replace(",", "."), "' group by nome, valordec,numdoc,vencimento"),
                    //        "result").Tables[0];

                    //    if (zerados.Rows.Count == 1)
                    //    {
                    //        certo++;
                    //        setaBaixaCobrancasZeradas(pm, DataPagto, Convert.ToString(zerados.Rows[0]["nome"]), valor.ToString("N2"), Convert.ToString(zerados.Rows[0]["numdoc"]), "25/01/2013", valorPgto);
                    //    }
                    //    else
                    //    {
                    //        zerados = LocatorHelper.Instance.ExecuteQuery(
                    //            string.Concat("select nome, valordec,numdoc,vencimento, COUNT(*) as total from ___zerados_temp where cobrancaid is null and vencimento='10/02/2013' and valordec='", valor.ToString("N2").Replace(".", "").Replace(",", "."), "' group by nome, valordec,numdoc,vencimento"),
                    //            "result").Tables[0];

                    //        if (zerados.Rows.Count == 1)
                    //        {
                    //            certo++;
                    //            setaBaixaCobrancasZeradas(pm, DataPagto, Convert.ToString(zerados.Rows[0]["nome"]), valor.ToString("N2"), Convert.ToString(zerados.Rows[0]["numdoc"]), "10/02/2013", valorPgto);
                    //        }
                    //        else
                    //        {
                    //            zerados = LocatorHelper.Instance.ExecuteQuery(
                    //                string.Concat("select nome, valordec,numdoc,vencimento, COUNT(*) as total from ___zerados_temp where cobrancaid is null and vencimento='25/02/2013' and valordec='", valor.ToString("N2").Replace(".", "").Replace(",", "."), "' group by nome, valordec,numdoc,vencimento"),
                    //                "result").Tables[0];

                    //            if (zerados.Rows.Count == 1)
                    //            {
                    //                certo++;
                    //                setaBaixaCobrancasZeradas(pm, DataPagto, Convert.ToString(zerados.Rows[0]["nome"]), valor.ToString("N2"), Convert.ToString(zerados.Rows[0]["numdoc"]), "25/02/2013", valorPgto);
                    //            }
                    //            else
                    //            {
                    //                zerados = LocatorHelper.Instance.ExecuteQuery(
                    //                    string.Concat("select nome, valordec,numdoc,vencimento, COUNT(*) as total from ___zerados_temp where cobrancaid is null and vencimento='10/03/2013' and valordec='", valor.ToString("N2").Replace(".", "").Replace(",", "."), "' group by nome, valordec,numdoc,vencimento"),
                    //                    "result").Tables[0];

                    //                if (zerados.Rows.Count == 1)
                    //                {
                    //                    certo++;
                    //                    setaBaixaCobrancasZeradas(pm, DataPagto, Convert.ToString(zerados.Rows[0]["nome"]), valor.ToString("N2"), Convert.ToString(zerados.Rows[0]["numdoc"]), "10/03/2013", valorPgto);
                    //                }
                    //            }
                    //        }
                    //    }
                    //}
                }
            }

            zerados.Dispose();
            pm.CloseSingleCommandInstance();
            pm.Dispose();
        }

        DateTime CToDateTime(String param6pos, Int32 hora, Int32 minunto, Int32 segundo, Boolean ddMMyy)
        {
            Int32 dia;
            Int32 mes;
            Int32 ano;

            if (ddMMyy)
            {
                dia = Convert.ToInt32(param6pos.Substring(0, 2));
                mes = Convert.ToInt32(param6pos.Substring(2, 2));
                ano = Convert.ToInt32(param6pos.Substring(4, 2));
            }
            else
            {
                ano = Convert.ToInt32(param6pos.Substring(0, 2));
                mes = Convert.ToInt32(param6pos.Substring(2, 2));
                dia = Convert.ToInt32(param6pos.Substring(4, 2));
            }

            if (ano >= 0 && ano <= 95)
                ano = Convert.ToInt32("20" + ano.ToString());
            else
                ano = Convert.ToInt32("19" + ano.ToString());

            DateTime data = new DateTime(ano, mes, dia, hora, minunto, segundo);
            return data;
        }
        void setaBaixaCobrancasZeradas(PersistenceManager pm, DateTime pagto, String nome, String valordec, String numdoc, String vencimento, Decimal valorpago)
        {
            String[] arrV = vencimento.Split('/');

            Object cobid = LocatorHelper.Instance.ExecuteScalar(
                string.Concat("select cobranca_id from cobranca ",
                "inner join contrato on contrato_id=cobranca_propostaid",
                " where day(cobranca_dataVencimento)=",
                arrV[0], " and month(cobranca_dataVencimento)=", arrV[1],
                " and year(cobranca_dataVencimento)=", arrV[2], " and cobranca_pago=0 and contrato_numero='",
                numdoc, "'"),
                null, null, pm);

            #region comentado
            //if (cobid == null || cobid == DBNull.Value)
            //{
            //    cobid = LocatorHelper.Instance.ExecuteScalar(
            //    string.Concat("select cobranca_id from cobranca ",
            //    "inner join contrato on contrato_id=cobranca_propostaid",
            //    " where day(cobranca_dataVencimento)=",
            //    25, " and month(cobranca_dataVencimento)=", 1,
            //    " and year(cobranca_dataVencimento)=", 2013, " and cobranca_pago=0 and contrato_numero='",
            //    numdoc, "'"),
            //    null, null, pm);
            //}

            //if (cobid == null || cobid == DBNull.Value)
            //{
            //    cobid = LocatorHelper.Instance.ExecuteScalar(
            //    string.Concat("select cobranca_id from cobranca ",
            //    "inner join contrato on contrato_id=cobranca_propostaid",
            //    " where day(cobranca_dataVencimento)=",
            //    10, " and month(cobranca_dataVencimento)=", 1,
            //    " and year(cobranca_dataVencimento)=", 2013, " and cobranca_pago=0 and contrato_numero='0",
            //    numdoc, "'"),
            //    null, null, pm);
            //}

            //if (cobid == null || cobid == DBNull.Value)
            //{
            //    cobid = LocatorHelper.Instance.ExecuteScalar(
            //    string.Concat("select cobranca_id from cobranca ",
            //    "inner join contrato on contrato_id=cobranca_propostaid",
            //    " where day(cobranca_dataVencimento)=",
            //    25, " and month(cobranca_dataVencimento)=", 1,
            //    " and year(cobranca_dataVencimento)=", 2013, " and cobranca_pago=0 and contrato_numero='0",
            //    numdoc, "'"),
            //    null, null, pm);
            //}

            //if (cobid == null || cobid == DBNull.Value)
            //{
            //    cobid = LocatorHelper.Instance.ExecuteScalar(
            //    string.Concat("select cobranca_id from cobranca ",
            //    "inner join contrato on contrato_id=cobranca_propostaid",
            //    " where day(cobranca_dataVencimento)=",
            //    10, " and month(cobranca_dataVencimento)=", 1,
            //    " and year(cobranca_dataVencimento)=", 2013, " and cobranca_pago=0 and contrato_numero='00",
            //    numdoc, "'"),
            //    null, null, pm);
            //}

            //if (cobid == null || cobid == DBNull.Value)
            //{
            //    cobid = LocatorHelper.Instance.ExecuteScalar(
            //    string.Concat("select cobranca_id from cobranca ",
            //    "inner join contrato on contrato_id=cobranca_propostaid",
            //    " where day(cobranca_dataVencimento)=",
            //    25, " and month(cobranca_dataVencimento)=", 1,
            //    " and year(cobranca_dataVencimento)=", 2013, " and cobranca_pago=0 and contrato_numero='00",
            //    numdoc, "'"),
            //    null, null, pm);
            //}

            //if (cobid == null || cobid == DBNull.Value)
            //{
            //    cobid = LocatorHelper.Instance.ExecuteScalar(
            //    string.Concat("select cobranca_id from cobranca ",
            //    "inner join contrato on contrato_id=cobranca_propostaid",
            //    " where day(cobranca_dataVencimento)=",
            //    25, " and month(cobranca_dataVencimento)=", 12,
            //    " and year(cobranca_dataVencimento)=", 2012, " and cobranca_pago=0 and contrato_numero='",
            //    numdoc, "'"),
            //    null, null, pm);
            //}

            //if (cobid == null || cobid == DBNull.Value)
            //{
            //    cobid = LocatorHelper.Instance.ExecuteScalar(
            //    string.Concat("select cobranca_id from cobranca ",
            //    "inner join contrato on contrato_id=cobranca_propostaid",
            //    " where day(cobranca_dataVencimento)=",
            //    10, " and month(cobranca_dataVencimento)=", 12,
            //    " and year(cobranca_dataVencimento)=", 2012, " and cobranca_pago=0 and contrato_numero='",
            //    numdoc, "'"),
            //    null, null, pm);
            //}
            #endregion

            if (cobid == null || cobid == DBNull.Value) { return; }

            Cobranca cobranca = new Cobranca(cobid);
            pm.Load(cobranca);

            if (cobranca.Pago)
            {
                int ret = NonQueryHelper.Instance.ExecuteNonQuery(
                String.Concat("update ___zerados_temp ",
                "set cobrancaid=", cobid, ", pagto='", pagto.ToString("yyyy-MM-dd"), "', valorpago='", valorpago.ToString("N2").Replace(".", "").Replace(",", "."), "', msg='baixa ja efetuada anteriormente' ",
                "where nome='", nome, "' and numdoc='", numdoc, "' and vencimento='", vencimento, "' and valordec='", valordec.Replace(".", "").Replace(",", "."), "'"),
                pm);
            }
            else
            {
                int ret = NonQueryHelper.Instance.ExecuteNonQuery(
                    String.Concat("update ___zerados_temp ",
                    "set cobrancaid=", cobid, ", pagto='", pagto.ToString("yyyy-MM-dd"), "', valorpago='", valorpago.ToString("N2").Replace(".", "").Replace(",", "."), "', msg='baixa efetuada_' ",
                    "where nome='", nome, "' and numdoc='", numdoc, "' and vencimento='", vencimento, "' and valordec='", valordec.Replace(".", "").Replace(",", "."), "'"),
                    pm);

                cobranca.DataPgto = pagto;
                cobranca.ValorPgto = valorpago;
                cobranca.Pago = true;
                pm.Save(cobranca);

                IList<CobrancaBaixa> baixas = CobrancaBaixa.CarregarTodos(cobranca.ID, pm);
                if (baixas == null)
                {
                    CobrancaBaixa baixa = new CobrancaBaixa();
                    baixa.BaixaFinanceira = true;
                    baixa.CobrancaID = cobranca.ID;
                    baixa.Data = DateTime.Now;
                    baixa.MotivoID = 5;
                    baixa.Obs = "BOLETO COM NOSSO NUMERO ZERADO , PAGAMENTO LOCALIZADO E BAIXADO EM ROTINA";
                    baixa.Tipo = 0;
                    baixa.UsuarioID = 1;
                    pm.Save(baixa);
                }
            }
        }

        void montaPlanilhaZerada()
        {
            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();

            DataTable zerados = LocatorHelper.Instance.ExecuteQuery("select * from ___zerados_temp", "result", pm).Tables[0];

            Object ret = null;
            foreach (DataRow row in zerados.Rows)
            {
                if (row["cobrancaId"] != DBNull.Value)
                {
                    ret = LocatorHelper.Instance.ExecuteScalar("select cobranca_propostaId from cobranca where cobranca_id=" + row["cobrancaId"], null, null, pm);
                    NonQueryHelper.Instance.ExecuteNonQuery(String.Concat("update ___zerados_temp set contratoId=", ret, " where id=", row["id"]), pm);
                }
                else
                {
                    ret = LocatorHelper.Instance.ExecuteScalar(String.Concat("select contrato_id from contrato where contrato_numero='" + row["numdoc"], "'"), null, null, pm);
                    if (ret == null)
                    {
                        ret = LocatorHelper.Instance.ExecuteScalar(String.Concat("select contrato_id from contrato where contrato_numero='0" + row["numdoc"], "'"), null, null, pm);
                    }
                    //if (ret == null)
                    //{
                    //    ret = LocatorHelper.Instance.ExecuteScalar(String.Concat("select contrato_id from contrato where contrato_numero='0" + row["numdoc"], "'"), null, null, pm);
                    //}

                    if (ret != null)
                    {
                        NonQueryHelper.Instance.ExecuteNonQuery(String.Concat("update ___zerados_temp set contratoId=", ret, " where id=", row["id"]), pm);
                    }
                }
            }

            pm.CloseSingleCommandInstance();
            pm.Dispose();
        }

        void baixaCobrancasManualmente()
        {
            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();

            DataTable dt = LocatorHelper.Instance.ExecuteQuery("select * from ___zerados_temp where cobrancaId is not null ", "result", pm).Tables[0];
            List<String> ids = new List<String>();
            Cobranca cobranca = null;
            System.Globalization.CultureInfo cinfo = new System.Globalization.CultureInfo("pt-Br");
            IList<CobrancaBaixa> baixas = null; CobrancaBaixa baixa = null;

            foreach (DataRow row in dt.Rows)
            {
                if (ids.Contains(Convert.ToString(row["cobrancaId"]))) { continue; }
                ids.Add(Convert.ToString(row["cobrancaId"]));
                cobranca = new Cobranca(row["cobrancaId"]);
                pm.Load(cobranca);

                if (cobranca.Pago)
                {
                    NonQueryHelper.Instance.ExecuteNonQuery("update ___zerados_temp set msg='baixa ja efetuada anteriormente' where cobrancaId=" + cobranca.ID, pm);
                }
                else
                {
                    cobranca.Pago = true;
                    cobranca.DataPgto = Convert.ToDateTime(row["pagto"], cinfo);
                    cobranca.ValorPgto = Convert.ToDecimal(row["valorpago"], cinfo);
                    //pm.Save(cobranca);
                    //NonQueryHelper.Instance.ExecuteNonQuery("update ___zerados_temp set msg='baixa efetuada' where cobrancaId=" + cobranca.ID, pm);
                }

                baixas = CobrancaBaixa.CarregarTodos(cobranca.ID, pm);
                if (baixas == null)
                {
                    baixa = new CobrancaBaixa();
                    baixa.BaixaFinanceira = true;
                    baixa.CobrancaID = cobranca.ID;
                    baixa.Data = DateTime.Now;
                    baixa.MotivoID = 5;
                    baixa.Obs = "BOLETO COM NOSSO NUMERO ZERADO , PAGAMENTO LOCALIZADO E BAIXADO EM ROTINA";
                    baixa.Tipo = 0;
                    baixa.UsuarioID = 1;
                    pm.Save(baixa);
                }
            }

            pm.CloseSingleCommandInstance();
            pm.Dispose();
        }

        /////////////////////////////////////////////////////////////////////////////////////////////////

        void baixaCobrancasDaFrancesinha()
        {
            DataTable francesa = LocatorHelper.Instance.ExecuteQuery("select * from __tempbaixa --where msg is null", "result").Tables[0];
            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();

            String nossoNumero = "";
            Cobranca cobranca = null;
            foreach (DataRow row in francesa.Rows)
            {
                nossoNumero = toString(row["NN"]);

                try
                {
                    if (Convert.ToInt32(nossoNumero) > 1000)
                    {
                        cobranca = new Cobranca(Convert.ToInt64(nossoNumero));
                        pm.Load(cobranca);

                        if (cobranca.Pago)
                        {
                            NonQueryHelper.Instance.ExecuteNonQuery("update __tempbaixa set msg='cobrança ja paga', cobranca_id=" + cobranca.ID + " where id=" + row["id"], pm);
                            continue;
                        }
                        else
                        {
                            cobranca.Pago = true;
                            cobranca.ValorPgto = toDecimal(toString(row["VALORPAGO"]).Replace("R$", "").Trim());
                            cobranca.DataPgto = toDateTime(row["DTMOV"]);
                            pm.Save(cobranca);

                            NonQueryHelper.Instance.ExecuteNonQuery("update __tempbaixa set msg='baixa efetuada', cobranca_id=" + cobranca.ID + " where id=" + row["id"], pm);
                            continue;
                        }
                    }
                }
                catch
                {
                }

                String qry = String.Concat("select contrato_numero, cobranca.* ",
                    " from cobranca inner join contrato on contrato_id=cobranca_propostaid ",
                    " where DAY(cobranca_dataVencimento)=10 and MONTH(cobranca_dataVencimento)=1 and year(cobranca_datavencimento)=2013 and cobranca_pago=0 and cobranca_valor='",
                toString(row["VALOR"]).Replace("R$", "").Trim().Replace(".", "").Replace(",", "."), "'");

                DataTable tentativa = LocatorHelper.Instance.ExecuteQuery(qry, "result", pm).Tables[0];
                if (tentativa.Rows.Count == 1)
                {
                    cobranca = new Cobranca(tentativa.Rows[0]["cobranca_id"]);
                    pm.Load(cobranca);

                    cobranca.Pago = true;
                    cobranca.ValorPgto = toDecimal(toString(row["VALORPAGO"]).Replace("R$", "").Trim());
                    cobranca.DataPgto = toDateTime(row["DTMOV"]);
                    pm.Save(cobranca);

                    NonQueryHelper.Instance.ExecuteNonQuery("update __tempbaixa set msg='baixa efetuada por valor', cobranca_id=" + cobranca.ID + " where id=" + row["id"], pm);
                    continue;
                }
                else
                {
                    NonQueryHelper.Instance.ExecuteNonQuery("update __tempbaixa set cobranca_id=null, msg='não encontrado' where id=" + row["id"], pm);
                }

                tentativa.Dispose();
            }

            pm.CloseSingleCommandInstance();
            pm.Dispose();
        }

        void baixaCobrancas()
        {
            DataTable francesa = LocatorHelper.Instance.ExecuteQuery("select * from ___tempBaixaManual where processado is null", "result").Tables[0];
            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();

            String cobrancaid = "";
            Cobranca cobranca = null;
            CobrancaBaixa baixa = null;
            DateTime data = DateTime.Now;
            foreach (DataRow row in francesa.Rows)
            {
                cobrancaid = toString(row["cobranca_id"]);

                try
                {
                    cobranca = new Cobranca(cobrancaid);
                    pm.Load(cobranca);

                    if (cobranca.Pago)
                    {
                        baixa = new CobrancaBaixa();
                        baixa.BaixaFinanceira = true;
                        baixa.BaixaProvisoria = false;
                        baixa.CobrancaID = cobranca.ID;
                        baixa.Data = data;
                        baixa.MotivoID = 4;
                        baixa.Tipo = 0;
                        baixa.UsuarioID = 1;
                        pm.Save(baixa);

                        NonQueryHelper.Instance.ExecuteNonQuery("update ___tempBaixaManual set msg='cobrança ja paga',processado=1, baixaid=" + baixa.ID + " where id=" + row["id"], pm);


                        continue;
                    }
                    else
                    {
                        cobranca.Pago = true;
                        cobranca.ValorPgto = toDecimal(toString(row["VALOR"]).Replace("R$", "").Trim());
                        cobranca.DataPgto = toDateTime(row["data_pagto"]);
                        pm.Save(cobranca);

                        baixa = new CobrancaBaixa();
                        baixa.BaixaFinanceira = true;
                        baixa.BaixaProvisoria = false;
                        baixa.CobrancaID = cobranca.ID;
                        baixa.Data = data;
                        baixa.MotivoID = 4;
                        baixa.Tipo = 0;
                        baixa.UsuarioID = 1;
                        pm.Save(baixa);

                        NonQueryHelper.Instance.ExecuteNonQuery("update ___tempBaixaManual set msg='baixa efetuada',processado=1, baixaid=" + baixa.ID + " where id=" + row["id"], pm);
                        //NonQueryHelper.Instance.ExecuteNonQuery("update __tempbaixa set msg='baixa efetuada', cobranca_id=" + cobranca.ID + " where id=" + row["id"], pm);
                        continue;
                    }
                }
                catch
                {
                }

                String qry = String.Concat("select contrato_numero, cobranca.* ",
                    " from cobranca inner join contrato on contrato_id=cobranca_propostaid ",
                    " where DAY(cobranca_dataVencimento)=10 and MONTH(cobranca_dataVencimento)=1 and year(cobranca_datavencimento)=2013 and cobranca_pago=0 and cobranca_valor='",
                toString(row["VALOR"]).Replace("R$", "").Trim().Replace(".", "").Replace(",", "."), "'");

                DataTable tentativa = LocatorHelper.Instance.ExecuteQuery(qry, "result", pm).Tables[0];
                if (tentativa.Rows.Count == 1)
                {
                    cobranca = new Cobranca(tentativa.Rows[0]["cobranca_id"]);
                    pm.Load(cobranca);

                    cobranca.Pago = true;
                    cobranca.ValorPgto = toDecimal(toString(row["VALORPAGO"]).Replace("R$", "").Trim());
                    cobranca.DataPgto = toDateTime(row["DTMOV"]);
                    pm.Save(cobranca);

                    NonQueryHelper.Instance.ExecuteNonQuery("update __tempbaixa set msg='baixa efetuada por valor', cobranca_id=" + cobranca.ID + " where id=" + row["id"], pm);
                    continue;
                }
                else
                {
                    NonQueryHelper.Instance.ExecuteNonQuery("update __tempbaixa set cobranca_id=null, msg='não encontrado' where id=" + row["id"], pm);
                }

                tentativa.Dispose();
            }

            pm.CloseSingleCommandInstance();
            pm.Dispose();
        }

        void __baixaCobrancas()
        {
            DataTable francesa = LocatorHelper.Instance.ExecuteQuery("select * from __tempbaixa --where msg is null", "result").Tables[0];
            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();

            String nossoNumero = "";
            Cobranca cobranca = null;
            foreach (DataRow row in francesa.Rows)
            {
                nossoNumero = toString(row["NN"]);

                try
                {
                    if (Convert.ToInt32(nossoNumero) > 1000)
                    {
                        cobranca = new Cobranca(Convert.ToInt64(nossoNumero));
                        pm.Load(cobranca);

                        if (cobranca.Pago)
                        {
                            NonQueryHelper.Instance.ExecuteNonQuery("update __tempbaixa set msg='cobrança ja paga', cobranca_id=" + cobranca.ID + " where id=" + row["id"], pm);
                            continue;
                        }
                        else
                        {
                            cobranca.Pago = true;
                            cobranca.ValorPgto = toDecimal(toString(row["VALORPAGO"]).Replace("R$", "").Trim());
                            cobranca.DataPgto = toDateTime(row["DTMOV"]);
                            pm.Save(cobranca);

                            NonQueryHelper.Instance.ExecuteNonQuery("update __tempbaixa set msg='baixa efetuada', cobranca_id=" + cobranca.ID + " where id=" + row["id"], pm);
                            continue;
                        }
                    }
                }
                catch
                {
                }

                String qry = String.Concat("select contrato_numero, cobranca.* ",
                    " from cobranca inner join contrato on contrato_id=cobranca_propostaid ",
                    " where DAY(cobranca_dataVencimento)=10 and MONTH(cobranca_dataVencimento)=1 and year(cobranca_datavencimento)=2013 and cobranca_pago=0 and cobranca_valor='",
                toString(row["VALOR"]).Replace("R$", "").Trim().Replace(".", "").Replace(",", "."), "'");

                DataTable tentativa = LocatorHelper.Instance.ExecuteQuery(qry, "result", pm).Tables[0];
                if (tentativa.Rows.Count == 1)
                {
                    cobranca = new Cobranca(tentativa.Rows[0]["cobranca_id"]);
                    pm.Load(cobranca);

                    cobranca.Pago = true;
                    cobranca.ValorPgto = toDecimal(toString(row["VALORPAGO"]).Replace("R$", "").Trim());
                    cobranca.DataPgto = toDateTime(row["DTMOV"]);
                    pm.Save(cobranca);

                    NonQueryHelper.Instance.ExecuteNonQuery("update __tempbaixa set msg='baixa efetuada por valor', cobranca_id=" + cobranca.ID + " where id=" + row["id"], pm);
                    continue;
                }
                else
                {
                    NonQueryHelper.Instance.ExecuteNonQuery("update __tempbaixa set cobranca_id=null, msg='não encontrado' where id=" + row["id"], pm);
                }

                tentativa.Dispose();
            }

            pm.CloseSingleCommandInstance();
            pm.Dispose();
        }

        #region

        void importaAMIL_CPF()
        {
            String mascara = new String('0', 11);
            String numero = String.Format("{0:" + mascara + "}", 11);

            DataSet ds = new DataSet();
            using (OleDbConnection conn = new OleDbConnection("Provider=Microsoft.ACE.OLEDB.12.0;Data Source=c:\\produtores.mdb;Persist Security Info=False;"))
            {
                conn.Open();
                OleDbDataAdapter adp = new OleDbDataAdapter("SELECT * FROM CORRETORES_CPF where NOME_PRODUTOR IS NOT NULL AND NOME_PRODUTOR <> ''", conn);
                adp.Fill(ds, "CPF");
                adp.Dispose();
                conn.Close();
            }

            Usuario usuario = null; UsuarioFilial uf = null;
            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();

            Object ret = null;
            int i = 0;

            try
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    i++;
                    if (i < 16916) { continue; }
                    usuario = new Usuario();
                    usuario.Documento1 = String.Format("{0:" + mascara + "}", Convert.ToInt64(row["CPF"])); //toString(row["CNPJ"]);

                    ret = LocatorHelper.Instance.ExecuteScalar("select usuario_id from usuario where usuario_documento1='" + usuario.Documento1 + "'", null, null, pm);
                    if (ret != null && ret != DBNull.Value)
                    {
                        usuario.ID = ret;
                        pm.Load(usuario);
                    }

                    usuario.AlteraValorContratos = false;

                    if (string.IsNullOrEmpty(usuario.Apelido))
                        usuario.Apelido = toString(row["APELIDO"]);

                    usuario.Ativo = true;
                    usuario.Celular = toString(row["CELULAR"]);
                    usuario.Codigo = toString(row["CODIGO"]);

                    usuario.Email = toString(row["EMAIL"]);
                    if (usuario.Email.IndexOf(';') > -1)
                        usuario.Email = usuario.Email.Split(';')[0];

                    usuario.Nome = toString(row["NOME_PRODUTOR"]);

                    usuario.FilialID = traduzFilialParaImportacao(toString(row["UNIDADE_DE_NEGOCIO"]));
                    usuario.MarcaOtica = toString(row["CODIGO"]);
                    usuario.SystemUser = false;
                    usuario.TipoPessoa = 1;
                    usuario.PerfilID = 3;

                    pm.Save(usuario);

                    if ((ret != null && ret != DBNull.Value) && usuario.FilialID != null)
                    {
                        try
                        {
                            uf = UsuarioFilial.CarregarTodos(usuario.ID, pm)[0];
                            uf.FilialID = usuario.FilialID;
                            pm.Save(uf);
                        }
                        catch
                        {
                            uf = new UsuarioFilial();
                            uf.Data = DateTime.Now;
                            uf.FilialID = usuario.FilialID;
                            uf.UsuarioID = usuario.ID;
                            pm.Save(uf);
                        }
                    }
                    else if (usuario.FilialID != null && (ret == null || ret == DBNull.Value))
                    {
                        uf = new UsuarioFilial();
                        uf.Data = DateTime.Now;
                        uf.FilialID = usuario.FilialID;
                        uf.UsuarioID = usuario.ID;
                        pm.Save(uf);
                    }
                    else
                    {
                        throw new ApplicationException("erro de filial");
                    }
                }

                //pm.Commit();
                int j = i;
            }
            catch (Exception ex)
            {
                String msg = ex.Message;
                String username = usuario.Nome;
                //pm.Rollback();
            }
        }

        void importaAMIL_CNPJ()
        {
            String mascara = new String('0', 14);
            String numero = String.Format("{0:" + mascara + "}", 123);

            DataSet ds = new DataSet();
            using (OleDbConnection conn = new OleDbConnection("Provider=Microsoft.ACE.OLEDB.12.0;Data Source=c:\\produtores.mdb;Persist Security Info=False;"))
            {
                conn.Open();
                OleDbDataAdapter adp = new OleDbDataAdapter("SELECT * FROM CORRETORES_CNPJ where NOME_PRODUTOR IS NOT NULL AND NOME_PRODUTOR <> '' ", conn);
                adp.Fill(ds, "cnpj");
                adp.Dispose();
                conn.Close();
            }

            Usuario usuario = null; UsuarioFilial uf = null;
            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();

            Object ret = null;
            int i = 0;

            try
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    i++;
                    if (i < 3705) { continue; }
                    usuario = new Usuario();
                    usuario.Documento1 = String.Format("{0:" + mascara + "}", Convert.ToInt64(row["CNPJ"])); //toString(row["CNPJ"]);

                    ret = LocatorHelper.Instance.ExecuteScalar(String.Concat("select usuario_id from usuario where usuario_documento1='", usuario.Documento1, "' and usuario_codigo='", toString(row["CODIGO"]), "'"), null, null, pm);
                    if (ret != null && ret != DBNull.Value)
                    {
                        usuario.ID = ret;
                        pm.Load(usuario);
                    }

                    usuario.AlteraValorContratos = false;

                    if (string.IsNullOrEmpty(usuario.Apelido))
                        usuario.Apelido = toString(row["APELIDO"]);

                    usuario.Ativo = true;
                    usuario.Celular = toString(row["CELULAR"]);
                    usuario.Codigo = toString(row["CODIGO"]);

                    usuario.Email = toString(row["EMAIL"]);
                    if (usuario.Email.IndexOf(';') > -1)
                        usuario.Email = usuario.Email.Split(';')[0];

                    usuario.Nome = toString(row["NOME_PRODUTOR"]);

                    usuario.FilialID = traduzFilialParaImportacao(toString(row["UNIDADE_DE_NEGOCIO"]));
                    usuario.MarcaOtica = toString(row["CODIGO"]);
                    usuario.SystemUser = false;
                    usuario.TipoPessoa = 2;
                    usuario.PerfilID = 3;

                    pm.Save(usuario);

                    if ((ret != null && ret != DBNull.Value) && usuario.FilialID != null)
                    {
                        uf = UsuarioFilial.CarregarTodos(usuario.ID, pm)[0];
                        uf.FilialID = usuario.FilialID;
                        pm.Save(uf);
                    }
                    else if (usuario.FilialID != null && (ret == null || ret == DBNull.Value))
                    {
                        uf = new UsuarioFilial();
                        uf.Data = DateTime.Now;
                        uf.FilialID = usuario.FilialID;
                        uf.UsuarioID = usuario.ID;
                        pm.Save(uf);
                    }
                    else
                    {
                        throw new ApplicationException("erro de filial");
                    }
                }

                //pm.Commit();
                int j = i;
            }
            catch (Exception ex)
            {
                int k = i;
                String msg = ex.Message;
                String username = usuario.Nome;
                //pm.Rollback();
            }
        }

        void importaCorretoresQUALICORP()
        {
            DataTable dt = LocatorHelper.Instance.ExecuteQuery("select * from _____Consultores_Qualicorp_Ativos_Ba", "result").Tables[0];

            Object ret = null;
            Usuario corretor = null;
            UsuarioFilial ufilial = null;

            PersistenceManager pm = new PersistenceManager();
            pm.UseSingleCommandInstance();

            foreach (DataRow row in dt.Rows)
            {
                corretor = new Usuario();
                corretor.AlteraValorContratos = false;
                corretor.Apelido = toString(row["nome"]);
                corretor.Ativo = true;
                corretor.CategoriaID = null;
                corretor.Codigo = toString(row["codvendas"]);
                corretor.Documento1 = toString(row["CPF"]).PadLeft(11, '0');
                corretor.FilialID = 4; //SP
                corretor.LiberaContratos = false;
                corretor.MarcaOtica = toString(row["codvendas"]); ;
                corretor.Nome = corretor.Apelido;
                corretor.PerfilID = 3; //CORRETOR
                corretor.Sexo = 1;
                corretor.SystemUser = false;
                corretor.TipoPessoa = 1; //PF

                ret = LocatorHelper.Instance.ExecuteScalar("select usuario_id from usuario where usuario_documento1='" + corretor.Documento1 + "'", null, null, pm);

                if (ret != null && ret != DBNull.Value) { continue; }

                pm.Save(corretor);

                ufilial = new UsuarioFilial();
                ufilial.Data = new DateTime(2012, 1, 1);
                ufilial.FilialID = 4; //SP
                ufilial.UsuarioID = corretor.ID;
                pm.Save(ufilial);
            }

            pm.CloseSingleCommandInstance();
            pm.Dispose();
            pm = null;
        }

        Object traduzFilialParaImportacao(String filial)
        {
            if (String.IsNullOrEmpty(filial)) { return null; }

            String id = filial.Split(new String[] { "-" }, StringSplitOptions.None)[0].Trim();

            if (id == "513")                                    //natal
                return 9;
            else if (id == "1" || id == "101")                  //rio de janeiro
                return 5;
            else if (id == "4" || id == "203")                  //brasilia
                return 6;
            else if (id == "2" || id == "201" || id == "223")   //sao paulo
                return 4;
            else if (id == "204")                               //parana
                return 7;
            else if (id == "6" || id == "251")                  //minas gerais
                return 10;
            else if (id == "8" || id == "250")                  //bahia
                return 11;
            else if (id == "7" || id == "249" || id == "287") //fortaleza
                return 8;
            else if (id == "284")                               //recife
                return 14;
            else if (id == "286")                               //joao pessoa
                return 16;
            else if (id == "287")                               //maceio
                return 17;
            else if (id == "288")                               //ceara
                return 18;
            else if (id == "508")                               //goiania
                return 19;

            return null;
        }

        Object traduzFilialParaImportacaoDeCorretoresAMIL(String filial)
        {
            if (String.IsNullOrEmpty(filial)) { return null; }

            String id = filial.Split(new String[] { "-" }, StringSplitOptions.None)[0];

            if (id == "13" || id == "351") //natal
                return 9;
            else if (id == "1" || id == "101") //rio de janeiro
                return 5;
            else if (id == "4" || id == "203") //brasilia
                return 6;
            else if (id == "2") //sao paulo
                return 4;
            else if (id == "5") //parana
                return 7;
            else if (id == "6" || id == "251") //minas gerais
                return 10;
            else if (id == "8" || id == "250") //bahia
                return 11;
            else if (id == "7" || id == "249" || id == "287") //fortaleza
                return 8;

            return null;
        }

        #endregion

        #endregion
        

        #region classes copiadas

        //[DBTable("contrato")]
        //public class Contrato : EntityBase, IPersisteableEntity
        //{
        //    public enum eTipoAcomodacao : int
        //    {
        //        quartoComun = 0,
        //        quartoParticular,
        //        indefinido
        //    }
        //    public enum eStatus : int
        //    {
        //        Normal,
        //        /// <summary>
        //        /// Proposta importada com o status 'Nao Implantada'.
        //        /// </summary>
        //        NaoImplantadoNaImportacao
        //    }

        //    #region fields

        //    Object _id;
        //    Object _filialId;
        //    Object _estipulanteId;
        //    Object _operadoraId;
        //    Object _contratoadmId;
        //    Object _planoId;
        //    Object _donoId; //corretor que vendeu a proposta
        //    Object _usuarioId;

        //    String _corretorTerceiroNome;
        //    String _corretorTerceiroCPF;
        //    String _superiorTerceiroNome;
        //    String _superiorTerceiroCPF;

        //    Object _operadorTmktId;
        //    Object _tipoContratoId;
        //    Object _enderecoReferenciaId;
        //    Object _enderecoCobrancaId;
        //    String _numero;
        //    Object _numeroId; //é o id da proposta, do impresso registrado no almoxarifado.
        //    String _vingencia;
        //    String _numeroMatricula;
        //    Decimal _valorAto;
        //    Boolean _adimplente;
        //    Boolean _cobrarTaxaAssociativa;
        //    DateTime _data;
        //    DateTime _dataCancelamento;
        //    String _emailCobranca;

        //    String _responsavelNome;
        //    String _responsavelCPF;
        //    String _responsavelRG;
        //    DateTime _responsavelDataNascimento;
        //    String _responsavelSexo;
        //    Object _responsavelParentescoId;
        //    Int32 _tipoAcomodacao;

        //    DateTime _admissao;
        //    DateTime _vigencia;
        //    DateTime _vencimento;

        //    String _empresaAnterior;
        //    String _empresaAnteriorMatricula;
        //    Int32 _empresaAnteriorTempo;
        //    Boolean _rascunho;
        //    Boolean _cancelado;
        //    Boolean _inativo;
        //    Boolean _pendente;
        //    String _obs;
        //    DateTime _alteracao;
        //    Int32 _codigoCobranca;
        //    Decimal _desconto;
        //    Int32 _status;

        //    bool _legado;

        //    String _planoDescricao;
        //    String _operadoraDescricao;
        //    String _beneficiarioTitularNome;
        //    String _beneficiarioTitularNomeMae;
        //    DateTime _beneficiarioTitularDataNascimento;
        //    String _beneficiarioTipo;
        //    String _beneficiarioCpf;

        //    Object _contratobeneficiario_beneficiarioId;

        //    String _empresaCobrancaNome;

        //    #endregion

        //    #region propriedades

        //    [DBFieldInfo("contrato_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("contrato_filialId", FieldType.Single)]
        //    public Object FilialID
        //    {
        //        get { return _filialId; }
        //        set { _filialId = value; }
        //    }

        //    [DBFieldInfo("contrato_estipulanteId", FieldType.Single)]
        //    public Object EstipulanteID
        //    {
        //        get { return _estipulanteId; }
        //        set { _estipulanteId = value; }
        //    }

        //    [DBFieldInfo("contrato_operadoraId", FieldType.Single)]
        //    public Object OperadoraID
        //    {
        //        get { return _operadoraId; }
        //        set { _operadoraId = value; }
        //    }

        //    [DBFieldInfo("contrato_contratoAdmId", FieldType.Single)]
        //    public Object ContratoADMID
        //    {
        //        get { return _contratoadmId; }
        //        set { _contratoadmId = value; }
        //    }

        //    [DBFieldInfo("contrato_planoId", FieldType.Single)]
        //    public Object PlanoID
        //    {
        //        get { return _planoId; }
        //        set { _planoId = value; }
        //    }

        //    [DBFieldInfo("contrato_legado", FieldType.Single)]
        //    public bool Legado
        //    {
        //        get { return _legado; }
        //        set { _legado = value; }
        //    }

        //    [DBFieldInfo("contrato_tipoContratoId", FieldType.Single)]
        //    public Object TipoContratoID
        //    {
        //        get { return _tipoContratoId; }
        //        set { _tipoContratoId = value; }
        //    }

        //    /// <summary>
        //    /// Corretor que vendeu a proposta
        //    /// </summary>
        //    [DBFieldInfo("contrato_donoId", FieldType.Single)]
        //    public Object DonoID
        //    {
        //        get { return _donoId; }
        //        set { _donoId = value; }
        //    }

        //    [DBFieldInfo("contrato_corretorTerceiroNome", FieldType.Single)]
        //    public String CorretorTerceiroNome
        //    {
        //        get { return _corretorTerceiroNome; }
        //        set { _corretorTerceiroNome = value; }
        //    }
        //    [DBFieldInfo("contrato_corretorTerceiroCPF", FieldType.Single)]
        //    public String CorretorTerceiroCPF
        //    {
        //        get { return _corretorTerceiroCPF; }
        //        set { _corretorTerceiroCPF = value; }
        //    }

        //    [DBFieldInfo("contrato_superiorTerceiroNome", FieldType.Single)]
        //    public String SuperiorTerceiroNome
        //    {
        //        get { return _superiorTerceiroNome; }
        //        set { _superiorTerceiroNome = value; }
        //    }
        //    [DBFieldInfo("contrato_superiorTerceiroCPF", FieldType.Single)]
        //    public String SuperiorTerceiroCPF
        //    {
        //        get { return _superiorTerceiroCPF; }
        //        set { _superiorTerceiroCPF = value; }
        //    }

        //    /// <summary>
        //    /// Operador de telemarketing que participou ou propiciou a venda.
        //    /// </summary>
        //    [DBFieldInfo("contrato_operadorTmktId", FieldType.Single)]
        //    public Object OperadorTmktID
        //    {
        //        get { return _operadorTmktId; }
        //        set { _operadorTmktId = value; }
        //    }

        //    [DBFieldInfo("contrato_enderecoReferenciaId", FieldType.Single)]
        //    public Object EnderecoReferenciaID
        //    {
        //        get { return _enderecoReferenciaId; }
        //        set { _enderecoReferenciaId = value; }
        //    }

        //    [DBFieldInfo("contrato_enderecoCobrancaId", FieldType.Single)]
        //    public Object EnderecoCobrancaID
        //    {
        //        get { return _enderecoCobrancaId; }
        //        set { _enderecoCobrancaId = value; }
        //    }

        //    /// <summary>
        //    /// Número do contrato.
        //    /// </summary>
        //    [DBFieldInfo("contrato_numero", FieldType.Single)]
        //    public String Numero
        //    {
        //        get { return _numero; }
        //        set { _numero = value; }
        //    }

        //    [DBFieldInfo("contrato_emailCobranca", FieldType.Single)]
        //    public String EmailCobranca
        //    {
        //        get { return _emailCobranca; }
        //        set { _emailCobranca = value; }
        //    }

        //    /// <summary>
        //    /// É o ID da proposta, do impresso registrado no almoxarifado.
        //    /// </summary>
        //    [DBFieldInfo("contrato_numeroId", FieldType.Single)]
        //    public Object NumeroID
        //    {
        //        get { return _numeroId; }
        //        set { _numeroId = value; }
        //    }

        //    [Obsolete("Em desuso.", true)]
        //    [DBFieldInfo("contrato_vingencia", FieldType.Single)]
        //    public String Vingencia
        //    {
        //        get { return _vingencia; }
        //        set { _vingencia = value; }
        //    }

        //    /// <summary>
        //    /// Número da matrícula.
        //    /// </summary>
        //    [DBFieldInfo("contrato_numeroMatricula", FieldType.Single)]
        //    public String NumeroMatricula
        //    {
        //        get { return _numeroMatricula; }
        //        set { _numeroMatricula = value; }
        //    }

        //    [DBFieldInfo("contrato_valorAto", FieldType.Single)]
        //    public Decimal ValorAto
        //    {
        //        get { return _valorAto; }
        //        set { _valorAto = value; }
        //    }

        //    /// <summary>
        //    /// Informa se o contrato está adimplente.
        //    /// </summary>
        //    [DBFieldInfo("contrato_adimplente", FieldType.Single)]
        //    public Boolean Adimplente
        //    {
        //        get { return _adimplente; }
        //        set { _adimplente = value; }
        //    }

        //    [DBFieldInfo("contrato_data", FieldType.Single)]
        //    public DateTime Data
        //    {
        //        get { return _data; }
        //        set { _data = value; }
        //    }

        //    /// <summary>
        //    /// Usuário que digitou a proposta.
        //    /// </summary>
        //    [DBFieldInfo("contrato_usuarioId", FieldType.Single)]
        //    public Object UsuarioID
        //    {
        //        get { return _usuarioId; }
        //        set { _usuarioId = value; }
        //    }

        //    [DBFieldInfo("contrato_dataCancelamento", FieldType.Single)]
        //    public DateTime DataCancelamento
        //    {
        //        get { return _dataCancelamento; }
        //        set { _dataCancelamento = value; }
        //    }

        //    [DBFieldInfo("contrato_responsavelNome", FieldType.Single)]
        //    public String ResponsavelNome
        //    {
        //        get { return _responsavelNome; }
        //        set { _responsavelNome = value; }
        //    }

        //    [DBFieldInfo("contrato_responsavelCPF", FieldType.Single)]
        //    public String ResponsavelCPF
        //    {
        //        get { return _responsavelCPF; }
        //        set { _responsavelCPF = value; }
        //    }

        //    [DBFieldInfo("contrato_responsavelRG", FieldType.Single)]
        //    public String ResponsavelRG
        //    {
        //        get { return _responsavelRG; }
        //        set { _responsavelRG = value; }
        //    }

        //    [DBFieldInfo("contrato_responsavelDataNascimento", FieldType.Single)]
        //    public DateTime ResponsavelDataNascimento
        //    {
        //        get { return _responsavelDataNascimento; }
        //        set { _responsavelDataNascimento = value; }
        //    }

        //    [DBFieldInfo("contrato_responsavelSexo", FieldType.Single)]
        //    public String ResponsavelSexo
        //    {
        //        get { return _responsavelSexo; }
        //        set { _responsavelSexo = value; }
        //    }

        //    [DBFieldInfo("contrato_responsavelParentescoId", FieldType.Single)]
        //    public Object ResponsavelParentescoID
        //    {
        //        get { return _responsavelParentescoId; }
        //        set { _responsavelParentescoId = value; }
        //    }

        //    [DBFieldInfo("contrato_tipoAcomodacao", FieldType.Single)]
        //    public Int32 TipoAcomodacao
        //    {
        //        get { return _tipoAcomodacao; }
        //        set { _tipoAcomodacao = value; }
        //    }

        //    [DBFieldInfo("contrato_admissao", FieldType.Single)]
        //    public DateTime Admissao
        //    {
        //        get { return _admissao; }
        //        set { _admissao = value; }
        //    }

        //    [DBFieldInfo("contrato_vigencia", FieldType.Single)]
        //    public DateTime Vigencia
        //    {
        //        get { return _vigencia; }
        //        set { _vigencia = value; }
        //    }

        //    [DBFieldInfo("contrato_vencimento", FieldType.Single)]
        //    public DateTime Vencimento
        //    {
        //        get { return _vencimento; }
        //        set { _vencimento = value; }
        //    }

        //    [DBFieldInfo("contrato_empresaAnterior", FieldType.Single)]
        //    public String EmpresaAnterior
        //    {
        //        get { return _empresaAnterior; }
        //        set { _empresaAnterior = value; }
        //    }

        //    [DBFieldInfo("contrato_empresaAnteriorMatricula", FieldType.Single)]
        //    public String EmpresaAnteriorMatricula
        //    {
        //        get { return _empresaAnteriorMatricula; }
        //        set { _empresaAnteriorMatricula = value; }
        //    }

        //    [DBFieldInfo("contrato_empresaAnteriorTempo", FieldType.Single)]
        //    public Int32 EmpresaAnteriorTempo
        //    {
        //        get { return _empresaAnteriorTempo; }
        //        set { _empresaAnteriorTempo = value; }
        //    }

        //    [DBFieldInfo("contrato_rascunho", FieldType.Single)]
        //    public Boolean Rascunho
        //    {
        //        get { return _rascunho; }
        //        set { _rascunho = value; }
        //    }

        //    [DBFieldInfo("contrato_cancelado", FieldType.Single)]
        //    public Boolean Cancelado
        //    {
        //        get { return _cancelado; }
        //        set { _cancelado = value; }
        //    }

        //    [DBFieldInfo("contrato_inativo", FieldType.Single)]
        //    public Boolean Inativo
        //    {
        //        get { return _inativo; }
        //        set { _inativo = value; }
        //    }

        //    /// <summary>
        //    /// Quando um novo contrato é cadastrado, e um ou mais beneficiários têm algum item de saúde marcado,
        //    /// a proposta fica pendente, dependendo de análise técnica.
        //    /// </summary>
        //    [DBFieldInfo("contrato_pendente", FieldType.Single)]
        //    public Boolean Pendente
        //    {
        //        get { return _pendente; }
        //        set { _pendente = value; }
        //    }

        //    [DBFieldInfo("contrato_cobrarTaxaAssociativa", FieldType.Single)]
        //    public Boolean CobrarTaxaAssociativa
        //    {
        //        get { return _cobrarTaxaAssociativa; }
        //        set { _cobrarTaxaAssociativa = value; }
        //    }

        //    [DBFieldInfo("contrato_obs", FieldType.Single)]
        //    public String Obs
        //    {
        //        get { return _obs; }
        //        set { _obs = value; }
        //    }

        //    [DBFieldInfo("contrato_codcobranca", FieldType.Single)]
        //    public Int32 CodCobranca
        //    {
        //        get { return _codigoCobranca; }
        //        set { _codigoCobranca = value; }
        //    }

        //    [DBFieldInfo("contrato_alteracao", FieldType.Single)]
        //    public DateTime Alteracao
        //    {
        //        get { return _alteracao; }
        //        set { _alteracao = value; }
        //    }

        //    [DBFieldInfo("contrato_desconto", FieldType.Single)]
        //    public Decimal Desconto
        //    {
        //        get { return _desconto; }
        //        set { _desconto = value; }
        //    }

        //    [DBFieldInfo("contrato_status", FieldType.Single)]
        //    public Int32 Status
        //    {
        //        get { return _status; }
        //        set { _status = value; }
        //    }

        //    [Joinned("plano_descricao")]
        //    public String PlanoDescricao
        //    {
        //        get { return _planoDescricao; }
        //        set { _planoDescricao = value; }
        //    }

        //    [Joinned("operadora_nome")]
        //    public String OperadoraDescricao
        //    {
        //        get { return _operadoraDescricao; }
        //        set { _operadoraDescricao = value; }
        //    }

        //    [Joinned("contratobeneficiario_beneficiarioId")]
        //    public Object ContratoBeneficiarioId
        //    {
        //        get { return _contratobeneficiario_beneficiarioId; }
        //        set { _contratobeneficiario_beneficiarioId = value; }
        //    }

        //    [Joinned("beneficiario_nome")]
        //    public String BeneficiarioTitularNome
        //    {
        //        get { return _beneficiarioTitularNome; }
        //        set { _beneficiarioTitularNome = value; }
        //    }

        //    [Joinned("beneficiario_nomeMae")]
        //    public String BeneficiarioTitularNomeMae
        //    {
        //        get { return _beneficiarioTitularNomeMae; }
        //        set { _beneficiarioTitularNomeMae = value; }
        //    }

        //    [Joinned("beneficiario_dataNascimento")]
        //    public DateTime BeneficiarioTitularDataNascimento
        //    {
        //        get { return _beneficiarioTitularDataNascimento; }
        //        set { _beneficiarioTitularDataNascimento = value; }
        //    }

        //    [Joinned("beneficiario_cpf")]
        //    public String BeneficiarioCPF
        //    {
        //        get { return _beneficiarioCpf; }
        //        set { _beneficiarioCpf = value; }
        //    }

        //    public String BeneficiarioCPFFormatado
        //    {
        //        get
        //        {
        //            if (String.IsNullOrEmpty(_beneficiarioCpf)) { return _beneficiarioCpf; }
        //            return String.Format(@"{0:000\.000\.000\-00}", Convert.ToInt64(_beneficiarioCpf));
        //        }
        //    }

        //    /// <summary>
        //    /// Se o beneficiário é titular ou dependente.
        //    /// </summary>
        //    [Joinned("contratobeneficiario_tipo")]
        //    public String TipoParticipacaoContrato
        //    {
        //        get { return _beneficiarioTipo; }
        //        set { _beneficiarioTipo = value; }
        //    }

        //    [Joinned("empresa_nome")]
        //    public String EmpresaCobranca
        //    {
        //        get { return _empresaCobrancaNome; }
        //        set { _empresaCobrancaNome = value; }
        //    }

        //    [Joinned("estipulante_nome")]
        //    public String EstipulanteNome
        //    {
        //        get;
        //        set;
        //    }

        //    /// <summary>
        //    /// Condição para retornar, em uma query sql, apenas contratos não cancelados, ativos e que não sejam rascunhos.
        //    /// </summary>
        //    internal static String CondicaoBasicaQuery
        //    {
        //        get
        //        {
        //            return " contrato_cancelado <> 1 AND contrato_inativo <> 1 AND contrato_rascunho <> 1 "; //contrato_adimplente=1 AND 
        //        }
        //    }

        //    #endregion

        //    public ContratoBeneficiario ContratoBeneficiario
        //    {
        //        get
        //        {
        //            throw new System.NotImplementedException();
        //        }
        //        set
        //        {
        //        }
        //    }
        //    public Plano Plano
        //    {
        //        get
        //        {
        //            throw new System.NotImplementedException();
        //        }
        //        set
        //        {
        //        }
        //    }
        //    public Beneficiario Beneficiario
        //    {
        //        get
        //        {
        //            throw new System.NotImplementedException();
        //        }
        //        set
        //        {
        //        }
        //    }
        //    public Estipulante Estipulante
        //    {
        //        get
        //        {
        //            throw new System.NotImplementedException();
        //        }
        //        set
        //        {
        //        }
        //    }
        //    public Agente Agente
        //    {
        //        get
        //        {
        //            throw new System.NotImplementedException();
        //        }
        //        set
        //        {
        //        }
        //    }

        //    public Contrato() { _legado = false; _inativo = false; _cancelado = false; _adimplente = true; _pendente = false; _responsavelDataNascimento = DateTime.MinValue; _alteracao = DateTime.Now; _status = 0; }
        //    public Contrato(Object id) : this() { _id = id; }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        PersistenceManager pm = new PersistenceManager();
        //        pm.UseSingleCommandInstance();

        //        String query = "delete from contrato_beneficiario WHERE contratobeneficiario_contratoId=" + this.ID;
        //        NonQueryHelper.Instance.ExecuteNonQuery(query, pm);

        //        query = "delete from contrato_valor where contratovalor_contratoId=" + this.ID;
        //        NonQueryHelper.Instance.ExecuteNonQuery(query, pm);

        //        query = "delete from contrato_plano_historico where contratoplano_contratoid=" + this.ID;
        //        NonQueryHelper.Instance.ExecuteNonQuery(query, pm);

        //        query = "delete from cobranca where cobranca_propostaId=" + this.ID;
        //        NonQueryHelper.Instance.ExecuteNonQuery(query, pm);

        //        query = "delete from contrato_beneficiario where contratobeneficiario_contratoid=" + this.ID;
        //        NonQueryHelper.Instance.ExecuteNonQuery(query, pm);

        //        query = "delete from adicional_beneficiario where adicionalbeneficiario_propostaid=" + this.ID;
        //        NonQueryHelper.Instance.ExecuteNonQuery(query, pm);

        //        pm.Remove(this);

        //        pm.CloseSingleCommandInstance();
        //        pm = null;
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }

        //    public static Contrato CarregarParcial(Object id, PersistenceManager pm)
        //    {
        //        String qry = "contrato_id,contrato_numero, contrato_operadoraid, contrato_estipulanteId, contrato_cobrarTaxaAssociativa, contrato_contratoAdmId, contrato_admissao, contrato_vigencia,contrato_codcobranca,contrato_inativo,contrato_cancelado,contrato_dataCancelamento,contrato_responsavelNome,contrato_responsavelCPF FROM contrato WHERE contrato_id=" + id; ;
        //        IList<Contrato> ret = LocatorHelper.Instance.ExecuteQuery<Contrato>(qry, typeof(Contrato), pm);
        //        if (ret == null)
        //            return null;
        //        else
        //            return ret[0];
        //    }

        //    public static Contrato CarregarParcial(String propostaNumero, Object operadoraId)
        //    {
        //        return CarregarParcial(propostaNumero, operadoraId, null);
        //    }
        //    public static Contrato CarregarParcial(String propostaNumero, Object operadoraId, PersistenceManager pm)
        //    {
        //        String qry = "contrato_id, contrato_numero, contrato_contratoAdmId,contrato_admissao,contrato_planoId,contrato_inativo,contrato_status FROM contrato WHERE contrato_numero=@numero AND contrato_operadoraId=" + operadoraId;

        //        String[] names = new String[1] { "@numero" };
        //        String[] value = new String[1] { propostaNumero };

        //        IList<Contrato> ret = LocatorHelper.Instance.ExecuteParametrizedQuery<Contrato>(qry, names, value, typeof(Contrato), pm);
        //        if (ret == null)
        //            return null;
        //        else
        //            return ret[0];
        //    }

        //    public static Contrato CarregarParcialPorCodCobranca(Object codCobranca, PersistenceManager pm)
        //    {
        //        IList<Contrato> lista = LocatorHelper.Instance.ExecuteQuery<Contrato>("contrato_id, contrato_operadoraId, contrato_numero, contrato_contratoAdmId, contrato_admissao, contrato_inativo, contrato_cancelado, contrato_adimplente, contrato_datacancelamento FROM contrato WHERE contrato_codCobranca=" + codCobranca, typeof(Contrato));

        //        if (lista == null)
        //            return null;
        //        else
        //            return lista[0];
        //    }

        //    #endregion

        //    public static Contrato CarregarPorParametros(String numeroContrato, Object operadoraId, PersistenceManager pm)
        //    {
        //        String qry = String.Concat("SELECT * ",
        //            "   FROM contrato ",
        //            "   WHERE ",
        //            "       contrato_numero = @NumeroContrato AND ",
        //            "       contrato_operadoraId = ", operadoraId);

        //        String[] pName = new String[] { "@NumeroContrato" };
        //        String[] pValue = new String[] { numeroContrato };

        //        IList<Contrato> ret = LocatorHelper.Instance.ExecuteParametrizedQuery<Contrato>(qry, pName, pValue, typeof(Contrato), pm);

        //        if (ret == null)
        //            return null;
        //        else
        //            return ret[0];
        //    }

        //    public static IList<Contrato> CarregarPorParametros(String numeroContrato, Object operadoraId, DateTime vigencia, String titularCpf, String titularNome)
        //    {
        //        String qry = String.Concat("SELECT contrato.*, beneficiario_nome, beneficiario_cpf, beneficiario_nomeMae, beneficiario_dataNascimento ",
        //            "   FROM contrato ",
        //            "       INNER JOIN contrato_beneficiario ON contratobeneficiario_contratoId=contrato_id AND contratobeneficiario_ativo=1 AND contratobeneficiario_tipo=", Convert.ToInt32(ContratoBeneficiario.TipoRelacao.Titular),
        //            "       INNER JOIN beneficiario ON contratobeneficiario_beneficiarioId=beneficiario_id AND contratobeneficiario_ativo=1 AND contratobeneficiario_tipo=", Convert.ToInt32(ContratoBeneficiario.TipoRelacao.Titular),
        //            "   WHERE ",
        //            "       contrato_operadoraId = ", operadoraId);

        //        List<String> paramNames = new List<String>();
        //        List<String> paramValues = new List<String>();

        //        String[] pName = null;
        //        String[] pValue = null;

        //        if (!String.IsNullOrEmpty(numeroContrato))
        //        {
        //            qry += " AND contrato_numero = @NumeroContrato ";
        //            paramNames.Add("@NumeroContrato");
        //            paramValues.Add(numeroContrato);
        //        }

        //        if (vigencia != DateTime.MinValue)
        //        {
        //            qry = String.Concat(qry, " AND DAY(contrato_vigencia)=", vigencia.Day, " AND MONTH(contrato_vigencia)=", vigencia.Month, " AND YEAR(contrato_vigencia)=", vigencia.Year);
        //        }

        //        if (!String.IsNullOrEmpty(titularCpf))
        //        {
        //            qry = String.Concat(qry, " AND beneficiario_cpf='", titularCpf, "'");
        //        }

        //        if (!String.IsNullOrEmpty(titularNome))
        //        {
        //            qry += " AND beneficiario_nome LIKE @TitularNome ";
        //            paramNames.Add("@TitularNome");
        //            paramValues.Add(titularNome + "%");
        //        }

        //        if (paramNames.Count > 0)
        //        {
        //            pName = paramNames.ToArray();
        //            pValue = paramValues.ToArray();
        //        }

        //        return LocatorHelper.Instance.ExecuteParametrizedQuery<Contrato>(qry, pName, pValue, typeof(Contrato));
        //    }

        //    public static IList<Contrato> CarregarPorNumero(String numero, PersistenceManager pm)
        //    {
        //        String[] values = null;
        //        String[] pnames = null;

        //        pnames = new String[1] { "@contrato_numero" };
        //        values = new String[1] { numero };

        //        String query = String.Concat("contrato.*, plano_descricao, operadora_nome, beneficiario_nome ",
        //            "FROM contrato ",
        //            "INNER JOIN plano ON contrato_planoId=plano_id ",
        //            "INNER JOIN operadora ON contrato_operadoraid=operadora_id ",
        //            " LEFT JOIN contrato_beneficiario ON contrato_id=contratobeneficiario_contratoId AND contratobeneficiario_ativo=1 AND contratobeneficiario_tipo=", Convert.ToInt32(ContratoBeneficiario.TipoRelacao.Titular),
        //            " LEFT JOIN beneficiario ON beneficiario_id=contratobeneficiario_beneficiarioId AND contratobeneficiario_ativo=1 ",
        //            "WHERE contrato_numero=@contrato_numero",
        //            " ORDER BY contrato_data DESC");

        //        return LocatorHelper.Instance.ExecuteParametrizedQuery<Contrato>
        //            (query, pnames, values, typeof(Contrato), pm);
        //    }

        //    public static IList<Contrato> CarregarPorParametros(String numero, String benficiarioNome)
        //    {
        //        String whereAnd = "";
        //        String[] values = null;
        //        String[] pnames = null;

        //        if (!String.IsNullOrEmpty(numero))
        //        {
        //            //numero = String.Format("{0:0000000000}", Convert.ToInt32(numero));
        //            whereAnd = " AND contrato_numero=@contrato_numero ";
        //            pnames = new String[2] { "@contrato_numero", "@beneficiario_nome" };
        //            values = new String[2] { numero, "%" + benficiarioNome + "%" };
        //        }
        //        else
        //        {
        //            pnames = new String[1] { "@beneficiario_nome" };
        //            values = new String[1] { "%" + benficiarioNome + "%" };
        //        }

        //        String query = String.Concat("contrato.*, plano_descricao, operadora_nome, beneficiario_nome ",
        //            "FROM contrato ",
        //            "INNER JOIN plano ON contrato_planoId=plano_id ",
        //            "INNER JOIN operadora ON contrato_operadoraid=operadora_id ",
        //            " LEFT JOIN contrato_beneficiario ON contrato_id=contratobeneficiario_contratoId AND contratobeneficiario_ativo=1 AND contratobeneficiario_tipo=", Convert.ToInt32(ContratoBeneficiario.TipoRelacao.Titular),
        //            " LEFT JOIN beneficiario ON beneficiario_id=contratobeneficiario_beneficiarioId AND contratobeneficiario_ativo=1 ",
        //            "WHERE beneficiario_nome LIKE @beneficiario_nome ", whereAnd,
        //            " ORDER BY contrato_data DESC");

        //        return LocatorHelper.Instance.ExecuteParametrizedQuery<Contrato>
        //            (query, pnames, values, typeof(Contrato));
        //    }

        //    public static IList<Contrato> CarregarPorParametros(int? operadoraId, String benficiarioNome)
        //    {
        //        String whereAnd = "";
        //        String[] values = null;
        //        String[] pnames = null;

        //        if (operadoraId.HasValue)
        //        {
        //            //numero = String.Format("{0:0000000000}", Convert.ToInt32(numero));
        //            whereAnd = " AND contrato_operadoraId = " + operadoraId.Value.ToString();
        //        }

        //        pnames = new String[1] { "@beneficiario_nome" };
        //        values = new String[1] { "%" + benficiarioNome + "%" };

        //        String query = String.Concat("select top 50 contrato.*, plano_descricao, operadora_nome, beneficiario_nome ",
        //            "FROM contrato ",
        //            "INNER JOIN plano ON contrato_planoId=plano_id ",
        //            "INNER JOIN operadora ON contrato_operadoraid=operadora_id ",
        //            " inner JOIN contrato_beneficiario ON contrato_id=contratobeneficiario_contratoId AND contratobeneficiario_ativo=1 AND contratobeneficiario_tipo=", Convert.ToInt32(ContratoBeneficiario.TipoRelacao.Titular),
        //            " inner JOIN beneficiario ON beneficiario_id=contratobeneficiario_beneficiarioId AND contratobeneficiario_ativo=1 ",
        //            "WHERE beneficiario_nome LIKE @beneficiario_nome ", whereAnd,
        //            " ORDER BY beneficiario_nome");

        //        return LocatorHelper.Instance.ExecuteParametrizedQuery<Contrato>
        //            (query, pnames, values, typeof(Contrato));
        //    }

        //    public static IList<Contrato> CarregarPorParametros(String numero, String benficiarioNome, String codCobranca)
        //    {
        //        String whereAnd = "";
        //        String[] pnames = new String[3] { "@contrato_numero", "@beneficiario_nome", "@contrato_codcobranca" };
        //        String[] values = { numero, "%" + benficiarioNome + "%", codCobranca };

        //        if (!String.IsNullOrEmpty(numero))
        //        {
        //            whereAnd = " AND contrato_numero=@contrato_numero ";
        //        }

        //        if (!String.IsNullOrEmpty(codCobranca))
        //        {
        //            whereAnd = " AND contrato_codcobranca=@contrato_codcobranca ";
        //        }

        //        String query = String.Concat("contrato.*, plano_descricao, operadora_nome, beneficiario_nome ",
        //            "FROM contrato ",
        //            "INNER JOIN plano ON contrato_planoId=plano_id ",
        //            "INNER JOIN operadora ON contrato_operadoraid=operadora_id ",
        //            " LEFT JOIN contrato_beneficiario ON contrato_id=contratobeneficiario_contratoId AND contratobeneficiario_ativo=1 AND contratobeneficiario_tipo=", Convert.ToInt32(ContratoBeneficiario.TipoRelacao.Titular),
        //            " LEFT JOIN beneficiario ON beneficiario_id=contratobeneficiario_beneficiarioId AND contratobeneficiario_ativo=1 ",
        //            "WHERE beneficiario_nome LIKE @beneficiario_nome ", whereAnd,
        //            " ORDER BY contrato_data DESC");

        //        return LocatorHelper.Instance.ExecuteParametrizedQuery<Contrato>
        //            (query, pnames, values, typeof(Contrato));
        //    }

        //    public static IList<Contrato> CarregarPorParametros(String numero, String benficiarioNome, String codCobranca, String protocolo)
        //    {
        //        String whereAnd = "";
        //        String joinAtendimento = "";
        //        String[] pnames = new String[4] { "@contrato_numero", "@beneficiario_nome", "@contrato_codcobranca", "@atendimento_id" };
        //        String[] values = { numero, "%" + benficiarioNome + "%", codCobranca, protocolo };

        //        if (!String.IsNullOrEmpty(numero))
        //        {
        //            whereAnd = " AND contrato_numero=@contrato_numero ";
        //        }

        //        if (!String.IsNullOrEmpty(codCobranca))
        //        {
        //            whereAnd = " AND contrato_codcobranca=@contrato_codcobranca ";
        //        }

        //        if (!String.IsNullOrEmpty(protocolo))
        //        {
        //            whereAnd += " AND atendimento_id=@atendimento_id ";
        //            joinAtendimento = " INNER JOIN _atendimento on atendimento_propostaId=contrato_id ";
        //        }

        //        String query = String.Concat("TOP 50 contrato.*, plano_descricao, operadora_nome, beneficiario_nome ",
        //            "FROM contrato ",
        //            "INNER JOIN plano ON contrato_planoId=plano_id ",
        //            "INNER JOIN operadora ON contrato_operadoraid=operadora_id ",
        //            joinAtendimento,
        //            " LEFT JOIN contrato_beneficiario ON contrato_id=contratobeneficiario_contratoId AND contratobeneficiario_ativo=1 AND contratobeneficiario_tipo=", Convert.ToInt32(ContratoBeneficiario.TipoRelacao.Titular),
        //            " LEFT JOIN beneficiario ON beneficiario_id=contratobeneficiario_beneficiarioId AND contratobeneficiario_ativo=1 ",
        //            "WHERE beneficiario_nome LIKE @beneficiario_nome ", whereAnd,
        //            " ORDER BY contrato_data DESC");

        //        return LocatorHelper.Instance.ExecuteParametrizedQuery<Contrato>
        //            (query, pnames, values, typeof(Contrato));
        //    }

        //    public static DataTable DTCarregarPorParametros(String numero, String benficiarioNome, String codCobranca, String protocolo)
        //    {
        //        return DTCarregarPorParametros(numero, benficiarioNome, codCobranca, protocolo, null, false, null, false);
        //    }

        //    public static DataTable DTCarregarPorParametros(String numero, String benficiarioNome, String codCobranca, String protocolo, Object empresaCobrancaId, Boolean somenteInativos, String cpf, Boolean somenteAtivos)
        //    {
        //        if (cpf == null) { cpf = ""; }

        //        String whereAnd = "";
        //        String joinAtendimento = "";
        //        String[] pnames = new String[5] { "@contrato_numero", "@beneficiario_nome", "@contrato_codcobranca", "@atendimento_id", "@beneficiario_cpf" };
        //        String[] values = { numero, "%" + benficiarioNome + "%", codCobranca, protocolo, cpf };

        //        if (!String.IsNullOrEmpty(numero))
        //        {
        //            whereAnd = " AND contrato_numero=@contrato_numero ";
        //        }

        //        if (!String.IsNullOrEmpty(codCobranca))
        //        {
        //            whereAnd = " AND contrato_codcobranca=@contrato_codcobranca ";
        //        }

        //        if (!String.IsNullOrEmpty(protocolo))
        //        {
        //            whereAnd += " AND atendimento_id=@atendimento_id ";
        //            joinAtendimento = " INNER JOIN _atendimento on atendimento_propostaId=contrato_id ";
        //        }

        //        if (empresaCobrancaId != null)
        //        {
        //            whereAnd += " AND contrato_empresaCobrancaId= " + empresaCobrancaId;
        //        }

        //        if (somenteInativos)
        //        {
        //            whereAnd += " AND (contrato_cancelado=1 or contrato_inativo=1) ";
        //        }

        //        if (somenteAtivos)
        //        {
        //            whereAnd += " AND ( (contrato_cancelado=0 or contrato_cancelado is null ) and ( contrato_inativo=0 or contrato_inativo is null )) ";
        //        }

        //        if (!String.IsNullOrEmpty(cpf))
        //        {
        //            whereAnd += " and beneficiario_cpf=@beneficiario_cpf ";
        //        }

        //        if (string.IsNullOrEmpty(benficiarioNome)) benficiarioNome = "";

        //        String query = String.Concat("select TOP 60 contrato_id as ID, empresa_nome as EmpresaCobranca, contrato_numero as Numero, contrato_rascunho as Rascunho, contrato_cancelado as Cancelado, contrato_inativo as Inativo, plano_descricao as PlanoDescricao, operadora_nome as OperadoraNome, beneficiario_nome as BeneficiarioTitularNome ",
        //            "FROM contrato ",
        //            "INNER JOIN plano ON contrato_planoId=plano_id ",
        //            "INNER JOIN operadora ON contrato_operadoraid=operadora_id ",
        //            joinAtendimento,
        //            " LEFT JOIN contrato_beneficiario ON contrato_id=contratobeneficiario_contratoId AND contratobeneficiario_ativo=1 AND contratobeneficiario_tipo=", Convert.ToInt32(ContratoBeneficiario.TipoRelacao.Titular),
        //            " LEFT JOIN beneficiario ON beneficiario_id=contratobeneficiario_beneficiarioId AND contratobeneficiario_ativo=1 ",
        //            " left join cobranca_empresa on contrato_empresaCobrancaId = empresa_id ",
        //            "WHERE (beneficiario_nome LIKE '%", benficiarioNome.Replace("'", ""), "%') ", whereAnd,//"WHERE (beneficiario_nome LIKE @beneficiario_nome) ", whereAnd,
        //            " ORDER BY contrato_data DESC");

        //        return LocatorHelper.Instance.ExecuteParametrizedQuery(query, pnames, values).Tables[0];
        //    }

        //    /// <summary>
        //    /// Carrega o contrato e seus beneficiários (todos os beneficiários ativos, titular e dependentes)
        //    /// </summary>
        //    /// <param name="operadoraId">ID da operadora à qual pertence o contrato.</param>
        //    /// <param name="numeroContrato">Número do contrato.</param>
        //    /// <param name="cpf">TODO: Se fornecido um cpf, somente o beneficiário dono dele será carregado.</param>
        //    /// <returns></returns>
        //    public static IList<Contrato> Carregar(Object operadoraId, String numeroContrato, String cpf)
        //    {
        //        String qry = String.Concat("SELECT contrato.*, plano_descricao, operadora_nome, contratobeneficiario_beneficiarioId, contratobeneficiario_tipo, beneficiario_nome, beneficiario_cpf ",
        //            "   FROM contrato ",
        //            "       INNER JOIN plano ON contrato_planoId=plano_id ",
        //            "       INNER JOIN operadora ON contrato_operadoraid=operadora_id ",
        //            "       INNER JOIN contrato_beneficiario ON contrato_id=contratobeneficiario_contratoId AND contratobeneficiario_ativo=1 ",
        //            "       INNER JOIN beneficiario ON beneficiario_id=contratobeneficiario_beneficiarioId AND contratobeneficiario_ativo=1 ",
        //            "   WHERE ",
        //            "       contrato_numero=@NumeroContrato AND ",
        //            "       contrato_operadoraId=", operadoraId);

        //        String[] pName = new String[] { "@NumeroContrato" };
        //        String[] pValue = new String[] { numeroContrato };

        //        return LocatorHelper.Instance.ExecuteParametrizedQuery<Contrato>(qry, pName, pValue, typeof(Contrato));
        //    }

        //    public static IList<Contrato> Carregar(Object contratoId)
        //    {
        //        String qry = String.Concat("SELECT contrato.*, plano_descricao, operadora_nome, contratobeneficiario_beneficiarioId, contratobeneficiario_tipo, beneficiario_nome, beneficiario_cpf ",
        //            "   FROM contrato ",
        //            "       INNER JOIN plano ON contrato_planoId=plano_id ",
        //            "       INNER JOIN operadora ON contrato_operadoraid=operadora_id ",
        //            "       INNER JOIN contrato_beneficiario ON contrato_id=contratobeneficiario_contratoId AND contratobeneficiario_ativo=1 ",
        //            "       INNER JOIN beneficiario ON beneficiario_id=contratobeneficiario_beneficiarioId AND contratobeneficiario_ativo=1 ",
        //            "   WHERE ",
        //            "       contrato_id=", contratoId);

        //        return LocatorHelper.Instance.ExecuteQuery<Contrato>(qry, typeof(Contrato));
        //    }

        //    public static IList<Contrato> CarregarPorBeneficiário(Object beneficiarioId)
        //    {
        //        String query = String.Concat("contrato_id, contrato_numero, empresa_nome, operadora_nome, contrato_data, contratobeneficiario_tipo FROM contrato ",
        //            "INNER JOIN contrato_beneficiario ON contrato_id = contratobeneficiario_contratoId ",
        //            "INNER JOIN beneficiario ON contratobeneficiario_beneficiarioId=beneficiario_id ",
        //            "INNER JOIN operadora ON contrato_operadoraId=operadora_id ",
        //            "LEFT JOIN cobranca_empresa ON contrato_empresaCobrancaId=empresa_id ",
        //            "WHERE beneficiario_id=", beneficiarioId, " ORDER BY contrato_data DESC");

        //        return LocatorHelper.Instance.ExecuteQuery<Contrato>(query, typeof(Contrato));
        //    }

        //    public static IList<Contrato> CarregarPorOperadoraID(Object operadoraId, String numero, String benficiarioNome)
        //    {
        //        return CarregarPorOperadoraID(operadoraId, numero, benficiarioNome, null);

        //        /*
        //        String whereAnd = "";
        //        String[] values = null;
        //        String[] pnames = null;

        //        if (!String.IsNullOrEmpty(numero))
        //        {
        //            whereAnd = " AND contrato_numero=@contrato_numero ";
        //            pnames = new String[2] { "@contrato_numero", "@beneficiario_nome" };
        //            values = new String[2] { numero, "%" + benficiarioNome + "%" };
        //        }
        //        else
        //        {
        //            pnames = new String[1] { "@beneficiario_nome" };
        //            values = new String[1] { "%" + benficiarioNome + "%" };
        //        }

        //        String query = String.Concat("TOP 100 contrato.*, plano_descricao, operadora_nome, beneficiario_nome ",
        //            "FROM contrato ",
        //            "INNER JOIN plano ON contrato_planoId=plano_id ",
        //            "INNER JOIN operadora ON contrato_operadoraid=operadora_id ",
        //            " LEFT JOIN contrato_beneficiario ON contrato_id=contratobeneficiario_contratoId AND contratobeneficiario_ativo=1 AND contratobeneficiario_tipo=", Convert.ToInt32(ContratoBeneficiario.TipoRelacao.Titular),
        //            " LEFT JOIN beneficiario ON beneficiario_id=contratobeneficiario_beneficiarioId AND contratobeneficiario_ativo=1 ",
        //            "WHERE operadora_id=", operadoraId, " AND beneficiario_nome LIKE @beneficiario_nome ", whereAnd,
        //            " ORDER BY contrato_data DESC");

        //        return LocatorHelper.Instance.ExecuteParametrizedQuery<Contrato>
        //            (query, pnames, values, typeof(Contrato));
        //        */
        //    }

        //    public static IList<Contrato> CarregarPorOperadoraID(Object operadoraId, String numero, String benficiarioNome, String codCobranca)
        //    {
        //        String whereAnd = "";
        //        if (codCobranca == null) { codCobranca = ""; }
        //        if (benficiarioNome == null) { benficiarioNome = ""; }
        //        String[] pnames = new String[3] { "@contrato_numero", "@beneficiario_nome", "@contrato_codcobranca" };
        //        String[] values = new String[3] { numero, "%" + benficiarioNome + "%", codCobranca };

        //        if (!String.IsNullOrEmpty(numero))
        //        {
        //            whereAnd = " AND contrato_numero=@contrato_numero ";
        //        }

        //        if (!String.IsNullOrEmpty(codCobranca))
        //        {
        //            whereAnd += " AND contrato_codcobranca=@contrato_codcobranca ";
        //        }

        //        String query = String.Concat("TOP 100 contrato.*, plano_descricao, operadora_nome, beneficiario_nome ",
        //            "FROM contrato ",
        //            "INNER JOIN plano ON contrato_planoId=plano_id ",
        //            "INNER JOIN operadora ON contrato_operadoraid=operadora_id ",
        //            " LEFT JOIN contrato_beneficiario ON contrato_id=contratobeneficiario_contratoId AND contratobeneficiario_ativo=1 AND contratobeneficiario_tipo=", Convert.ToInt32(ContratoBeneficiario.TipoRelacao.Titular),
        //            " LEFT JOIN beneficiario ON beneficiario_id=contratobeneficiario_beneficiarioId AND contratobeneficiario_ativo=1 ",
        //            "WHERE operadora_id=", operadoraId, " AND beneficiario_nome LIKE @beneficiario_nome ", whereAnd,
        //            " ORDER BY contrato_data DESC");

        //        return LocatorHelper.Instance.ExecuteParametrizedQuery<Contrato>
        //            (query, pnames, values, typeof(Contrato));
        //    }

        //    public static IList<Contrato> CarregarPorOperadoraID(Object operadoraId, String numero, String benficiarioNome, String codCobranca, String protocolo)
        //    {
        //        String whereAnd = "";
        //        String joinAtendimento = "";
        //        if (benficiarioNome == null) { benficiarioNome = ""; }
        //        String[] pnames = new String[4] { "@contrato_numero", "@beneficiario_nome", "@contrato_codcobranca", "@atendimento_id" };
        //        String[] values = new String[4] { numero, "%" + benficiarioNome + "%", codCobranca, protocolo };

        //        if (!String.IsNullOrEmpty(numero))
        //        {
        //            whereAnd = " AND contrato_numero=@contrato_numero ";
        //        }

        //        if (!String.IsNullOrEmpty(codCobranca))
        //        {
        //            whereAnd += " AND contrato_codcobranca=@contrato_codcobranca ";
        //        }

        //        if (!String.IsNullOrEmpty(protocolo))
        //        {
        //            whereAnd += " AND atendimento_id=@atendimento_id ";
        //            joinAtendimento = " INNER JOIN _atendimento on atendimento_propostaId=contrato_id ";
        //        }

        //        String query = String.Concat("TOP 60 contrato.*, plano_descricao, operadora_nome, beneficiario_nome ",
        //            "FROM contrato ",
        //            "INNER JOIN plano ON contrato_planoId=plano_id ",
        //            "INNER JOIN operadora ON contrato_operadoraid=operadora_id ",
        //            joinAtendimento,
        //            " LEFT JOIN contrato_beneficiario ON contrato_id=contratobeneficiario_contratoId AND contratobeneficiario_ativo=1 AND contratobeneficiario_tipo=", Convert.ToInt32(ContratoBeneficiario.TipoRelacao.Titular),
        //            " LEFT JOIN beneficiario ON beneficiario_id=contratobeneficiario_beneficiarioId AND contratobeneficiario_ativo=1 ",
        //            "WHERE operadora_id=", operadoraId, " AND beneficiario_nome LIKE @beneficiario_nome ", whereAnd,
        //            " ORDER BY contrato_data DESC");

        //        return LocatorHelper.Instance.ExecuteParametrizedQuery<Contrato>
        //            (query, pnames, values, typeof(Contrato));
        //    }

        //    public static DataTable DTCarregarPorOperadoraID(Object operadoraId, String numeroProposta, String benficiarioNome)
        //    {
        //        String whereAnd = "";
        //        String joinAtendimento = "";
        //        if (benficiarioNome == null) { benficiarioNome = ""; }

        //        String[] pnames = null;
        //        String[] values = null;

        //        if (!string.IsNullOrEmpty(numeroProposta))
        //        {
        //            pnames = new String[2] { "@contrato_numero", "@beneficiario_nome" };
        //            values = new String[2] { numeroProposta, "'%" + benficiarioNome + "%'" };

        //            //whereAnd = " AND contrato_numero=@contrato_numero ";
        //            whereAnd = string.Concat(" AND contrato_numero='", numeroProposta, "' ");
        //        }
        //        else
        //        {
        //            pnames = new String[1] { "@beneficiario_nome" };
        //            values = new String[1] { "'%" + benficiarioNome + "%'" }; //"%" +  + "%"
        //        }

        //        String query = String.Concat("select TOP 60 contrato_id as ID, empresa_nome as EmpresaCobranca, contrato_numero as Numero, contrato_rascunho as Rascunho, contrato_cancelado as Cancelado, contrato_inativo as Inativo, plano_descricao as PlanoDescricao, operadora_nome as OperadoraNome, beneficiario_nome as BeneficiarioTitularNome ",
        //            "FROM contrato ",
        //            "INNER JOIN plano ON contrato_planoId=plano_id ",
        //            "INNER JOIN operadora ON contrato_operadoraid=operadora_id ",
        //            joinAtendimento,
        //            " LEFT JOIN contrato_beneficiario ON contrato_id=contratobeneficiario_contratoId AND contratobeneficiario_ativo=1 AND contratobeneficiario_tipo=", Convert.ToInt32(ContratoBeneficiario.TipoRelacao.Titular),
        //            " LEFT JOIN beneficiario ON beneficiario_id=contratobeneficiario_beneficiarioId AND contratobeneficiario_ativo=1 ",
        //            " left join cobranca_empresa on contrato_empresaCobrancaId = empresa_id ",
        //            //"WHERE operadora_id=", operadoraId, " AND beneficiario_nome LIKE @beneficiario_nome ", whereAnd,
        //            //" ORDER BY contrato_data DESC");
        //            "WHERE operadora_id=", operadoraId, " AND beneficiario_nome LIKE '%", benficiarioNome.Replace("'", ""), "%'", whereAnd,
        //            " ORDER BY contrato_data DESC");

        //        DataTable dt = new DataTable();

        //        using (SqlConnection conn = new SqlConnection(EntityBase._connString))
        //        {
        //            SqlDataAdapter adp = new SqlDataAdapter(query, conn);

        //            //for (int i = 0; i < pnames.Length; i++)
        //            //{
        //            //    adp.SelectCommand.Parameters.AddWithValue(pnames[i], values[i]);
        //            //}

        //            adp.Fill(dt);
        //            adp.Dispose();
        //            conn.Close();
        //        }

        //        return dt;
        //    }

        //    public static DataTable DTCarregarPorOperadoraID_LEGADO(Object operadoraId, String numeroProposta, String benficiarioNome)
        //    {
        //        String whereAnd = "";
        //        String joinAtendimento = "";
        //        if (benficiarioNome == null) { benficiarioNome = ""; }

        //        String[] pnames = null;
        //        String[] values = null;

        //        if (!string.IsNullOrEmpty(numeroProposta))
        //        {
        //            pnames = new String[2] { "@contrato_numero", "@beneficiario_nome" };
        //            values = new String[2] { numeroProposta, "'%" + benficiarioNome + "%'" };

        //            //whereAnd = " AND contrato_numero=@contrato_numero ";
        //            whereAnd = string.Concat(" AND (contrato_numero='", numeroProposta, "' OR beneficiario_matriculaAssociativa='", numeroProposta, "') ");
        //        }
        //        else
        //        {
        //            pnames = new String[1] { "@beneficiario_nome" };
        //            values = new String[1] { "'%" + benficiarioNome + "%'" }; //"%" +  + "%"
        //        }

        //        String query = String.Concat("select TOP 60 contrato_id as ID, empresa_nome as EmpresaCobranca, contrato_numero as Numero, contrato_rascunho as Rascunho, contrato_cancelado as Cancelado, contrato_inativo as Inativo, plano_descricao as PlanoDescricao, operadora_nome as OperadoraNome, beneficiario_nome as BeneficiarioTitularNome ",
        //            "FROM contrato ",
        //            "INNER JOIN plano ON contrato_planoId=plano_id ",
        //            "INNER JOIN operadora ON contrato_operadoraid=operadora_id ",
        //            joinAtendimento,
        //            " LEFT JOIN contrato_beneficiario ON contrato_id=contratobeneficiario_contratoId AND contratobeneficiario_ativo=1 AND contratobeneficiario_tipo=", Convert.ToInt32(ContratoBeneficiario.TipoRelacao.Titular),
        //            " LEFT JOIN beneficiario ON beneficiario_id=contratobeneficiario_beneficiarioId AND contratobeneficiario_ativo=1 ",
        //            " left join cobranca_empresa on contrato_empresaCobrancaId = empresa_id ",
        //            //"WHERE operadora_id=", operadoraId, " AND beneficiario_nome LIKE @beneficiario_nome ", whereAnd,
        //            //" ORDER BY contrato_data DESC");
        //            "WHERE contrato_legado=1 and operadora_id=", operadoraId, " AND beneficiario_nome LIKE '%", benficiarioNome.Replace("'", ""), "%'", whereAnd,
        //            " ORDER BY contrato_data DESC");

        //        DataTable dt = new DataTable();

        //        using (SqlConnection conn = new SqlConnection(EntityBase._connString))
        //        {
        //            SqlDataAdapter adp = new SqlDataAdapter(query, conn);

        //            //for (int i = 0; i < pnames.Length; i++)
        //            //{
        //            //    adp.SelectCommand.Parameters.AddWithValue(pnames[i], values[i]);
        //            //}

        //            adp.Fill(dt);
        //            adp.Dispose();
        //            conn.Close();
        //        }

        //        return dt;
        //    }

        //    public static DataTable DTCarregarPorOperadoraID(Object operadoraId, String numero, String benficiarioNome, String codCobranca, String protocolo)
        //    {
        //        return DTCarregarPorOperadoraID(operadoraId, numero, benficiarioNome, codCobranca, protocolo, null, false, null, false);
        //    }

        //    public static DataTable DTCarregarPorOperadoraID(Object operadoraId, String numero, String benficiarioNome, String codCobranca, String protocolo, Object empresaCobrancaId, Boolean somenteInativos, String cpf, Boolean somenteAtivos)
        //    {
        //        if (cpf == null) { cpf = ""; }

        //        String whereAnd = "";
        //        String joinAtendimento = "";
        //        if (benficiarioNome == null) { benficiarioNome = ""; }
        //        String[] pnames = new String[5] { "@contrato_numero", "@beneficiario_nome", "@contrato_codcobranca", "@atendimento_id", "@beneficiario_cpf" };
        //        String[] values = new String[5] { numero, "%" + benficiarioNome + "%", codCobranca, protocolo, cpf };

        //        if (!String.IsNullOrEmpty(numero))
        //        {
        //            whereAnd = " AND contrato_numero=@contrato_numero ";
        //        }

        //        if (!String.IsNullOrEmpty(codCobranca))
        //        {
        //            whereAnd += " AND contrato_codcobranca=@contrato_codcobranca ";
        //        }

        //        if (!String.IsNullOrEmpty(protocolo))
        //        {
        //            whereAnd += " AND atendimento_id=@atendimento_id ";
        //            joinAtendimento = " INNER JOIN _atendimento on atendimento_propostaId=contrato_id ";
        //        }

        //        if (empresaCobrancaId != null)
        //        {
        //            whereAnd += " AND contrato_empresaCobrancaId=" + empresaCobrancaId;
        //        }

        //        if (somenteInativos)
        //        {
        //            whereAnd += " AND (contrato_cancelado=1 or contrato_inativo=1) ";
        //        }

        //        if (somenteAtivos)
        //        {
        //            whereAnd += " AND ( (contrato_cancelado=0 or contrato_cancelado is null ) and ( contrato_inativo=0 or contrato_inativo is null )) ";
        //        }

        //        if (!String.IsNullOrEmpty(cpf))
        //        {
        //            whereAnd += " AND beneficiario_cpf=@beneficiario_cpf ";
        //        }

        //        String query = String.Concat("select TOP 60 contrato_id as ID, empresa_nome as EmpresaCobranca, contrato_numero as Numero, contrato_rascunho as Rascunho, contrato_cancelado as Cancelado, contrato_inativo as Inativo, plano_descricao as PlanoDescricao, operadora_nome as OperadoraNome, beneficiario_nome as BeneficiarioTitularNome ",
        //            "FROM contrato ",
        //            "INNER JOIN plano ON contrato_planoId=plano_id ",
        //            "INNER JOIN operadora ON contrato_operadoraid=operadora_id ",
        //            joinAtendimento,
        //            " LEFT JOIN contrato_beneficiario ON contrato_id=contratobeneficiario_contratoId AND contratobeneficiario_ativo=1 AND contratobeneficiario_tipo=", Convert.ToInt32(ContratoBeneficiario.TipoRelacao.Titular),
        //            " LEFT JOIN beneficiario ON beneficiario_id=contratobeneficiario_beneficiarioId AND contratobeneficiario_ativo=1 ",
        //            " left join cobranca_empresa on contrato_empresaCobrancaId = empresa_id ",
        //            "WHERE operadora_id=", operadoraId, " AND beneficiario_nome LIKE @beneficiario_nome ", whereAnd,
        //            " ORDER BY contrato_data DESC");

        //        return LocatorHelper.Instance.ExecuteParametrizedQuery(query, pnames, values).Tables[0];
        //    }

        //    /// <summary>
        //    /// Carrega contratos inadimplentes levando em consideração cobranças em aberto, e não a propriedade Adimplente do objeto Contrato.
        //    /// </summary>
        //    /// <returns>Contratos inadimplentes.</returns>
        //    public static IList<Contrato> BuscarECarregarInadimplentes()
        //    {
        //        return BuscarECarregarInadimplentes_PORCOBRANCA(null);
        //    }
        //    /// <summary>
        //    /// Carrega contratos inadimplentes levando em consideração cobranças em aberto, e não a propriedade Adimplente do objeto Contrato.
        //    /// </summary>
        //    /// <param name="pm">Objeto PersistenceManager participante de uma transação.</param>
        //    /// <returns>Contratos inadimplentes.</returns>
        //    public static IList<Contrato> BuscarECarregarInadimplentes_PORCOBRANCA(PersistenceManager pm)
        //    {
        //        String qry = String.Concat("SELECT DISTINCT(cobranca_propostaId) AS ContratoID, contrato_id,contrato_estipulanteId,contrato_operadoraId,contrato_contratoAdmId,contrato_planoId,contrato_tipoContratoId,contrato_donoId,contrato_enderecoReferenciaId,contrato_enderecoCobrancaId,contrato_numero,contrato_numeroId,contrato_adimplente,contrato_cobrarTaxaAssociativa, contrato_tipoAcomodacao,contrato_admissao,contrato_vigencia,contrato_vencimento ",
        //            "FROM cobranca ",
        //            "   INNER JOIN contrato ON cobranca_propostaId=contrato_id ",
        //            "WHERE ",
        //            "   contrato_cancelado <> 1 AND ",
        //            "   contrato_rascunho <> 1 AND ",
        //            "   cobranca_pago=0 AND ",
        //            "   cobranca_datavencimento IS NOT NULL AND ",
        //            " cobranca_datavencimento < GETDATE()");

        //        using (DataTable dt = LocatorHelper.Instance.ExecuteQuery(qry, "resultset", pm).Tables[0])
        //        {
        //            if (dt != null && dt.Rows != null && dt.Rows.Count > 0)
        //            {
        //                List<Contrato> lista = new List<Contrato>();

        //                foreach (DataRow dr in dt.Rows)
        //                {
        //                    Contrato contrato = new Contrato(dr["contrato_id"]);
        //                    contrato.EstipulanteID = dr["contrato_estipulanteId"];
        //                    contrato.OperadoraID = dr["contrato_operadoraId"];
        //                    contrato.ContratoADMID = dr["contrato_contratoAdmId"];
        //                    contrato.PlanoID = dr["contrato_planoId"];
        //                    contrato.TipoContratoID = dr["contrato_tipoContratoId"];
        //                    contrato.DonoID = dr["contrato_donoId"];

        //                    lista.Add(contrato);
        //                }

        //                return lista;
        //            }
        //            else
        //                return null;
        //        }

        //        // LocatorHelper.Instance.ExecuteQuery<Contrato>(qry, typeof(Contrato), pm);
        //    }

        //    public static void SetaUsuarioLiberador(Object contratoId, Object usuarioId, PersistenceManager pm)
        //    {
        //        String command = String.Concat(
        //            "UPDATE contrato SET contrato_usuarioLiberador=",
        //            usuarioId, " WHERE contrato_id = ", contratoId);

        //        NonQueryHelper.Instance.ExecuteNonQuery(command, pm);
        //    }

        //    /// <summary>
        //    /// Checa se o número de contrato não está sendo usado por outro contrato.
        //    /// </summary>
        //    public static Boolean ContratoDisponivel(Object contratoId, Object operadoraId, String numero, ref String msgRetorno)
        //    {
        //        String query = "SELECT contrato_id FROM contrato WHERE contrato_rascunho=0 AND contrato_operadoraId=" + operadoraId + " AND contrato_numero=@numero ";

        //        if (contratoId != null)
        //            query += " AND contrato_id <> " + contratoId;

        //        DataTable dt = LocatorHelper.Instance.ExecuteParametrizedQuery(
        //            query, new String[] { "@numero" }, new String[] { numero }).Tables[0];

        //        Boolean valido = dt == null || dt.Rows.Count == 0;

        //        if (!valido)
        //        {
        //            msgRetorno = "Número de contrato já está em uso para essa operadora.";
        //        }

        //        return valido;
        //    }

        //    public static Boolean NumeroJaUtilizado(String numero, Object contratoId)
        //    {
        //        String query = "SELECT top 1 contrato_id FROM contrato WHERE contrato_numero=@numero ";

        //        if (contratoId != null)
        //            query += " AND contrato_id <> " + contratoId;

        //        DataTable dt = LocatorHelper.Instance.ExecuteParametrizedQuery(
        //            query, new String[] { "@numero" }, new String[] { numero }).Tables[0];

        //        Boolean valido = dt == null || dt.Rows.Count == 0;

        //        return valido;
        //    }

        //    public static Boolean NumeroDeContratoEmUso(String numero, String letra, Int32 zerosAEsquerda, Object operadoraId, PersistenceManager pm)
        //    {
        //        String _numero = EntityBase.GeraNumeroDeContrato(Convert.ToInt32(numero), zerosAEsquerda, letra);

        //        String qry = "SELECT contrato_id FROM contrato WHERE contrato_operadoraId=" + operadoraId + " AND contrato_numero=@NUM";
        //        IList<Contrato> ret = LocatorHelper.Instance.ExecuteParametrizedQuery<Contrato>(qry, new String[] { "@NUM" }, new String[] { _numero }, typeof(Contrato), pm);
        //        return ret != null;
        //    }

        //    public static Boolean CanceladoOuInativo(Object contratoId)
        //    {
        //        String qry = "SELECT contrato_id FROM contrato WHERE (contrato_inativo=1 OR contrato_cancelado=1) and contrato_id=" + contratoId;
        //        Object ret = LocatorHelper.Instance.ExecuteScalar(qry, null, null, null);
        //        return ret != null;
        //    }

        //    /// <summary>
        //    /// Realiza entrada no historico de mudanças do contrato.
        //    /// </summary>
        //    public static void AlteraStatusDeContrato(Object contratoId, Boolean cancelado)
        //    {
        //        AlteraStatusDeContrato(contratoId, cancelado, null);
        //    }
        //    /// <summary>
        //    /// Realiza entrada no historico de mudanças do contrato.
        //    /// </summary>
        //    public static void AlteraStatusDeContrato(Object contratoId, Boolean cancelado, PersistenceManager _pm)
        //    {
        //        String valor = "0", dataCancelamentoParam = ", contrato_alteracao=getdate() ";
        //        if (cancelado) { valor = "1"; dataCancelamentoParam = ", contrato_alteracao=getdate(), contrato_dataCancelamento=GetDate()"; }

        //        PersistenceManager pm = null;
        //        if (_pm != null)
        //            pm = _pm;
        //        else
        //        {
        //            pm = new PersistenceManager();
        //            pm.BeginTransactionContext();
        //        }

        //        try
        //        {
        //            String command = "UPDATE contrato SET contrato_cancelado=" + valor + dataCancelamentoParam + " WHERE contrato_id=" + contratoId;
        //            NonQueryHelper.Instance.ExecuteNonQuery(command, pm);

        //            Contrato contrato = new Contrato(contratoId);
        //            pm.Load(contrato);

        //            if (cancelado)
        //                ContratoStatusHistorico.Salvar(contrato.Numero, contrato.OperadoraID, ContratoStatusHistorico.eStatus.Cancelado, pm);
        //            else
        //                ContratoStatusHistorico.Salvar(contrato.Numero, contrato.OperadoraID, ContratoStatusHistorico.eStatus.ReAtivado, pm);

        //            if (_pm == null) { pm.Commit(); }
        //        }
        //        catch (Exception ex)
        //        {
        //            if (_pm == null) { pm.Rollback(); }
        //            throw ex;
        //        }
        //        finally
        //        {
        //            if (_pm == null) { pm = null; }
        //        }
        //    }

        //    /// <summary>
        //    /// Retorna o id do contrato administrativo de uma proposta.
        //    /// </summary>
        //    /// <param name="contratoId">ID da proposta (contrato com o segurado).</param>
        //    /// <param name="pm">Objeto PersistenceManager participante da transação, caso exista uma, ou null.</param>
        //    /// <returns>ID do contrato administrativo.</returns>
        //    public static Object CarregaContratoAdmID(Object contratoId, PersistenceManager pm)
        //    {
        //        String qry = "SELECT contrato_contratoAdmId FROM contrato WHERE contrato_id=" + contratoId;
        //        return LocatorHelper.Instance.ExecuteScalar(qry, null, null, pm);
        //    }

        //    public static Object CarregaContratoID(Object operadoraId, String contratoNumero, PersistenceManager pm)
        //    {
        //        String qry = "SELECT contrato_id FROM contrato WHERE contrato_numero='" + contratoNumero + "' AND contrato_operadoraId=" + operadoraId;
        //        return LocatorHelper.Instance.ExecuteScalar(qry, null, null, pm);
        //    }

        //    /// <summary>
        //    /// Retorna o último contrato do beneficiário.
        //    /// </summary>
        //    /// <param name="cpfTitular">CPF do beneficiário.</param>
        //    /// <param name="historico">Última entrada no histórico do contrato.</param>
        //    /// <param name="adimplente">TRUE para adimplente, do contrário FALSE.</param>
        //    /// <returns>Último contrato, ou null.</returns>
        //    public static Contrato CarregarUltimoContratoDoBeneficiario(String cpfTitular, ref ContratoStatusHistorico historico, Boolean cancelado)
        //    {
        //        String query = String.Concat("SELECT TOP 1 contrato.* FROM  contrato ",
        //            "INNER JOIN contrato_beneficiario ON contrato_id=contratobeneficiario_contratoId ",
        //            "INNER JOIN beneficiario ON beneficiario_id=contratobeneficiario_beneficiarioId ",
        //            "WHERE contrato_rascunho=0 AND beneficiario_cpf=@CPF");

        //        if (!cancelado) { query += " AND contrato_cancelado=0"; }
        //        else { query += " AND contrato_cancelado=1"; }

        //        query += " ORDER BY contrato_data DESC";

        //        String[] pName = new String[] { "@CPF" };
        //        String[] pValue = new String[] { cpfTitular };

        //        IList<Contrato> lista = LocatorHelper.Instance.ExecuteParametrizedQuery<Contrato>(query, pName, pValue, typeof(Contrato));

        //        if (lista == null) { return null; }

        //        IList<ContratoStatusHistorico> _historico = ContratoStatusHistorico.Carregar(lista[0].OperadoraID, lista[0].Numero);
        //        if (_historico != null) { historico = _historico[0]; }

        //        return lista[0];
        //        //return Convert.ToDateTime(ret, new System.Globalization.CultureInfo("pt-Br"));
        //    }


        //    /// <summary>
        //    /// Esse método foi escrito APENAS para calculo de demonstrativo de pagamento.
        //    /// </summary>
        //    public static Decimal CalculaValorDaProposta_TODOS(Object propostaId, DateTime dataReferencia, PersistenceManager pm, Boolean calculaTaxa, Boolean calculaValorEstipulante, ref List<CobrancaComposite> composite, Boolean forcaTabelaVigente)
        //    {
        //        if (pm == null) { pm = new PersistenceManager(); }
        //        composite = new List<CobrancaComposite>();

        //        Decimal valorAdicionais = 0, valorPlano = 0, valorPlanoAux = 0, valorAdicional = 0;
        //        Contrato contrato = new Contrato(propostaId);
        //        pm.Load(contrato);

        //        //beneficiarios ativos da proposta
        //        IList<ContratoBeneficiario> beneficiarios = ContratoBeneficiario.CarregarPorContratoID_Parcial(propostaId, false, false, pm);
        //        if (beneficiarios == null) { return 0; }

        //        //calcula valores de TAXA DE ASSOCIACAO
        //        Decimal valorEstipulante = 0;
        //        if (calculaValorEstipulante) { valorEstipulante = CalculaValorDaTaxaAssociativa(contrato, beneficiarios.Count, null, pm); }
        //        composite.Add(new CobrancaComposite(null, null, CobrancaComposite.eComposicaoTipo.TaxaAssociacao, valorEstipulante));

        //        ContratoBeneficiario.eStatus status = ContratoBeneficiario.eStatus.Desconhecido;
        //        foreach (ContratoBeneficiario contratoBeneficiario in beneficiarios)
        //        {
        //            status = (ContratoBeneficiario.eStatus)contratoBeneficiario.Status;

        //            #region nesses casos não calcula o valor
        //            if (status == ContratoBeneficiario.eStatus.Cancelado ||
        //                status == ContratoBeneficiario.eStatus.CancelamentoDevolvido ||
        //                status == ContratoBeneficiario.eStatus.CancelamentoPendente ||
        //                status == ContratoBeneficiario.eStatus.CancelamentoPendenteNaOperadora ||
        //                status == ContratoBeneficiario.eStatus.Excluido ||
        //                status == ContratoBeneficiario.eStatus.ExclusaoDevolvido ||
        //                status == ContratoBeneficiario.eStatus.ExclusaoPendente ||
        //                status == ContratoBeneficiario.eStatus.ExclusaoPendenteNaOperadora ||
        //                !contratoBeneficiario.DMED ||
        //                //status == ContratoBeneficiario.eStatus.Novo ||
        //                (dataReferencia < contratoBeneficiario.Vigencia && contratoBeneficiario.Tipo != 0)) //Vigencia
        //            {
        //                continue; // nesses casos não calcula o valor
        //            }

        //            if (!contratoBeneficiario.Ativo && contratoBeneficiario.DataInativacao != DateTime.MinValue && dataReferencia != DateTime.MinValue)
        //            {
        //                contratoBeneficiario.DataInativacao = new DateTime(contratoBeneficiario.DataInativacao.Year,
        //                    contratoBeneficiario.DataInativacao.Month, contratoBeneficiario.DataInativacao.Day, 23, 59, 59, 998);
        //                if (contratoBeneficiario.DataInativacao < dataReferencia) { continue; }
        //            }
        //            else if (!contratoBeneficiario.Ativo) { continue; }

        //            #endregion

        //            Beneficiario beneficiario = new Beneficiario(contratoBeneficiario.BeneficiarioID);
        //            beneficiario.Carregar_DataNascimento(pm);
        //            Int32 idade = Beneficiario.CalculaIdade(beneficiario.DataNascimento, dataReferencia);

        //            //calcula valores de ADICIONAIS
        //            IList<AdicionalBeneficiario> adicionaisBeneficiario =
        //                AdicionalBeneficiario.Carregar(propostaId, contratoBeneficiario.BeneficiarioID, pm);

        //            #region adicionais

        //            if (adicionaisBeneficiario != null)
        //            {
        //                foreach (AdicionalBeneficiario adicionalBeneficiario in adicionaisBeneficiario)
        //                {
        //                    valorAdicional = Adicional.CalculaValor(adicionalBeneficiario.AdicionalID,
        //                        adicionalBeneficiario.BeneficiarioID, idade, dataReferencia, pm);

        //                    valorAdicionais += valorAdicional;
        //                    composite.Add(new CobrancaComposite(null, adicionalBeneficiario.BeneficiarioID, CobrancaComposite.eComposicaoTipo.Adicional, valorAdicional));
        //                }

        //                adicionaisBeneficiario = null;
        //            }
        //            #endregion

        //            //calcula valor do PLANO
        //            valorPlanoAux = TabelaValor.CalculaValor(contratoBeneficiario.BeneficiarioID, idade,
        //                contrato.ContratoADMID, contrato.PlanoID,
        //                (Contrato.eTipoAcomodacao)contrato.TipoAcomodacao, pm, contrato.Admissao, dataReferencia, forcaTabelaVigente);

        //            if (valorPlanoAux == 0) { return 0; } //não foi localizada uma tabela vigente. interrompe o cálculo

        //            composite.Add(new CobrancaComposite(null, contratoBeneficiario.BeneficiarioID, CobrancaComposite.eComposicaoTipo.Plano, valorPlanoAux));
        //            valorPlano += valorPlanoAux;
        //        }

        //        beneficiarios = null;
        //        Decimal valorTaxa = 0;

        //        #region taxa da tabela de valor

        //        if (calculaTaxa)
        //        {
        //            IList<TabelaValor> tabela = TabelaValor.CarregarTabelaAtual(contrato.ContratoADMID, pm);
        //            if (tabela != null && tabela.Count > 0)
        //            {
        //                Taxa taxa = Taxa.CarregarPorTabela(tabela[0].ID, pm);
        //                tabela = null;
        //                if (taxa != null && !taxa.Embutido)
        //                {
        //                    valorTaxa = taxa.ValorEmbutido;
        //                    if (taxa.ValorEmbutido > 0)
        //                    {
        //                        composite.Add(new CobrancaComposite(null, null, CobrancaComposite.eComposicaoTipo.TaxaTabelaValor, valorTaxa));
        //                    }
        //                    taxa = null;
        //                }
        //            }
        //        }
        //        #endregion

        //        return valorPlano + valorAdicionais + valorEstipulante + valorTaxa - contrato.Desconto;
        //    }

        //    /* CALCULA VALOR */

        //    public static Decimal CalculaValorDaProposta2(Object propostaId, DateTime dataReferencia, PersistenceManager pm, Boolean calculaTaxa, Boolean calculaValorEstipulante, ref List<CobrancaComposite> composite, Boolean naoRecorrente)
        //    {
        //        return CalculaValorDaProposta(propostaId, dataReferencia, pm, calculaTaxa, calculaValorEstipulante, ref composite, false, naoRecorrente);
        //    }

        //    public static Decimal CalculaValorDaProposta(Object propostaId, DateTime dataReferencia, PersistenceManager pm, Boolean calculaTaxa, Boolean calculaValorEstipulante, ref List<CobrancaComposite> composite, Boolean forcaTabelaVigente, bool naoRecorrente)
        //    {
        //        if (pm == null) { pm = new PersistenceManager(); }
        //        composite = new List<CobrancaComposite>();

        //        Decimal valorAdicionais = 0, valorPlano = 0, valorPlanoAux = 0;
        //        Contrato contrato = new Contrato(propostaId);
        //        pm.Load(contrato);

        //        //beneficiarios ativos da proposta
        //        IList<ContratoBeneficiario> beneficiarios = ContratoBeneficiario.CarregarPorContratoID_Parcial(propostaId, false, false, pm);
        //        if (beneficiarios == null) { return 0; }

        //        //calcula valores de TAXA DE ASSOCIACAO
        //        Decimal valorEstipulante = 0;
        //        if (calculaValorEstipulante) { valorEstipulante = CalculaValorDaTaxaAssociativa(contrato, beneficiarios.Count, dataReferencia, pm); }
        //        if (valorEstipulante > 0)
        //        {
        //            composite.Add(new CobrancaComposite(null, null, CobrancaComposite.eComposicaoTipo.TaxaAssociacao, valorEstipulante));
        //        }

        //        ContratoBeneficiario.eStatus status = ContratoBeneficiario.eStatus.Desconhecido;
        //        foreach (ContratoBeneficiario contratoBeneficiario in beneficiarios)
        //        {
        //            status = (ContratoBeneficiario.eStatus)contratoBeneficiario.Status;

        //            #region nesses casos não calcula o valor
        //            if (status == ContratoBeneficiario.eStatus.Cancelado ||
        //                status == ContratoBeneficiario.eStatus.CancelamentoDevolvido ||
        //                status == ContratoBeneficiario.eStatus.CancelamentoPendente ||
        //                status == ContratoBeneficiario.eStatus.CancelamentoPendenteNaOperadora ||
        //                status == ContratoBeneficiario.eStatus.Excluido ||
        //                status == ContratoBeneficiario.eStatus.ExclusaoDevolvido ||
        //                status == ContratoBeneficiario.eStatus.ExclusaoPendente ||
        //                status == ContratoBeneficiario.eStatus.ExclusaoPendenteNaOperadora ||
        //                ////status == ContratoBeneficiario.eStatus.Novo ||
        //                //dataReferencia < contratoBeneficiario.Vigencia && contratoBeneficiario.Tipo != (int)ContratoBeneficiario.TipoRelacao.Titular ||
        //                contratoBeneficiario.DataInativacao != DateTime.MinValue && contratoBeneficiario.DataInativacao < dataReferencia)
        //            {
        //                continue; // nesses casos não calcula o valor
        //            }

        //            #endregion

        //            Beneficiario beneficiario = new Beneficiario(contratoBeneficiario.BeneficiarioID);
        //            beneficiario.Carregar_DataNascimento(pm);
        //            Int32 idade = Beneficiario.CalculaIdade(beneficiario.DataNascimento, dataReferencia);

        //            //calcula valores de ADICIONAIS
        //            IList<AdicionalBeneficiario> adicionaisBeneficiario =
        //                AdicionalBeneficiario.Carregar(propostaId, contratoBeneficiario.BeneficiarioID, pm);

        //            #region adicionais

        //            if (adicionaisBeneficiario != null)
        //            {
        //                foreach (AdicionalBeneficiario adicionalBeneficiario in adicionaisBeneficiario)
        //                {
        //                    //valorAdicional = Adicional.CalculaValor(adicionalBeneficiario.AdicionalID,
        //                    //    adicionalBeneficiario.BeneficiarioID, idade, dataReferencia, pm);

        //                    //valorAdicionais += valorAdicional;
        //                    //composite.Add(new CobrancaComposite(null, adicionalBeneficiario.BeneficiarioID, CobrancaComposite.eComposicaoTipo.Adicional, valorAdicional));

        //                    valorAdicionais += adicionalBeneficiario.RetornaValor(AdicionalBeneficiario._FormaPagtoBoleto, contrato.Vigencia, naoRecorrente);
        //                }

        //                adicionaisBeneficiario = null;
        //            }
        //            #endregion

        //            //calcula valor do PLANO
        //            valorPlanoAux = TabelaValor.CalculaValor(contratoBeneficiario.BeneficiarioID, idade,
        //                contrato.ContratoADMID, contrato.PlanoID,
        //                (Contrato.eTipoAcomodacao)contrato.TipoAcomodacao, pm, contrato.Admissao, dataReferencia, forcaTabelaVigente);

        //            //if (valorPlanoAux == 0) { return 0; } //não foi localizada uma tabela vigente. interrompe o cálculo

        //            if (valorPlanoAux > 0)
        //            {
        //                composite.Add(new CobrancaComposite(null, contratoBeneficiario.BeneficiarioID, CobrancaComposite.eComposicaoTipo.Plano, valorPlanoAux));
        //                valorPlano += valorPlanoAux;
        //            }
        //        }

        //        beneficiarios = null;
        //        Decimal valorTaxa = 0;

        //        #region taxa da tabela de valor

        //        if (calculaTaxa)
        //        {
        //            IList<TabelaValor> tabela = TabelaValor.CarregarTabelaAtual(contrato.ContratoADMID, pm);
        //            if (tabela != null && tabela.Count > 0)
        //            {
        //                Taxa taxa = Taxa.CarregarPorTabela(tabela[0].ID, pm);
        //                tabela = null;
        //                if (taxa != null && !taxa.Embutido)
        //                {
        //                    valorTaxa = taxa.ValorEmbutido;
        //                    if (taxa.ValorEmbutido > 0)
        //                    {
        //                        composite.Add(new CobrancaComposite(null, null, CobrancaComposite.eComposicaoTipo.TaxaTabelaValor, valorTaxa));
        //                    }
        //                    taxa = null;
        //                }
        //            }
        //        }
        //        #endregion

        //        return valorPlano + valorAdicionais + valorEstipulante + valorTaxa - contrato.Desconto;
        //    }

        //    public static Decimal ________CalculaValorDaProposta(Object propostaId, DateTime dataReferencia, PersistenceManager pm, Boolean calculaTaxa, Boolean calculaValorEstipulante, ref List<CobrancaComposite> composite, Boolean forcaTabelaVigente)
        //    {
        //        if (pm == null) { pm = new PersistenceManager(); }
        //        composite = new List<CobrancaComposite>();

        //        Decimal valorAdicionais = 0, valorPlano = 0, valorPlanoAux = 0, valorAdicional = 0;
        //        Contrato contrato = new Contrato(propostaId);
        //        pm.Load(contrato);

        //        //beneficiarios ativos da proposta
        //        IList<ContratoBeneficiario> beneficiarios = ContratoBeneficiario.CarregarPorContratoID_Parcial(propostaId, false, false, pm);
        //        if (beneficiarios == null) { return 0; }

        //        //calcula valores de TAXA DE ASSOCIACAO
        //        Decimal valorEstipulante = 0;
        //        if (calculaValorEstipulante) { valorEstipulante = CalculaValorDaTaxaAssociativa(contrato, beneficiarios.Count, dataReferencia, pm); }
        //        if (valorEstipulante > 0)
        //        {
        //            composite.Add(new CobrancaComposite(null, null, CobrancaComposite.eComposicaoTipo.TaxaAssociacao, valorEstipulante));
        //        }

        //        ContratoBeneficiario.eStatus status = ContratoBeneficiario.eStatus.Desconhecido;
        //        foreach (ContratoBeneficiario contratoBeneficiario in beneficiarios)
        //        {
        //            status = (ContratoBeneficiario.eStatus)contratoBeneficiario.Status;

        //            #region nesses casos não calcula o valor
        //            if (status == ContratoBeneficiario.eStatus.Cancelado ||
        //                status == ContratoBeneficiario.eStatus.CancelamentoDevolvido ||
        //                status == ContratoBeneficiario.eStatus.CancelamentoPendente ||
        //                status == ContratoBeneficiario.eStatus.CancelamentoPendenteNaOperadora ||
        //                status == ContratoBeneficiario.eStatus.Excluido ||
        //                status == ContratoBeneficiario.eStatus.ExclusaoDevolvido ||
        //                status == ContratoBeneficiario.eStatus.ExclusaoPendente ||
        //                status == ContratoBeneficiario.eStatus.ExclusaoPendenteNaOperadora ||
        //                //status == ContratoBeneficiario.eStatus.Novo ||
        //                dataReferencia < contratoBeneficiario.Vigencia && contratoBeneficiario.Tipo != (int)ContratoBeneficiario.TipoRelacao.Titular ||
        //                contratoBeneficiario.DataInativacao != DateTime.MinValue && contratoBeneficiario.DataInativacao < dataReferencia)
        //            {
        //                continue; // nesses casos não calcula o valor
        //            }

        //            #endregion

        //            Beneficiario beneficiario = new Beneficiario(contratoBeneficiario.BeneficiarioID);
        //            beneficiario.Carregar_DataNascimento(pm);
        //            Int32 idade = Beneficiario.CalculaIdade(beneficiario.DataNascimento, dataReferencia);

        //            //calcula valores de ADICIONAIS
        //            IList<AdicionalBeneficiario> adicionaisBeneficiario =
        //                AdicionalBeneficiario.Carregar(propostaId, contratoBeneficiario.BeneficiarioID, pm);

        //            #region adicionais

        //            if (adicionaisBeneficiario != null)
        //            {
        //                foreach (AdicionalBeneficiario adicionalBeneficiario in adicionaisBeneficiario)
        //                {
        //                    valorAdicional = Adicional.CalculaValor(adicionalBeneficiario.AdicionalID,
        //                        adicionalBeneficiario.BeneficiarioID, idade, dataReferencia, pm);

        //                    valorAdicionais += valorAdicional;
        //                    composite.Add(new CobrancaComposite(null, adicionalBeneficiario.BeneficiarioID, CobrancaComposite.eComposicaoTipo.Adicional, valorAdicional));
        //                }

        //                adicionaisBeneficiario = null;
        //            }
        //            #endregion

        //            //calcula valor do PLANO
        //            valorPlanoAux = TabelaValor.CalculaValor(contratoBeneficiario.BeneficiarioID, idade,
        //                contrato.ContratoADMID, contrato.PlanoID,
        //                (Contrato.eTipoAcomodacao)contrato.TipoAcomodacao, pm, contrato.Admissao, dataReferencia, forcaTabelaVigente);

        //            if (valorPlanoAux == 0) { return 0; } //não foi localizada uma tabela vigente. interrompe o cálculo

        //            composite.Add(new CobrancaComposite(null, contratoBeneficiario.BeneficiarioID, CobrancaComposite.eComposicaoTipo.Plano, valorPlanoAux));
        //            valorPlano += valorPlanoAux;
        //        }

        //        beneficiarios = null;
        //        Decimal valorTaxa = 0;

        //        #region taxa da tabela de valor

        //        if (calculaTaxa)
        //        {
        //            IList<TabelaValor> tabela = TabelaValor.CarregarTabelaAtual(contrato.ContratoADMID, pm);
        //            if (tabela != null && tabela.Count > 0)
        //            {
        //                Taxa taxa = Taxa.CarregarPorTabela(tabela[0].ID, pm);
        //                tabela = null;
        //                if (taxa != null && !taxa.Embutido)
        //                {
        //                    valorTaxa = taxa.ValorEmbutido;
        //                    if (taxa.ValorEmbutido > 0)
        //                    {
        //                        composite.Add(new CobrancaComposite(null, null, CobrancaComposite.eComposicaoTipo.TaxaTabelaValor, valorTaxa));
        //                    }
        //                    taxa = null;
        //                }
        //            }
        //        }
        //        #endregion

        //        return valorPlano + valorAdicionais + valorEstipulante + valorTaxa - contrato.Desconto;
        //    }

        //    public static Decimal CalculaValorDaPropostaSemTaxaAssociativa(Object propostaId, ContratoBeneficiario contratoBeneficiario, DateTime dataReferencia, PersistenceManager pm)
        //    {
        //        Decimal valorAdicionais = 0, valorPlano = 0;
        //        Contrato contrato = new Contrato(propostaId);
        //        pm.Load(contrato);

        //        Beneficiario beneficiario = new Beneficiario(contratoBeneficiario.BeneficiarioID);
        //        pm.Load(beneficiario);
        //        Int32 idade = Beneficiario.CalculaIdade(beneficiario.DataNascimento, dataReferencia);

        //        //calcula valores de ADICIONAIS
        //        IList<AdicionalBeneficiario> adicionaisBeneficiario =
        //            AdicionalBeneficiario.Carregar(propostaId, contratoBeneficiario.BeneficiarioID, pm);

        //        if (adicionaisBeneficiario != null)
        //        {
        //            foreach (AdicionalBeneficiario adicionalBeneficiario in adicionaisBeneficiario)
        //            {
        //                valorAdicionais += Adicional.CalculaValor(adicionalBeneficiario.AdicionalID,
        //                    adicionalBeneficiario.BeneficiarioID, idade, dataReferencia, pm);
        //            }

        //            adicionaisBeneficiario = null;
        //        }

        //        //calcula valor do PLANO
        //        if (dataReferencia == null || dataReferencia == DateTime.MinValue)
        //        {
        //            valorPlano += TabelaValor.CalculaValor(contratoBeneficiario.BeneficiarioID, idade,
        //                contrato.ContratoADMID, contrato.PlanoID,
        //                (Contrato.eTipoAcomodacao)contrato.TipoAcomodacao, pm, contrato.Admissao, null);
        //        }
        //        else
        //        {
        //            valorPlano += TabelaValor.CalculaValor(contratoBeneficiario.BeneficiarioID, idade,
        //                contrato.ContratoADMID, contrato.PlanoID,
        //                (Contrato.eTipoAcomodacao)contrato.TipoAcomodacao, pm, contrato.Admissao, dataReferencia);
        //        }

        //        return valorPlano + valorAdicionais - contrato.Desconto;
        //    }

        //    public static Decimal CalculaValorDaPropostaSemTaxaAssocSemAdicional(Contrato contrato, ContratoBeneficiario contratoBeneficiario, DateTime dataReferencia, PersistenceManager pm)
        //    {
        //        Decimal valorPlano = 0;

        //        Beneficiario beneficiario = new Beneficiario(contratoBeneficiario.BeneficiarioID);
        //        pm.Load(beneficiario);
        //        Int32 idade = Beneficiario.CalculaIdade(beneficiario.DataNascimento, dataReferencia);

        //        //calcula valor do PLANO
        //        valorPlano += TabelaValor.CalculaValor(contratoBeneficiario.BeneficiarioID, idade,
        //            contrato.ContratoADMID, contrato.PlanoID,
        //            (Contrato.eTipoAcomodacao)contrato.TipoAcomodacao, pm, contrato.Admissao, null);

        //        return valorPlano - contrato.Desconto;
        //    }

        //    public static Decimal CalculaValorDaTaxaAssociativa(Contrato contrato, Int32 qtdBeneficiarios, DateTime? dataRef, PersistenceManager pm)
        //    {
        //        if (contrato.CobrarTaxaAssociativa)
        //        {
        //            EstipulanteTaxa estipulanteTaxa = null;
        //            if (dataRef == null || dataRef.Value == DateTime.MinValue)
        //                estipulanteTaxa = EstipulanteTaxa.CarregarVigente(contrato.EstipulanteID, pm);
        //            else
        //                estipulanteTaxa = EstipulanteTaxa.CarregarVigente(contrato.EstipulanteID, dataRef.Value, pm);

        //            if (estipulanteTaxa != null)
        //            {
        //                if (((EstipulanteTaxa.eTipoTaxa)estipulanteTaxa.TipoTaxa) == EstipulanteTaxa.eTipoTaxa.PorProposta)
        //                {
        //                    return estipulanteTaxa.Valor;
        //                }
        //                else // taxa por vida
        //                {
        //                    if (qtdBeneficiarios == -1)
        //                    {
        //                        IList<ContratoBeneficiario> benefs = ContratoBeneficiario.CarregarPorContratoID_Parcial(contrato.ID, true, false, pm);
        //                        if (benefs != null)
        //                            qtdBeneficiarios = benefs.Count;
        //                        else
        //                            qtdBeneficiarios = 0;
        //                        benefs = null;
        //                    }
        //                    return (estipulanteTaxa.Valor * qtdBeneficiarios);
        //                }
        //            }
        //            else
        //                return 0;
        //        }
        //        else
        //            return 0;
        //    }




        //    public static Boolean VerificaExistenciaBeneficiarioNoContrato(Object beneficiarioId, Object contratoId)
        //    {
        //        String[] pName = new String[0];
        //        String[] pValue = new String[0];

        //        String query = " SELECT contrato.* " +
        //                    " FROM contrato " +
        //                    " INNER JOIN contrato_beneficiario ON contrato_id = contratobeneficiario_contratoId " +
        //                    " WHERE contratobeneficiario_beneficiarioId = " + beneficiarioId + " AND contrato_id = " + contratoId + " AND contratobeneficiario_ativo = 1 ";

        //        DataTable dt = LocatorHelper.Instance.ExecuteParametrizedQuery(
        //            query, pName, pValue).Tables[0];

        //        Boolean valido = dt == null || dt.Rows.Count == 0;

        //        return valido;
        //    }

        //    public static void AlterarNumeroDeContrato(Object contratoId, String novoNumero, PersistenceManager pm)
        //    {
        //        String[] names = new String[1] { "@numero" };
        //        String[] value = new String[1] { novoNumero };

        //        NonQueryHelper.Instance.ExecuteNonQuery("UPDATE contrato SET contrato_numero=@numero WHERE contrato_id=" + contratoId, names, value, pm);
        //    }

        //    public static void AlterarNumeroDeMatricula(Object contratoId, String novoNumero)
        //    {
        //        String[] names = new String[1] { "@numero" };
        //        String[] value = new String[1] { novoNumero };

        //        NonQueryHelper.Instance.ExecuteNonQuery("UPDATE contrato SET contrato_numeroMatricula=@numero WHERE contrato_id=" + contratoId, names, value, null);
        //    }

        //}

        ///// <summary>
        ///// Representa a composição da cobrança.
        ///// </summary>
        //[DBTable("cobranca_composicao")]
        //public class CobrancaComposite : EntityBase, IPersisteableEntity
        //{
        //    public enum eComposicaoTipo : int
        //    {
        //        Plano,
        //        TaxaAssociacao,
        //        TaxaTabelaValor,
        //        Adicional,
        //        Desconto
        //    }

        //    #region fields

        //    Object _id;
        //    Object _cobrancaId;
        //    Object _beneficiarioId;
        //    Int32 _tipo;
        //    Decimal _valor;

        //    String _beneficiarioNome;

        //    #endregion

        //    #region properties

        //    [DBFieldInfo("cobrancacomp_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("cobrancacomp_cobranaId", FieldType.Single)]
        //    public Object CobrancaID
        //    {
        //        get { return _cobrancaId; }
        //        set { _cobrancaId = value; }
        //    }

        //    [DBFieldInfo("cobrancacomp_beneficiarioId", FieldType.Single)]
        //    public Object BeneficiarioID
        //    {
        //        get { return _beneficiarioId; }
        //        set { _beneficiarioId = value; }
        //    }

        //    [DBFieldInfo("cobrancacomp_tipo", FieldType.Single)]
        //    public Int32 Tipo
        //    {
        //        get { return _tipo; }
        //        set { _tipo = value; }
        //    }

        //    [DBFieldInfo("cobrancacomp_valor", FieldType.Single)]
        //    public Decimal Valor
        //    {
        //        get { return _valor; }
        //        set { _valor = value; }
        //    }

        //    [Joinned("beneficiario_nome")]
        //    public String BeneficiarioNome
        //    {
        //        get { return _beneficiarioNome; }
        //        set { _beneficiarioNome = value; }
        //    }

        //    public String StrTipo
        //    {
        //        get
        //        {
        //            if ((eComposicaoTipo)_tipo == eComposicaoTipo.Adicional)
        //                return "Adicional";
        //            else if ((eComposicaoTipo)_tipo == eComposicaoTipo.Desconto)
        //                return "Desconto";
        //            else if ((eComposicaoTipo)_tipo == eComposicaoTipo.Plano)
        //                return "Plano";
        //            else if ((eComposicaoTipo)_tipo == eComposicaoTipo.TaxaAssociacao)
        //                return "Taxa associativa";
        //            else
        //                return "Taxa (tabela)";
        //        }
        //    }

        //    #endregion

        //    public CobrancaComposite() { }
        //    public CobrancaComposite(Object cobrancaId, Object beneficiarioId, eComposicaoTipo tipo, Decimal valor)
        //    {
        //        _cobrancaId = cobrancaId;
        //        _beneficiarioId = beneficiarioId;
        //        _tipo = Convert.ToInt32(tipo);
        //        _valor = valor;
        //    }

        //    public static void Salvar(Object cobrancaId, IList<CobrancaComposite> lista, PersistenceManager pm)
        //    {
        //        StringBuilder sb = new StringBuilder();

        //        if (lista == null) { return; }
        //        foreach (CobrancaComposite compos in lista)
        //        {
        //            sb.Append("INSERT INTO cobranca_composicao (cobrancacomp_cobranaId,cobrancacomp_beneficiarioId,cobrancacomp_tipo,cobrancacomp_valor) VALUES (");
        //            sb.Append(cobrancaId); sb.Append(", ");

        //            if (compos.BeneficiarioID != null)
        //                sb.Append(compos.BeneficiarioID);
        //            else
        //                sb.Append("NULL");
        //            sb.Append(", ");

        //            sb.Append(Convert.ToInt32(compos.Tipo));
        //            sb.Append(", '");
        //            sb.Append(compos.Valor.ToString(new System.Globalization.CultureInfo("en-US")));
        //            sb.Append("') ;");
        //        }

        //        try
        //        {
        //            NonQueryHelper.Instance.ExecuteNonQuery(sb.ToString(), pm);
        //        }
        //        catch
        //        {
        //        }

        //        sb.Remove(0, sb.Length);
        //        sb = null;
        //    }

        //    #region entity base methods

        //    public void Salvar(PersistenceManager pm)
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static void Remover(Object cobrancaId, PersistenceManager pm)
        //    {
        //        String cmd = "delete from cobranca_composicao where cobrancacomp_cobranaId=" + cobrancaId;
        //        NonQueryHelper.Instance.ExecuteNonQuery(cmd, pm);
        //    }

        //    public static IList<CobrancaComposite> Carregar(Object cobrancaId)
        //    {
        //        return Carregar(cobrancaId, null);
        //    }

        //    public static IList<CobrancaComposite> Carregar(Object cobrancaId, PersistenceManager pm)
        //    {
        //        String qry = String.Concat("cobranca_composicao.*,beneficiario_nome from cobranca_composicao left join beneficiario on cobrancacomp_beneficiarioId=beneficiario_id where cobrancacomp_cobranaId=", cobrancaId);

        //        return LocatorHelper.Instance.ExecuteQuery<CobrancaComposite>(qry, typeof(CobrancaComposite), pm);
        //    }
        //}

        //[DBTable("contratoStatusHistorico")]
        //public class ContratoStatusHistorico : EntityBase, IPersisteableEntity
        //{
        //    public enum eStatus : int
        //    {
        //        NoEstoque,
        //        ComCorretor,            // 1
        //        Rasurado,               // 2
        //        EmConferencia,          // 3
        //        NoCadastro,             // 4
        //        Cadastrado,             // 5
        //        Cancelado,              // 6
        //        ReAtivado,              // 7
        //        //DevolucaoParaAcerto   //8
        //        AlteradoNaOperadora,    // 8
        //        BeneficiarioAdicionado, // 9
        //        BeneficiarioAlterado,   //10
        //        BeneficiarioCancelado,  //11
        //        MudancaDePlano          //12
        //    }

        //    Object _id;
        //    Object _operadoraId;
        //    String _propostaNumero;
        //    Int32 _status;
        //    DateTime _data;

        //    #region propriedades

        //    [DBFieldInfo("contratostatushistorico_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("contratostatushistorico_operadoraId", FieldType.Single)]
        //    public Object OperadoraID
        //    {
        //        get { return _operadoraId; }
        //        set { _operadoraId = value; }
        //    }

        //    [DBFieldInfo("contratostatushistorico_propostaNumero", FieldType.Single)]
        //    public String PropostaNumero
        //    {
        //        get { return _propostaNumero; }
        //        set { _propostaNumero = value; }
        //    }

        //    [DBFieldInfo("contratostatushistorico_status", FieldType.Single)]
        //    public Int32 Status
        //    {
        //        get { return _status; }
        //        set { _status = value; }
        //    }

        //    [DBFieldInfo("contratostatushistorico_data", FieldType.Single)]
        //    public DateTime Data
        //    {
        //        get { return _data; }
        //        set { _data = value; }
        //    }

        //    #endregion

        //    public ContratoStatusHistorico() { _status = 0; }
        //    public ContratoStatusHistorico(Object id) : this() { _id = id; }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public static ContratoStatusHistorico Salvar(String numero, Object operadoraId, eStatus status, PersistenceManager pm)
        //    {
        //        ContratoStatusHistorico csh = new ContratoStatusHistorico();
        //        csh.Data = DateTime.Now;
        //        csh.OperadoraID = operadoraId;
        //        csh.PropostaNumero = numero;
        //        csh.Status = Convert.ToInt32(status);

        //        if (pm != null)
        //            pm.Save(csh);
        //        else
        //            csh.Salvar();

        //        return csh;
        //    }

        //    public static ContratoStatusHistorico Salvar(Int32 numero, Int32 qtdZerosEsquerda, String letra, Object operadoraId, eStatus status, PersistenceManager pm)
        //    {
        //        String _numero = EntityBase.GeraNumeroDeContrato(numero, qtdZerosEsquerda, letra);
        //        return ContratoStatusHistorico.Salvar(_numero, operadoraId, status, pm);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static IList<ContratoStatusHistorico> Carregar(Object operadoraId, String propostaNumero)
        //    {
        //        String query = String.Concat("* FROM contratoStatusHistorico WHERE contratostatushistorico_operadoraId = ",
        //            operadoraId, " AND contratostatushistorico_propostaNumero='", propostaNumero, "' ORDER BY contratostatushistorico_data DESC");

        //        return LocatorHelper.Instance.ExecuteQuery
        //            <ContratoStatusHistorico>(query, typeof(ContratoStatusHistorico));
        //    }
        //}

        //[DBTable("contrato_valor")]
        //public class ContratoValor : EntityBase, IPersisteableEntity
        //{
        //    Object _id;
        //    Object _contratoId;
        //    Decimal _valorTotal;
        //    Boolean _status;
        //    DateTime _data;

        //    #region propriedades

        //    [DBFieldInfo("contratovalor_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("contratovalor_contratoId", FieldType.Single)]
        //    public Object ContratoID
        //    {
        //        get { return _contratoId; }
        //        set { _contratoId = value; }
        //    }

        //    [DBFieldInfo("contratovalor_valorFinal", FieldType.Single)]
        //    public Decimal ValorTotal
        //    {
        //        get { return _valorTotal; }
        //        set { _valorTotal = value; }
        //    }

        //    [DBFieldInfo("contratovalor_status", FieldType.Single)]
        //    public Boolean Status
        //    {
        //        get { return _status; }
        //        set { _status = value; }
        //    }

        //    [DBFieldInfo("contratovalor_data", FieldType.Single)]
        //    public DateTime Data
        //    {
        //        get { return _data; }
        //        set { _data = value; }
        //    }

        //    #endregion

        //    public ContratoValor(Object id) : this() { _id = id; }
        //    public ContratoValor() { _status = true; _data = DateTime.Now; }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static ContratoValor CarregarUltimo(Object contratoId, PersistenceManager pm)
        //    {
        //        String query = String.Concat(" TOP 1 * FROM contrato_valor WHERE contratovalor_contratoId = ",
        //            contratoId, " AND contratovalor_status=1 ORDER BY contratovalor_data DESC");

        //        IList<ContratoValor> ret = LocatorHelper.Instance.
        //            ExecuteQuery<ContratoValor>(query, typeof(ContratoValor), pm);

        //        if (ret == null)
        //            return null;
        //        else
        //            return ret[0];
        //    }

        //    public static void InsereNovoValorSeNecessario(Object contratoId, Decimal valor, PersistenceManager pm)
        //    {
        //        ContratoValor cValor = ContratoValor.CarregarUltimo(contratoId, pm);
        //        if (cValor == null || cValor.ValorTotal != valor)
        //        {
        //            cValor = new ContratoValor();
        //            cValor.ContratoID = contratoId;
        //            cValor.Data = DateTime.Now;
        //            cValor.Status = true;
        //            cValor.ValorTotal = Convert.ToDecimal(valor);
        //            pm.Save(cValor);
        //        }
        //    }
        //}

        //[Serializable]
        //[DBTable("beneficiario")]
        //public class Beneficiario : EntityBase, IPersisteableEntity
        //{
        //    Object _id;
        //    String _nome;
        //    String _cpf;
        //    String _rg;
        //    String _rgUF;
        //    String _rgOrgaoExp;
        //    Object _estadoCivilId;
        //    DateTime _dataNascimento;
        //    DateTime _dataCasamento;
        //    String _fone;
        //    String _ramal1;
        //    String _fone2;
        //    String _ramal2;
        //    String _cel;
        //    String _celOperadora;
        //    String _email;
        //    String _nomeMae;
        //    String _sexo;
        //    Decimal _peso;
        //    Decimal _altura;
        //    String _declaracaoNascimentoVivo;
        //    String _cns;

        //    String _contratoNumero;
        //    int _tipoParticipacaoContrato;
        //    int _importId;
        //    Object _enriquecimentoId;

        //    #region propriedades

        //    [DBFieldInfo("beneficiario_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("beneficiario_nome", FieldType.Single)]
        //    public String Nome
        //    {
        //        get { return _nome; }
        //        set { _nome = value; }
        //    }

        //    [DBFieldInfo("beneficiario_codigoOrgao", FieldType.Single)]
        //    public String CodigoOrgaoAverbador
        //    {
        //        get;
        //        set;
        //    }

        //    [DBFieldInfo("beneficiario_cpf", FieldType.Single)]
        //    public String CPF
        //    {
        //        get { return _cpf; }
        //        set { _cpf = value; }
        //    }

        //    [DBFieldInfo("beneficiario_rg", FieldType.Single)]
        //    public String RG
        //    {
        //        get { return _rg; }
        //        set { _rg = value; }
        //    }

        //    [DBFieldInfo("beneficiario_rgUF", FieldType.Single)]
        //    public String RgUF
        //    {
        //        get { return _rgUF; }
        //        set { _rgUF = value; }
        //    }

        //    [DBFieldInfo("beneficiario_rgOrgaoExp", FieldType.Single)]
        //    public String RgOrgaoExp
        //    {
        //        get { return _rgOrgaoExp; }
        //        set { _rgOrgaoExp = value; }
        //    }

        //    //[DBFieldInfo("beneficiario_estadoCivilId", FieldType.Single)]
        //    //Object EstadoCivilID/////////////////////////////////////////////////////////////////////////
        //    //{
        //    //    get { return _estadoCivilId; }
        //    //    set { _estadoCivilId= value; }
        //    //}

        //    [DBFieldInfo("beneficiario_dataNascimento", FieldType.Single)]
        //    public DateTime DataNascimento
        //    {
        //        get { return _dataNascimento; }
        //        set { _dataNascimento = value; }
        //    }

        //    //[DBFieldInfo("beneficiario_dataCasamento", FieldType.Single)]
        //    //DateTime DataCasamento/////////////////////////////////////////////////////////////////////////
        //    //{
        //    //    get { return _dataCasamento; }
        //    //    set { _dataCasamento= value; }
        //    //}

        //    [DBFieldInfo("beneficiario_nomeMae", FieldType.Single)]
        //    public String NomeMae
        //    {
        //        get { return _nomeMae; }
        //        set { _nomeMae = value; }
        //    }

        //    [DBFieldInfo("beneficiario_telefone", FieldType.Single)]
        //    public String Telefone
        //    {
        //        get { return _fone; }
        //        set { _fone = value; }
        //    }

        //    public String FTelefone
        //    {
        //        get
        //        {
        //            return base.FormataTelefone(_fone);
        //        }
        //    }

        //    [DBFieldInfo("beneficiario_ramal", FieldType.Single)]
        //    public String Ramal
        //    {
        //        get { return _ramal1; }
        //        set { _ramal1 = value; }
        //    }

        //    [DBFieldInfo("beneficiario_telefone2", FieldType.Single)]
        //    public String Telefone2
        //    {
        //        get { return _fone2; }
        //        set { _fone2 = value; }
        //    }

        //    [DBFieldInfo("beneficiario_ramal2", FieldType.Single)]
        //    public String Ramal2
        //    {
        //        get { return _ramal2; }
        //        set { _ramal2 = value; }
        //    }

        //    [DBFieldInfo("beneficiario_celular", FieldType.Single)]
        //    public String Celular
        //    {
        //        get { return _cel; }
        //        set { _cel = value; }
        //    }

        //    [DBFieldInfo("beneficiario_celularOperadora", FieldType.Single)]
        //    public String CelularOperadora
        //    {
        //        get { return _celOperadora; }
        //        set { _celOperadora = value; }
        //    }

        //    public String FCelular
        //    {
        //        get
        //        {
        //            return base.FormataTelefone(_cel);
        //        }
        //    }

        //    [DBFieldInfo("beneficiario_email", FieldType.Single)]
        //    public String Email
        //    {
        //        get { return ToLower(_email); }
        //        set { _email = value; }
        //    }

        //    [DBFieldInfo("beneficiario_sexo", FieldType.Single)]
        //    public String Sexo
        //    {
        //        get { return _sexo; }
        //        set { _sexo = value; }
        //    }

        //    //[DBFieldInfo("beneficiario_peso", FieldType.Single)]
        //    //Decimal Peso//////////////////////////////////////////////////////////////////////////////////////
        //    //{
        //    //    get { return _peso; }
        //    //    set { _peso= value; }
        //    //}

        //    //[DBFieldInfo("beneficiario_altura", FieldType.Single)]
        //    //Decimal Altura/////////////////////////////////////////////////////////////////////////////////////
        //    //{
        //    //    get { return _altura; }
        //    //    set { _altura= value; }
        //    //}

        //    [DBFieldInfo("beneficiario_declaracaoNascimentoVivo", FieldType.Single)]
        //    public String DeclaracaoNascimentoVivo
        //    {
        //        get { return _declaracaoNascimentoVivo; }
        //        set { _declaracaoNascimentoVivo = value; }
        //    }

        //    [DBFieldInfo("beneficiario_cns", FieldType.Single)]
        //    public String CNS
        //    {
        //        get { return _cns; }
        //        set { _cns = value; }
        //    }

        //    [DBFieldInfo("beneficiario_matriculaAssociativa", FieldType.Single)]
        //    public string MatriculaAssociativa
        //    {
        //        get;
        //        set;
        //    }
        //    [DBFieldInfo("beneficiario_matriculaFuncional", FieldType.Single)]
        //    public string MatriculaFuncional
        //    {
        //        get;
        //        set;
        //    }
        //    [DBFieldInfo("beneficiario_iniciais", FieldType.Single)]
        //    public string Iniciais
        //    {
        //        get;
        //        set;
        //    }

        //    /// <summary>
        //    /// Joinned
        //    /// </summary>
        //    [Joinned("contrato_numero")]
        //    public String ContratoNumero
        //    {
        //        get { return _contratoNumero; }
        //        set { _contratoNumero = value; }
        //    }
        //    /// <summary>
        //    /// Joinned
        //    /// </summary>
        //    [Joinned("contratobeneficiario_tipo")]
        //    public int TipoParticipacaoContrato
        //    {
        //        get { return _tipoParticipacaoContrato; }
        //        set { _tipoParticipacaoContrato = value; }
        //    }

        //    [DBFieldInfo("importId", FieldType.Single)]
        //    public int ImportID
        //    {
        //        get { return _importId; }
        //        set { _importId = value; }
        //    }
        //    /// <summary>
        //    /// Joinned
        //    /// </summary>
        //    [Joinned("enriquecimentoId")]
        //    public Object EnriquecimentoID
        //    {
        //        get { return _enriquecimentoId; }
        //        set { _enriquecimentoId = value; }
        //    }


        //    #endregion

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        Beneficiario.limpaCPF(ref _cpf);
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }

        //    public void Carregar_DataNascimento(PersistenceManager pm)
        //    {
        //        String qry = "SELECT beneficiario_dataNascimento FROM beneficiario WHERE beneficiario_id=" + this._id;
        //        IList<Beneficiario> benef = LocatorHelper.Instance.ExecuteQuery<Beneficiario>(qry, typeof(Beneficiario), pm);

        //        if (benef == null)
        //            return;
        //        else
        //            this._dataNascimento = benef[0].DataNascimento;
        //    }
        //    #endregion



        //    /// <summary>
        //    /// Método para sinalizar o Beneficiário em um contrato. (Mudança de Status)
        //    /// </summary>
        //    /// <param name="ContratoID">ID do Contrato.</param>
        //    /// <param name="Status">Status a ser sinalizado.</param>
        //    private void DisparaEventoParaGeracaoArquivo(Object ContratoID, ContratoBeneficiario.eStatus Status)
        //    {
        //        if (ContratoID != null)
        //        {
        //            try
        //            {
        //                ContratoBeneficiario.AlteraStatusBeneficiario(ContratoID, this._id, Status);
        //            }
        //            catch (Exception) { throw; }
        //        }
        //        else
        //            throw new ArgumentNullException("ID de Contrato é nulo.");
        //    }

        //    private static String DateDiff(int interval, DateTime data)
        //    {
        //        return DateDiff(interval, data, DateTime.Now);
        //    }

        //    private static String DateDiff(int interval, DateTime data, DateTime dataReferencia)
        //    {
        //        String retorno = "";

        //        TimeSpan tsDuration;
        //        tsDuration = dataReferencia - data;

        //        Int32 dias = 0;
        //        Decimal iMeses = 0;
        //        Int32 meses = 0;
        //        Decimal iAnos = 0;
        //        Int32 anos = 0;

        //        if (interval == 1)
        //        {
        //            iAnos = Convert.ToDecimal(tsDuration.Days / 365.25);
        //            anos = (int)iAnos;
        //            iMeses = Convert.ToDecimal((iAnos - anos) * 12);
        //            meses = (int)iMeses;
        //            dias = (int)((iMeses - meses) * 24);

        //            TimeSpan tsDurationDia;
        //            data = data.AddYears(anos);
        //            data = data.AddMonths(meses);
        //            tsDurationDia = DateTime.Now - data;

        //            retorno = Convert.ToString(anos + "a " + meses + "m " + tsDurationDia.Days + "d");
        //        }
        //        else if (interval == 2)
        //        {
        //            //retorno = Convert.ToString(Convert.ToInt32(tsDuration.Days / 365));

        //            iAnos = Convert.ToDecimal(tsDuration.Days / 365.25);
        //            anos = (int)iAnos;

        //            retorno = anos.ToString();
        //        }

        //        return retorno;
        //    }

        //    /// <summary>
        //    /// Sinaliza o Beneficiário para o Arquivo de Alteração de Cadastro.
        //    /// </summary>
        //    /// <param name="ContratoID">ID do Contrato.</param>
        //    public void DisparaAlteracaoCadastro(Object ContratoID)
        //    {
        //        try
        //        {
        //            this.DisparaEventoParaGeracaoArquivo(ContratoID, ContratoBeneficiario.eStatus.AlteracaoCadastroPendente);
        //        }
        //        catch (Exception) { throw; }
        //    }

        //    /// <summary>
        //    /// Sinaliza o Beneficiário para o Arquivo de Exclusão de Cadastro.
        //    /// </summary>
        //    /// <param name="ContratoID">ID do Contrato.</param>
        //    public void DisparaExclusaoCadastro(Object ContratoID)
        //    {
        //        try
        //        {
        //            this.DisparaEventoParaGeracaoArquivo(ContratoID, ContratoBeneficiario.eStatus.ExclusaoPendente);
        //        }
        //        catch (Exception) { throw; }
        //    }

        //    /// <summary>
        //    /// Sinaliza o Beneficiário para o Arquivo de Segunda Via de Cartão Magnético.
        //    /// </summary>
        //    /// <param name="ContratoID">ID do Contrato.</param>
        //    public void DisparaSegundaViaCartao(Object ContratoID)
        //    {
        //        try
        //        {
        //            this.DisparaEventoParaGeracaoArquivo(ContratoID, ContratoBeneficiario.eStatus.SegundaViaCartaoPendente);
        //        }
        //        catch (Exception) { throw; }
        //    }

        //    public static int CalculaIdade(DateTime dataNascimento)
        //    {
        //        return Convert.ToInt32(DateDiff(2, dataNascimento));
        //    }

        //    public static int CalculaIdade(DateTime dataNascimento, DateTime dataReferencia)
        //    {
        //        int anos = Convert.ToInt32(DateDiff(2, dataNascimento, dataReferencia));
        //        return anos;
        //        //int anos = dataReferencia.Year - dataNascimento.Year;

        //        //if (dataReferencia.Month < dataNascimento.Month || (dataReferencia.Month == dataNascimento.Month && dataReferencia.Day < dataNascimento.Day))
        //        //    anos--;

        //        //return anos;
        //    }

        //    public Beneficiario() { _dataCasamento = DateTime.MinValue; }
        //    public Beneficiario(Object id) : this() { _id = id; }

        //    public static IList<Beneficiario> CarregarTodos()
        //    {
        //        return null;
        //    }

        //    static void limpaCPF(ref String cpf)
        //    {
        //        if (!String.IsNullOrEmpty(cpf))
        //        {
        //            cpf = cpf.Replace("_", "");
        //            cpf = cpf.Replace(".", "");
        //            cpf = cpf.Replace("-", "");
        //        }
        //    }

        //    //public static IList<Beneficiario> CarregarPorParametro(String nome, String cpf, String rg, SearchMatchType smtype)
        //    //{
        //    //    limpaCPF(ref cpf);

        //    //    StringBuilder query = new StringBuilder();
        //    //    query.Append("TOP 100 beneficiario.*, (select top 1 id_telMail from mailing where id_beneficiario=beneficiario.beneficiario_id and concluido=0) as enriquecimentoId FROM beneficiario ");

        //    //    System.Collections.Hashtable parameterAndValues = new System.Collections.Hashtable();

        //    //    String startChar = "";
        //    //    String finisChar = "";
        //    //    String operatorChar = "";

        //    //    if (smtype == SearchMatchType.InicioDoCampo || smtype == SearchMatchType.QualquerParteDoCampo)
        //    //    {
        //    //        finisChar = "%";
        //    //        operatorChar = " LIKE ";
        //    //    }
        //    //    if (smtype == SearchMatchType.QualquerParteDoCampo)
        //    //    {
        //    //        startChar = "%";
        //    //    }
        //    //    else if (smtype == SearchMatchType.CampoInteiro)
        //    //    {
        //    //        operatorChar = "=";
        //    //    }

        //    //    StringBuilder whereAnd = new StringBuilder();
        //    //    if (!String.IsNullOrEmpty(nome))
        //    //    {
        //    //        whereAnd.Append(" WHERE beneficiario_nome");
        //    //        whereAnd.Append(operatorChar);
        //    //        whereAnd.Append("@beneficiario_nome");

        //    //        parameterAndValues.Add("@beneficiario_nome", startChar + nome + finisChar);
        //    //    }

        //    //    if (!String.IsNullOrEmpty(cpf))
        //    //    {
        //    //        if (whereAnd.Length > 0) { whereAnd.Append(" AND "); }
        //    //        else { whereAnd.Append(" WHERE "); }

        //    //        whereAnd.Append(" beneficiario_cpf = @beneficiario_cpf");
        //    //        parameterAndValues.Add("@beneficiario_cpf", cpf);
        //    //    }

        //    //    if (!String.IsNullOrEmpty(rg))
        //    //    {
        //    //        if (whereAnd.Length > 0) { whereAnd.Append(" AND "); }
        //    //        else { whereAnd.Append(" WHERE "); }

        //    //        whereAnd.Append(" beneficiario_rg = @beneficiario_rg");
        //    //        parameterAndValues.Add("@beneficiario_rg", rg);
        //    //    }

        //    //    query.Append(whereAnd.ToString());

        //    //    query.Append(" ORDER BY beneficiario_nome");

        //    //    if (parameterAndValues.Count > 0)
        //    //    {
        //    //        String[] _params = new String[parameterAndValues.Count];
        //    //        String[] _values = new String[parameterAndValues.Count];

        //    //        int i = 0;
        //    //        foreach (System.Collections.DictionaryEntry item in parameterAndValues)
        //    //        {
        //    //            _params[i] = Convert.ToString(item.Key);
        //    //            _values[i] = Convert.ToString(item.Value);
        //    //            i++;
        //    //        }

        //    //        return LocatorHelper.Instance.ExecuteParametrizedQuery
        //    //            <Beneficiario>(query.ToString(), _params, _values, typeof(Beneficiario));
        //    //    }
        //    //    else
        //    //    {
        //    //        return LocatorHelper.Instance.ExecuteQuery<Beneficiario>(query.ToString(), typeof(Beneficiario));
        //    //    }
        //    //}

        //    /// <summary>
        //    /// Carrega um ou mais beneficiários com a mesma data de nascimento, nome, mas cpf DIFERENTE do informado
        //    /// </summary>
        //    public static IList<Beneficiario> CarregarPorParametro(DateTime nascimento, String nome, String cpf)
        //    {
        //        String qry = "* FROM beneficiario WHERE beneficiario_cpf = @cpf AND beneficiario_nome=@nome";

        //        if (nascimento != DateTime.MinValue)
        //        {
        //            qry = String.Concat(qry, " AND CONVERT(VARCHAR(20), beneficiario_dataNascimento, 103)='", nascimento.ToString("dd/MM/yyyy"), "'");
        //        }

        //        String[] _params = new String[2] { "@cpf", "@nome" };
        //        String[] _values = new String[2] { cpf, nome };

        //        return LocatorHelper.Instance.ExecuteParametrizedQuery
        //                <Beneficiario>(qry, _params, _values, typeof(Beneficiario));
        //    }

        //    public static IList<Beneficiario> CarregarPorParametro(String cpf, DateTime nascimento)
        //    {
        //        return CarregarPorParametro(cpf, nascimento, null);
        //    }

        //    public static IList<Beneficiario> CarregarPorParametro(String cpf, DateTime nascimento, PersistenceManager pm)
        //    {
        //        limpaCPF(ref cpf);
        //        System.Collections.Hashtable parameterAndValues = new System.Collections.Hashtable();

        //        StringBuilder query = new StringBuilder();
        //        query.Append("* FROM beneficiario ");

        //        query.Append(" WHERE beneficiario_cpf=@beneficiario_cpf ");
        //        parameterAndValues.Add("@beneficiario_cpf", cpf);

        //        if (nascimento != DateTime.MinValue)
        //        {
        //            query.Append(" AND  CONVERT(VARCHAR(20), beneficiario_dataNascimento, 103)='");
        //            query.Append(nascimento.ToString("dd/MM/yyyy"));
        //            query.Append("'");
        //        }

        //        String[] _params = new String[parameterAndValues.Count];
        //        String[] _values = new String[parameterAndValues.Count];

        //        int i = 0;
        //        foreach (System.Collections.DictionaryEntry item in parameterAndValues)
        //        {
        //            _params[i] = Convert.ToString(item.Key);
        //            _values[i] = Convert.ToString(item.Value);
        //            i++;
        //        }

        //        return LocatorHelper.Instance.ExecuteParametrizedQuery
        //                <Beneficiario>(query.ToString(), _params, _values, typeof(Beneficiario), pm);
        //    }

        //    public static IList<Beneficiario> CarregarPorParametro(String cpf, DateTime nascimento, String nomeMae, PersistenceManager pm)
        //    {
        //        limpaCPF(ref cpf);
        //        System.Collections.Hashtable parameterAndValues = new System.Collections.Hashtable();

        //        StringBuilder query = new StringBuilder();
        //        query.Append("* FROM beneficiario ");

        //        query.Append(" WHERE beneficiario_cpf=@beneficiario_cpf ");
        //        parameterAndValues.Add("@beneficiario_cpf", cpf);

        //        if (nascimento != DateTime.MinValue)
        //        {
        //            query.Append(" AND  CONVERT(VARCHAR(20), beneficiario_dataNascimento, 103)='");
        //            query.Append(nascimento.ToString("dd/MM/yyyy"));
        //            query.Append("'");
        //        }

        //        query.Append(" AND beneficiario_nomeMae=@beneficiario_nomeMae ");
        //        parameterAndValues.Add("@beneficiario_nomeMae", nomeMae);

        //        String[] _params = new String[parameterAndValues.Count];
        //        String[] _values = new String[parameterAndValues.Count];

        //        int i = 0;
        //        foreach (System.Collections.DictionaryEntry item in parameterAndValues)
        //        {
        //            _params[i] = Convert.ToString(item.Key);
        //            _values[i] = Convert.ToString(item.Value);
        //            i++;
        //        }

        //        return LocatorHelper.Instance.ExecuteParametrizedQuery
        //                <Beneficiario>(query.ToString(), _params, _values, typeof(Beneficiario), pm);
        //    }

        //    public static Object CarregarPorParametro(String nome, String nomeMae, PersistenceManager pm, DateTime nascimento, String cpf)
        //    {
        //        System.Collections.Hashtable parameterAndValues = new System.Collections.Hashtable();

        //        StringBuilder query = new StringBuilder();
        //        query.Append("SELECT beneficiario_id FROM beneficiario ");

        //        query.Append(" WHERE beneficiario_nome=@beneficiario_nome ");
        //        parameterAndValues.Add("@beneficiario_nome", nome);

        //        query.Append(" AND beneficiario_nomeMae=@beneficiario_nomeMae ");
        //        parameterAndValues.Add("@beneficiario_nomeMae", nomeMae);

        //        query.Append(" AND beneficiario_cpf=@beneficiario_cpf ");
        //        parameterAndValues.Add("@beneficiario_cpf", cpf);

        //        if (nascimento.Year > 1753)
        //        {
        //            query.Append(" AND CONVERT(varchar(20), beneficiario_dataNascimento, 103)=@beneficiario_dataNascimento ");
        //            parameterAndValues.Add("@beneficiario_dataNascimento", nascimento.ToString("dd/MM/yyyy"));
        //        }

        //        String[] _params = new String[parameterAndValues.Count];
        //        String[] _values = new String[parameterAndValues.Count];

        //        int i = 0;
        //        foreach (System.Collections.DictionaryEntry item in parameterAndValues)
        //        {
        //            _params[i] = Convert.ToString(item.Key);
        //            _values[i] = Convert.ToString(item.Value);
        //            i++;
        //        }

        //        return LocatorHelper.Instance.ExecuteScalar(query.ToString(), _params, _values, pm);
        //    }

        //    public static Object CarregarPorParametro(Object importId, PersistenceManager pm)
        //    {
        //        return LocatorHelper.Instance.ExecuteScalar("SELECT beneficiario_id FROM beneficiario WHERE importId=" + importId, null, null, pm);
        //    }

        //    public static IList<Beneficiario> CarregarPorContratoId(Object contratoId)
        //    {
        //        return null;
        //    }

        //    public static IList<Beneficiario> CarregarPorOperadoraId(Object operadoraId, String nome, String cpf, String rg)
        //    {
        //        limpaCPF(ref cpf);

        //        StringBuilder query = new StringBuilder();
        //        query.Append("beneficiario.*, contrato_numero, contratobeneficiario_tipo FROM beneficiario INNER JOIN contrato_beneficiario ON beneficiario_id=contratobeneficiario_beneficiarioId AND contratobeneficiario_ativo=1 INNER JOIN contrato ON contrato_id=contratobeneficiario_contratoId INNER JOIN plano ON plano_id = contrato_planoId INNER JOIN contratoadm ON plano_contratoId = contratoadm_id WHERE contratoadm_operadoraid= ");
        //        query.Append(operadoraId);

        //        System.Collections.Hashtable parameterAndValues = new System.Collections.Hashtable();
        //        StringBuilder whereAnd = new StringBuilder();

        //        if (!String.IsNullOrEmpty(nome))
        //        {
        //            query.Append(" AND beneficiario_nome LIKE @beneficiario_nome");
        //            parameterAndValues.Add("@beneficiario_nome", "%" + nome + "%");
        //        }

        //        if (!String.IsNullOrEmpty(cpf))
        //        {
        //            query.Append(" AND beneficiario_cpf = @beneficiario_cpf");
        //            parameterAndValues.Add("@beneficiario_cpf", cpf);
        //        }

        //        if (!String.IsNullOrEmpty(rg))
        //        {
        //            query.Append(" AND beneficiario_rg = @beneficiario_rg");
        //            parameterAndValues.Add("@beneficiario_rg", rg);
        //        }

        //        query.Append(" ORDER BY beneficiario_nome, contrato_numero");

        //        if (parameterAndValues.Count > 0)
        //        {
        //            String[] _params = new String[parameterAndValues.Count];
        //            String[] _values = new String[parameterAndValues.Count];

        //            int i = 0;
        //            foreach (System.Collections.DictionaryEntry item in parameterAndValues)
        //            {
        //                _params[i] = Convert.ToString(item.Key);
        //                _values[i] = Convert.ToString(item.Value);
        //                i++;
        //            }

        //            return LocatorHelper.Instance.ExecuteParametrizedQuery
        //                <Beneficiario>(query.ToString(), _params, _values, typeof(Beneficiario));
        //        }
        //        else
        //        {
        //            return LocatorHelper.Instance.ExecuteQuery<Beneficiario>(query.ToString(), typeof(Beneficiario));
        //        }
        //    }

        //    /// <summary>
        //    /// Checa se o cpf em questão está em uso. També faz a checagem quanto a validade do 
        //    /// cpf informado.
        //    /// </summary>
        //    public static Boolean ChecaCpf(Object beneficiarioId, String cpf)
        //    {
        //        limpaCPF(ref cpf);
        //        return ValidaCpf(cpf);
        //        //if (!ValidaCpf(cpf)) { return false; } else { return true; }

        //        //String query = "SELECT beneficiario_id FROM beneficiario WHERE beneficiario_cpf=@CPF";
        //        //if (beneficiarioId != null)
        //        //    query += " AND beneficiario_id <> " + beneficiarioId;

        //        //System.Data.DataTable dt = LocatorHelper.Instance.
        //        //    ExecuteParametrizedQuery(query, new String[] { "@CPF" }, new String[] { cpf }).Tables[0];

        //        //return dt == null || dt.Rows.Count == 0;
        //    }

        //    public static Boolean ChecaCpfEmUso(Object beneficiarioId, String cpf)
        //    {
        //        limpaCPF(ref cpf);
        //        if (!ValidaCpf(cpf)) { return false; }

        //        if (cpf == "99999999999") { return false; }

        //        String query = "SELECT beneficiario_id FROM beneficiario WHERE beneficiario_cpf=@CPF";
        //        if (beneficiarioId != null)
        //            query += " AND beneficiario_id <> " + beneficiarioId;

        //        System.Data.DataTable dt = LocatorHelper.Instance.
        //            ExecuteParametrizedQuery(query, new String[] { "@CPF" }, new String[] { cpf }).Tables[0];

        //        return dt == null || dt.Rows.Count == 0;
        //    }

        //    public static bool ValidaCpf(String vrCPF)
        //    {
        //        if (System.Configuration.ConfigurationManager.AppSettings["naoValidaDocs"] != null &&
        //            System.Configuration.ConfigurationManager.AppSettings["naoValidaDocs"].ToUpper() == "Y")
        //        {
        //            return true;
        //        }

        //        string valor = vrCPF.Replace(".", "");
        //        valor = valor.Replace("-", "");
        //        valor = valor.Replace("_", "");

        //        if (valor.Length != 11)
        //            return false;

        //        if (valor == "99999999999") { return false; }

        //        bool igual = true;
        //        for (int i = 1; i < 11 && igual; i++)
        //            if (valor[i] != valor[0])
        //                igual = false;

        //        if (igual || valor == "12345678909")
        //            return false;

        //        int[] numeros = new int[11];

        //        for (int i = 0; i < 11; i++)
        //            numeros[i] = int.Parse(
        //              valor[i].ToString());

        //        int soma = 0;
        //        for (int i = 0; i < 9; i++)
        //            soma += (10 - i) * numeros[i];

        //        int resultado = soma % 11;

        //        if (resultado == 1 || resultado == 0)
        //        {
        //            if (numeros[9] != 0)
        //                return false;
        //        }
        //        else if (numeros[9] != 11 - resultado)
        //            return false;

        //        soma = 0;
        //        for (int i = 0; i < 10; i++)
        //            soma += (11 - i) * numeros[i];

        //        resultado = soma % 11;

        //        if (resultado == 1 || resultado == 0)
        //        {
        //            if (numeros[10] != 0)
        //                return false;
        //        }
        //        else
        //            if (numeros[10] != 11 - resultado)
        //                return false;

        //        return true;
        //    }

        //    public static Object VerificaExistenciaCPF(String cpf)
        //    {
        //        limpaCPF(ref cpf);
        //        String query = "SELECT beneficiario_id FROM beneficiario WHERE beneficiario_cpf=@CPF";

        //        System.Data.DataTable dt = LocatorHelper.Instance.
        //            ExecuteParametrizedQuery(query, new String[] { "@CPF" }, new String[] { cpf }).Tables[0];

        //        Object beneficiarioId = new Object();

        //        if (dt != null && dt.Rows.Count > 0)
        //            beneficiarioId = dt.Rows[0].ItemArray[0];
        //        else
        //            beneficiarioId = null;

        //        return beneficiarioId;
        //    }

        //    /// <summary>
        //    /// Verifica a existência do Beneficiário por CPF e Data de Nascimento.
        //    /// </summary>
        //    /// <param name="cpf">CPF.</param>
        //    /// <param name="dataNascimento">Data de Nascimento.</param>
        //    /// <returns>Retorna o ID do Beneficiário.</returns>
        //    public static Object VerificaExistenciaCPF(String cpf, DateTime dataNascimento)
        //    {
        //        limpaCPF(ref cpf);
        //        String query = "SELECT beneficiario_id FROM beneficiario WHERE beneficiario_cpf=@CPF AND beneficiario_dataNascimento = @dataNascimento";

        //        System.Data.DataTable dt = LocatorHelper.Instance.
        //            ExecuteParametrizedQuery(query, new String[] { "@CPF", "@dataNascimento" }, new String[] { cpf, dataNascimento.ToString("yyyy-MM-dd") }).Tables[0];

        //        Object beneficiarioId = new Object();

        //        if (dt != null && dt.Rows.Count > 0)
        //            beneficiarioId = dt.Rows[0].ItemArray[0];
        //        else
        //            beneficiarioId = null;

        //        return beneficiarioId;
        //    }

        //    public static Object VerificaExistenciaCPF(String cpf, DateTime dataNascimento, String nomeMae, PersistenceManager pm)
        //    {
        //        limpaCPF(ref cpf);
        //        String query = "SELECT beneficiario_id FROM beneficiario WHERE beneficiario_cpf=@CPF AND beneficiario_dataNascimento = @dataNascimento AND beneficiario_nomeMae=@nomeMae";

        //        System.Data.DataTable dt = LocatorHelper.Instance.
        //            ExecuteParametrizedQuery(query, new String[] { "@CPF", "@dataNascimento", "@nomeMae" }, new String[] { cpf, dataNascimento.ToString("yyyy-MM-dd"), nomeMae }, pm).Tables[0];

        //        Object beneficiarioId = new Object();

        //        if (dt != null && dt.Rows.Count > 0)
        //            beneficiarioId = dt.Rows[0].ItemArray[0];
        //        else
        //            beneficiarioId = null;

        //        return beneficiarioId;
        //    }

        //    public Endereco Endereco
        //    {
        //        get
        //        {
        //            throw new System.NotImplementedException();
        //        }
        //        set
        //        {
        //        }
        //    }

        //    /// <summary>
        //    /// Importar os Beneficiários de um MDB. A versão tem que ser 2003. No caso de Windows 7 colocar o 
        //    /// MDB em uma pasta que tenha permissão, não utilize o Desktop.
        //    /// </summary>
        //    /// <param name="MDBPath">Caminho do MDB.</param>
        //    public static void Importar(String MDBPath)
        //    {
        //        #region Table Header

        //        const String NomeColumn = "NOME";
        //        const String SexoColumn = "SEXO";
        //        const String CPFColumn = "CPF";
        //        const String RGColumn = "RG";
        //        const String DataNascimentoColumn = "NASCIMENTO";
        //        const String EmailColumn = "EMAIL";
        //        const String NomeMaeColumn = "NOMEMAE";
        //        const String DDD1Column = "DDD1";
        //        const String Telefone1Column = "TEL1";
        //        const String Ramal1Column = "RAMAL1";
        //        const String DDD2Column = "DDD2";
        //        const String Telefone2Column = "TEL2";
        //        const String Ramal2Column = "RAMAL2";
        //        const String CelDDDColumn = "CEL_DDD";
        //        const String CelColumn = "CEL";
        //        const String CelOperadoraColumn = "CEL_OPERADORA";
        //        const String TipoLogr1Column = "TIPO_LOGR1";
        //        const String Logr1Column = "LOGRADOURO1";
        //        const String NumLogr1Column = "NUM_LOGR1";
        //        const String ComplLogr1Column = "COMPL_LOGR1";
        //        const String Bairro1Column = "BAIRRO1";
        //        const String Cidade1Column = "CIDADE1";
        //        const String UF1Column = "UF1";
        //        const String CEP1Column = "CEP1";
        //        const String TipoEnd1Column = "TIPO_END1";
        //        const String TipoLogr2Column = "TIPO_LOGR2";
        //        const String Logr2Column = "LOGRADOURO2";
        //        const String NumLogr2Column = "NUM_LOGR2";
        //        const String ComplLogr2Column = "COMPL_LOGR2";
        //        const String Bairro2Column = "BAIRRO2";
        //        const String Cidade2Column = "CIDADE2";
        //        const String UF2Column = "UF2";
        //        const String CEP2Column = "CEP2";
        //        const String TipoEnd2Column = "TIPO_END2";

        //        #endregion

        //        String mdbFilePath = MDBPath;
        //        String connectionString = String.Concat("Provider=Microsoft.Jet.OLEDB.4.0;Data Source=", mdbFilePath, ";User Id=Admin;");

        //        OleDbConnection connectionMDB = new OleDbConnection(connectionString);

        //        try
        //        {
        //            connectionMDB.Open();
        //        }
        //        catch (Exception) { throw; }

        //        OleDbCommand cmdMDB = connectionMDB.CreateCommand();

        //        cmdMDB.CommandType = CommandType.Text;
        //        cmdMDB.CommandText = "SELECT * FROM beneficiarios";

        //        OleDbDataReader drBeneficiario = cmdMDB.ExecuteReader();

        //        #region BeneficiarioImportVars

        //        String beneficiarioNome;
        //        String beneficiarioSexo;
        //        String beneficiarioCPF;
        //        String beneficiarioRG;
        //        String beneficiarioDataNascimento;
        //        String beneficiarioEmail;
        //        String beneficiarioNomeMae;
        //        String beneficiarioDDD1;
        //        String beneficiarioTelefone1;
        //        String beneficiarioRamal1;
        //        String beneficiarioDDD2;
        //        String beneficiarioTelefone2;
        //        String beneficiarioRamal2;
        //        String beneficiarioCelDDD;
        //        String beneficiarioCel;
        //        String beneficiarioCelOperadora;
        //        String beneficiarioTipoLogr1;
        //        String beneficiarioLogr1;
        //        String beneficiarioNumLogr1;
        //        String beneficiarioComplLogr1;
        //        String beneficiarioBairro1;
        //        String beneficiarioCidade1;
        //        String beneficiarioUF1;
        //        String beneficiarioCEP1;
        //        String beneficiarioTipoEnd1;
        //        String beneficiarioTipoLogr2;
        //        String beneficiarioLogr2;
        //        String beneficiarioNumLogr2;
        //        String beneficiarioComplLogr2;
        //        String beneficiarioBairro2;
        //        String beneficiarioCidade2;
        //        String beneficiarioUF2;
        //        String beneficiarioCEP2;
        //        String beneficiarioTipoEnd2;
        //        Beneficiario beneficiario = null;
        //        Endereco beneficiarioEndereco1 = null;
        //        Endereco beneficiarioEndereco2 = null;

        //        #endregion

        //        Int32 i = 0;

        //        PersistenceManager PMTransaction = new PersistenceManager();
        //        PMTransaction.BeginTransactionContext();

        //        while (drBeneficiario.HasRows && drBeneficiario.Read())
        //        {
        //            beneficiario = new Beneficiario();
        //            beneficiarioEndereco1 = new Endereco();
        //            beneficiarioEndereco2 = new Endereco();

        //            beneficiarioNome = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(NomeColumn)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(NomeColumn)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(NomeColumn)).ToString() : null;
        //            beneficiarioSexo = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(SexoColumn)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(SexoColumn)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(SexoColumn)).ToString() : null;
        //            beneficiarioCPF = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(CPFColumn)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(CPFColumn)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(CPFColumn)).ToString() : null;
        //            beneficiarioRG = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(RGColumn)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(RGColumn)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(RGColumn)).ToString() : null;
        //            beneficiarioDataNascimento = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(DataNascimentoColumn)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(DataNascimentoColumn)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(DataNascimentoColumn)).ToString() : null;

        //            try
        //            {
        //                beneficiarioEmail = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(EmailColumn)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(EmailColumn)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(EmailColumn)).ToString() : null;
        //            }
        //            catch (Exception) { beneficiarioEmail = String.Empty; }

        //            try
        //            {
        //                beneficiarioNomeMae = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(NomeMaeColumn)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(NomeMaeColumn)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(NomeMaeColumn)).ToString() : null;
        //            }
        //            catch (Exception) { beneficiarioNomeMae = String.Empty; }

        //            beneficiarioDDD1 = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(DDD1Column)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(DDD1Column)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(DDD1Column)).ToString() : null;
        //            beneficiarioTelefone1 = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(Telefone1Column)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(Telefone1Column)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(Telefone1Column)).ToString() : null;
        //            beneficiarioRamal1 = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(Ramal1Column)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(Ramal1Column)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(Ramal1Column)).ToString() : null;
        //            beneficiarioDDD2 = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(DDD2Column)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(DDD2Column)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(DDD2Column)).ToString() : null;
        //            beneficiarioTelefone2 = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(Telefone2Column)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(Telefone2Column)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(Telefone2Column)).ToString() : null;
        //            beneficiarioRamal2 = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(Ramal2Column)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(Ramal2Column)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(Ramal2Column)).ToString() : null;
        //            beneficiarioCelDDD = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(CelDDDColumn)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(CelDDDColumn)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(CelDDDColumn)).ToString() : null;
        //            beneficiarioCel = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(CelColumn)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(CelColumn)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(CelColumn)).ToString() : null;
        //            beneficiarioCelOperadora = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(CelOperadoraColumn)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(CelOperadoraColumn)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(CelOperadoraColumn)).ToString() : null;

        //            beneficiarioTipoLogr1 = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(TipoLogr1Column)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(TipoLogr1Column)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(TipoLogr1Column)).ToString() : null;
        //            beneficiarioLogr1 = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(Logr1Column)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(Logr1Column)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(Logr1Column)).ToString() : null;
        //            beneficiarioNumLogr1 = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(NumLogr1Column)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(NumLogr1Column)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(NumLogr1Column)).ToString() : null;
        //            beneficiarioComplLogr1 = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(ComplLogr1Column)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(ComplLogr1Column)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(ComplLogr1Column)).ToString() : null;
        //            beneficiarioBairro1 = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(Bairro1Column)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(Bairro1Column)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(Bairro1Column)).ToString() : null;
        //            beneficiarioCidade1 = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(Cidade1Column)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(Cidade1Column)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(Cidade1Column)).ToString() : null;
        //            beneficiarioUF1 = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(UF1Column)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(UF1Column)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(UF1Column)).ToString() : null;
        //            beneficiarioCEP1 = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(CEP1Column)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(CEP1Column)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(CEP1Column)).ToString() : null;
        //            beneficiarioTipoEnd1 = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(TipoEnd1Column)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(TipoEnd1Column)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(TipoEnd1Column)).ToString() : null;

        //            beneficiarioTipoLogr2 = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(TipoLogr2Column)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(TipoLogr2Column)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(TipoLogr2Column)).ToString() : null;
        //            beneficiarioLogr2 = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(Logr2Column)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(Logr2Column)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(Logr2Column)).ToString() : null;
        //            beneficiarioNumLogr2 = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(NumLogr2Column)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(NumLogr2Column)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(NumLogr2Column)).ToString() : null;
        //            beneficiarioComplLogr2 = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(ComplLogr2Column)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(ComplLogr2Column)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(ComplLogr2Column)).ToString() : null;
        //            beneficiarioBairro2 = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(Bairro2Column)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(Bairro2Column)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(Bairro2Column)).ToString() : null;
        //            beneficiarioCidade2 = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(Cidade2Column)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(Cidade2Column)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(Cidade2Column)).ToString() : null;
        //            beneficiarioUF2 = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(UF2Column)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(UF2Column)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(UF2Column)).ToString() : null;
        //            beneficiarioCEP2 = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(CEP2Column)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(CEP2Column)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(CEP2Column)).ToString() : null;
        //            beneficiarioTipoEnd2 = (drBeneficiario.GetValue(drBeneficiario.GetOrdinal(TipoEnd2Column)) != null && !(drBeneficiario.GetValue(drBeneficiario.GetOrdinal(TipoEnd2Column)) is System.DBNull)) ? drBeneficiario.GetValue(drBeneficiario.GetOrdinal(TipoEnd2Column)).ToString() : null;

        //            beneficiario.ID = Beneficiario.VerificaExistenciaCPF(beneficiarioCPF, Convert.ToDateTime(beneficiarioDataNascimento));

        //            beneficiario.Nome = beneficiarioNome;
        //            beneficiario.CPF = beneficiarioCPF;
        //            beneficiario.Sexo = (!String.IsNullOrEmpty(beneficiarioSexo)) ? (beneficiarioSexo.Equals("M")) ? "1" : "2" : null;
        //            beneficiario.RG = beneficiarioRG;
        //            beneficiario.DataNascimento = Convert.ToDateTime(beneficiarioDataNascimento);
        //            beneficiario.Email = beneficiarioEmail;
        //            beneficiario.NomeMae = beneficiarioNomeMae;

        //            if (!String.IsNullOrEmpty(beneficiarioDDD1) && !String.IsNullOrEmpty(beneficiarioTelefone1))
        //            {
        //                beneficiario.Telefone = String.Concat("(", Convert.ToInt32(beneficiarioDDD1).ToString(), ") ", beneficiarioTelefone1);
        //                beneficiario.Ramal = beneficiarioRamal1;
        //            }

        //            if (!String.IsNullOrEmpty(beneficiarioDDD2) && !String.IsNullOrEmpty(beneficiarioTelefone2))
        //            {
        //                beneficiario.Telefone2 = String.Concat("(", Convert.ToInt32(beneficiarioDDD2).ToString(), ") ", beneficiarioTelefone2);
        //                beneficiario.Ramal2 = beneficiarioRamal2;
        //            }

        //            if (!String.IsNullOrEmpty(beneficiarioCelDDD) && !String.IsNullOrEmpty(beneficiarioCel) && !String.IsNullOrEmpty(beneficiarioCelOperadora))
        //            {
        //                beneficiario.Celular = String.Concat("(", Convert.ToInt32(beneficiarioCelDDD).ToString(), ") ", beneficiarioCel);
        //                beneficiario.CelularOperadora = beneficiarioCelOperadora;
        //            }

        //            try
        //            {
        //                PMTransaction.Save(beneficiario);
        //            }
        //            catch (Exception)
        //            {
        //                PMTransaction.Rollback();
        //                throw;
        //            }

        //            beneficiarioEndereco1.DonoId = beneficiario.ID;
        //            beneficiarioEndereco1.DonoTipo = (int)Endereco.TipoDono.Beneficiario;
        //            beneficiarioEndereco1.Logradouro = String.Concat(beneficiarioTipoLogr1.Replace(":", String.Empty), " ", beneficiarioLogr1);
        //            beneficiarioEndereco1.Numero = beneficiarioNumLogr1;
        //            beneficiarioEndereco1.Complemento = beneficiarioComplLogr1;
        //            beneficiarioEndereco1.Bairro = beneficiarioBairro1;
        //            beneficiarioEndereco1.Cidade = beneficiarioCidade1;
        //            beneficiarioEndereco1.UF = beneficiarioUF1;
        //            beneficiarioEndereco1.CEP = beneficiarioCEP1;
        //            beneficiarioEndereco1.Tipo = (!String.IsNullOrEmpty(beneficiarioTipoEnd1)) ? (beneficiarioTipoEnd1.Equals("RESIDENCIA")) ? (int)Endereco.TipoEndereco.Residencial : (int)Endereco.TipoEndereco.Comercial : 0; ;

        //            try
        //            {
        //                beneficiarioEndereco1.Importar(PMTransaction);
        //            }
        //            catch (Exception)
        //            {
        //                PMTransaction.Rollback();
        //                throw;
        //            }

        //            if (!String.IsNullOrEmpty(beneficiarioLogr2))
        //            {
        //                beneficiarioEndereco2.DonoId = beneficiario.ID;
        //                beneficiarioEndereco2.DonoTipo = (int)Endereco.TipoDono.Beneficiario;
        //                beneficiarioEndereco2.Logradouro = String.Concat(beneficiarioTipoLogr2.Replace(":", String.Empty), " ", beneficiarioLogr2);
        //                beneficiarioEndereco2.Numero = beneficiarioNumLogr2;
        //                beneficiarioEndereco2.Complemento = beneficiarioComplLogr2;
        //                beneficiarioEndereco2.Bairro = beneficiarioBairro2;
        //                beneficiarioEndereco2.Cidade = beneficiarioCidade2;
        //                beneficiarioEndereco2.UF = beneficiarioUF2;
        //                beneficiarioEndereco2.CEP = beneficiarioCEP2;
        //                beneficiarioEndereco2.Tipo = (!String.IsNullOrEmpty(beneficiarioTipoEnd2)) ? (beneficiarioTipoEnd2.Equals("RESIDENCIA")) ? (int)Endereco.TipoEndereco.Residencial : (int)Endereco.TipoEndereco.Comercial : 0; ;

        //                try
        //                {
        //                    beneficiarioEndereco2.Importar(PMTransaction);
        //                }
        //                catch (Exception)
        //                {
        //                    PMTransaction.Rollback();
        //                    throw;
        //                }
        //            }

        //            i++;

        //            PMTransaction.Commit();
        //        }

        //        PMTransaction.Dispose();
        //        PMTransaction = null;

        //        drBeneficiario.Close();
        //        drBeneficiario.Dispose();
        //        drBeneficiario = null;

        //        cmdMDB.Dispose();
        //        cmdMDB = null;

        //        connectionMDB.Close();
        //        connectionMDB.Dispose();
        //        connectionMDB = null;
        //    }
        //}

        //internal class CobrancaConfig
        //{
        //    CobrancaConfig() { }

        //    /// <summary>
        //    /// Número agencia, C/C do cedente e DV do cedente
        //    /// </summary>
        //    public static readonly String C006 = ConfigurationManager.AppSettings["UniC006"];
        //    /// <summary>
        //    /// Codigo (grupo) empresarial com 4 digitos
        //    /// </summary>
        //    public static readonly String C007 = ConfigurationManager.AppSettings["UniC007"];
        //    /// <summary>
        //    /// Tipo de formulário (2 para bloqueto)
        //    /// </summary>
        //    public static readonly String C008 = ConfigurationManager.AppSettings["UniC008"];
        //    /// <summary>
        //    /// Tipo de crítica: 0=cliente informa DV ; 1=cliente não informa
        //    /// </summary>
        //    public static readonly String C009 = ConfigurationManager.AppSettings["UniC009"];
        //    /// <summary>
        //    /// Tipo de postagem
        //    /// </summary>
        //    public static readonly String C010 = ConfigurationManager.AppSettings["UniC010"];
        //    /// <summary>
        //    /// Codigo empresarial com 7 digitos
        //    /// </summary>
        //    public static readonly String C011 = ConfigurationManager.AppSettings["UniC011"];
        //    /// <summary>
        //    /// Codigo da mensagem
        //    /// </summary>
        //    public static readonly String C012 = ConfigurationManager.AppSettings["UniC012"];
        //    /// <summary>
        //    /// Número agencia depositaria
        //    /// </summary>
        //    public static readonly String C025 = ConfigurationManager.AppSettings["UniC025"];
        //    /// <summary>
        //    /// Número agencia, C/C do cedente e DV (11 digitos)
        //    /// </summary>
        //    public static readonly String C026 = ConfigurationManager.AppSettings["UniC026"];
        //    /// <summary>
        //    /// Juros de mora por dia
        //    /// </summary>
        //    public static readonly String C039 = ConfigurationManager.AppSettings["UniC039"];

        //    public static readonly String C044a = "1";
        //    /// <summary>
        //    /// Espécie de documento
        //    /// </summary>
        //    public static readonly String C044 = ConfigurationManager.AppSettings["UniC044"];
        //    /// <summary>
        //    /// Identificacao de aceite do titulo.
        //    /// </summary>
        //    public static readonly String C045 = ConfigurationManager.AppSettings["UniC045"];
        //    /// <summary>
        //    /// Código da carteira.
        //    /// </summary>
        //    public static readonly String C047 = ConfigurationManager.AppSettings["UniC047"];

        //    public static readonly String MultaPercentual = "0,02";
        //}

        //[DBTable("cobranca")]
        //public class Cobranca : EntityBase, IPersisteableEntity
        //{
        //    public class UI
        //    {
        //        //public static void FillComboCarteira(System.Web.UI.WebControls.DropDownList cbo)
        //        //{
        //        //    cbo.Items.Clear();
        //        //    cbo.Items.Add(new System.Web.UI.WebControls.ListItem("Unibanco", "0"));
        //        //    cbo.Items.Add(new System.Web.UI.WebControls.ListItem("Itau sem registro", "1"));
        //        //}

        //        //public static void FillComboFormato(System.Web.UI.WebControls.DropDownList cbo)
        //        //{
        //        //    cbo.Items.Clear();
        //        //    cbo.Items.Add(new System.Web.UI.WebControls.ListItem("Formato antigo", "0"));
        //        //    cbo.Items.Add(new System.Web.UI.WebControls.ListItem("Formato novo (Carnê)", "1"));
        //        //}
        //    }

        //    public static string ConvenioUBRASP = "2887755";
        //    public static string Convenio2UBRASP = "2896830"; //

        //    public enum eTipoBanco : int
        //    {
        //        Unibanco,
        //        Itau,
        //        BancoDoBrasil,
        //        Santander
        //    }

        //    public enum eTipo : int
        //    {
        //        Normal,
        //        Complementar,
        //        Dupla,
        //        Indefinido,
        //        Parcelamento,
        //        DiferencaUbraSP,
        //        BoletoUbraspSP
        //    }

        //    public enum eCarteira : int
        //    {
        //        /// <summary>
        //        /// 0
        //        /// </summary>
        //        Unibanco,
        //        /// <summary>
        //        /// 1
        //        /// </summary>
        //        ItauSemRegistro
        //    }

        //    #region Fields

        //    Object _id;
        //    Object _propostaId;
        //    Decimal _valor;
        //    Decimal _valorNominal;
        //    DateTime _vencimento;
        //    DateTime _vencimentoIsencaoJuro;
        //    DateTime _dataCriacao;
        //    DateTime _dataBaixaAuto;
        //    Boolean _pago;
        //    DateTime _dataPagto;
        //    Decimal _valorPagto;
        //    Object _arquivoIdUltimoEnvio;
        //    Int32 _parcela;
        //    Int32 _tipo;
        //    Int32 _tipoTemp;
        //    Object _cobrancaRefId;
        //    Boolean _comissaoPaga;
        //    Boolean _cancelada;
        //    Boolean _dataVencimentoForcada;
        //    String _nossoNumero;

        //    Int32 _carteira;

        //    String _contratoCodCobranca;
        //    Object _operadoraId;
        //    String _contratoNumero;
        //    String _contratoTitularNome;
        //    string _contratoTitularCpf;
        //    Object _contratoEnderecoCobrancaId;
        //    String _filialNome;
        //    String _operadoraNome;
        //    String _estipulanteNome;
        //    Object _contratoBeneficiarioId;
        //    String _contratoBeneficiarioEmail;

        //    Object _composicaoBeneficiarioId;
        //    Int32 _composicaoTipo;
        //    Decimal _composicaoValor;
        //    String _composicaoResumo;

        //    Object _contratoAdmId;
        //    DateTime _contratoDataAdmissao;

        //    Object _headerParcId;
        //    Object _headerItemId;
        //    String _itemParcObs;

        //    Decimal _jurosRS;
        //    Decimal _multaRS;
        //    Decimal _amortizacao;

        //    //String _obsGerais;

        //    ArquivoRemessaCriterio _criterio;
        //    #endregion

        //    #region Properties

        //    [DBFieldInfo("cobranca_id", FieldType.PrimaryKeyAndIdentity)]
        //    //[DBFieldInfo("cobranca_id", FieldType.Single)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("cobranca_propostaId", FieldType.Single)]
        //    public Object PropostaID
        //    {
        //        get { return _propostaId; }
        //        set { _propostaId = value; }
        //    }

        //    /// <summary>
        //    /// Quando cobrança dupla, esta propriedade guardará o ID da cobrança que compões esta cobrança.
        //    /// </summary>
        //    [DBFieldInfo("cobranca_cobrancaRefId", FieldType.Single)]
        //    public Object CobrancaRefID
        //    {
        //        get { return _cobrancaRefId; }
        //        set { _cobrancaRefId = value; }
        //    }

        //    [DBFieldInfo("cobranca_arquivoUltimoEnvioId", FieldType.Single)]
        //    public Object ArquivoIDUltimoEnvio
        //    {
        //        get { return _arquivoIdUltimoEnvio; }
        //        set { _arquivoIdUltimoEnvio = value; }
        //    }

        //    [DBFieldInfo("cobranca_valor", FieldType.Single)]
        //    public Decimal Valor
        //    {
        //        get { return _valor; }
        //        set { _valor = value; }
        //    }

        //    /// <summary>
        //    /// Usado em cobranças duplas, qdo necessário, para guardar o valor original da cobrança antes de ser dupla
        //    /// </summary>
        //    [DBFieldInfo("cobranca_valorNominal", FieldType.Single)]
        //    public Decimal ValorNominal
        //    {
        //        get { return _valorNominal; }
        //        set { _valorNominal = value; }
        //    }

        //    [DBFieldInfo("cobranca_dataVencimentoIsencaoJuro", FieldType.Single)]
        //    public DateTime DataVencimentoISENCAOJURO
        //    {
        //        get { return _vencimentoIsencaoJuro; }
        //        set { _vencimentoIsencaoJuro = value; }
        //    }

        //    [DBFieldInfo("cobranca_dataVencimento", FieldType.Single)]
        //    public DateTime DataVencimento
        //    {
        //        get { return _vencimento; }
        //        set { _vencimento = value; }
        //    }

        //    [DBFieldInfo("cobranca_dataCriacao", FieldType.Single)]
        //    public DateTime DataCriacao
        //    {
        //        get { return _dataCriacao; }
        //        set { _dataCriacao = value; }
        //    }

        //    [DBFieldInfo("cobranca_dataBaixaAuto", FieldType.Single)]
        //    public DateTime DataBaixaAutomatica
        //    {
        //        get { return _dataBaixaAuto; }
        //        set { _dataBaixaAuto = value; }
        //    }

        //    [DBFieldInfo("cobranca_pago", FieldType.Single)]
        //    public Boolean Pago
        //    {
        //        get { return _pago; }
        //        set { _pago = value; }
        //    }

        //    [DBFieldInfo("cobranca_dataPagto", FieldType.Single)]
        //    public DateTime DataPgto
        //    {
        //        get { return _dataPagto; }
        //        set { _dataPagto = value; }
        //    }

        //    [DBFieldInfo("cobranca_valorPagto", FieldType.Single)]
        //    public Decimal ValorPgto
        //    {
        //        get { return _valorPagto; }
        //        set { _valorPagto = value; }
        //    }

        //    [DBFieldInfo("cobranca_parcela", FieldType.Single)]
        //    public Int32 Parcela
        //    {
        //        get { return _parcela; }
        //        set { _parcela = value; }
        //    }

        //    [DBFieldInfo("cobranca_tipo", FieldType.Single)]
        //    public Int32 Tipo
        //    {
        //        get { return _tipo; }
        //        set { _tipo = value; }
        //    }

        //    [DBFieldInfo("cobranca_tipoTemp", FieldType.Single)]
        //    public Int32 TipoTemp
        //    {
        //        get { return _tipoTemp; }
        //        set { _tipoTemp = value; }
        //    }

        //    //[DBFieldInfo("cobranca_instrucoes", FieldType.Single)]
        //    public string Instrucoes
        //    {
        //        get;
        //        set;
        //    }

        //    /// <summary>
        //    /// Indica se a comissao sobre esta cobrança já foi paga.
        //    /// </summary>
        //    [DBFieldInfo("cobranca_comissaoPaga", FieldType.Single)]
        //    public Boolean ComissaoPaga
        //    {
        //        get { return _comissaoPaga; }
        //        set { _comissaoPaga = value; }
        //    }

        //    [DBFieldInfo("cobranca_cancelada", FieldType.Single)]
        //    public Boolean Cancelada
        //    {
        //        get { return _cancelada; }
        //        set { _cancelada = value; }
        //    }

        //    [DBFieldInfo("cobranca_dataVencimentoForcada", FieldType.Single)]
        //    public Boolean DataVencimentoForcada
        //    {
        //        get { return _dataVencimentoForcada; }
        //        set { _dataVencimentoForcada = value; }
        //    }

        //    [DBFieldInfo("cobranca_nossoNumero", FieldType.Single)]
        //    public String NossoNumero
        //    {
        //        get { return _nossoNumero; }
        //        set { _nossoNumero = value; }
        //    }

        //    [DBFieldInfo("cobranca_carteira", FieldType.Single)]
        //    public Int32 Carteira
        //    {
        //        get { return _carteira; }
        //        set { _carteira = value; }
        //    }
        //    [DBFieldInfo("cobranca_banco", FieldType.Single)]
        //    public Int32 Banco
        //    {
        //        get;
        //        set;
        //    }

        //    [Joinned("contrato_codcobranca")]
        //    public String ContratoCodCobranca
        //    {
        //        get { return _contratoCodCobranca; }
        //        set { _contratoCodCobranca = value; }
        //    }

        //    [Joinned("operadora_id")]
        //    public Object OperadoraID
        //    {
        //        get { return _operadoraId; }
        //        set { _operadoraId = value; }
        //    }

        //    /// <summary>
        //    /// O nome do titular da proposta.
        //    /// </summary>
        //    [Joinned("beneficiario_nome")]
        //    public String ContratoTitularNome
        //    {
        //        get { return _contratoTitularNome; }
        //        set { _contratoTitularNome = value; }
        //    }

        //    [Joinned("beneficiario_cpf")]
        //    public String ContratoTitularCPF
        //    {
        //        get { return _contratoTitularCpf; }
        //        set { _contratoTitularCpf = value; }
        //    }

        //    /// <summary>
        //    /// O número da proposta, do contrato impresso.
        //    /// </summary>
        //    [Joinned("contrato_numero")]
        //    public String ContratoNumero
        //    {
        //        get { return _contratoNumero; }
        //        set { _contratoNumero = value; }
        //    }

        //    [Joinned("contrato_enderecoCobrancaId")]
        //    public Object ContratoEnderecoCobrancaID
        //    {
        //        get { return _contratoEnderecoCobrancaId; }
        //        set { _contratoEnderecoCobrancaId = value; }
        //    }

        //    [Joinned("filial_nome")]
        //    public String FilialNome
        //    {
        //        get { return _filialNome; }
        //        set { _filialNome = value; }
        //    }

        //    [Joinned("operadora_nome")]
        //    public String OperadoraNome
        //    {
        //        get { return _operadoraNome; }
        //        set { _operadoraNome = value; }
        //    }

        //    [Joinned("estipulante_descricao")]
        //    public String EstipulanteNome
        //    {
        //        get { return _estipulanteNome; }
        //        set { _estipulanteNome = value; }
        //    }

        //    [Joinned("beneficiario_id")]
        //    public Object BeneficiarioId
        //    {
        //        get { return _contratoBeneficiarioId; }
        //        set { _contratoBeneficiarioId = value; }
        //    }

        //    [Joinned("beneficiario_email")]
        //    public String BeneficiarioEmail
        //    {
        //        get { return _contratoBeneficiarioEmail; }
        //        set { _contratoBeneficiarioEmail = value; }
        //    }

        //    [Joinned("beneficiario_nome")]
        //    public String BeneficiarioNome
        //    {
        //        get;
        //        set;
        //    }

        //    [Joinned("cobrancacomp_beneficiarioId")]
        //    public Object ComposicaoBeneficiarioID
        //    {
        //        get { return _composicaoBeneficiarioId; }
        //        set { _composicaoBeneficiarioId = value; }
        //    }

        //    [Joinned("cobrancacomp_tipo")]
        //    public Int32 ComposicaoTipo
        //    {
        //        get { return _composicaoTipo; }
        //        set { _composicaoTipo = value; }
        //    }

        //    [Joinned("cobrancacomp_valor")]
        //    public Decimal ComposicaoValor
        //    {
        //        get { return _composicaoValor; }
        //        set { _composicaoValor = value; }
        //    }

        //    [Joinned("contratoadm_id")]
        //    public Object ContratoAdmID
        //    {
        //        get { return _contratoAdmId; }
        //        set { _contratoAdmId = value; }
        //    }

        //    [Joinned("contrato_admissao")]
        //    public DateTime ContratoDataAdmissao
        //    {
        //        get { return _contratoDataAdmissao; }
        //        set { _contratoDataAdmissao = value; }
        //    }

        //    /// <summary>
        //    /// Para parcelas originais.
        //    /// </summary>
        //    [Joinned("parccob_headerId")]
        //    public Object HeaderParcID
        //    {
        //        get { return _headerParcId; }
        //        set { _headerParcId = value; }
        //    }

        //    /// <summary>
        //    /// Para parcelas geradas para o parcelamento.
        //    /// </summary>
        //    [Joinned("parcitem_headerId")]
        //    public Object HeaderItemID
        //    {
        //        get { return _headerItemId; }
        //        set { _headerItemId = value; }
        //    }

        //    /// <summary>
        //    /// Observação cadastrada durante a criação da parcela de negociação
        //    /// </summary>
        //    [Joinned("parcitem_obs")]
        //    public String ItemParcelamentoOBS
        //    {
        //        get { return _itemParcObs; }
        //        set { _itemParcObs = value; }
        //    }

        //    [Joinned("endereco_id")]
        //    public object TitularEnderecoID
        //    {
        //        get;
        //        set;
        //    }
        //    [Joinned("endereco_logradouro")]
        //    public string TitularEnderecoLogradouro
        //    {
        //        get;
        //        set;
        //    }
        //    [Joinned("endereco_numero")]
        //    public string TitularEnderecoNumero
        //    {
        //        get;
        //        set;
        //    }
        //    [Joinned("endereco_complemento")]
        //    public string TitularEnderecoComplemento
        //    {
        //        get;
        //        set;
        //    }
        //    [Joinned("endereco_bairro")]
        //    public string TitularEnderecoBairro
        //    {
        //        get;
        //        set;
        //    }
        //    [Joinned("endereco_cidade")]
        //    public string TitularEnderecoCidade
        //    {
        //        get;
        //        set;
        //    }
        //    [Joinned("endereco_uf")]
        //    public string TitularEnderecoUF
        //    {
        //        get;
        //        set;
        //    }
        //    [Joinned("endereco_cep")]
        //    public string TitularEnderecoCEP
        //    {
        //        get;
        //        set;
        //    }

        //    public String ComposicaoResumo
        //    {
        //        get { return _composicaoResumo; }
        //    }

        //    public String STRNossoNumero
        //    {
        //        get
        //        {
        //            if (this._dataCriacao.Year >= 2013)
        //                return geraNossoNumeroItau();
        //            else
        //                return geraNossoNumeroUnibanco();
        //        }
        //    }

        //    public String strPago
        //    {
        //        get { if (_pago) { return "Sim"; } else { return "Não"; } }
        //    }

        //    public String strDataPago
        //    {
        //        get
        //        {
        //            if (_dataPagto != DateTime.MinValue)
        //                return _dataPagto.ToString("dd/MM/yyyy");
        //            else
        //                return "";
        //        }
        //    }

        //    public String strEnviado
        //    {
        //        get { if (_arquivoIdUltimoEnvio == null) { return "Não"; } else { return "Sim"; } }
        //    }

        //    public static Boolean NossoNumeroITAU
        //    {
        //        get
        //        {
        //            String tipo = ConfigurationManager.AppSettings["tipoNossoNumero"];
        //            if (String.IsNullOrEmpty(tipo)) { return false; }
        //            if (tipo.ToLower() == "itau")
        //                return true;
        //            else
        //                return false;
        //        }
        //    }

        //    public ArquivoRemessaCriterio Criterio
        //    {
        //        get { return _criterio; }
        //        set { _criterio = value; }
        //    }

        //    /// <summary>
        //    /// Juros incididos sobre a parcela, em R$.
        //    /// </summary>
        //    public Decimal JurosRS
        //    {
        //        get { return _jurosRS; }
        //        set { _jurosRS = value; }
        //    }

        //    /// <summary>
        //    /// Multa sobre o atraso da parcela, em R$.
        //    /// </summary>
        //    public Decimal MultaRS
        //    {
        //        get { return _multaRS; }
        //        set { _multaRS = value; }
        //    }

        //    public Decimal Amortizacao
        //    {
        //        get { return _amortizacao; }
        //        set { _amortizacao = value; }
        //    }

        //    /// <summary>
        //    /// No caso do boleto itaú, essa propriedade retorna o parâmetro necessário para ser enviado 
        //    /// ao boletomail, utilizando a conta da PSPADRAO.
        //    /// </summary>
        //    public static String BoletoUrlCompPSPadrao
        //    {
        //        get
        //        {
        //            if (String.IsNullOrEmpty(ConfigurationManager.AppSettings["boletoMailUrlParam"]))
        //            {
        //                return String.Empty;
        //            }
        //            else
        //            {
        //                return String.Concat("&", ConfigurationManager.AppSettings["boletoMailUrlParam"]);
        //            }
        //        }
        //    }

        //    /// <summary>
        //    /// No caso do boleto itaú, essa propriedade retorna o parâmetro necessário para ser enviado 
        //    /// ao boletomail, utilizando a conta da QUALICORP.
        //    /// </summary>
        //    public static String BoletoUrlCompQualicorp
        //    {
        //        get
        //        {
        //            if (String.IsNullOrEmpty(ConfigurationManager.AppSettings["boletoMailUrlParamQ"]))
        //            {
        //                return String.Empty;
        //            }
        //            else
        //            {
        //                return String.Concat("&", ConfigurationManager.AppSettings["boletoMailUrlParamQ"]);
        //            }
        //        }
        //    }

        //    #endregion

        //    public Cobranca(Object id) : this() { _id = id; }
        //    public Cobranca() { _dataCriacao = DateTime.Now; _pago = false; _cancelada = false; _carteira = (Int32)eCarteira.Unibanco; _dataVencimentoForcada = false; }

        //    #region EntityBase methods

        //    public void Salvar()
        //    {
        //        if (((eTipo)this._tipo) == eTipo.Dupla && this._valorNominal == 0)
        //        {
        //            if (this._cobrancaRefId != null)
        //            {
        //                Cobranca cobrancaRef = new Cobranca(this._cobrancaRefId);
        //                cobrancaRef.Carregar();
        //                this._valorNominal = this._valor - cobrancaRef.Valor;
        //            }
        //            else
        //            {
        //                Cobranca cobrancaRef = new Cobranca();
        //            }
        //        }

        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    /// <summary>
        //    /// Para o unibanco, gera com DV. Para o itau, gera SEM o DV.
        //    /// </summary>
        //    public String GeraNossoNumero()
        //    {
        //        //if (!Cobranca.NossoNumeroITAU)
        //        //{
        //        //    StringBuilder sb = new StringBuilder();
        //        //    sb.Append(this._tipo);
        //        //    sb.Append(this._contratoCodCobranca.PadLeft(10, '0'));

        //        //    String dv = this._CalculaDVMod11(sb.ToString() + _parcela.ToString().PadLeft(3, '0'));

        //        //    sb.Append(_parcela.ToString().PadLeft(3, '0'));
        //        //    sb.Append(dv);

        //        //    String nossonumero = sb.ToString();
        //        //    sb.Remove(0, sb.Length);
        //        //    sb = null;
        //        //    return nossonumero;
        //        //}
        //        //else
        //        //{
        //        //String nossonumero = Convert.ToString(this._id).PadLeft(8, '0');
        //        ////nossonumero = String.Concat(nossonumero, CalculaDVMod11(nossonumero));
        //        //return nossonumero;

        //        if (this.Carteira == 17)
        //            return string.Concat(Cobranca.Convenio2UBRASP, Convert.ToString(this._id).PadLeft(10, '0'));
        //        else
        //            return string.Concat(Cobranca.ConvenioUBRASP, Convert.ToString(this._id).PadLeft(10, '0'));
        //        //}
        //    }
        //    public String GeraNossoNumeroSantander()
        //    {
        //        return string.Concat(this._id, this._CalculaDVMod11(Convert.ToString(this._id))).PadLeft(13, '0');
        //    }
        //    //public String GeraNossoNumeroSantander_Boleto()
        //    //{
        //    //    return string.Concat(this._id, this._CalculaDVMod11(Convert.ToString(this._id)));
        //    //}

        //    String geraNossoNumeroItau()
        //    {
        //        return Convert.ToString(this._id).PadLeft(8, '0');
        //    }
        //    String geraNossoNumeroUnibanco()
        //    {
        //        StringBuilder sb = new StringBuilder();
        //        sb.Append(this._tipo);
        //        sb.Append(this._contratoCodCobranca.PadLeft(10, '0'));

        //        String dv = this._CalculaDVMod11(sb.ToString() + _parcela.ToString().PadLeft(3, '0'));

        //        sb.Append(_parcela.ToString().PadLeft(3, '0'));
        //        sb.Append(dv);

        //        String nossonumero = sb.ToString();
        //        sb.Remove(0, sb.Length);
        //        sb = null;
        //        return String.Format("{0:" + new String('0', 12) + "}", Convert.ToInt64(nossonumero));
        //    }

        //    public String _CalculaDVMod11(Int32 tipo, String contratoCodCobranca, Int32 parcela)
        //    {
        //        StringBuilder sb = new StringBuilder();

        //        if (!Cobranca.NossoNumeroITAU)
        //        {
        //            sb.Append(tipo);
        //            sb.Append(contratoCodCobranca.PadLeft(10, '0'));
        //        }
        //        else
        //        {
        //            sb.Append(Convert.ToString(this._id).PadLeft(11, '0'));
        //        }

        //        return this._CalculaDVMod11(sb.ToString() + parcela.ToString().PadLeft(3, '0'));
        //    }

        //    public String ___CalculaDVMod11__(String nossoNumero)
        //    {
        //        Int32 fatorMult = 2;
        //        Int32 resultado = 0;

        //        char[] buffer = nossoNumero.ToCharArray();
        //        Array.Reverse(buffer);
        //        String nossoNumeroReverso = new String(buffer);

        //        for (int i = 0; i < nossoNumeroReverso.Length; i++)
        //        {
        //            resultado += Convert.ToInt32(nossoNumeroReverso.Substring(i, 1)) * fatorMult;
        //            fatorMult++;
        //            if (fatorMult > 9) { fatorMult = 2; }
        //        }

        //        resultado *= 10;
        //        resultado %= 11;
        //        resultado %= 10;

        //        return resultado.ToString();
        //    }

        //    public String _CalculaDVMod11(string seq)
        //    {
        //        int lim = 9;
        //        int flag = 0;

        //        int mult = 0;
        //        int total = 0;
        //        int pos = 1;
        //        //int res = 0;
        //        int ndig = 0;
        //        int nresto = 0;
        //        string num = string.Empty;

        //        mult = 1 + (seq.Length % (lim - 1));

        //        if (mult == 1)
        //            mult = lim;


        //        while (pos <= seq.Length)
        //        {
        //            num = ""; // Microsoft.VisualBasic.Strings.Mid(seq, pos, 1); todo: denis, arrumar referencia visualbasic
        //            total += Convert.ToInt32(num) * mult;

        //            mult -= 1;
        //            if (mult == 1)
        //                mult = lim;

        //            pos += 1;
        //        }
        //        nresto = (total % 11);
        //        if (flag == 1)
        //            return nresto.ToString();
        //        else
        //        {
        //            if (nresto == 0 || nresto == 1 || nresto == 10)
        //                ndig = 1;
        //            else
        //                ndig = (11 - nresto);

        //            return ndig.ToString();
        //        }
        //    }

        //    public String CalculaDVMod10(Int32 tipo, String contratoCodCobranca, Int32 parcela)
        //    {
        //        StringBuilder sb = new StringBuilder();

        //        if (!Cobranca.NossoNumeroITAU)
        //        {
        //            sb.Append(tipo);
        //            sb.Append(contratoCodCobranca.PadLeft(10, '0'));
        //            return this.CalculaDVMod10(sb.ToString() + parcela.ToString().PadLeft(3, '0'));
        //        }
        //        else
        //        {
        //            sb.Append(Convert.ToString(this._id).PadLeft(8, '0'));
        //            return this.CalculaDVMod10(sb.ToString());
        //        }
        //    }

        //    public string CalculaDVMod10(String nossoNumero)
        //    {
        //        nossoNumero = String.Concat("0646", "04260", "175", nossoNumero);

        //        int i = 2;
        //        int sum = 0;
        //        int res = 0;
        //        Char[] inverse = nossoNumero.ToCharArray();
        //        Array.Reverse(inverse);
        //        String[] strarray = new String[nossoNumero.Length];

        //        int index = 0;
        //        foreach (char c in inverse)
        //        {
        //            res = Convert.ToInt32(c.ToString()) * i;
        //            sum += res > 9 ? (res - 9) : res;
        //            i = i == 2 ? 1 : 2;

        //            strarray[index] = res.ToString();
        //            index++;
        //        }

        //        sum = 0;
        //        Array.Reverse(strarray);

        //        foreach (String item in strarray)
        //        {
        //            if (item.Length == 1)
        //            {
        //                sum += Convert.ToInt32(item);
        //            }
        //            else
        //            {
        //                sum += Convert.ToInt32(item.Substring(0, 1));
        //                sum += Convert.ToInt32(item.Substring(1, 1));
        //            }
        //        }

        //        int resto = sum % 10;
        //        return Convert.ToString(10 - resto);
        //    }

        //    public void LeNossoNumero(String nossoNumero)
        //    {
        //        if (!Cobranca.NossoNumeroITAU)
        //        {
        //            Cobranca.LeNossoNumero(nossoNumero, out this._tipo, out this._contratoCodCobranca, out this._parcela);
        //        }
        //        else
        //        {
        //            this._id = Convert.ToInt32(nossoNumero);
        //        }
        //    }

        //    public void LeNossoNumeroUNIBANCO(String nossoNumero)
        //    {
        //        Cobranca.LeNossoNumero(nossoNumero, out this._tipo, out this._contratoCodCobranca, out this._parcela);
        //    }

        //    public static void LeNossoNumero(String nossoNumero, out Int32 tipo, out String codCobranca, out Int32 parcela)
        //    {
        //        //tipo = 0; propostaId = 0; parcela = 0;
        //        try
        //        {
        //            tipo = Convert.ToInt32(nossoNumero.Substring(0, 1));
        //            codCobranca = Convert.ToInt32(nossoNumero.Substring(1, 10)).ToString();
        //            parcela = Convert.ToInt32(nossoNumero.Substring(11, 3));
        //        }
        //        catch
        //        {
        //            tipo = (int)Cobranca.eTipo.Indefinido;
        //            codCobranca = null;
        //            parcela = -1;
        //        }
        //    }

        //    #region Load methods

        //    public static Cobranca CarregarPor(Object propostaId, Int32 mes, Int32 ano, Cobranca.eTipo tipo, PersistenceManager pm)
        //    {
        //        IList<Cobranca> cobrancas = LocatorHelper.Instance.ExecuteQuery<Cobranca>("* FROM cobranca WHERE cobranca_propostaId=" + propostaId + " AND MONTH(cobranca_dataVencimento)=" + mes.ToString() + " AND YEAR(cobranca_dataVencimento)=" + ano.ToString() + " AND cobranca_tipo=" + Convert.ToInt32(tipo).ToString(), typeof(Cobranca), pm);

        //        if (cobrancas == null || cobrancas.Count == 0)
        //            return null;
        //        else
        //            return cobrancas[0];
        //    }
        //    public static Cobranca CarregarPor(Object propostaId, Int32 parcela, Int32 cobrancaTipo)
        //    {
        //        return CarregarPor(propostaId, parcela, cobrancaTipo, null);
        //    }
        //    public static Cobranca CarregarPor(Object propostaId, Int32 parcela, Int32 cobrancaTipo, PersistenceManager pm)
        //    {
        //        String tipoCond = "";
        //        if (((eTipo)cobrancaTipo) != eTipo.Indefinido)
        //        {
        //            tipoCond = " cobranca_tipo=" + cobrancaTipo + " AND ";
        //        }

        //        String qry = String.Concat(
        //            "SELECT operadora_id, filial_nome, estipulante_descricao, operadora_nome, contrato_id, contrato_numero, contrato_numeroId, cobranca.* ",
        //            "   FROM cobranca ",
        //            "       INNER JOIN contrato ON cobranca_propostaId=contrato_id ",
        //            "       INNER JOIN operadora ON operadora_id=contrato_operadoraId ",
        //            "       INNER JOIN estipulante ON estipulante_id=contrato_estipulanteId ",
        //            "       LEFT JOIN almox_contrato_impresso ON contrato_numeroId=almox_contratoimp_id ",
        //            "       LEFT JOIN almox_produto ON almox_produto_id=almox_contratoimp_produtoId ",
        //            "       LEFT JOIN filial ON filial_id=almox_produto_filialId ",
        //            "   WHERE ",
        //            "       cobranca_parcela=", parcela, " AND ",
        //            tipoCond,
        //            "       cobranca_propostaId =", propostaId,
        //            "   ORDER BY filial_nome, estipulante_descricao, operadora_nome, cobranca_dataVencimento");

        //        IList<Cobranca> lista = LocatorHelper.Instance.ExecuteQuery<Cobranca>(qry, typeof(Cobranca), pm);
        //        if (lista == null)
        //            return null;
        //        else if (lista.Count == 1)
        //            return lista[0];
        //        else
        //            return lista[0]; //return null; //throw new ApplicationException("Mais de uma cobrança foi retornada.");
        //    }

        //    public static Cobranca CarregarPorNossoNumero(string nossoNumero, PersistenceManager pm)
        //    {
        //        String qry = String.Concat(
        //            "SELECT operadora_id, filial_nome, estipulante_descricao, operadora_nome, contrato_id, contrato_numero, contrato_numeroId, contrato_codcobranca, cobranca.* ",
        //            "   FROM cobranca ",
        //            "       INNER JOIN contrato ON cobranca_propostaId=contrato_id ",
        //            "       INNER JOIN operadora ON operadora_id=contrato_operadoraId ",
        //            "       INNER JOIN estipulante ON estipulante_id=contrato_estipulanteId ",
        //            "       LEFT JOIN almox_contrato_impresso ON contrato_numeroId=almox_contratoimp_id ",
        //            "       LEFT JOIN almox_produto ON almox_produto_id=almox_contratoimp_produtoId ",
        //            "       LEFT JOIN filial ON filial_id=almox_produto_filialId ",
        //            "   WHERE ",
        //            "       cobranca_nossoNumero='", nossoNumero, "'");

        //        IList<Cobranca> lista = LocatorHelper.Instance.ExecuteQuery<Cobranca>(qry, typeof(Cobranca), pm);
        //        if (lista == null)
        //            return null;
        //        else if (lista.Count == 1)
        //            return lista[0];
        //        else
        //            throw new ApplicationException("Mais de uma cobrança foi retornada com o nosso número " + nossoNumero);
        //    }

        //    public static Cobranca CarregarPor(Object propostaId, DateTime vencimento, Int32 cobrancaTipo, PersistenceManager pm)
        //    {
        //        String tipoCond = "";
        //        if (((eTipo)cobrancaTipo) != eTipo.Indefinido)
        //        {
        //            tipoCond = " cobranca_tipo=" + cobrancaTipo + " AND ";
        //        }

        //        String qry = String.Concat(
        //            "SELECT top 1 cobranca_id ", // operadora_id, filial_nome, estipulante_descricao, operadora_nome, contrato_id, contrato_numero, contrato_numeroId, cobranca.* ",
        //            "   FROM cobranca ",
        //            "   WHERE ",
        //            "       DAY(cobranca_dataVencimento)=", vencimento.Day, " AND MONTH(cobranca_dataVencimento)=", vencimento.Month, " and YEAR(cobranca_dataVencimento)=", vencimento.Year, " AND ",
        //            tipoCond,
        //            "       cobranca_propostaId =", propostaId);

        //        IList<Cobranca> lista = LocatorHelper.Instance.ExecuteQuery<Cobranca>(qry, typeof(Cobranca), pm);
        //        if (lista == null || lista.Count == 0)
        //            return null;
        //        else //if (lista.Count == 1)
        //            return lista[0];
        //        //else
        //        //    return lista[0]; //return null; //throw new ApplicationException("Mais de uma cobrança foi retornada.");
        //    }

        //    public static Cobranca CarregarEnviadasPor(Object propostaId, DateTime vencimento, Int32 cobrancaTipo, PersistenceManager pm)
        //    {
        //        String tipoCond = "";
        //        if (((eTipo)cobrancaTipo) != eTipo.Indefinido)
        //        {
        //            tipoCond = " cobranca_tipo=" + cobrancaTipo + " AND ";
        //        }

        //        String qry = String.Concat(
        //            "SELECT cobranca_id ",
        //            "   FROM cobranca ",
        //            "   WHERE cobranca_arquivoultimoenvioid is not null and ",
        //            "       DAY(cobranca_dataVencimento)=", vencimento.Day, " AND MONTH(cobranca_dataVencimento)=", vencimento.Month, " and YEAR(cobranca_dataVencimento)=", vencimento.Year, " AND ",
        //            tipoCond,
        //            "       cobranca_propostaId =", propostaId);

        //        IList<Cobranca> lista = LocatorHelper.Instance.ExecuteQuery<Cobranca>(qry, typeof(Cobranca), pm);
        //        if (lista == null || lista.Count == 0)
        //            return null;
        //        else
        //            return lista[0];
        //    }

        //    public static Cobranca CarregarPorParcelaTipo(Object cobrancaId, Int32 parcela, Int32 cobrancaTipo)
        //    {
        //        return null;//CarregarPor(propostaId, parcela, cobrancaTipo, null);
        //    }

        //    public static IList<Cobranca> CarregarTodasNaoPagas(DateTime venctoDe, DateTime venctoAte)
        //    {
        //        String qry = "* FROM cobranca WHERE cobranca_pago <> 1 AND cobranca_cancelada <> 1 AND cobranca_dataVencimento BETWEEN '" + venctoDe.ToString("yyyy-MM-dd 00:00:00.000") + "' AND '" + venctoAte.ToString("yyyy-MM-dd 23:59:59.850") + "'";

        //        return LocatorHelper.Instance.ExecuteQuery<Cobranca>(qry, typeof(Cobranca));
        //    }

        //    public static IList<Cobranca> CarregarTodas(Object propostaId)
        //    {
        //        return CarregarTodas(propostaId, null);
        //    }
        //    public static IList<Cobranca> CarregarTodas(Object propostaId, PersistenceManager pm)
        //    {
        //        String qry = "cobranca.*, operadora_id,contrato_numero,operadora_nome, estipulante_descricao FROM cobranca INNER JOIN contrato ON cobranca_propostaId=contrato_id INNER JOIN operadora ON operadora_id = contrato_operadoraId inner join estipulante on estipulante_id = contrato_estipulanteId WHERE cobranca_propostaId=" + propostaId + " ORDER BY cobranca_parcela, cobranca_id";

        //        return LocatorHelper.Instance.ExecuteQuery<Cobranca>(qry, typeof(Cobranca), pm);
        //    }

        //    public static IList<Cobranca> CarregarTodasORDERBYVencto(Object propostaId, PersistenceManager pm)
        //    {
        //        String qry = "cobranca.*, operadora_id FROM cobranca INNER JOIN contrato ON cobranca_propostaId=contrato_id INNER JOIN operadora ON operadora_id = contrato_operadoraId WHERE cobranca_propostaId=" + propostaId + " ORDER BY cobranca_dataVencimento, cobranca_id";

        //        return LocatorHelper.Instance.ExecuteQuery<Cobranca>(qry, typeof(Cobranca), pm);
        //    }

        //    public static IList<Cobranca> CarregarTodas(Object propostaId, Boolean apenasAtivas, PersistenceManager pm)
        //    {
        //        return CarregarTodas(propostaId, apenasAtivas, false, pm);
        //    }
        //    public static IList<Cobranca> CarregarTodas(Object propostaId, Boolean apenasAtivas, Boolean apenasEmAberto, Int32 anoVencimento, PersistenceManager pm)
        //    {
        //        String ativasCond = "";
        //        if (apenasAtivas)
        //        {
        //            ativasCond = " AND cobranca_cancelada <> 1 ";
        //        }
        //        if (apenasEmAberto)
        //        {
        //            ativasCond += " AND (cobranca_pago=0 or cobranca_pago is null) ";
        //        }

        //        if (anoVencimento != -1)
        //            ativasCond += " AND year(cobranca_dataVencimento)=" + anoVencimento.ToString();

        //        String qry = String.Concat("cobranca.*, operadora_id FROM cobranca INNER JOIN contrato ON cobranca_propostaId=contrato_id INNER JOIN operadora ON operadora_id = contrato_operadoraId WHERE cobranca_propostaId=", propostaId, ativasCond, " ORDER BY cobranca_parcela");

        //        return LocatorHelper.Instance.ExecuteQuery<Cobranca>(qry, typeof(Cobranca), pm);
        //    }
        //    public static IList<Cobranca> CarregarTodas(Object propostaId, Boolean apenasAtivas, Boolean parcelaDesc, PersistenceManager pm)
        //    {
        //        String ativasCond = "";
        //        if (apenasAtivas)
        //        {
        //            ativasCond = " AND cobranca_cancelada <> 1 ";
        //        }

        //        String strdesc = " ";
        //        if (parcelaDesc) { strdesc = " DESC "; }
        //        String qry = String.Concat("cobranca.*, operadora_id FROM cobranca INNER JOIN contrato ON cobranca_propostaId=contrato_id INNER JOIN operadora ON operadora_id = contrato_operadoraId WHERE cobranca_propostaId=", propostaId, ativasCond, " ORDER BY cobranca_parcela", strdesc, ",cobranca_id");

        //        return LocatorHelper.Instance.ExecuteQuery<Cobranca>(qry, typeof(Cobranca), pm);
        //    }
        //    public static IList<Cobranca> CarregarTodas(Object propostaId, Boolean apenasAtivas, eTipo tipo, PersistenceManager pm)
        //    {
        //        String ativasCond = "";
        //        String tipoCond = "";
        //        if (apenasAtivas)
        //        {
        //            ativasCond = " AND cobranca_cancelada <> 1 ";
        //        }

        //        if (tipo != eTipo.Indefinido)
        //        {
        //            tipoCond = " AND cobranca_tipo=" + Convert.ToInt32(tipo).ToString();
        //        }

        //        String qry = String.Concat("cobranca.*, operadora_id FROM cobranca INNER JOIN contrato ON cobranca_propostaId=contrato_id INNER JOIN operadora ON operadora_id = contrato_operadoraId WHERE cobranca_propostaId=", propostaId, ativasCond, tipoCond, " ORDER BY cobranca_parcela, cobranca_id");

        //        return LocatorHelper.Instance.ExecuteQuery<Cobranca>(qry, typeof(Cobranca), pm);
        //    }
        //    public static IList<Cobranca> CarregarTodas_Composite(Object propostaId, Boolean apenasAtivas, Boolean parcelaDesc, PersistenceManager pm)
        //    {
        //        String ativasCond = "";
        //        if (apenasAtivas) { ativasCond = " AND cobranca_cancelada <> 1 "; }

        //        String strdesc = " ";
        //        if (parcelaDesc) { strdesc = " DESC "; }

        //        String qry = String.Concat("cobranca.*,operadora_id,cobrancacomp_beneficiarioId,cobrancacomp_tipo,cobrancacomp_valor ",
        //            "   FROM cobranca ",
        //            "       INNER JOIN contrato ON cobranca_propostaId=contrato_id ",
        //            "       INNER JOIN operadora ON operadora_id = contrato_operadoraId ",
        //            "       LEFT JOIN cobranca_composicao on cobranca_id=cobrancacomp_cobranaId and cobrancacomp_valor > 0 ",
        //            "   WHERE cobranca_propostaId=", propostaId, ativasCond,
        //            "   ORDER BY cobranca_parcela", strdesc, ",cobranca_id");

        //        IList<Cobranca> cobrancas = LocatorHelper.Instance.ExecuteQuery<Cobranca>(qry, typeof(Cobranca), pm);

        //        if (cobrancas == null) { return null; }

        //        List<String> ids = new List<String>();

        //        List<Cobranca> cobrancasARetornar = new List<Cobranca>();

        //        foreach (Cobranca _cob in cobrancas)
        //        {
        //            if (ids.Contains(Convert.ToString(_cob.ID))) { continue; }

        //            cobrancasARetornar.Add(_cob);
        //            ids.Add(Convert.ToString(_cob.ID));
        //        }

        //        foreach (Cobranca cobrancaARetornar in cobrancasARetornar)
        //        {
        //            foreach (Cobranca cob in cobrancas)
        //            {
        //                if (Convert.ToString(cob.ID) == Convert.ToString(cobrancaARetornar.ID))
        //                {
        //                    if (cobrancaARetornar._composicaoResumo != null && cobrancaARetornar._composicaoResumo.Length > 0) { cobrancaARetornar._composicaoResumo += "<br>"; }

        //                    if (cob._composicaoTipo == (Int32)CobrancaComposite.eComposicaoTipo.Adicional)
        //                        cobrancaARetornar._composicaoResumo += "Adicional: ";
        //                    else if (cob._composicaoTipo == (Int32)CobrancaComposite.eComposicaoTipo.Desconto)
        //                        cobrancaARetornar._composicaoResumo += "Desconto: ";
        //                    else if (cob._composicaoTipo == (Int32)CobrancaComposite.eComposicaoTipo.Plano)
        //                        cobrancaARetornar._composicaoResumo += "Plano: ";
        //                    else if (cob._composicaoTipo == (Int32)CobrancaComposite.eComposicaoTipo.TaxaAssociacao)
        //                        cobrancaARetornar._composicaoResumo += "Taxa associativa: ";
        //                    else if (cob._composicaoTipo == (Int32)CobrancaComposite.eComposicaoTipo.TaxaTabelaValor)
        //                        cobrancaARetornar._composicaoResumo += "Taxa: ";

        //                    cobrancaARetornar._composicaoResumo += cob._composicaoValor.ToString("C");
        //                }
        //            }
        //        }

        //        return cobrancasARetornar;
        //    }

        //    public static IList<Cobranca> CarregarTodas(IList<String> cobrancaIDs, PersistenceManager pm)
        //    {
        //        String qry = String.Concat("operadora_id, filial_nome, beneficiario_nome, estipulante_descricao, operadora_nome, contrato_id, contrato_numero, contrato_numeroId, contrato_enderecoCobrancaId, contrato_codcobranca, cobranca.* ",
        //            "   FROM cobranca ",
        //            "       INNER JOIN contrato ON cobranca_propostaId=contrato_id ",
        //            "       INNER JOIN contrato_beneficiario ON contrato_id=contratobeneficiario_contratoId AND contratobeneficiario_tipo=", Convert.ToInt32(ContratoBeneficiario.TipoRelacao.Titular),
        //            "       INNER JOIN beneficiario ON beneficiario_id=contratobeneficiario_beneficiarioId",
        //            "       INNER JOIN operadora ON operadora_id=contrato_operadoraId ",
        //            "       INNER JOIN estipulante ON estipulante_id=contrato_estipulanteId ",
        //            //"       LEFT JOIN almox_contrato_impresso ON contrato_numeroId=almox_contratoimp_id ",
        //            //"       LEFT JOIN almox_produto ON almox_produto_id=almox_contratoimp_produtoId ",
        //            //"       LEFT JOIN filial ON filial_id=almox_produto_filialId ",
        //            "       LEFT JOIN usuario_filial          ON contrato_donoId=usuariofilial_usuarioId ",
        //            "       LEFT JOIN filial                  ON filial_id=usuariofilial_filialId ",
        //            "   WHERE cobranca_id IN (", EntityBase.Join(cobrancaIDs, ","), ")",
        //            "   ORDER BY filial_nome, estipulante_descricao, operadora_nome, cobranca_dataVencimento");

        //        return LocatorHelper.Instance.ExecuteQuery<Cobranca>(qry, typeof(Cobranca), pm);
        //    }

        //    public static IList<Cobranca> CarregarTodas_OrdemPorContratoParcela(IList<String> cobrancaIDs, PersistenceManager pm)
        //    {
        //        String qry = String.Concat("operadora_id, filial_nome, beneficiario_nome, estipulante_descricao, operadora_nome, contrato_id, contrato_numero, contrato_numeroId, contrato_enderecoCobrancaId, contrato_codcobranca, cobranca.* ",
        //            "   FROM cobranca ",
        //            "       INNER JOIN contrato ON cobranca_propostaId=contrato_id ",
        //            "       INNER JOIN contrato_beneficiario ON contrato_id=contratobeneficiario_contratoId AND contratobeneficiario_tipo=", Convert.ToInt32(ContratoBeneficiario.TipoRelacao.Titular),
        //            "       INNER JOIN beneficiario ON beneficiario_id=contratobeneficiario_beneficiarioId",
        //            "       INNER JOIN operadora ON operadora_id=contrato_operadoraId ",
        //            "       INNER JOIN estipulante ON estipulante_id=contrato_estipulanteId ",
        //            //"       LEFT JOIN almox_contrato_impresso ON contrato_numeroId=almox_contratoimp_id ",
        //            //"       LEFT JOIN almox_produto ON almox_produto_id=almox_contratoimp_produtoId ",
        //            //"       LEFT JOIN filial ON filial_id=almox_produto_filialId ",
        //            "       LEFT JOIN usuario_filial          ON contrato_donoId=usuariofilial_usuarioId ",
        //            "       LEFT JOIN filial                  ON filial_id=usuariofilial_filialId ",
        //            "   WHERE cobranca_id IN (", EntityBase.Join(cobrancaIDs, ","), ")",
        //            "   ORDER BY contrato_id, cobranca_parcela");

        //        return LocatorHelper.Instance.ExecuteQuery<Cobranca>(qry, typeof(Cobranca), pm);
        //    }

        //    public static IList<Cobranca> CarregarTodas_OrdemPorContratoParcela_Optimized(IList<String> cobrancaIDs, PersistenceManager pm)
        //    {
        //        List<Cobranca> cobrancas = null;

        //        String qry = String.Concat("operadora_id, filial_nome,beneficiario_id, beneficiario_nome, beneficiario_cpf, estipulante_descricao, operadora_nome, contrato_id, contrato_numero, contrato_numeroId, contrato_enderecoCobrancaId, contrato_codcobranca, contratoadm_id, cobranca.* ",
        //            "   FROM cobranca ",
        //            "       INNER JOIN contrato ON cobranca_propostaId=contrato_id ",
        //            "       INNER JOIN contrato_beneficiario ON contrato_id=contratobeneficiario_contratoId AND contratobeneficiario_tipo=", Convert.ToInt32(ContratoBeneficiario.TipoRelacao.Titular),
        //            "       INNER JOIN beneficiario ON beneficiario_id=contratobeneficiario_beneficiarioId",
        //            "       INNER JOIN operadora ON operadora_id=contrato_operadoraId ",
        //            "       INNER JOIN estipulante ON estipulante_id=contrato_estipulanteId ",
        //            "       INNER JOIN contratoadm on contratoadm_id=contrato_contratoadmId ",
        //            //"       LEFT JOIN almox_contrato_impresso ON contrato_numeroId=almox_contratoimp_id ",
        //            //"       LEFT JOIN almox_produto ON almox_produto_id=almox_contratoimp_produtoId ",
        //            //"       LEFT JOIN filial ON filial_id=almox_produto_filialId ",
        //            "       LEFT JOIN usuario_filial          ON contrato_donoId=usuariofilial_usuarioId ",
        //            "       LEFT JOIN filial                  ON filial_id=usuariofilial_filialId ",
        //            "   WHERE cobranca_id IN (", cobrancaIDs[0], ")",
        //            "   ORDER BY contrato_id, cobranca_parcela");

        //        DataTable dt = LocatorHelper.Instance.ExecuteQuery(qry, "result", pm).Tables[0];
        //        DataTable aux = null; DataRow novaRow = null;
        //        for (int i = 1; i < cobrancaIDs.Count; i++)
        //        {
        //            qry = String.Concat("operadora_id, filial_nome, beneficiario_nome,beneficiario_id, beneficiario_cpf, estipulante_descricao, operadora_nome, contrato_id, contrato_numero, contrato_numeroId, contrato_enderecoCobrancaId, contrato_codcobranca, cobranca.* ",
        //            "   FROM cobranca ",
        //            "       INNER JOIN contrato ON cobranca_propostaId=contrato_id ",
        //            "       INNER JOIN contrato_beneficiario ON contrato_id=contratobeneficiario_contratoId AND contratobeneficiario_tipo=", Convert.ToInt32(ContratoBeneficiario.TipoRelacao.Titular),
        //            "       INNER JOIN beneficiario ON beneficiario_id=contratobeneficiario_beneficiarioId",
        //            "       INNER JOIN operadora ON operadora_id=contrato_operadoraId ",
        //            "       INNER JOIN estipulante ON estipulante_id=contrato_estipulanteId ",
        //            "       LEFT JOIN usuario_filial          ON contrato_donoId=usuariofilial_usuarioId ",
        //            "       LEFT JOIN filial                  ON filial_id=usuariofilial_filialId ",
        //            "   WHERE cobranca_id =", cobrancaIDs[i]);

        //            aux = LocatorHelper.Instance.ExecuteQuery(qry, "result", pm).Tables[0];

        //            if (aux.Rows.Count == 0) { continue; }

        //            novaRow = dt.NewRow();
        //            novaRow["cobranca_id"] = aux.Rows[0]["cobranca_id"];
        //            novaRow["cobranca_arquivoUltimoEnvioId"] = aux.Rows[0]["cobranca_arquivoUltimoEnvioId"];
        //            novaRow["cobranca_cancelada"] = aux.Rows[0]["cobranca_cancelada"];
        //            novaRow["cobranca_carteira"] = aux.Rows[0]["cobranca_carteira"];
        //            novaRow["cobranca_cobrancaRefId"] = aux.Rows[0]["cobranca_cobrancaRefId"];
        //            novaRow["cobranca_comissaoPaga"] = aux.Rows[0]["cobranca_comissaoPaga"];
        //            novaRow["contrato_codcobranca"] = aux.Rows[0]["contrato_codcobranca"];
        //            novaRow["contrato_numero"] = aux.Rows[0]["contrato_numero"];
        //            novaRow["beneficiario_nome"] = aux.Rows[0]["beneficiario_nome"];
        //            novaRow["beneficiario_cpf"] = aux.Rows[0]["beneficiario_cpf"];
        //            novaRow["beneficiario_id"] = aux.Rows[0]["beneficiario_id"];
        //            novaRow["cobranca_dataCriacao"] = aux.Rows[0]["cobranca_dataCriacao"];
        //            novaRow["cobranca_dataPagto"] = aux.Rows[0]["cobranca_dataPagto"];
        //            novaRow["cobranca_dataVencimentoForcada"] = aux.Rows[0]["cobranca_dataVencimentoForcada"];
        //            novaRow["estipulante_descricao"] = aux.Rows[0]["estipulante_descricao"];
        //            novaRow["filial_nome"] = aux.Rows[0]["filial_nome"];
        //            novaRow["cobranca_nossoNumero"] = aux.Rows[0]["cobranca_nossoNumero"];
        //            novaRow["operadora_id"] = aux.Rows[0]["operadora_id"];
        //            novaRow["operadora_nome"] = aux.Rows[0]["operadora_nome"];
        //            novaRow["cobranca_pago"] = aux.Rows[0]["cobranca_pago"];
        //            novaRow["cobranca_parcela"] = aux.Rows[0]["cobranca_parcela"];
        //            novaRow["cobranca_propostaId"] = aux.Rows[0]["cobranca_propostaId"];
        //            novaRow["cobranca_tipo"] = aux.Rows[0]["cobranca_tipo"];
        //            novaRow["cobranca_tipoTemp"] = aux.Rows[0]["cobranca_tipoTemp"];
        //            novaRow["cobranca_valor"] = aux.Rows[0]["cobranca_valor"];
        //            novaRow["cobranca_valorNominal"] = aux.Rows[0]["cobranca_valorNominal"];
        //            novaRow["cobranca_valorPagto"] = aux.Rows[0]["cobranca_valorPagto"];
        //            novaRow["cobranca_dataVencimento"] = aux.Rows[0]["cobranca_dataVencimento"];
        //            novaRow["cobranca_dataVencimentoIsencaoJuro"] = aux.Rows[0]["cobranca_dataVencimentoIsencaoJuro"];
        //            novaRow["contrato_enderecoCobrancaId"] = aux.Rows[0]["contrato_enderecoCobrancaId"];
        //            dt.Rows.Add(novaRow);
        //        }

        //        if (dt.Rows.Count > 0) { cobrancas = new List<Cobranca>(); }

        //        DataRow[] arrRow = dt.Select("cobranca_id <> -1", "cobranca_propostaId ASC, cobranca_parcela ASC");

        //        Cobranca cobranca = null;
        //        foreach (DataRow row in arrRow)
        //        {
        //            cobranca = new Cobranca(row["cobranca_id"]);
        //            cobranca._arquivoIdUltimoEnvio = toObject(row["cobranca_arquivoUltimoEnvioId"]);
        //            cobranca._cancelada = toBoolean(row["cobranca_cancelada"]);
        //            cobranca._carteira = toInt(row["cobranca_carteira"]);
        //            cobranca._cobrancaRefId = toObject(row["cobranca_cobrancaRefId"]);
        //            cobranca._comissaoPaga = toBoolean(row["cobranca_comissaoPaga"]);
        //            cobranca._contratoCodCobranca = toString(row["contrato_codcobranca"]);
        //            cobranca._contratoNumero = toString(row["contrato_numero"]);
        //            cobranca._contratoTitularNome = toString(row["beneficiario_nome"]);
        //            cobranca._contratoTitularCpf = toString(row["beneficiario_cpf"]);
        //            cobranca._dataCriacao = Convert.ToDateTime(row["cobranca_dataCriacao"]);
        //            cobranca._dataPagto = toDateTime(row["cobranca_dataPagto"]);
        //            cobranca._dataVencimentoForcada = toBoolean(row["cobranca_dataVencimentoForcada"]);
        //            cobranca._estipulanteNome = toString(row["estipulante_descricao"]);
        //            cobranca._filialNome = toString(row["filial_nome"]);
        //            cobranca._nossoNumero = toString(row["cobranca_nossoNumero"]);
        //            cobranca._operadoraId = row["operadora_id"];
        //            cobranca._operadoraNome = toString(row["operadora_nome"]);
        //            cobranca._pago = toBoolean(row["cobranca_pago"]);
        //            cobranca._parcela = toInt(row["cobranca_parcela"]);
        //            cobranca._propostaId = row["cobranca_propostaId"];
        //            cobranca._tipo = toInt(row["cobranca_tipo"]);
        //            cobranca._tipoTemp = toInt(row["cobranca_tipoTemp"]);
        //            cobranca._valor = toDecimal(row["cobranca_valor"]);
        //            cobranca._valorNominal = toDecimal(row["cobranca_valorNominal"]);
        //            cobranca._valorPagto = toDecimal(row["cobranca_valorPagto"]);
        //            cobranca._vencimento = toDateTime(row["cobranca_dataVencimento"]);
        //            cobranca._vencimentoIsencaoJuro = toDateTime(row["cobranca_dataVencimentoIsencaoJuro"]);
        //            cobranca._contratoEnderecoCobrancaId = toObject(row["contrato_enderecoCobrancaId"]);
        //            cobranca.BeneficiarioId = toObject(row["beneficiario_id"]);

        //            cobrancas.Add(cobranca);
        //        }

        //        dt.Dispose();
        //        return cobrancas;
        //    }

        //    public static IList<Cobranca> CarregarTodas_Optimized(Object propostaId, Boolean apenasAtivas, eTipo tipo, PersistenceManager pm)
        //    {
        //        String ativasCond = "";
        //        String tipoCond = "";
        //        if (apenasAtivas)
        //        {
        //            ativasCond = " AND cobranca_cancelada <> 1 ";
        //        }

        //        if (tipo != eTipo.Indefinido)
        //        {
        //            tipoCond = " AND cobranca_tipo=" + Convert.ToInt32(tipo).ToString();
        //        }

        //        String qry = String.Concat("operadora_id, cobranca.* FROM cobranca INNER JOIN contrato ON cobranca_propostaId=contrato_id INNER JOIN operadora ON operadora_id = contrato_operadoraId WHERE cobranca_propostaId=", propostaId, ativasCond, tipoCond, " ORDER BY cobranca_parcela, cobranca_id");
        //        //String qry = String.Concat("operadora_id, cobranca.* FROM cobranca INNER JOIN contrato ON cobranca_propostaId=contrato_id INNER JOIN operadora ON operadora_id = contrato_operadoraId WHERE cobranca_id=2715955");

        //        DataTable dt = LocatorHelper.Instance.ExecuteQuery(qry, "resultset", pm).Tables[0];
        //        if (dt.Rows.Count == 0) { return null; }
        //        List<Cobranca> cobrancas = new List<Cobranca>();

        //        Cobranca cobranca = null;
        //        foreach (DataRow row in dt.Rows)
        //        {
        //            cobranca = new Cobranca(row["cobranca_id"]);
        //            cobranca._arquivoIdUltimoEnvio = toObject(row["cobranca_arquivoUltimoEnvioId"]);
        //            cobranca._cancelada = toBoolean(row["cobranca_cancelada"]);
        //            cobranca._carteira = toInt(row["cobranca_carteira"]);
        //            cobranca._cobrancaRefId = toObject(row["cobranca_cobrancaRefId"]);
        //            cobranca._comissaoPaga = toBoolean(row["cobranca_comissaoPaga"]);
        //            cobranca._dataCriacao = Convert.ToDateTime(row["cobranca_dataCriacao"]);
        //            cobranca._dataPagto = toDateTime(row["cobranca_dataPagto"]);
        //            cobranca._dataVencimentoForcada = toBoolean(row["cobranca_dataVencimentoForcada"]);
        //            cobranca._nossoNumero = toString(row["cobranca_nossoNumero"]);
        //            cobranca._operadoraId = row["operadora_id"];
        //            cobranca._pago = toBoolean(row["cobranca_pago"]);
        //            cobranca._parcela = toInt(row["cobranca_parcela"]);
        //            cobranca._propostaId = row["cobranca_propostaId"];
        //            cobranca._tipo = toInt(row["cobranca_tipo"]);
        //            cobranca._tipoTemp = toInt(row["cobranca_tipoTemp"]);
        //            cobranca._valor = toDecimal(row["cobranca_valor"]);
        //            cobranca._valorNominal = toDecimal(row["cobranca_valorNominal"]);
        //            cobranca._valorPagto = toDecimal(row["cobranca_valorPagto"]);
        //            cobranca._vencimento = toDateTime(row["cobranca_dataVencimento"]);
        //            cobranca._vencimentoIsencaoJuro = toDateTime(row["cobranca_dataVencimentoIsencaoJuro"]);

        //            cobrancas.Add(cobranca);
        //        }

        //        return cobrancas;
        //    }

        //    public static IList<Cobranca> CarregarTodas_Optimized_temp(PersistenceManager pm)
        //    {
        //        String ativasCond = "";
        //        String tipoCond = "";

        //        String qry = String.Concat("operadora_id, cobranca.* FROM cobranca INNER JOIN contrato ON cobranca_propostaId=contrato_id INNER JOIN operadora ON operadora_id = contrato_operadoraId WHERE cobranca_arquivoUltimoEnvioId=44 ORDER BY cobranca_propostaId,cobranca_parcela");
        //        //String qry = String.Concat("operadora_id, cobranca.* FROM cobranca INNER JOIN contrato ON cobranca_propostaId=contrato_id INNER JOIN operadora ON operadora_id = contrato_operadoraId WHERE cobranca_id=2715955");

        //        DataTable dt = LocatorHelper.Instance.ExecuteQuery(qry, "resultset", pm).Tables[0];
        //        if (dt.Rows.Count == 0) { return null; }
        //        List<Cobranca> cobrancas = new List<Cobranca>();

        //        Cobranca cobranca = null;
        //        foreach (DataRow row in dt.Rows)
        //        {
        //            cobranca = new Cobranca(row["cobranca_id"]);
        //            cobranca._arquivoIdUltimoEnvio = toObject(row["cobranca_arquivoUltimoEnvioId"]);
        //            cobranca._cancelada = toBoolean(row["cobranca_cancelada"]);
        //            cobranca._carteira = toInt(row["cobranca_carteira"]);
        //            cobranca._cobrancaRefId = toObject(row["cobranca_cobrancaRefId"]);
        //            cobranca._comissaoPaga = toBoolean(row["cobranca_comissaoPaga"]);
        //            cobranca._dataCriacao = Convert.ToDateTime(row["cobranca_dataCriacao"]);
        //            cobranca._dataPagto = toDateTime(row["cobranca_dataPagto"]);
        //            cobranca._dataVencimentoForcada = toBoolean(row["cobranca_dataVencimentoForcada"]);
        //            cobranca._nossoNumero = toString(row["cobranca_nossoNumero"]);
        //            cobranca._operadoraId = row["operadora_id"];
        //            cobranca._pago = toBoolean(row["cobranca_pago"]);
        //            cobranca._parcela = toInt(row["cobranca_parcela"]);
        //            cobranca._propostaId = row["cobranca_propostaId"];
        //            cobranca._tipo = toInt(row["cobranca_tipo"]);
        //            cobranca._tipoTemp = toInt(row["cobranca_tipoTemp"]);
        //            cobranca._valor = toDecimal(row["cobranca_valor"]);
        //            cobranca._valorNominal = toDecimal(row["cobranca_valorNominal"]);
        //            cobranca._valorPagto = toDecimal(row["cobranca_valorPagto"]);
        //            cobranca._vencimento = toDateTime(row["cobranca_dataVencimento"]);
        //            cobranca._vencimentoIsencaoJuro = toDateTime(row["cobranca_dataVencimentoIsencaoJuro"]);

        //            cobrancas.Add(cobranca);
        //        }

        //        return cobrancas;
        //    }

        //    public static IList<Cobranca> CarregarTodas_Optimized(Boolean apenasAtivas, eTipo tipo, PersistenceManager pm)
        //    {
        //        String ativasCond = "";
        //        String tipoCond = "";
        //        if (apenasAtivas)
        //        {
        //            ativasCond = " AND cobranca_cancelada <> 1 ";
        //        }

        //        if (tipo != eTipo.Indefinido)
        //        {
        //            tipoCond = " AND cobranca_tipo=" + Convert.ToInt32(tipo).ToString();
        //        }

        //        String qry = String.Concat("operadora_id, cobranca.* FROM cobranca INNER JOIN contrato ON cobranca_propostaId=contrato_id INNER JOIN operadora ON operadora_id = contrato_operadoraId WHERE (cobranca_arquivoUltimoEnvioId is null or cobranca_arquivoUltimoEnvioId=-2 or cobranca_arquivoUltimoEnvioId=-3 or cobranca_arquivoUltimoEnvioId=-4) ", ativasCond, tipoCond, " ORDER BY cobranca_parcela, cobranca_id");
        //        //String qry = String.Concat("operadora_id, cobranca.* FROM cobranca INNER JOIN contrato ON cobranca_propostaId=contrato_id INNER JOIN operadora ON operadora_id = contrato_operadoraId WHERE cobranca_id=2715955");

        //        DataTable dt = LocatorHelper.Instance.ExecuteQuery(qry, "resultset", pm).Tables[0];
        //        if (dt.Rows.Count == 0) { return null; }
        //        List<Cobranca> cobrancas = new List<Cobranca>();

        //        Cobranca cobranca = null;
        //        foreach (DataRow row in dt.Rows)
        //        {
        //            cobranca = new Cobranca(row["cobranca_id"]);
        //            cobranca._arquivoIdUltimoEnvio = toObject(row["cobranca_arquivoUltimoEnvioId"]);
        //            cobranca._cancelada = toBoolean(row["cobranca_cancelada"]);
        //            cobranca._carteira = toInt(row["cobranca_carteira"]);
        //            cobranca._cobrancaRefId = toObject(row["cobranca_cobrancaRefId"]);
        //            cobranca._comissaoPaga = toBoolean(row["cobranca_comissaoPaga"]);
        //            cobranca._dataCriacao = Convert.ToDateTime(row["cobranca_dataCriacao"]);
        //            cobranca._dataPagto = toDateTime(row["cobranca_dataPagto"]);
        //            cobranca._dataVencimentoForcada = toBoolean(row["cobranca_dataVencimentoForcada"]);
        //            cobranca._nossoNumero = toString(row["cobranca_nossoNumero"]);
        //            cobranca._operadoraId = row["operadora_id"];
        //            cobranca._pago = toBoolean(row["cobranca_pago"]);
        //            cobranca._parcela = toInt(row["cobranca_parcela"]);
        //            cobranca._propostaId = row["cobranca_propostaId"];
        //            cobranca._tipo = toInt(row["cobranca_tipo"]);
        //            cobranca._tipoTemp = toInt(row["cobranca_tipoTemp"]);
        //            cobranca._valor = toDecimal(row["cobranca_valor"]);
        //            cobranca._valorNominal = toDecimal(row["cobranca_valorNominal"]);
        //            cobranca._valorPagto = toDecimal(row["cobranca_valorPagto"]);
        //            cobranca._vencimento = toDateTime(row["cobranca_dataVencimento"]);
        //            cobranca._vencimentoIsencaoJuro = toDateTime(row["cobranca_dataVencimentoIsencaoJuro"]);

        //            cobrancas.Add(cobranca);
        //        }

        //        return cobrancas;
        //    }

        //    public static IList<Cobranca> CarregarTodas_Optimized_DIF_UBRASP(PersistenceManager pm)
        //    {
        //        String ativasCond = "";
        //        String tipoCond = "";
        //        bool apenasAtivas = true;
        //        if (apenasAtivas)
        //        {
        //            ativasCond = " AND cobranca_cancelada <> 1 ";
        //        }

        //        eTipo tipo = eTipo.DiferencaUbraSP;
        //        if (tipo != eTipo.Indefinido)
        //        {
        //            tipoCond = " AND cobranca_tipo=" + Convert.ToInt32(tipo).ToString();
        //        }

        //        String qry = String.Concat("operadora_id, cobranca.* FROM cobranca INNER JOIN contrato ON cobranca_propostaId=contrato_id INNER JOIN operadora ON operadora_id = contrato_operadoraId WHERE (cobranca_arquivoUltimoEnvioId=-2) and (cobranca_cancelada is null or cobranca_cancelada=0)", ativasCond, tipoCond, " ORDER BY cobranca_parcela, cobranca_id");

        //        DataTable dt = LocatorHelper.Instance.ExecuteQuery(qry, "resultset", pm).Tables[0];
        //        if (dt.Rows.Count == 0) { return null; }
        //        List<Cobranca> cobrancas = new List<Cobranca>();

        //        Cobranca cobranca = null;
        //        foreach (DataRow row in dt.Rows)
        //        {
        //            cobranca = new Cobranca(row["cobranca_id"]);
        //            cobranca._arquivoIdUltimoEnvio = toObject(row["cobranca_arquivoUltimoEnvioId"]);
        //            cobranca._cancelada = toBoolean(row["cobranca_cancelada"]);
        //            cobranca._carteira = toInt(row["cobranca_carteira"]);
        //            cobranca._cobrancaRefId = toObject(row["cobranca_cobrancaRefId"]);
        //            cobranca._comissaoPaga = toBoolean(row["cobranca_comissaoPaga"]);
        //            cobranca._dataCriacao = Convert.ToDateTime(row["cobranca_dataCriacao"]);
        //            cobranca._dataPagto = toDateTime(row["cobranca_dataPagto"]);
        //            cobranca._dataVencimentoForcada = toBoolean(row["cobranca_dataVencimentoForcada"]);
        //            cobranca._nossoNumero = toString(row["cobranca_nossoNumero"]);
        //            cobranca._operadoraId = row["operadora_id"];
        //            cobranca._pago = toBoolean(row["cobranca_pago"]);
        //            cobranca._parcela = toInt(row["cobranca_parcela"]);
        //            cobranca._propostaId = row["cobranca_propostaId"];
        //            cobranca._tipo = toInt(row["cobranca_tipo"]);
        //            cobranca._tipoTemp = toInt(row["cobranca_tipoTemp"]);
        //            cobranca._valor = toDecimal(row["cobranca_valor"]);
        //            cobranca._valorNominal = toDecimal(row["cobranca_valorNominal"]);
        //            cobranca._valorPagto = toDecimal(row["cobranca_valorPagto"]);
        //            cobranca._vencimento = toDateTime(row["cobranca_dataVencimento"]);
        //            cobranca._vencimentoIsencaoJuro = toDateTime(row["cobranca_dataVencimentoIsencaoJuro"]);

        //            cobrancas.Add(cobranca);
        //        }

        //        return cobrancas;
        //    }

        //    public static IList<Cobranca> CarregarTodas_Optimized_BOLETO_UBRASP(PersistenceManager pm)
        //    {
        //        String ativasCond = "";
        //        String tipoCond = "";

        //        bool apenasAtivas = true;
        //        if (apenasAtivas)
        //        {
        //            ativasCond = " AND cobranca_cancelada <> 1 ";
        //        }

        //        eTipo tipo = eTipo.BoletoUbraspSP;
        //        if (tipo != eTipo.Indefinido)
        //        {
        //            tipoCond = " AND cobranca_tipo=" + Convert.ToInt32(tipo).ToString();
        //        }

        //        String qry = String.Concat("operadora_id, cobranca.* FROM cobranca INNER JOIN contrato ON cobranca_propostaId=contrato_id INNER JOIN operadora ON operadora_id = contrato_operadoraId WHERE (cobranca_arquivoUltimoEnvioId=-3) and (cobranca_cancelada is null or cobranca_cancelada=0)", ativasCond, tipoCond, " ORDER BY cobranca_parcela, cobranca_id");

        //        DataTable dt = LocatorHelper.Instance.ExecuteQuery(qry, "resultset", pm).Tables[0];
        //        if (dt.Rows.Count == 0) { return null; }
        //        List<Cobranca> cobrancas = new List<Cobranca>();

        //        Cobranca cobranca = null;
        //        foreach (DataRow row in dt.Rows)
        //        {
        //            cobranca = new Cobranca(row["cobranca_id"]);
        //            cobranca._arquivoIdUltimoEnvio = toObject(row["cobranca_arquivoUltimoEnvioId"]);
        //            cobranca._cancelada = toBoolean(row["cobranca_cancelada"]);
        //            cobranca._carteira = toInt(row["cobranca_carteira"]);
        //            cobranca._cobrancaRefId = toObject(row["cobranca_cobrancaRefId"]);
        //            cobranca._comissaoPaga = toBoolean(row["cobranca_comissaoPaga"]);
        //            cobranca._dataCriacao = Convert.ToDateTime(row["cobranca_dataCriacao"]);
        //            cobranca._dataPagto = toDateTime(row["cobranca_dataPagto"]);
        //            cobranca._dataVencimentoForcada = toBoolean(row["cobranca_dataVencimentoForcada"]);
        //            cobranca._nossoNumero = toString(row["cobranca_nossoNumero"]);
        //            cobranca._operadoraId = row["operadora_id"];
        //            cobranca._pago = toBoolean(row["cobranca_pago"]);
        //            cobranca._parcela = toInt(row["cobranca_parcela"]);
        //            cobranca._propostaId = row["cobranca_propostaId"];
        //            cobranca._tipo = toInt(row["cobranca_tipo"]);
        //            cobranca._tipoTemp = toInt(row["cobranca_tipoTemp"]);
        //            cobranca._valor = toDecimal(row["cobranca_valor"]);
        //            cobranca._valorNominal = toDecimal(row["cobranca_valorNominal"]);
        //            cobranca._valorPagto = toDecimal(row["cobranca_valorPagto"]);
        //            cobranca._vencimento = toDateTime(row["cobranca_dataVencimento"]);
        //            cobranca._vencimentoIsencaoJuro = toDateTime(row["cobranca_dataVencimentoIsencaoJuro"]);

        //            cobrancas.Add(cobranca);
        //        }

        //        return cobrancas;
        //    }


        //    public static IList<Cobranca> CarregarTodasComParcelamentoInfo(IList<String> cobrancaIDs, PersistenceManager pm)
        //    {
        //        String qry = String.Concat("operadora_id, parccob_headerId, parcitem_headerId,filial_nome, beneficiario_nome, estipulante_descricao, operadora_nome, contrato_id, contrato_numero, contrato_numeroId, contrato_enderecoCobrancaId, contrato_codcobranca, cobranca.* ",
        //            "   FROM cobranca ",
        //            "       INNER JOIN contrato ON cobranca_propostaId=contrato_id ",
        //            "       INNER JOIN contrato_beneficiario ON contrato_id=contratobeneficiario_contratoId AND contratobeneficiario_tipo=", Convert.ToInt32(ContratoBeneficiario.TipoRelacao.Titular),
        //            "       INNER JOIN beneficiario ON beneficiario_id=contratobeneficiario_beneficiarioId",
        //            "       INNER JOIN operadora ON operadora_id=contrato_operadoraId ",
        //            "       INNER JOIN estipulante ON estipulante_id=contrato_estipulanteId ",
        //            "       LEFT JOIN usuario_filial          ON contrato_donoId=usuariofilial_usuarioId ",
        //            "       LEFT JOIN filial                  ON filial_id=usuariofilial_filialId ",
        //            "       LEFT JOIN cobranca_parcelamentoCobrancaOriginal ON cobranca_id = parccob_cobrancaId ",
        //            "       LEFT JOIN cobranca_parcelamentoItem ON cobranca_id = parcitem_cobrancaId ",
        //            "   WHERE cobranca_id IN (", EntityBase.Join(cobrancaIDs, ","), ")",
        //            "   ORDER BY filial_nome, estipulante_descricao, operadora_nome, cobranca_dataVencimento");

        //        return LocatorHelper.Instance.ExecuteQuery<Cobranca>(qry, typeof(Cobranca), pm);
        //    }

        //    public static IList<Cobranca> CarregarTodasComParcelamentoInfo(Object propostaId, Boolean apenasAtivas, Boolean apenasEmAberto, Int32 anoVencimento, PersistenceManager pm, DateTime cancelamentoContrato)
        //    {
        //        String ativasCond = "";
        //        if (apenasAtivas)
        //        {
        //            ativasCond = " AND cobranca_cancelada <> 1 ";
        //        }
        //        if (apenasEmAberto)
        //        {
        //            ativasCond += " AND ((cobranca_pago=0 or cobranca_pago is null) or cobranca_id in (select parccob_cobrancaId from cobranca_parcelamentoCobrancaOriginal) )";
        //        }

        //        if (anoVencimento != -1)
        //            ativasCond += " AND year(cobranca_dataVencimento)=" + anoVencimento.ToString();

        //        if (cancelamentoContrato != DateTime.MinValue)
        //        {
        //            ativasCond += " and (cobranca_datavencimento < '" + cancelamentoContrato.ToString("yyyy-MM-dd 23:59:59.995") + "' or cobranca_tipo = 4) ";
        //        }

        //        String qry = String.Concat("cobranca.*, parccob_headerId, operadora_id FROM cobranca ",
        //            "   INNER JOIN contrato ON cobranca_propostaId=contrato_id ",
        //            "   INNER JOIN operadora ON operadora_id = contrato_operadoraId ",
        //            "   LEFT  JOIN cobranca_parcelamentoCobrancaOriginal ON cobranca_id = parccob_cobrancaId ",
        //            "   WHERE cobranca_propostaId=", propostaId, ativasCond, " ORDER BY cobranca_parcela");

        //        return LocatorHelper.Instance.ExecuteQuery<Cobranca>(qry, typeof(Cobranca), pm);
        //    }
        //    public static IList<Cobranca> CarregarTodasComParcelamentoInfo_Composite(Object propostaId, Boolean apenasAtivas, Boolean parcelaDesc, PersistenceManager pm)
        //    {
        //        String ativasCond = "";
        //        if (apenasAtivas) { ativasCond = " AND cobranca_cancelada <> 1 "; }

        //        String strdesc = " ";
        //        if (parcelaDesc) { strdesc = " DESC "; }

        //        String qry = String.Concat("cobranca.*,parccob_headerId,parcitem_headerId,parcitem_obs,operadora_id,cobrancacomp_beneficiarioId,cobrancacomp_tipo,cobrancacomp_valor ",
        //            "   FROM cobranca ",
        //            "       INNER JOIN contrato ON cobranca_propostaId=contrato_id ",
        //            "       INNER JOIN operadora ON operadora_id = contrato_operadoraId ",
        //            "       LEFT JOIN cobranca_composicao on cobranca_id=cobrancacomp_cobranaId and cobrancacomp_valor > 0 ",
        //            "       LEFT JOIN cobranca_parcelamentoCobrancaOriginal ON cobranca_id = parccob_cobrancaId ",
        //            "       LEFT JOIN cobranca_parcelamentoItem ON cobranca_id = parcitem_cobrancaId ",
        //            "   WHERE cobranca_propostaId=", propostaId, ativasCond,
        //            "   ORDER BY cobranca_dataVencimento", strdesc, ",cobranca_id");

        //        IList<Cobranca> cobrancas = LocatorHelper.Instance.ExecuteQuery<Cobranca>(qry, typeof(Cobranca), pm);

        //        if (cobrancas == null) { return null; }

        //        List<String> ids = new List<String>();

        //        List<Cobranca> cobrancasARetornar = new List<Cobranca>();

        //        foreach (Cobranca _cob in cobrancas)
        //        {
        //            if (ids.Contains(Convert.ToString(_cob.ID))) { continue; }

        //            cobrancasARetornar.Add(_cob);
        //            ids.Add(Convert.ToString(_cob.ID));
        //        }

        //        foreach (Cobranca cobrancaARetornar in cobrancasARetornar)
        //        {
        //            foreach (Cobranca cob in cobrancas)
        //            {
        //                if (Convert.ToString(cob.ID) == Convert.ToString(cobrancaARetornar.ID))
        //                {
        //                    if (cobrancaARetornar._composicaoResumo != null && cobrancaARetornar._composicaoResumo.Length > 0) { cobrancaARetornar._composicaoResumo += "<br>"; }

        //                    if (cob._composicaoTipo == (Int32)CobrancaComposite.eComposicaoTipo.Adicional)
        //                        cobrancaARetornar._composicaoResumo += "Adicional: ";
        //                    else if (cob._composicaoTipo == (Int32)CobrancaComposite.eComposicaoTipo.Desconto)
        //                        cobrancaARetornar._composicaoResumo += "Desconto: ";
        //                    else if (cob._composicaoTipo == (Int32)CobrancaComposite.eComposicaoTipo.Plano)
        //                        cobrancaARetornar._composicaoResumo += "Plano: ";
        //                    else if (cob._composicaoTipo == (Int32)CobrancaComposite.eComposicaoTipo.TaxaAssociacao)
        //                        cobrancaARetornar._composicaoResumo += "Taxa associativa: ";
        //                    else if (cob._composicaoTipo == (Int32)CobrancaComposite.eComposicaoTipo.TaxaTabelaValor)
        //                        cobrancaARetornar._composicaoResumo += "Taxa: ";

        //                    cobrancaARetornar._composicaoResumo += cob._composicaoValor.ToString("C");
        //                }
        //            }
        //        }

        //        return cobrancasARetornar;
        //    }

        //    public static IList<Cobranca> CarregarTodasComParcelamentoInfo(Object propostaId, Boolean apenasAtivas, eTipo tipo, PersistenceManager pm)
        //    {
        //        String cond = "";
        //        if (apenasAtivas)
        //        {
        //            cond = " AND cobranca_cancelada <> 1 ";
        //        }
        //        if (tipo != eTipo.Indefinido)
        //        {
        //            cond += " AND cobranca_tipo=" + Convert.ToInt32(tipo); ;
        //        }

        //        String qry = String.Concat("cobranca.*, parccob_headerId, operadora_id FROM cobranca ",
        //            "   INNER JOIN contrato ON cobranca_propostaId=contrato_id ",
        //            "   INNER JOIN operadora ON operadora_id = contrato_operadoraId ",
        //            "   LEFT  JOIN cobranca_parcelamentoCobrancaOriginal ON cobranca_id = parccob_cobrancaId ",
        //            "   WHERE cobranca_propostaId=", propostaId, cond, " ORDER BY cobranca_parcela");

        //        return LocatorHelper.Instance.ExecuteQuery<Cobranca>(qry, typeof(Cobranca), pm);
        //    }

        //    static Decimal toDecimal(Object param)
        //    {
        //        if (param == DBNull.Value || param == null)
        //            return Decimal.Zero;
        //        else
        //        {
        //            try
        //            {
        //                return Convert.ToDecimal(param);
        //            }
        //            catch
        //            {
        //                return Decimal.Zero;
        //            }
        //        }
        //    }
        //    static DateTime toDateTime(Object param)
        //    {
        //        if (param == DBNull.Value || param == null)
        //            return DateTime.MinValue;
        //        else
        //        {
        //            try
        //            {
        //                return Convert.ToDateTime(param);
        //            }
        //            catch
        //            {
        //                return DateTime.MinValue;
        //            }
        //        }
        //    }
        //    static Object toObject(Object param)
        //    {
        //        if (param == DBNull.Value)
        //            return null;
        //        else
        //            return param;
        //    }
        //    static Boolean toBoolean(Object param)
        //    {
        //        if (param == DBNull.Value || param == null)
        //            return false;
        //        else
        //        {
        //            try
        //            {
        //                return Convert.ToBoolean(param);
        //            }
        //            catch
        //            {
        //                return false;
        //            }
        //        }
        //    }
        //    static Int32 toInt(Object param)
        //    {
        //        if (param == DBNull.Value || param == null)
        //            return 0;
        //        else
        //        {
        //            try
        //            {
        //                return Convert.ToInt32(param);
        //            }
        //            catch
        //            {
        //                return 0;
        //            }
        //        }
        //    }
        //    static String toString(Object param)
        //    {
        //        if (param == null || param == DBNull.Value)
        //            return null;
        //        else
        //            return Convert.ToString(param);
        //    }

        //    public static IList<Cobranca> CarregarPorArquivoRemessaID(Object arquivoId, Boolean emAberto)
        //    {
        //        return CarregarPorArquivoRemessaID(arquivoId, emAberto, null);
        //    }
        //    public static IList<Cobranca> CarregarPorArquivoRemessaID(Object arquivoId, Boolean emAberto, PersistenceManager pm)
        //    {
        //        String emAbertoCond = "";
        //        if (emAberto)
        //        {
        //            emAbertoCond = " cobranca_pago=0 AND cobranca_cancelada=0 and ";
        //        }

        //        String qry = String.Concat(
        //            "SELECT DISTINCT(cobranca_id) as cid, operadora_id, estipulante_descricao, operadora_nome, contrato_id, contrato_numero, contrato_numeroId, contrato_codcobranca, cobranca.*,beneficiario_id,beneficiario_nome, endereco.* ", //filial_nome
        //            "   FROM cobranca ",
        //            "       INNER JOIN contrato ON cobranca_propostaId=contrato_id ",
        //            "       INNER JOIN operadora ON operadora_id=contrato_operadoraId ",
        //            "       INNER JOIN estipulante ON estipulante_id=contrato_estipulanteId ",
        //            "       INNER JOIN contrato_beneficiario ON contratobeneficiario_contratoId=contrato_id and contratobeneficiario_tipo=0 and contratobeneficiario_ativo=1 ",
        //            "       INNER JOIN beneficiario ON beneficiario_id=contratobeneficiario_beneficiarioid and contratobeneficiario_tipo=0 and contratobeneficiario_ativo=1 ",
        //            "       LEFT JOIN endereco ON endereco_donoId=beneficiario_id and endereco_donoTipo= ", Convert.ToInt32(Endereco.TipoDono.Beneficiario),
        //            //"       INNER JOIN almox_contrato_impresso ON contrato_numeroId=almox_contratoimp_id ",
        //            //"       INNER JOIN almox_produto ON almox_produto_id=almox_contratoimp_produtoId ",
        //            //"       INNER JOIN filial ON filial_id=almox_produto_filialId ",
        //            //"       INNER JOIN usuario_filial          ON contrato_donoId=usuariofilial_usuarioId ",
        //            //"       INNER JOIN filial                  ON filial_id=usuariofilial_filialId ",
        //            "       INNER JOIN arquivoCobrancaUnibanco_cobanca ON arqitem_cobrancaId=cobranca_id ",
        //            "   WHERE ", emAbertoCond,
        //            "       arqitem_arquivoId =", arquivoId,
        //            "   ORDER BY cobranca_dataVencimento");

        //        return LocatorHelper.Instance.ExecuteQuery<Cobranca>(qry, typeof(Cobranca), pm);
        //    }

        //    public static IList<Cobranca> CarregarTodas(IList<String> cobrancaIDs)
        //    {
        //        return CarregarTodas(cobrancaIDs, null);
        //    }

        //    /// <summary>
        //    /// Checa se só há uma cobrança por proposta em uma coleção de cobranças.
        //    /// </summary>
        //    /// <param name="lista">Lista de cobranças.</param>
        //    /// <param name="propostaId">Id da proposta a ser comparado</param>
        //    /// <returns>True, caso só haja uma cobrança por proposta. Do contrário, False.</returns>
        //    static Boolean umaCobrancaPorProposta(IList<Cobranca> lista, String propostaId)
        //    {
        //        Int32 qtd = 0;
        //        foreach (Cobranca cobranca in lista)
        //        {
        //            if (Convert.ToString(cobranca.PropostaID) == propostaId)
        //                qtd++;

        //            if (qtd > 1) { return false; }
        //        }

        //        return true;
        //    }

        //    public static IList<Cobranca> CarregarPorNumeroDeContrato(Object operadoraId, String contratoNumero, PersistenceManager pm)
        //    {
        //        String cond = "";
        //        if (operadoraId != null) { cond = " and operadora_id=" + operadoraId; }

        //        String qry = String.Concat(
        //            "filial_nome, estipulante_descricao, operadora_nome, contrato_id, contrato_numero, contrato_numeroId, contrato_codcobranca, cobranca.* ",
        //            "   FROM cobranca (nolock) ",
        //            "       INNER JOIN contrato ON cobranca_propostaId=contrato_id ",
        //            "       INNER JOIN operadora ON operadora_id=contrato_operadoraId ",
        //            "       INNER JOIN estipulante ON estipulante_id=contrato_estipulanteId ",
        //            "       LEFT JOIN almox_contrato_impresso ON contrato_numeroId=almox_contratoimp_id ",
        //            "       LEFT JOIN almox_produto ON almox_produto_id=almox_contratoimp_produtoId ",
        //            "       LEFT JOIN filial ON filial_id=almox_produto_filialId ",
        //            "   WHERE ",
        //            "       contrato_numero='", contratoNumero, "' ",
        //            cond,
        //            "   ORDER BY cobranca_dataVencimento");

        //        return LocatorHelper.Instance.ExecuteQuery<Cobranca>(qry, typeof(Cobranca), pm);
        //    }

        //    //        public static IList<Cobranca> CarregarPorNomeBeneficiario(Object operadoraId, String nomeBeneficiario, PersistenceManager pm)
        //    //        {
        //    //            if (nomeBeneficiario == null || string.IsNullOrEmpty(nomeBeneficiario)) return null;

        //    //            String cond = "";
        //    //            if (operadoraId != null) { cond = " and operadora_id=" + operadoraId; }

        //    //            String qry = String.Concat(
        //    //                "filial_nome, estipulante_descricao, operadora_nome, contrato_id, contrato_numero, contrato_numeroId, contrato_codcobranca, beneficiario_nome, cobranca.* ",
        //    //                "   FROM cobranca (nolock) ",
        //    //                "       INNER JOIN contrato ON cobranca_propostaId=contrato_id ",
        //    //                "       INNER JOIN operadora ON operadora_id=contrato_operadoraId ",
        //    //                "       INNER JOIN estipulante ON estipulante_id=contrato_estipulanteId ",
        //    //                "       INNER JOIN contrato_beneficiario ON contratobeneficiario_contratoId = contratoId=contrato_id and contratobeneficiario_ativo=1 and contratobeneficiario_tipo = 0 ",
        //    //                "       INNER JOIN beneficiario ON contratobeneficiario_beneficiarioId = contratoId = beneficiario_id and contratobeneficiario_ativo=1 and contratobeneficiario_tipo = 0 ",
        //    ////              "       LEFT JOIN almox_contrato_impresso ON contrato_numeroId=almox_contratoimp_id ",
        //    ////              "       LEFT JOIN almox_produto ON almox_produto_id=almox_contratoimp_produtoId ",
        //    ////              "       LEFT JOIN filial ON filial_id=almox_produto_filialId ",
        //    //                "   WHERE ",
        //    //                "       contrato_numero like '%", nomeBeneficiario.Replace("'", ""), "%' ",
        //    //                cond,
        //    //                "   ORDER BY cobranca_dataVencimento");

        //    //            return LocatorHelper.Instance.ExecuteQuery<Cobranca>(qry, typeof(Cobranca), pm);
        //    //        }

        //    public static IList<Cobranca> CarregarPorID(Object id, PersistenceManager pm)
        //    {
        //        String qry = String.Concat(
        //            "filial_nome, estipulante_descricao, operadora_nome, contrato_id, contrato_numero, contrato_numeroId, contrato_codcobranca, cobranca.* ",
        //            "   FROM cobranca ",
        //            "       INNER JOIN contrato ON cobranca_propostaId=contrato_id ",
        //            "       INNER JOIN operadora ON operadora_id=contrato_operadoraId ",
        //            "       INNER JOIN estipulante ON estipulante_id=contrato_estipulanteId ",
        //            "       LEFT JOIN almox_contrato_impresso ON contrato_numeroId=almox_contratoimp_id ",
        //            "       LEFT JOIN almox_produto ON almox_produto_id=almox_contratoimp_produtoId ",
        //            "       LEFT JOIN filial ON filial_id=almox_produto_filialId ",
        //            "   WHERE ",
        //            "       cobranca_id=", id);

        //        return LocatorHelper.Instance.ExecuteQuery<Cobranca>(qry, typeof(Cobranca), pm);
        //    }

        //    public static Cobranca CarregarUnicaPorID(string id, PersistenceManager pm)
        //    {
        //        String qry = String.Concat(
        //            "SELECT operadora_id, filial_nome, estipulante_descricao, operadora_nome, contrato_id, contrato_numero, contrato_numeroId, contrato_codcobranca, cobranca.* ",
        //            "   FROM cobranca ",
        //            "       INNER JOIN contrato ON cobranca_propostaId=contrato_id ",
        //            "       INNER JOIN operadora ON operadora_id=contrato_operadoraId ",
        //            "       INNER JOIN estipulante ON estipulante_id=contrato_estipulanteId ",
        //            "       LEFT JOIN almox_contrato_impresso ON contrato_numeroId=almox_contratoimp_id ",
        //            "       LEFT JOIN almox_produto ON almox_produto_id=almox_contratoimp_produtoId ",
        //            "       LEFT JOIN filial ON filial_id=almox_produto_filialId ",
        //            "   WHERE ",
        //            "       cobranca_id=", id);

        //        IList<Cobranca> lista = LocatorHelper.Instance.ExecuteQuery<Cobranca>(qry, typeof(Cobranca), pm);
        //        if (lista == null)
        //            return null;
        //        else if (lista.Count == 1)
        //            return lista[0];
        //        else
        //            throw new ApplicationException("Mais de uma cobrança foi retornada com o id " + id);
        //    }

        //    public static IList<Cobranca> CarregarPagasDoAno(Object contratoId, int ano, PersistenceManager pm)
        //    {
        //        String qry = String.Concat(
        //            "estipulante_descricao, operadora_nome, contrato_id, contrato_numero, contrato_numeroId, contrato_codcobranca, cobranca.* ",
        //            "   FROM cobranca ",
        //            "       INNER JOIN contrato ON cobranca_propostaId=contrato_id ",
        //            "       INNER JOIN operadora ON operadora_id=contrato_operadoraId ",
        //            "       INNER JOIN estipulante ON estipulante_id=contrato_estipulanteId ",
        //            //"       INNER JOIN almox_contrato_impresso ON contrato_numeroId=almox_contratoimp_id ",
        //            //"       INNER JOIN almox_produto ON almox_produto_id=almox_contratoimp_produtoId ",
        //            //"       INNER JOIN filial ON filial_id=almox_produto_filialId ",
        //            "   WHERE ",
        //            "       YEAR(cobranca_dataVencimento) =", ano, " and cobranca_cancelada=0 AND cobranca_pago=1 AND cobranca_propostaId=", contratoId,
        //            "   ORDER BY cobranca_dataVencimento");

        //        return LocatorHelper.Instance.ExecuteQuery<Cobranca>(qry, typeof(Cobranca), pm);
        //    }

        //    public static IList<Cobranca> CarregarAtrasadas(Object operadoraId)
        //    {
        //        return CarregarAtrasadas(operadoraId, null);
        //    }
        //    public static IList<Cobranca> CarregarAtrasadas(Object operadoraId, PersistenceManager pm)
        //    {
        //        String qry = String.Concat(
        //            "filial_nome, estipulante_descricao, operadora_nome, contrato_id, contrato_numero, contrato_numeroId, contrato_codcobranca, cobranca.* ",
        //            "   FROM cobranca ",
        //            "       INNER JOIN contrato ON cobranca_propostaId=contrato_id ",
        //            "       INNER JOIN operadora ON operadora_id=contrato_operadoraId ",
        //            "       INNER JOIN estipulante ON estipulante_id=contrato_estipulanteId ",
        //            "       INNER JOIN almox_contrato_impresso ON contrato_numeroId=almox_contratoimp_id ",
        //            "       INNER JOIN almox_produto ON almox_produto_id=almox_contratoimp_produtoId ",
        //            "       INNER JOIN filial ON filial_id=almox_produto_filialId ",
        //            "   WHERE ",
        //            "       cobranca_dataVencimento < GETDATE() AND cobranca_pago=0 AND operadora_id=", operadoraId,
        //            "   ORDER BY cobranca_dataVencimento");

        //        return LocatorHelper.Instance.ExecuteQuery<Cobranca>(qry, typeof(Cobranca), pm);
        //    }

        //    public static IList<Cobranca> CarregarAtrasadas(Object operadoraId, Int32 mes, Int32 ano)
        //    {
        //        return CarregarAtrasadas(operadoraId, mes, ano, null);
        //    }
        //    public static IList<Cobranca> CarregarAtrasadas(Object operadoraId, Int32 mes, Int32 ano, PersistenceManager pm)
        //    {
        //        String qry = String.Concat(
        //            "filial_nome, estipulante_descricao, operadora_nome, contrato_id, contrato_numero, contrato_numeroId, contrato_codcobranca, cobranca.* ",
        //            "   FROM cobranca ",
        //            "       INNER JOIN contrato ON cobranca_propostaId=contrato_id ",
        //            "       INNER JOIN operadora ON operadora_id=contrato_operadoraId ",
        //            "       INNER JOIN estipulante ON estipulante_id=contrato_estipulanteId ",
        //            "       left JOIN almox_contrato_impresso ON contrato_numeroId=almox_contratoimp_id ",
        //            "       left JOIN almox_produto ON almox_produto_id=almox_contratoimp_produtoId ",
        //            "       left JOIN filial ON filial_id=almox_produto_filialId ",
        //            "   WHERE ",
        //            Contrato.CondicaoBasicaQuery, " AND ",
        //            "       MONTH(cobranca_dataVencimento)=", mes, " AND ",
        //            "       YEAR(cobranca_dataVencimento)=", ano, " AND ",
        //            "       cobranca_pago=0 AND operadora_id=", operadoraId,
        //            "   ORDER BY cobranca_dataVencimento");

        //        return LocatorHelper.Instance.ExecuteQuery<Cobranca>(qry, typeof(Cobranca), pm);
        //    }

        //    #endregion

        //    public static void MarcarCobrancaComoNaoEnviadas(Object arquivoRemessaId, Object cobrancaId)
        //    {
        //        PersistenceManager pm = new PersistenceManager();
        //        pm.BeginTransactionContext();

        //        try
        //        {
        //            MarcarCobrancaComoNaoEnviadas(arquivoRemessaId, cobrancaId, pm);
        //            pm.Commit();
        //        }
        //        catch (Exception ex)
        //        {
        //            pm.Rollback();
        //            throw ex;
        //        }
        //        finally
        //        {
        //            pm = null;
        //        }
        //    }
        //    public static void MarcarCobrancaComoNaoEnviadas(Object arquivoRemessaId, Object cobrancaId, PersistenceManager pm)
        //    {
        //        Cobranca cobranca = new Cobranca(cobrancaId);
        //        pm.Load(cobranca);
        //        cobranca.ArquivoIDUltimoEnvio = null;
        //        pm.Save(cobranca);

        //        String command = "DELETE FROM arquivoCobrancaUnibanco_cobanca WHERE arqitem_arquivoId=" + arquivoRemessaId + " AND arqitem_cobrancaId=" + cobrancaId;
        //        NonQueryHelper.Instance.ExecuteNonQuery(command, pm);
        //    }

        //    public static void MarcarCobrancasComoNaoEnviadas(Object arquivoRemessaId, Boolean apenasNaoPagas)
        //    {
        //        PersistenceManager pm = new PersistenceManager();
        //        pm.BeginTransactionContext();

        //        try
        //        {
        //            MarcarCobrancasComoNaoEnviadas(arquivoRemessaId, apenasNaoPagas, pm);
        //            pm.Commit();
        //        }
        //        catch (Exception ex)
        //        {
        //            pm.Rollback();
        //            throw ex;
        //        }
        //        finally
        //        {
        //            pm = null;
        //        }
        //    }
        //    public static void MarcarCobrancasComoNaoEnviadas(Object arquivoRemessaId, Boolean apenasNaoPagas, PersistenceManager pm)
        //    {
        //        IList<Cobranca> cobrancas = Cobranca.CarregarPorArquivoRemessaID(arquivoRemessaId, apenasNaoPagas, pm);
        //        if (cobrancas == null) { return; }

        //        String command = "DELETE FROM arquivoCobrancaUnibanco_cobanca WHERE arqitem_arquivoId=" + arquivoRemessaId + " AND arqitem_cobrancaId=";
        //        foreach (Cobranca cobranca in cobrancas)
        //        {
        //            if (cobranca.Pago) { continue; }
        //            cobranca.ArquivoIDUltimoEnvio = null;

        //            if (pm != null)
        //                pm.Save(cobranca);
        //            else
        //                cobranca.Salvar();

        //            NonQueryHelper.Instance.ExecuteNonQuery(command + cobranca.ID, pm);
        //        }
        //    }

        //    /// <summary>
        //    /// Carrega cobranças NÃO enviadas em arquivo de remessa.
        //    /// </summary>
        //    public static IList<Cobranca> ProcessarCobrancasPorTipoParaGerarRemessa(String[] estipulanteIDs, String[] operadoraIDs, String[] filialIDs, Int32 mes, Int32 ano, Cobranca.eTipo tipo)
        //    {
        //        #region query

        //        String filIN = String.Join(",", filialIDs);
        //        String opeIN = String.Join(",", operadoraIDs);
        //        String estIN = String.Join(",", estipulanteIDs);

        //        String qry = String.Concat(
        //            "SELECT DISTINCT(cobranca_id), cobranca.*, operadora_id, filial_nome, estipulante_descricao, operadora_nome, contrato_numero, contrato_enderecoCobrancaId, contrato_codcobranca, contrato_vencimento ",
        //            "   FROM cobranca ",
        //            "       INNER JOIN contrato ON contrato_id=cobranca_propostaId ",
        //            "       INNER JOIN usuario_filial ON contrato_donoId=usuariofilial_usuarioId ",
        //            "       INNER JOIN operadora ON operadora_id=contrato_operadoraId ",
        //            "       INNER JOIN filial ON filial_id=usuariofilial_filialId ",
        //            "       INNER JOIN estipulante ON estipulante_id=contrato_estipulanteId ",
        //            "       INNER JOIN contrato_beneficiario ON contratobeneficiario_status NOT IN (0,1,10,15,17,21) AND contratobeneficiario_contratoId=contrato_id ",
        //            "   WHERE cobranca_tipo=", Convert.ToInt32(tipo), " AND ", Contrato.CondicaoBasicaQuery,
        //            "       AND cobranca_cancelada <> 1 AND cobranca_arquivoUltimoEnvioId IS NULL AND ",
        //            "       usuariofilial_filialId IN (", filIN, ") AND ",
        //            "       contrato_estipulanteId IN (", estIN, ") AND ",
        //            "       contrato_operadoraId IN (", opeIN, ") ",
        //            "   ORDER BY filial_nome, estipulante_descricao, operadora_nome, contrato_vencimento");

        //        #endregion

        //        return LocatorHelper.Instance.ExecuteQuery<Cobranca>(qry, typeof(Cobranca));
        //    }

        //    static Cobranca ultimaCobrancaNormalDaColecao(IList<Cobranca> cobrancas)
        //    {
        //        System.Collections.ArrayList list = new System.Collections.ArrayList();
        //        foreach (Cobranca cobranca in cobrancas)
        //        {
        //            if (cobranca.Tipo == (int)Cobranca.eTipo.Normal) { list.Add(cobranca); }
        //        }

        //        if (list.Count > 0) { return list[list.Count - 1] as Cobranca; }
        //        else { return null; }
        //    }

        //    /// <summary>
        //    /// Versão 1
        //    /// </summary>
        //    [Obsolete("Não usar", false)]
        //    public static IList<Cobranca> ProcessarCobrancasNormaisParaGerarRemessa(String formattedContratoAdmIds, ArquivoRemessaCriterio.eTipoTaxa tipoTaxa, DateTime venctoDe, DateTime venctoAte, DateTime vigenciaDe, DateTime vigenciaAte, eCarteira carteira)
        //    {
        //        decimal temp = 0;

        //        #region query

        //        venctoAte = new DateTime(venctoAte.Year, venctoAte.Month, venctoAte.Day, venctoAte.Hour, venctoAte.Minute, venctoAte.Second, 901);

        //        String condicaoTaxa = "";
        //        if (tipoTaxa == ArquivoRemessaCriterio.eTipoTaxa.SemTaxa)
        //            condicaoTaxa = " AND contrato_cobrarTaxaAssociativa=0 ";
        //        else if (tipoTaxa == ArquivoRemessaCriterio.eTipoTaxa.ComTaxa)
        //            condicaoTaxa = " AND contrato_cobrarTaxaAssociativa=1 ";

        //        String condicaoVigencia = String.Concat(" AND contrato_vigencia BETWEEN '", vigenciaDe.ToString("yyyy-MM-dd"), "' AND '", vigenciaAte.ToString("yyyy-MM-dd 23:59:59") + "' ");

        //        String qry = String.Concat(
        //            "SELECT DISTINCT(contrato_id), contrato_operadoraid, filial_nome, estipulante_descricao, operadora_nome, contrato_numero, contrato_numeroId, contrato_vigencia, contrato_admissao, contrato_vencimento, contrato_enderecoCobrancaId, contrato_codcobranca, contrato_contratoadmid ",
        //            "   FROM contrato ",
        //            "       LEFT JOIN usuario_filial   ON contrato_donoId=usuariofilial_usuarioId ",
        //            "       LEFT JOIN filial           ON filial_id=usuariofilial_filialId ",
        //            "       INNER JOIN operadora        ON operadora_id=contrato_operadoraId ",
        //            "       INNER JOIN estipulante      ON estipulante_id=contrato_estipulanteId ",
        //            "       INNER JOIN contrato_beneficiario ON contratobeneficiario_status NOT IN (10,15,17,21) AND contratobeneficiario_ativo=1 AND contratobeneficiario_contratoId=contrato_id ", //0,1,
        //            "   WHERE ", Contrato.CondicaoBasicaQuery,
        //            "       AND contrato_contratoAdmId IN (", formattedContratoAdmIds, ") ", condicaoTaxa, condicaoVigencia,
        //            "   ORDER BY filial_nome, estipulante_descricao, operadora_nome, contrato_vencimento");

        //        #endregion

        //        PersistenceManager pm = null;

        //        try
        //        {
        //            IList<Contrato> contratos = LocatorHelper.Instance.ExecuteQuery<Contrato>(qry, typeof(Contrato));

        //            if (contratos == null) { return null; }

        //            IList<Cobranca> _cobrancas = null;
        //            List<Cobranca> retornar = new List<Cobranca>();
        //            int parcela = 1; Boolean existente = false;
        //            int i = 0;

        //            DateTime vigencia, vencimento;
        //            Int32 diaDataSemJuros; Object valorDataLimite;
        //            CalendarioVencimento rcv = null; List<CobrancaComposite> composite = null;

        //            foreach (Contrato contrato in contratos)
        //            {
        //                pm = new PersistenceManager();
        //                pm.UseSingleCommandInstance();

        //                //Para cada contrato gerar a cobrança.
        //                //  checar se há uma cobrança ativa com as mesmas características. se existir, não gerar.
        //                _cobrancas = Cobranca.CarregarTodas(contrato.ID, true, eTipo.Indefinido, pm);


        //                if (_cobrancas == null || _cobrancas.Count == 0)
        //                {
        //                    parcela = 1;

        //                    #region gera cobranca

        //                    Cobranca cobranca = new Cobranca();
        //                    cobranca.BeneficiarioEmail = "";
        //                    cobranca.BeneficiarioId = null;
        //                    cobranca.ContratoEnderecoCobrancaID = contrato.EnderecoCobrancaID;
        //                    cobranca.ContratoNumero = contrato.Numero;
        //                    cobranca.ContratoTitularNome = "";
        //                    cobranca.DataCriacao = DateTime.Now;
        //                    cobranca.DataVencimento = new DateTime(contrato.Admissao.Year, contrato.Admissao.Month, contrato.Admissao.Day, 23, 59, 59, 0);
        //                    cobranca.EstipulanteNome = "";
        //                    cobranca.FilialNome = "";
        //                    cobranca.OperadoraID = contrato.OperadoraID;
        //                    cobranca.OperadoraNome = "";
        //                    cobranca.Pago = false;
        //                    cobranca.Parcela = parcela;
        //                    cobranca.PropostaID = contrato.ID;
        //                    cobranca.Tipo = (Int32)Cobranca.eTipo.Normal;
        //                    cobranca.Valor = Contrato.CalculaValorDaProposta2(contrato.ID, cobranca.DataVencimento, pm, false, true, ref composite, false);
        //                    if (cobranca.Valor > 0)
        //                    {
        //                        if (contrato.Vencimento >= venctoDe && contrato.Vencimento <= venctoAte)
        //                        {
        //                            cobranca.Carteira = (Int32)carteira;
        //                            pm.Save(cobranca);
        //                            retornar.Add(cobranca);
        //                            CobrancaComposite.Salvar(cobranca.ID, composite, pm);
        //                        }
        //                    }

        //                    #endregion
        //                }
        //                else
        //                {
        //                    existente = false;
        //                    i = 0;

        //                    foreach (Cobranca _existente in _cobrancas)
        //                    {
        //                        if (_existente.DataVencimento >= venctoDe &&
        //                            _existente.DataVencimento <= venctoAte &&
        //                            _existente.Tipo == (Int32)Cobranca.eTipo.Normal)
        //                        {
        //                            if (_existente.ArquivoIDUltimoEnvio == null && // nao enviado
        //                                _existente.Pago == false &&                // nao pago
        //                                _existente.Cancelada == false)             // ativa
        //                            {
        //                                if (i > 0)
        //                                {
        //                                    if (_cobrancas[i - 1].Pago) //checa se cobrança anterior está paga
        //                                    {
        //                                        temp = Contrato.CalculaValorDaProposta2(contrato.ID, _existente.DataVencimento, pm, false, true, ref composite, false);
        //                                        if (_existente.Valor != temp)
        //                                        {
        //                                            _existente.Valor = temp;
        //                                            pm.Save(_existente);
        //                                        }

        //                                        _existente.Carteira = (Int32)carteira;
        //                                        retornar.Add(_existente);
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    temp = Contrato.CalculaValorDaProposta2(contrato.ID, _existente.DataVencimento, pm, false, true, ref composite, false);
        //                                    if (_existente.Valor != temp)
        //                                    {
        //                                        _existente.Valor = temp;
        //                                        pm.Save(_existente);
        //                                    }

        //                                    _existente.Carteira = (Int32)carteira;
        //                                    retornar.Add(_existente);
        //                                }
        //                            }

        //                            existente = true;
        //                            break;
        //                        }

        //                        i++;
        //                    }

        //                    if (!existente) //cria uma nova cobranca
        //                    {
        //                        if (_cobrancas.Count == 0 || _cobrancas[_cobrancas.Count - 1].Pago) //checa se cobrança anterior está paga
        //                        {
        //                            parcela = _cobrancas[_cobrancas.Count - 1].Parcela + 1; //_cobrancas.Count + 1;

        //                            #region gera cobranca

        //                            Cobranca cobranca = new Cobranca();
        //                            cobranca.BeneficiarioEmail = "";
        //                            cobranca.BeneficiarioId = null;
        //                            cobranca.ContratoEnderecoCobrancaID = contrato.EnderecoCobrancaID;
        //                            cobranca.ContratoNumero = contrato.Numero;
        //                            cobranca.ContratoTitularNome = "";
        //                            cobranca.DataCriacao = DateTime.Now;

        //                            if (_cobrancas.Count > 1)
        //                            {
        //                                cobranca.DataVencimento = _cobrancas[_cobrancas.Count - 1].DataVencimento.AddMonths(1);// new DateTime(ano, mes, contrato.Vencimento.Day, 23, 59, 59);

        //                                if (_cobrancas[_cobrancas.Count - 1].Tipo != (int)eTipo.Normal)
        //                                {
        //                                    //DateTime vigencia, vencimento;
        //                                    //Int32 diaDataSemJuros; Object valorDataLimite;
        //                                    //CalendarioVencimento rcv = null;
        //                                    //CalendarioAdmissaoVigencia.CalculaDatasDeVigenciaEVencimento(contrato.ContratoADMID,
        //                                    //    DateTime.Now, out vigencia, out vencimento, out diaDataSemJuros, out valorDataLimite, out rcv, pm);

        //                                    Cobranca ultimaCobrancaNormal = ultimaCobrancaNormalDaColecao(_cobrancas);
        //                                    if (ultimaCobrancaNormal != null)
        //                                    {
        //                                        cobranca.DataVencimento = new DateTime(cobranca.DataVencimento.Year,
        //                                            cobranca.DataVencimento.Month, ultimaCobrancaNormal.DataVencimento.Day, 23, 59, 59, 900);
        //                                        ultimaCobrancaNormal = null;
        //                                    }
        //                                }
        //                            }
        //                            else if (_cobrancas.Count == 0)
        //                                cobranca.DataVencimento = new DateTime(contrato.Admissao.Year, contrato.Admissao.Month, contrato.Admissao.Day, 23, 59, 59, 500);
        //                            else
        //                                cobranca.DataVencimento = new DateTime(contrato.Vencimento.Year, contrato.Vencimento.Month, contrato.Vencimento.Day, 23, 59, 59, 500);

        //                            cobranca.EstipulanteNome = "";
        //                            cobranca.FilialNome = "";
        //                            cobranca.OperadoraID = contrato.OperadoraID;
        //                            cobranca.OperadoraNome = "";
        //                            cobranca.Pago = false;
        //                            cobranca.Parcela = parcela;
        //                            cobranca.PropostaID = contrato.ID;
        //                            cobranca.Tipo = (Int32)Cobranca.eTipo.Normal;
        //                            cobranca.Carteira = (Int32)carteira;

        //                            try
        //                            {
        //                                vigencia = DateTime.MinValue; vencimento = DateTime.MinValue;
        //                                diaDataSemJuros = -1; valorDataLimite = null; rcv = null;

        //                                CalendarioAdmissaoVigencia.CalculaDatasDeVigenciaEVencimento(contrato.ContratoADMID,
        //                                    contrato.Admissao, out vigencia, out vencimento, out diaDataSemJuros, out valorDataLimite, out rcv, pm);

        //                                if (cobranca.DataVencimento.Day != vencimento.Day && vencimento != DateTime.MinValue)
        //                                {
        //                                    cobranca.DataVencimento = new DateTime(
        //                                        cobranca.DataVencimento.Year,
        //                                        cobranca.DataVencimento.Month, vencimento.Day, 23, 59, 59, 900);
        //                                }
        //                            }
        //                            catch
        //                            {
        //                            }

        //                            try
        //                            {
        //                                cobranca.Valor = Contrato.CalculaValorDaProposta2(contrato.ID, cobranca.DataVencimento, pm, false, true, ref composite, false);
        //                            }
        //                            catch (Exception ex)
        //                            {
        //                                pm.CloseSingleCommandInstance();
        //                                throw ex;
        //                            }

        //                            if (cobranca.Valor > 0)
        //                            {
        //                                if (cobranca.DataVencimento >= venctoDe && cobranca.DataVencimento <= venctoAte)
        //                                {
        //                                    try
        //                                    {
        //                                        pm.Save(cobranca);
        //                                        retornar.Add(cobranca);
        //                                        CobrancaComposite.Salvar(cobranca.ID, composite, pm);
        //                                    }
        //                                    catch
        //                                    {
        //                                    }
        //                                }
        //                            }
        //                            #endregion
        //                        }
        //                    }
        //                }

        //                pm.CloseSingleCommandInstance();
        //            }

        //            return retornar;
        //        }
        //        catch (Exception ex)
        //        {
        //            throw ex;
        //        }
        //        finally
        //        {
        //            if (pm != null)
        //            {
        //                pm.CloseSingleCommandInstance();
        //                pm.Dispose();
        //                pm = null;
        //            }
        //        }
        //    }

        //    /// <summary>
        //    /// Versão 2
        //    /// </summary>
        //    public static IList<Cobranca> ProcessarCobrancasNormaisParaGerarRemessa(ArquivoRemessaCriterio.eTipoTaxa tipoTaxa, DateTime venctoDe, DateTime venctoAte, DateTime vigenciaDe, DateTime vigenciaAte, IList<ArquivoRemessaAgendamento> aras)
        //    {
        //        Decimal valorCobranca = 0;
        //        List<Cobranca> retornar = new List<Cobranca>();

        //        #region query

        //        //if (aras[0].QtdBoletos > 1)
        //        //{
        //        //    venctoAte = venctoDe.AddMonths(aras[0].QtdBoletos - 1);
        //        //}

        //        venctoAte = aras[0].VencimentoAte; //new DateTime(venctoAte.Year, venctoAte.Month, venctoAte.Day, 23, 59, 59, 997);

        //        String condicaoTaxa = "";
        //        if (tipoTaxa == ArquivoRemessaCriterio.eTipoTaxa.SemTaxa)
        //            condicaoTaxa = " AND contrato_cobrarTaxaAssociativa=0 ";
        //        else if (tipoTaxa == ArquivoRemessaCriterio.eTipoTaxa.ComTaxa)
        //            condicaoTaxa = " AND contrato_cobrarTaxaAssociativa=1 ";

        //        String condicaoVigencia = String.Concat(" AND contrato_vigencia BETWEEN '", vigenciaDe.ToString("yyyy-MM-dd"), "' AND '", vigenciaAte.ToString("yyyy-MM-dd 23:59:59.997") + "' ");

        //        String formattedContratoAdmIds = "";
        //        ArquivoRemessaCriterio crit = null;
        //        foreach (ArquivoRemessaAgendamento _ara in aras)
        //        {
        //            crit = new ArquivoRemessaCriterio(_ara.CriterioID);
        //            crit.Carregar();

        //            if (formattedContratoAdmIds.Length > 0) { formattedContratoAdmIds += ","; }
        //            formattedContratoAdmIds = String.Concat(formattedContratoAdmIds, crit.ContratoAdmIDs);
        //        }

        //        String qry = String.Concat(
        //            "SELECT DISTINCT(contrato_id), contrato_operadoraid, contrato_contratoAdmId, filial_nome, estipulante_descricao, operadora_nome, contrato_numero, contrato_numeroId, contrato_vigencia, contrato_admissao, contrato_vencimento, contrato_enderecoCobrancaId, contrato_codcobranca ",
        //            "   FROM contrato ",
        //            "       LEFT JOIN usuario_filial a ON contrato_donoId = a.usuariofilial_usuarioId and a.usuariofilial_data = (select max(b.usuariofilial_data) from usuario_filial b where b.usuariofilial_usuarioId = a.usuariofilial_usuarioId) ",
        //            "       LEFT JOIN filial           ON filial_id = a.usuariofilial_filialId ",
        //            "       INNER JOIN operadora       ON operadora_id=contrato_operadoraId ",
        //            "       INNER JOIN estipulante     ON estipulante_id=contrato_estipulanteId ",
        //            //              "       INNER JOIN contrato_beneficiario ON contratobeneficiario_status NOT IN (10,15,17,21) AND contratobeneficiario_ativo=1 AND contratobeneficiario_contratoId=contrato_id ", //0,1, 

        //            "   WHERE ", Contrato.CondicaoBasicaQuery, //todo: denis tirar id de contrato hardcoded contrato_id in(43817,43818) and
        //            "       AND contrato_contratoAdmId IN (", formattedContratoAdmIds, ") ", condicaoTaxa, condicaoVigencia, //" and contrato_id=43578 ", //TODO: denis excluir hard code de contrato id
        //            "   ORDER BY filial_nome, estipulante_descricao, operadora_nome, contrato_vencimento");

        //        //qry = "SELECT DISTINCT(contrato_id), contrato_operadoraid, contrato_contratoAdmId, filial_nome, estipulante_descricao, operadora_nome, contrato_numero, contrato_numeroId, contrato_vigencia,  contrato_admissao, contrato_vencimento, contrato_enderecoCobrancaId, contrato_codcobranca    FROM contrato        LEFT JOIN usuario_filial a ON contrato_donoId = a.usuariofilial_usuarioId and a.usuariofilial_data = (select max(b.usuariofilial_data) from usuario_filial b where b.usuariofilial_usuarioId = a.usuariofilial_usuarioId)        LEFT JOIN filial           ON filial_id = a.usuariofilial_filialId        INNER JOIN operadora       ON operadora_id=contrato_operadoraId        INNER JOIN estipulante     ON estipulante_id=contrato_estipulanteId    WHERE  contrato_id=43563 ORDER BY filial_nome, estipulante_descricao, operadora_nome, contrato_vencimento";

        //        #endregion

        //        PersistenceManager pm = null;
        //        Contrato _contrato = null;

        //        int kk = 0;
        //        try
        //        {
        //            DataTable dt = LocatorHelper.Instance.ExecuteQuery(qry, "result").Tables[0];
        //            if (dt.Rows.Count == 0) { return null; }
        //            List<Contrato> contratos = new List<Contrato>();

        //            Contrato __contrato = null;
        //            foreach (DataRow row in dt.Rows)
        //            {
        //                __contrato = new Contrato(row["contrato_id"]);
        //                __contrato.OperadoraID = row["contrato_operadoraid"];
        //                __contrato.ContratoADMID = row["contrato_contratoAdmId"];
        //                __contrato.OperadoraDescricao = toString(row["operadora_nome"]);
        //                __contrato.Numero = toString(row["contrato_numero"]);
        //                __contrato.NumeroID = toObject(row["contrato_numeroId"]);
        //                __contrato.Vigencia = toDateTime(row["contrato_vigencia"]);
        //                __contrato.Admissao = toDateTime(row["contrato_admissao"]);
        //                __contrato.Vencimento = toDateTime(row["contrato_vencimento"]);
        //                __contrato.EnderecoCobrancaID = row["contrato_enderecoCobrancaId"];
        //                __contrato.CodCobranca = toInt(row["contrato_codcobranca"]);

        //                contratos.Add(__contrato);
        //            }

        //            dt.Dispose();

        //            IList<Cobranca> _cobrancas = null;
        //            List<Cobranca> _cobrancasTemp = null;
        //            IList<TabelaValor> tabelaValor = null;
        //            int parcela = 1;
        //            int i = 0;
        //            int cobrancasAdicionadas = 0;
        //            int indiceUltimaCobranca = 0;
        //            int dif = 0; //diferenca entre cobrancas geradas e cobrancas a serem geradas
        //            DateTime dataLimiteContratoAdm = DateTime.MinValue;

        //            int j = 0; List<CobrancaComposite> composite = null;

        //            pm = new PersistenceManager();
        //            pm.UseSingleCommandInstance();

        //            foreach (Contrato contrato in contratos)
        //            {
        //                kk++;

        //                System.Windows.Forms.Application.DoEvents();
        //                cobrancasAdicionadas = 0;
        //                _contrato = contrato;

        //                //Para cada contrato gerar a cobrança.
        //                //  checar se há uma cobrança ativa com as mesmas características. se existir, não gerar.
        //                _cobrancas = Cobranca.CarregarTodas_Optimized(contrato.ID, true, eTipo.Normal, pm);

        //                #region for qtd cobrancas

        //                if (_cobrancas == null || _cobrancas.Count == 0)
        //                {
        //                    parcela = 1;

        //                    #region gera cobranca

        //                    Cobranca cobranca = new Cobranca();
        //                    cobranca.BeneficiarioEmail = "";
        //                    cobranca.BeneficiarioId = null;
        //                    cobranca.ContratoEnderecoCobrancaID = contrato.EnderecoCobrancaID;
        //                    cobranca.ContratoNumero = contrato.Numero;
        //                    cobranca.ContratoTitularNome = "";
        //                    cobranca.DataCriacao = DateTime.Now;
        //                    cobranca.DataVencimento = new DateTime(contrato.Admissao.Year, contrato.Admissao.Month, contrato.Admissao.Day, 23, 59, 59, 0);
        //                    cobranca.EstipulanteNome = "";
        //                    cobranca.FilialNome = "";
        //                    cobranca.OperadoraID = contrato.OperadoraID;
        //                    cobranca.OperadoraNome = "";
        //                    cobranca.Pago = false;
        //                    cobranca.Parcela = parcela;
        //                    cobranca.PropostaID = contrato.ID;
        //                    cobranca.Tipo = (Int32)Cobranca.eTipo.Normal;
        //                    cobranca.Valor = Contrato.CalculaValorDaProposta2(contrato.ID, cobranca.DataVencimento, pm, false, true, ref composite, false);
        //                    cobranca.Carteira = aras[0].Carteira;

        //                    if (cobranca.Valor > 0)
        //                    {
        //                        if (contrato.Vencimento >= venctoDe && contrato.Vencimento <= venctoAte)
        //                        {
        //                            pm.Save(cobranca);
        //                            retornar.Add(cobranca);
        //                            CobrancaComposite.Salvar(cobranca.ID, composite, pm);
        //                            cobrancasAdicionadas++;
        //                        }
        //                    }

        //                    #endregion
        //                }
        //                else
        //                {
        //                    _cobrancasTemp = new List<Cobranca>();
        //                    int indiceCobranca = 0; indiceUltimaCobranca = 0;

        //                    foreach (Cobranca _existente in _cobrancas)
        //                    {
        //                        _cobrancasTemp.Add(_existente);

        //                        //pega o indice da ultima cobranca anteriormente criada
        //                        if (_existente.DataVencimento < venctoDe) { indiceUltimaCobranca = indiceCobranca; }
        //                        indiceCobranca++; i++;
        //                    }

        //                    i = 0;
        //                    //NAO pode gerar cobranca com data de vencimento alem de tabelaValor[0].VencimentoFim.AddMonths(1)
        //                    if ((_cobrancas != null && _cobrancas.Count == 1 && _cobrancas[0].Parcela == 1) || indiceUltimaCobranca == 0)             //_cobrancas[indiceUltimaCobranca].Parcela == 1)
        //                    {
        //                        //se for a parcela 2, nao pode simplesmente somar um mes, pois a data do 
        //                        //primeiro pagto é irregular. contudo, pode-se usar a data de primeiro vencimento,
        //                        //cadastrada no contrato.
        //                        tabelaValor = TabelaValor.CarregarTabelaVigente(contrato.ContratoADMID, contrato.Admissao, contrato.Vencimento, pm, true); //força vigencia
        //                    }
        //                    else
        //                    {
        //                        tabelaValor = TabelaValor.CarregarTabelaVigente(contrato.ContratoADMID, contrato.Admissao, _cobrancas[indiceUltimaCobranca].DataVencimento.AddMonths(1), pm, true); //força vigencia
        //                    }

        //                    if (tabelaValor != null && tabelaValor.Count > 0)
        //                    {
        //                        tabelaValor[0].VencimentoFim = new DateTime(tabelaValor[0].VencimentoFim.Year,
        //                            tabelaValor[0].VencimentoFim.Month, tabelaValor[0].VencimentoFim.Day, 23, 59, 59, 997);
        //                    }
        //                    else
        //                    {
        //                        //Logar a falha em obter uma tabela de valor
        //                        CobrancaFalha.LogFalhaTabelaValor(contrato.ID, _cobrancas[indiceUltimaCobranca].DataVencimento.AddMonths(1), pm);
        //                        continue;
        //                    }

        //                    if (cobrancasAdicionadas >= aras[0].QtdBoletos) { break; }

        //                    int incrementaDataVenctoAte = 0;
        //                    foreach (Cobranca _existente in _cobrancas)
        //                    {
        //                        if (cobrancasAdicionadas >= aras[0].QtdBoletos) { break; }

        //                        if (_existente.DataVencimento >= venctoDe &&
        //                            _existente.DataVencimento <= venctoAte.AddMonths(incrementaDataVenctoAte) &&
        //                            _existente.Tipo == (Int32)Cobranca.eTipo.Normal)
        //                        {
        //                            if (_existente.ArquivoIDUltimoEnvio == null && // nao enviado 
        //                                _existente.Pago == false &&                // nao pago
        //                                _existente.Cancelada == false)             // ativa
        //                            {
        //                                incrementaDataVenctoAte++;

        //                                if (i > 0)
        //                                {
        //                                    //NAO CHECAR MAIS A ADIMPLENCIA. APENAS SE ESTÁ ATIVO
        //                                    //if (_cobrancas[indiceUltimaCobranca].Pago || //checa se cobrança anterior está paga ou nao está vencida
        //                                    //    _cobrancas[indiceUltimaCobranca].DataVencimento <= DateTime.Now)
        //                                    //{
        //                                    #region checa valor

        //                                    valorCobranca = Contrato.CalculaValorDaProposta2(contrato.ID, _existente.DataVencimento, pm, false, true, ref composite, true); //força vigencia

        //                                    if (valorCobranca == 0)
        //                                    {
        //                                        CobrancaFalha.LogFalhaTabelaValor(contrato.ID, _existente.DataVencimento, pm);
        //                                        break;
        //                                    }

        //                                    if (_existente.Valor != valorCobranca)
        //                                    {
        //                                        _existente.Valor = valorCobranca;
        //                                        pm.Save(_existente);
        //                                    }
        //                                    #endregion
        //                                    _existente.Carteira = aras[0].Carteira;

        //                                    if (_existente.DataVencimento.Day != venctoDe.Day) { break; }///////////// if (_existente.DataVencimento.Day < venctoDe.Day || _existente.DataVencimento.Day > venctoAte.Day)
        //                                    if (_existente.DataVencimento <= tabelaValor[0].VencimentoFim)
        //                                    {
        //                                        retornar.Add(_existente);
        //                                    }
        //                                    cobrancasAdicionadas++; j++;
        //                                    //}
        //                                }
        //                                else
        //                                {
        //                                    #region checa valor

        //                                    valorCobranca = Contrato.CalculaValorDaProposta2(contrato.ID, _existente.DataVencimento, pm, false, true, ref composite, true); //força vigenci
        //                                    if (valorCobranca == 0)
        //                                    {
        //                                        CobrancaFalha.LogFalhaTabelaValor(contrato.ID, _existente.DataVencimento, pm);
        //                                        break;
        //                                    }

        //                                    if (_existente.Valor != valorCobranca)
        //                                    {
        //                                        _existente.Valor = valorCobranca;
        //                                        pm.Save(_existente);
        //                                    }
        //                                    #endregion
        //                                    _existente.Carteira = aras[0].Carteira;

        //                                    if (_existente.DataVencimento.Day != venctoDe.Day) { break; }///////////// if (_existente.DataVencimento.Day < venctoDe.Day || _existente.DataVencimento.Day > venctoAte.Day)
        //                                    if (_existente.DataVencimento <= tabelaValor[0].VencimentoFim)
        //                                    {
        //                                        retornar.Add(_existente);
        //                                    }
        //                                    cobrancasAdicionadas++; j++;
        //                                }
        //                            }
        //                        }

        //                        i++;
        //                    } //foreach (Cobranca _existente in _cobrancas)

        //                    // Se não gerou todas as cobranças que devia e está adimplente (nao verifica mais a adimplencia)
        //                    //if (cobrancasAdicionadas < aras[0].QtdBoletos && _cobrancas[indiceUltimaCobranca].Pago)

        //                    // Se não gerou todas as cobranças que devia
        //                    if (cobrancasAdicionadas < aras[0].QtdBoletos)
        //                    {
        //                        dif = aras[0].QtdBoletos - cobrancasAdicionadas;

        //                        for (int k = 1; k <= dif; k++)
        //                        {
        //                            #region gera cobranca

        //                            parcela = _cobrancasTemp[_cobrancasTemp.Count - 1].Parcela + 1;

        //                            Cobranca cobranca = new Cobranca();
        //                            cobranca.BeneficiarioEmail = "";
        //                            cobranca.BeneficiarioId = null;
        //                            cobranca.ContratoEnderecoCobrancaID = contrato.EnderecoCobrancaID;
        //                            cobranca.ContratoNumero = contrato.Numero;
        //                            cobranca.ContratoTitularNome = "";
        //                            cobranca.DataCriacao = DateTime.Now;

        //                            if (_cobrancasTemp.Count > 1)
        //                            {
        //                                cobranca.DataVencimento = _cobrancasTemp[_cobrancasTemp.Count - 1].DataVencimento.AddMonths(1);// new DateTime(ano, mes, contrato.Vencimento.Day, 23, 59, 59);
        //                                //if (cobranca.DataVencimento.Day != 7 && !aras[0].Legado)
        //                                //{
        //                                //    cobranca.DataVencimento = new DateTime(
        //                                //        cobranca.DataVencimento.Year,
        //                                //        cobranca.DataVencimento.Month, 7,
        //                                //        cobranca.DataVencimento.Hour,
        //                                //        cobranca.DataVencimento.Minute,
        //                                //        cobranca.DataVencimento.Second,
        //                                //        500);
        //                                //}


        //                                cobranca.DataVencimento = new DateTime(cobranca.DataVencimento.Year, cobranca.DataVencimento.Month, cobranca.DataVencimento.Day, 23, 59, 59, 500);
        //                                if (cobranca.DataVencimento > venctoAte) { break; }

        //                                if (_cobrancasTemp[_cobrancas.Count - 1].Tipo != (int)eTipo.Normal)
        //                                {
        //                                    Cobranca ultimaCobrancaNormal = ultimaCobrancaNormalDaColecao(_cobrancasTemp);
        //                                    if (ultimaCobrancaNormal != null)
        //                                    {
        //                                        cobranca.DataVencimento = new DateTime(ultimaCobrancaNormal.DataVencimento.AddMonths(1).Year,
        //                                            ultimaCobrancaNormal.DataVencimento.AddMonths(1).Month, ultimaCobrancaNormal.DataVencimento.Day, 23, 59, 59, 500);
        //                                        ultimaCobrancaNormal = null;
        //                                    }
        //                                }
        //                            }
        //                            else if (_cobrancasTemp == null || _cobrancasTemp.Count == 0)
        //                                cobranca.DataVencimento = new DateTime(contrato.Admissao.Year, contrato.Admissao.Month, contrato.Admissao.Day, 23, 59, 59, 500);
        //                            else
        //                                cobranca.DataVencimento = new DateTime(contrato.Vencimento.Year, contrato.Vencimento.Month, contrato.Vencimento.Day, 23, 59, 59, 500);

        //                            //if (cobranca.DataVencimento.Day < venctoDe.Day || cobranca.DataVencimento.Day > venctoAte.Day) { break; }
        //                            /////////////////////////////if (cobranca.DataVencimento.Day != venctoDe.Day) { CobrancaFalha.LogFalha(contrato.ID, cobranca.DataVencimento, "Dia de vencimento inválido.", pm); break; }//////////////////////

        //                            cobranca.EstipulanteNome = "";
        //                            cobranca.FilialNome = "";
        //                            cobranca.OperadoraID = contrato.OperadoraID;
        //                            cobranca.OperadoraNome = "";
        //                            cobranca.Pago = false;
        //                            cobranca.Parcela = parcela;
        //                            cobranca.PropostaID = contrato.ID;
        //                            cobranca.Tipo = (Int32)Cobranca.eTipo.Normal;

        //                            //if (cobranca.DataVencimento.Day == 7 && !aras[0].Legado)
        //                            //{
        //                            //    cobranca.DataVencimento = new DateTime(
        //                            //        cobranca.DataVencimento.Year,
        //                            //        cobranca.DataVencimento.Month, 10,
        //                            //        cobranca.DataVencimento.Hour,
        //                            //        cobranca.DataVencimento.Minute,
        //                            //        cobranca.DataVencimento.Second,
        //                            //        499);
        //                            //}

        //                            //para contratos para os quais nao foram emitidas cobrancas ja faz tempo
        //                            if (cobranca.DataVencimento < venctoDe && cobranca.DataVencimento.Month != venctoDe.Month)
        //                            {
        //                                cobranca.DataVencimento = new DateTime(
        //                                    venctoDe.Year, venctoDe.Month, venctoDe.Day, 23, 59, 59, 500);
        //                                cobranca.DataVencimentoForcada = true;

        //                                CobrancaFalha.LogFalha(contrato.ID, cobranca.DataVencimento, "Furo na cadeia de cobranças", pm);
        //                                //break;
        //                            }
        //                            ///////////////////////////////////////////////////////////////////////////

        //                            tabelaValor = TabelaValor.CarregarTabelaVigente(contrato.ContratoADMID, contrato.Admissao, cobranca.DataVencimento, pm, true); //força vigencia
        //                            if (tabelaValor == null || tabelaValor.Count == 0)
        //                            {
        //                                CobrancaFalha.LogFalhaTabelaValor(contrato.ID, cobranca.DataVencimento, pm);
        //                                break;
        //                            }

        //                            try
        //                            {
        //                                cobranca.Valor = Contrato.CalculaValorDaProposta2(contrato.ID, cobranca.DataVencimento, pm, false, true, ref composite, true); //força vigencia
        //                                if (cobranca.Valor == 0)
        //                                {
        //                                    CobrancaFalha.LogFalhaTabelaValor(contrato.ID, cobranca.DataVencimento, pm);
        //                                    break;
        //                                }
        //                            }
        //                            catch (Exception ex)
        //                            {
        //                                pm.CloseSingleCommandInstance();
        //                                throw ex;
        //                            }

        //                            if (cobranca.Valor > 0)
        //                            {
        //                                _cobrancasTemp.Add(cobranca);

        //                                if (cobranca.DataVencimento >= venctoDe && cobranca.DataVencimento <= venctoAte && cobranca.DataVencimento <= tabelaValor[0].VencimentoFim)
        //                                {
        //                                    cobranca.Carteira = aras[0].Carteira;

        //                                    Cobranca cob = Cobranca.CarregarPor(cobranca.PropostaID, cobranca.DataVencimento, (int)Cobranca.eTipo.Normal, pm);
        //                                    if (cob == null)
        //                                    {
        //                                        try
        //                                        {
        //                                            //cobranca.DataVencimento = new DateTime(2016, 12, 10, 23, 59, 59, 996);//TODO: Denis, deletar isso
        //                                            pm.Save(cobranca);
        //                                            CobrancaComposite.Salvar(cobranca.ID, composite, pm);
        //                                            retornar.Add(cobranca);
        //                                            cobrancasAdicionadas++; j++;
        //                                        }
        //                                        catch
        //                                        {
        //                                            CobrancaFalha.LogFalha(cobranca.PropostaID, cobranca.DataVencimento, string.Concat("Duplicidade para a parcela ", cobranca.Parcela.ToString()), pm);
        //                                            break;
        //                                        }
        //                                    }
        //                                }
        //                                else if (cobranca.DataVencimento > venctoAte)
        //                                    break;
        //                                else if (cobranca.DataVencimento > tabelaValor[0].VencimentoFim)
        //                                {
        //                                    CobrancaFalha.LogFalha(contrato.ID, cobranca.DataVencimento, "Data de vencimento excede vencimento final da tabela. ContratoADM: " + contrato.ContratoADMID, pm);
        //                                    break;
        //                                }
        //                                else
        //                                    k--;
        //                            }
        //                            #endregion
        //                        }
        //                    }
        //                }

        //                #endregion

        //            } //foreach (Contrato contrato in contratos)

        //            pm.CloseSingleCommandInstance();

        //            return retornar;
        //        }
        //        catch
        //        {
        //            throw;
        //        }
        //        finally
        //        {
        //            if (pm != null)
        //            {
        //                pm.CloseSingleCommandInstance();
        //                pm.Dispose();
        //                pm = null;
        //            }
        //        }
        //    }

        //    public static IList<Cobranca> ProcessarNormais_TEMP_DEVIDO_ERRO_GERACAO_MES06()
        //    {
        //        DateTime agora = DateTime.Now;
        //        List<Cobranca> geradas = new List<Cobranca>();
        //        using (PersistenceManager pm = new PersistenceManager())
        //        {
        //            pm.BeginTransactionContext();

        //            try
        //            {
        //                var cobrancas = LocatorHelper.Instance.ExecuteQuery<Cobranca>("select * from cobranca where cobranca_tipotemp=255", typeof(Cobranca), pm);
        //                //var cobrancas = LocatorHelper.Instance.ExecuteQuery<Cobranca>("select * from cobranca where cobranca_arquivoUltimoEnvioId in (69,70)", typeof(Cobranca), pm);

        //                //foreach (var cob in cobrancas)
        //                //{
        //                //    cob.ID = null;
        //                //    cob.Cancelada = false;
        //                //    cob.DataVencimento = new DateTime(cob.DataVencimento.Year, cob.DataVencimento.Month, 7, 23, 59, 59, 995);
        //                //    cob.ArquivoIDUltimoEnvio = -99;
        //                //    cob.NossoNumero = null;
        //                //    cob.DataCriacao = agora;
        //                //    cob.TipoTemp = 255;

        //                //    pm.Save(cob);
        //                //    geradas.Add(cob);
        //                //}

        //                GeraDocumentoCobranca_TEMP_DEVIDO_ERRO_GERACAO_MES06(pm, geradas);

        //                pm.Commit();
        //                return geradas;
        //            }
        //            catch
        //            {
        //                pm.Rollback();
        //                return null;
        //            }
        //            finally
        //            {
        //                pm.Dispose();
        //            }
        //        }
        //    }

        //    public static String GeraDocumentoCobranca_TEMP_DEVIDO_ERRO_GERACAO_MES06(PersistenceManager _pm, List<Cobranca> cobrancasObj)
        //    {
        //        List<string> cobrancaIDs = new List<string>();
        //        foreach (var c in cobrancasObj)
        //        {
        //            if (cobrancaIDs.Contains(Convert.ToString(c.ID))) continue;

        //            cobrancaIDs.Add(Convert.ToString(c.ID));
        //        }

        //        Int32 numSequencial = 0;

        //        PersistenceManager pm = _pm;

        //        Int32 contratoadmQualicorpID = Convert.ToInt32(ConfigurationManager.AppSettings["contratoAdmQualicorpIdIncial"]);

        //        if (_pm == null)
        //        {
        //            pm = new PersistenceManager();
        //            pm.IsoLevel = IsolationLevel.ReadUncommitted;
        //            pm.BeginTransactionContext();
        //        }

        //        String headerCedente = "UBRASP - UNIAO BRASILEIRA";
        //        string agencia = "0001"; //, agenciadv = "0";
        //        string numcontacorr = "13014765";
        //        string dvcontacorr = "2";
        //        string cnpj = "49938327000106"; //
        //        string codTransmissao = "000100001201344";

        //        string numConvenio = "1201344"; // Cobranca.ConvenioUBRASP.PadLeft(9, '0');

        //        int numeroDoArquivo = 1;
        //        string[] arquivos = Directory.GetFiles(ConfigurationManager.AppSettings["financialFilePathFISICO"], "*.dat");
        //        if (arquivos != null && arquivos.Length > 0) numeroDoArquivo = arquivos.Length + 1;
        //        if (numeroDoArquivo > 999) numeroDoArquivo = 1 + (arquivos.Length - 999);

        //        try
        //        {
        //            String dataAgora = DateTime.Now.ToString("ddMMyyyy");
        //            StringBuilder doc = new StringBuilder();

        //            //string arquivoNome = "arquivo.dat"; // 

        //            #region HEADER -------------------------------------------

        //            EntityBase.AppendPreparedField(ref doc, "033", 3);          //codigo do banco na compensacao
        //            EntityBase.AppendPreparedField(ref doc, "0000", 4);         //lote de serviço
        //            EntityBase.AppendPreparedField(ref doc, "0", 1);            //tipo de registro
        //            EntityBase.AppendPreparedField(ref doc, "        ", 8);     //brancos
        //            EntityBase.AppendPreparedField(ref doc, "2", 1);            //tipo de inscrição - 2 para CNPJ, 1 para CPF

        //            EntityBase.AppendPreparedField(ref doc, cnpj.PadLeft(15, '0'), 15);          //CNPJ (ou cpf) 
        //            EntityBase.AppendPreparedField(ref doc, codTransmissao.PadLeft(15, '0'), 15); //Codigo de transmissao 
        //            EntityBase.AppendPreparedField(ref doc, " ", 25);           //brancos
        //            EntityBase.AppendPreparedField(ref doc, headerCedente.PadRight(30, ' '), 30); //nome empresa
        //            EntityBase.AppendPreparedField(ref doc, "Banco Santander".PadRight(30, ' '), 30); //Nome do Banco
        //            EntityBase.AppendPreparedField(ref doc, " ", 10);           //brancos
        //            EntityBase.AppendPreparedField(ref doc, "1", 1);            //Código Remessa: 1 = remessa
        //            EntityBase.AppendPreparedField(ref doc, dataAgora, 8);      //data de geracao do arquivo
        //            EntityBase.AppendPreparedField(ref doc, " ", 6);            //brancos
        //            EntityBase.AppendPreparedField(ref doc, numeroDoArquivo.ToString().PadLeft(6, '0'), 6); //brancos
        //            EntityBase.AppendPreparedField(ref doc, "040", 3);          //versão do layout do arquivo
        //            EntityBase.AppendPreparedField(ref doc, " ", 74);           //brancos

        //            #endregion

        //            #region HEADER DE LOTE -----------------------------------

        //            doc.Append(Environment.NewLine);
        //            EntityBase.AppendPreparedField(ref doc, "033", 3);          //codigo do banco na compensacao
        //            EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Lote de Serviço
        //            EntityBase.AppendPreparedField(ref doc, "1", 1);            //tipo de registro
        //            EntityBase.AppendPreparedField(ref doc, "R", 1);            //tipo de operação
        //            EntityBase.AppendPreparedField(ref doc, "01", 2);           //tipo de serviço
        //            EntityBase.AppendPreparedField(ref doc, "  ", 2);           //brancos
        //            EntityBase.AppendPreparedField(ref doc, "030", 3);          //Nº da Versão do Layout do Lote - nao criticado pelo banco
        //            EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //            EntityBase.AppendPreparedField(ref doc, "2", 1);            //Tipo de Inscrição da Empresa - 2=CNPJ
        //            EntityBase.AppendPreparedField(ref doc, cnpj.PadLeft(15, '0'), 15);  //CNPJ (ou cpf) //faltou: cnpj
        //            EntityBase.AppendPreparedField(ref doc, " ", 20);           //brancos
        //            EntityBase.AppendPreparedField(ref doc, codTransmissao.PadLeft(15, '0'), 15);//Codigo de transmissao 
        //            EntityBase.AppendPreparedField(ref doc, " ", 05);           //brancos
        //            EntityBase.AppendPreparedField(ref doc, headerCedente.PadRight(30, ' '), 30); //Nome do beneficiario
        //            EntityBase.AppendPreparedField(ref doc, " ", 40);           //Mensagem 1
        //            EntityBase.AppendPreparedField(ref doc, " ", 40);           //Mensagem 2
        //            EntityBase.AppendPreparedField(ref doc, "0001".PadLeft(8, '0'), 8); //Número remessa/retorno
        //            EntityBase.AppendPreparedField(ref doc, dataAgora, 8);      //data de gravaçao do arquivo
        //            EntityBase.AppendPreparedField(ref doc, " ", 41);           //brancos

        //            #endregion

        //            //Carrega cobrancas envolvidas
        //            IList<Cobranca> _cobrancas = Cobranca.CarregarTodas_OrdemPorContratoParcela_Optimized(cobrancaIDs, pm);
        //            if (_cobrancas == null) { return null; }
        //            List<Object> cobrancaIds = new List<Object>();

        //            IList<Cobranca> cobrancas = new List<Cobranca>();
        //            foreach (var c in _cobrancas)
        //            {
        //                cobrancas.Add(c);
        //            }

        //            if (cobrancas == null || cobrancas.Count == 0) { return null; }

        //            List<TabelaValorVencimentoVO> lista = new List<TabelaValorVencimentoVO>();

        //            #region DETAIL -------------------------------------------

        //            Endereco endereco = null;
        //            //, diaDataSemJuros, result = 0, 
        //            int totalRegistrosDetalhe = 0;
        //            String mascara6 = new String('0', 6); //, nossoNumero = "";
        //            Decimal valorTotal = 0; //, mora = 0, multa = 0;
        //            //Object valorDataLimite = null;
        //            DateTime contratoAdmissao = DateTime.MinValue, vigencia, vencimento, dataLimite = DateTime.MinValue;
        //            //CalendarioVencimento rcv = null;
        //            TabelaValorVencimentoVO retTvv = null;
        //            Contrato contrato = null;
        //            IList<TabelaValor> tabela = null; Taxa taxa = null; EstipulanteTaxa estipulanteTaxa = null;
        //            System.Globalization.CultureInfo cinfo = new System.Globalization.CultureInfo("pt-Br");

        //            int qtdTotalBoletos = 0, numBoletoCorrente = 0, idContratoAtual = 0;

        //            int i = 0;

        //            System.Collections.Hashtable contratoADM_Criterio = new System.Collections.Hashtable();
        //            List<string> parametrosProcessados = new List<string>();

        //            foreach (Cobranca cob in cobrancas)
        //            {
        //                if (parametrosProcessados.Contains(string.Concat(cob.DataVencimento.ToString("ddMMyyyy"), cob.PropostaID))) continue;

        //                parametrosProcessados.Add(string.Concat(cob.DataVencimento.ToString("ddMMyyyy"), cob.PropostaID));

        //                i++;
        //                try
        //                {
        //                    #region DETAIL P ---------------------------------

        //                    #region

        //                    #region localiza o critério correspondente

        //                    contrato = Contrato.CarregarParcial(cob.PropostaID, pm);

        //                    #endregion

        //                    numSequencial++;

        //                    cobrancaIds.Add(cob.ID);

        //                    if (Convert.ToInt32(cob.PropostaID) != idContratoAtual)
        //                    {
        //                        numBoletoCorrente = 0; idContratoAtual = Convert.ToInt32(cob.PropostaID);
        //                        qtdTotalBoletos = 0;
        //                        foreach (Cobranca _temp in cobrancas)
        //                        {
        //                            if (Convert.ToInt32(_temp.PropostaID) == idContratoAtual) { qtdTotalBoletos++; }
        //                            else if (qtdTotalBoletos > 0) { break; }
        //                        }
        //                    }

        //                    numBoletoCorrente++;

        //                    #region checa se tem despesa nao embutida com postagem. se tem, incrementa o valor da cobranca:
        //                    #region data de admissao do contrato

        //                    //Contrato _contrato = Contrato.CarregarParcial(cob.PropostaID, pm);
        //                    if (contrato != null) { contratoAdmissao = contrato.Admissao; }
        //                    else { continue; }
        //                    #endregion

        //                    #endregion

        //                    doc.Append(Environment.NewLine);

        //                    EntityBase.AppendPreparedField(ref doc, "033", 3);          //codigo do banco na compensacao
        //                    EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Numero do lote remessa
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //tipo de registro
        //                    EntityBase.AppendPreparedField(ref doc, numSequencial.ToString().PadLeft(5, '0'), 5); //Nº seqüencial do registro de lote
        //                    EntityBase.AppendPreparedField(ref doc, "P", 1);            //Código de Segmento do Reg. Detalhe
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "01", 2);           //Código de movimento remessa (pag3) - nota 14 (pag.14)
        //                    EntityBase.AppendPreparedField(ref doc, agencia, 4);        //Agência do Destinatária FIDC
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);            //Dígito da Agência do Destinatária FIDC ????
        //                    EntityBase.AppendPreparedField(ref doc, numcontacorr.PadLeft(9, '0'), 9); //Número da conta corrente
        //                    EntityBase.AppendPreparedField(ref doc, dvcontacorr, 1);            //Dígito da conta corrente (definido pela homologação)
        //                    EntityBase.AppendPreparedField(ref doc, numcontacorr.PadLeft(9, '0'), 9); //Conta cobrança Destinatária FIDC ????
        //                    EntityBase.AppendPreparedField(ref doc, dvcontacorr, 1); //Dígito da conta cobrança Destinatária FIDC ????
        //                    EntityBase.AppendPreparedField(ref doc, "  ", 2);           //branco
        //                    cob.NossoNumero = cob.GeraNossoNumeroSantander();
        //                    EntityBase.AppendPreparedField(ref doc, cob.NossoNumero, 13); //Identificação do título no Banco
        //                    EntityBase.AppendPreparedField(ref doc, "5", 1);            //Tipo de cobrança 
        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);            //Forma de Cadastramento - 1 para cobranca registrada
        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);            //Tipo de documento - 1- Tradicional , 2- Escritural
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, Convert.ToString(cob.ID).PadLeft(15, '0'), 15); //Seu número
        //                    EntityBase.AppendPreparedField(ref doc, cob.DataVencimento.ToString("ddMMyyyy"), 8);  // Data de vencimento - pos 78

        //                    //valor do boleto
        //                    EntityBase.AppendPreparedField(ref doc, cob.Valor.ToString("N2", cinfo).Split(',')[0].Replace(".", "").PadLeft(13, '0'), 13);
        //                    EntityBase.AppendPreparedField(ref doc, cob.Valor.ToString("N2", cinfo).Split(',')[1].PadLeft(2, '0'), 2);

        //                    EntityBase.AppendPreparedField(ref doc, "0000", 4);         //Agência encarregada da cobrança
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);            //Dígito da Agência do Beneficiário
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "02", 2);           //Espécie do título Nota 20 pag.15 ???
        //                    EntityBase.AppendPreparedField(ref doc, "N", 1);            //Identif. de título Aceito/Não Aceito
        //                    EntityBase.AppendPreparedField(ref doc, cob.DataCriacao.ToString("ddMMyyyy"), 8); //Data da emissão do título
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //Código do juros de mora - nota 21 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "00000000", 8); //Data do juros de mora - nota 22
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadRight(15, '0'), 15); //Valor da mora/dia ou Taxa mensal - nota 18 pag.15
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);            //Código do desconto 1 - nota 23 pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "00000000", 8);     //Data de desconto 1 - nota 23 pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Valor ou Percentual do desconto concedido
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Valor do IOF a ser recolhido
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Valor do abatimento

        //                    EntityBase.AppendPreparedField(ref doc, Convert.ToString(cob.ID).PadLeft(25, '0'), 25); //Identificação do título na empresa
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);            //Código para protesto - nota 25 pag.16 - 0=nao protestar
        //                    EntityBase.AppendPreparedField(ref doc, "00", 2);           //Número de dias para protesto
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //Código para Baixa/Devolução - nota 26 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "00", 2);           //Número de dias para Baixa/Devolução
        //                    EntityBase.AppendPreparedField(ref doc, "00", 2);           //Código da moeda - nota 27 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, " ".PadRight(11, ' '), 11); //branco

        //                    //
        //                    #endregion

        //                    #endregion

        //                    #region DETAIL Q ---------------------------------

        //                    doc.Append(Environment.NewLine);

        //                    numSequencial++;

        //                    EntityBase.AppendPreparedField(ref doc, "033", 3);          //codigo do banco na compensacao
        //                    EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Numero do lote remessa
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //tipo de registro
        //                    EntityBase.AppendPreparedField(ref doc, numSequencial.ToString().PadLeft(5, '0'), 5); //Nº seqüencial do registro no lote - nota 11 - pg.14
        //                    EntityBase.AppendPreparedField(ref doc, "Q", 1);            //Código de Segmento do Reg. Detalhe
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "01", 2);           //Código de movimento remessa - nota 14 - pag 14

        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);           //Tipo de inscrição do Pagador - nota 29 - pag.17 - 1 = cpf
        //                    EntityBase.AppendPreparedField(ref doc, cob.ContratoTitularCPF.PadLeft(15, '0'), 15); //Número de inscrição do Pagador - pag. 4

        //                    EntityBase.AppendPreparedField(ref doc, cob.ContratoTitularNome, 40); //Nome Pagador

        //                    endereco = new Endereco(cob.ContratoEnderecoCobrancaID);
        //                    endereco.Carregar(pm);
        //                    if (endereco.CEP.IndexOf('-') > -1) { endereco.CEP = endereco.CEP.Replace("-", ""); }

        //                    if (endereco.Numero == null) endereco.Numero = "";
        //                    if (string.IsNullOrEmpty(endereco.Complemento))
        //                    {
        //                        int tamanhoDisponivel = 40 - (endereco.Numero.Length + 1);

        //                        if (endereco.Logradouro.Length > tamanhoDisponivel)
        //                        {
        //                            endereco.Logradouro = endereco.Logradouro.Substring(0, tamanhoDisponivel);
        //                        }

        //                        if (!string.IsNullOrEmpty(endereco.Numero))
        //                            endereco.Logradouro += string.Concat(",", endereco.Numero);
        //                    }
        //                    else
        //                    {
        //                        int tamanhoDisponivel = 40 - ((endereco.Numero.Length + 1) + (endereco.Complemento.Length + 1));

        //                        if (endereco.Logradouro.Length > tamanhoDisponivel)
        //                        {
        //                            endereco.Logradouro = endereco.Logradouro.Substring(0, tamanhoDisponivel);
        //                        }

        //                        if (!string.IsNullOrEmpty(endereco.Numero))
        //                            endereco.Logradouro += string.Concat(",", endereco.Numero, ",", endereco.Complemento);
        //                        else
        //                            endereco.Logradouro += string.Concat(",", endereco.Complemento);
        //                    }

        //                    if (string.IsNullOrEmpty(endereco.CEP)) { endereco.CEP = "00000000"; } else { endereco.CEP = endereco.CEP.Replace("-", ""); }
        //                    EntityBase.AppendPreparedField(ref doc, endereco.Logradouro, 40); // 
        //                    EntityBase.AppendPreparedField(ref doc, endereco.Bairro, 15);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.CEP, 8);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.Cidade, 15);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.UF, 2);

        //                    //if(string.IsNullOrEmpty(cob.ContratoTitularCPF) || cob.ContratoTitularCPF == "00000000000")
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1); //Tipo de inscrição Sacador/avalista - nota 29 - pag.17
        //                    //else
        //                    //    EntityBase.AppendPreparedField(ref doc, "1", 1); //Tipo de inscrição Sacador/avalista - nota 29 - pag.17

        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Nº de inscrição Sacador/avalista

        //                    EntityBase.AppendPreparedField(ref doc, " ".PadLeft(40, ' '), 40); //Nome do Sacador/Avalista

        //                    EntityBase.AppendPreparedField(ref doc, "000", 3); //Identificador de carne - nota 28 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "000", 3); //Sequencial da Parcela ou número inicial da parcela - nota 28 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "000", 3); //Quantidade total de parcelas - nota 28 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "000", 3); //Número do plano - nota 28 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, " ".PadRight(19, ' '), 19); //Brancos

        //                    #endregion

        //                    totalRegistrosDetalhe++;
        //                    valorTotal += cob.Valor;

        //                    cob.Carteira = 101;

        //                    pm.Save(cob);
        //                }
        //                catch (Exception ex)
        //                {
        //                    try
        //                    {
        //                        string path = System.Configuration.ConfigurationManager.AppSettings["financialFilePath"].Replace("/", @"\");
        //                        System.IO.File.WriteAllText(path + "err_" + DateTime.Now.ToString("ddMMyyyyHHmmssfff") + ".txt",
        //                            ex.Message +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + ex.StackTrace +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + Convert.ToString(cob.ID) +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + i.ToString(),
        //                            System.Text.Encoding.ASCII);
        //                    }
        //                    catch { }
        //                    continue;
        //                }
        //            }
        //            #endregion

        //            #region TRAILLER DE LOTE ---------------------------------

        //            doc.Append(Environment.NewLine);

        //            EntityBase.AppendPreparedField(ref doc, "033", 3);
        //            EntityBase.AppendPreparedField(ref doc, "0001", 4);
        //            EntityBase.AppendPreparedField(ref doc, "5", 1);
        //            EntityBase.AppendPreparedField(ref doc, " ", 9);
        //            EntityBase.AppendPreparedField(ref doc, (numSequencial + 2).ToString().PadLeft(6, '0'), 6);
        //            EntityBase.AppendPreparedField(ref doc, " ", 217);

        //            #endregion

        //            #region TRAILLER -----------------------------------------

        //            doc.Append(Environment.NewLine);

        //            EntityBase.AppendPreparedField(ref doc, "033", 3);
        //            EntityBase.AppendPreparedField(ref doc, "9999", 4); //9999 - Numero do lote remessa
        //            EntityBase.AppendPreparedField(ref doc, "9", 1);
        //            EntityBase.AppendPreparedField(ref doc, " ", 9); //branco
        //            EntityBase.AppendPreparedField(ref doc, "1".PadLeft(6, '0'), 6); //qtd de lotes - registros tipo 1
        //            EntityBase.AppendPreparedField(ref doc, (numSequencial + 4).ToString().PadLeft(6, '0'), 6);
        //            EntityBase.AppendPreparedField(ref doc, " ", 211); //

        //            #endregion


        //            if (_pm == null) { pm.Commit(); } //se não está partcipando de uma transacao externa, comita //pm.Rollback();
        //            string arquivoConteudo = doc.ToString();
        //            return arquivoConteudo;
        //        }
        //        catch
        //        {
        //            if (_pm == null) { pm.Rollback(); }
        //            throw;
        //        }
        //        finally
        //        {
        //            if (_pm == null) { pm = null; }
        //        }
        //    }


        //    /// <summary>
        //    /// Versão 2 - LEGADO
        //    /// </summary>
        //    public static IList<Cobranca> ProcessarCobrancasNormaisParaGerarRemessaLEGADO(ArquivoRemessaCriterio.eTipoTaxa tipoTaxa, DateTime venctoDe, DateTime venctoAte, DateTime vigenciaDe, DateTime vigenciaAte, ArquivoRemessaAgendamento ara)//IList<ArquivoRemessaAgendamento> aras)
        //    {
        //        List<Cobranca> retornar = new List<Cobranca>();

        //        #region query

        //        venctoAte = new DateTime(venctoAte.Year, venctoAte.Month, venctoAte.Day, 23, 59, 59, 997);

        //        String condicaoTaxa = "";
        //        //if (tipoTaxa == ArquivoRemessaCriterio.eTipoTaxa.SemTaxa)
        //        //    condicaoTaxa = " AND contrato_cobrarTaxaAssociativa=0 ";
        //        //else if (tipoTaxa == ArquivoRemessaCriterio.eTipoTaxa.ComTaxa)
        //        //    condicaoTaxa = " AND contrato_cobrarTaxaAssociativa=1 ";

        //        String condicaoVigencia = String.Concat(" AND contrato_vigencia BETWEEN '", vigenciaDe.ToString("yyyy-MM-dd"), "' AND '", vigenciaAte.ToString("yyyy-MM-dd 23:59:59.997") + "' ");

        //        String qry = String.Concat(
        //            "SELECT DISTINCT(contrato_id), contrato_operadoraid, contrato_contratoAdmId, filial_nome, estipulante_descricao, operadora_nome, contrato_numero, contrato_numeroId, contrato_vigencia, contrato_admissao, contrato_vencimento, contrato_enderecoCobrancaId, contrato_codcobranca ",
        //            "   FROM contrato ",
        //            "       LEFT JOIN usuario_filial a ON contrato_donoId = a.usuariofilial_usuarioId and a.usuariofilial_data = (select max(b.usuariofilial_data) from usuario_filial b where b.usuariofilial_usuarioId = a.usuariofilial_usuarioId) ",
        //            "       LEFT JOIN filial           ON filial_id = a.usuariofilial_filialId ",
        //            "       INNER JOIN operadora       ON operadora_id=contrato_operadoraId ",
        //            "       INNER JOIN estipulante     ON estipulante_id=contrato_estipulanteId ",

        //            "   WHERE ", Contrato.CondicaoBasicaQuery,
        //            condicaoTaxa, condicaoVigencia, //"       AND contrato_contratoAdmId IN (", formattedContratoAdmIds, ") ", 
        //            "   ORDER BY filial_nome, estipulante_descricao, operadora_nome, contrato_vencimento");

        //        #endregion

        //        PersistenceManager pm = null;
        //        Contrato _contrato = null;
        //        IList<Cobranca> _cobrancas = null;

        //        int kk = 0;
        //        try
        //        {
        //            if (ara.SomenteNaoRecorrentes)
        //            {
        //                _cobrancas = Cobranca.CarregarTodas_Optimized_DIF_UBRASP(pm);

        //                if (_cobrancas != null) retornar.AddRange(_cobrancas);

        //                return retornar;
        //            }
        //            else if (ara.SomenteBoletosUBRASP)
        //            {
        //                _cobrancas = Cobranca.CarregarTodas_Optimized_BOLETO_UBRASP(pm);

        //                if (_cobrancas != null) retornar.AddRange(_cobrancas);

        //                return retornar;
        //            }
        //            else
        //            {
        //                DataTable dt = LocatorHelper.Instance.ExecuteQuery(qry, "result").Tables[0];
        //                if (dt.Rows.Count == 0) { return null; }
        //                List<Contrato> contratos = new List<Contrato>();

        //                Contrato __contrato = null;
        //                foreach (DataRow row in dt.Rows)
        //                {
        //                    __contrato = new Contrato(row["contrato_id"]);
        //                    __contrato.OperadoraID = row["contrato_operadoraid"];
        //                    __contrato.ContratoADMID = row["contrato_contratoAdmId"];
        //                    __contrato.OperadoraDescricao = toString(row["operadora_nome"]);
        //                    __contrato.Numero = toString(row["contrato_numero"]);
        //                    __contrato.NumeroID = toObject(row["contrato_numeroId"]);
        //                    __contrato.Vigencia = toDateTime(row["contrato_vigencia"]);
        //                    __contrato.Admissao = toDateTime(row["contrato_admissao"]);
        //                    __contrato.Vencimento = toDateTime(row["contrato_vencimento"]);
        //                    __contrato.EnderecoCobrancaID = row["contrato_enderecoCobrancaId"];
        //                    __contrato.CodCobranca = toInt(row["contrato_codcobranca"]);

        //                    contratos.Add(__contrato);
        //                }

        //                dt.Dispose();

        //                //List<Cobranca> _cobrancasTemp = null;
        //                //IList<TabelaValor> tabelaValor = null;
        //                int parcela = 1;
        //                //int i = 0;
        //                int cobrancasAdicionadas = 0;
        //                //int indiceUltimaCobranca = 0;
        //                //int dif = 0; //diferenca entre cobrancas geradas e cobrancas a serem geradas
        //                DateTime dataLimiteContratoAdm = DateTime.MinValue;

        //                int j = 0; List<CobrancaComposite> composite = null;

        //                pm = new PersistenceManager();
        //                pm.UseSingleCommandInstance();

        //                foreach (Contrato contrato in contratos)
        //                {
        //                    kk++;

        //                    System.Windows.Forms.Application.DoEvents();
        //                    //cobrancasAdicionadas = 0;
        //                    _contrato = contrato;

        //                    #region for qtd cobrancas

        //                    //Para cada contrato gerar a cobrança.
        //                    //  checar se há uma cobrança ativa com as mesmas características. se existir, não gerar.
        //                    _cobrancas = Cobranca.CarregarTodas_Optimized(contrato.ID, true, eTipo.Normal, pm);

        //                    if ((_cobrancas == null || _cobrancas.Count == 0))
        //                    {
        //                        parcela = 1;

        //                        #region gera cobranca

        //                        Cobranca cobranca = new Cobranca();
        //                        cobranca.BeneficiarioEmail = "";
        //                        cobranca.BeneficiarioId = null;
        //                        cobranca.ContratoEnderecoCobrancaID = contrato.EnderecoCobrancaID;
        //                        cobranca.ContratoNumero = contrato.Numero;
        //                        cobranca.ContratoTitularNome = "";
        //                        cobranca.DataCriacao = DateTime.Now;
        //                        cobranca.DataVencimento = new DateTime(ara.VencimentoDe.Year, ara.VencimentoDe.Month, ara.VencimentoDe.Day, 23, 59, 59, 0); //new DateTime(contrato.Admissao.Year, contrato.Admissao.Month, contrato.Admissao.Day, 23, 59, 59, 0);
        //                        cobranca.EstipulanteNome = "";
        //                        cobranca.FilialNome = "";
        //                        cobranca.OperadoraID = contrato.OperadoraID;
        //                        cobranca.OperadoraNome = "";
        //                        cobranca.Pago = false;
        //                        cobranca.Parcela = parcela;
        //                        cobranca.PropostaID = contrato.ID;
        //                        cobranca.Tipo = (Int32)Cobranca.eTipo.Normal;
        //                        cobranca.Valor = Contrato.CalculaValorDaProposta2(contrato.ID, cobranca.DataVencimento, pm, false, true, ref composite, false);
        //                        cobranca.Carteira = 2; // aras[0].Carteira;

        //                        if (cobranca.Valor > 0)
        //                        {
        //                            //if (contrato.Vencimento >= venctoDe && contrato.Vencimento <= venctoAte)
        //                            //{
        //                            pm.Save(cobranca);
        //                            retornar.Add(cobranca);
        //                            CobrancaComposite.Salvar(cobranca.ID, composite, pm);
        //                            cobrancasAdicionadas++;
        //                            //}
        //                        }

        //                        #endregion

        //                        for (int qtdCobrancas = 2; qtdCobrancas <= ara.QtdBoletos; qtdCobrancas++)
        //                        {
        //                            parcela = qtdCobrancas;

        //                            #region gera cobranca

        //                            cobranca = new Cobranca();
        //                            cobranca.BeneficiarioEmail = "";
        //                            cobranca.BeneficiarioId = null;
        //                            cobranca.ContratoEnderecoCobrancaID = contrato.EnderecoCobrancaID;
        //                            cobranca.ContratoNumero = contrato.Numero;
        //                            cobranca.ContratoTitularNome = "";
        //                            cobranca.DataCriacao = DateTime.Now;
        //                            cobranca.DataVencimento = new DateTime(ara.VencimentoDe.AddMonths(qtdCobrancas - 1).Year, ara.VencimentoDe.AddMonths(qtdCobrancas - 1).Month, ara.VencimentoDe.AddMonths(qtdCobrancas - 1).Day, 23, 59, 59, 0); //new DateTime(contrato.Admissao.Year, contrato.Admissao.Month, contrato.Admissao.Day, 23, 59, 59, 0);
        //                            cobranca.EstipulanteNome = "";
        //                            cobranca.FilialNome = "";
        //                            cobranca.OperadoraID = contrato.OperadoraID;
        //                            cobranca.OperadoraNome = "";
        //                            cobranca.Pago = false;
        //                            cobranca.Parcela = parcela;
        //                            cobranca.PropostaID = contrato.ID;
        //                            cobranca.Tipo = (Int32)Cobranca.eTipo.Normal;
        //                            cobranca.Valor = Contrato.CalculaValorDaProposta2(contrato.ID, cobranca.DataVencimento, pm, false, true, ref composite, true);
        //                            cobranca.Carteira = 2; // aras[0].Carteira;

        //                            if (cobranca.Valor > 0)
        //                            {
        //                                //if (contrato.Vencimento >= venctoDe && contrato.Vencimento <= venctoAte)
        //                                //{
        //                                pm.Save(cobranca);
        //                                retornar.Add(cobranca);
        //                                CobrancaComposite.Salvar(cobranca.ID, composite, pm);
        //                                cobrancasAdicionadas++;
        //                                //}
        //                            }

        //                            #endregion
        //                        }
        //                    }
        //                    else
        //                    {
        //                        parcela = _cobrancas[_cobrancas.Count - 1].Parcela + 1;
        //                        bool _break = false;

        //                        for (int qtdCobrancas = 1; qtdCobrancas <= ara.QtdBoletos; qtdCobrancas++)
        //                        {
        //                            #region gera cobranca

        //                            _break = false;

        //                            Cobranca cobranca = new Cobranca();
        //                            cobranca.BeneficiarioEmail = "";
        //                            cobranca.BeneficiarioId = null;
        //                            cobranca.ContratoEnderecoCobrancaID = contrato.EnderecoCobrancaID;
        //                            cobranca.ContratoNumero = contrato.Numero;
        //                            cobranca.ContratoTitularNome = "";
        //                            cobranca.DataCriacao = DateTime.Now;
        //                            cobranca.DataVencimento = new DateTime(ara.VencimentoDe.AddMonths(qtdCobrancas - 1).Year, ara.VencimentoDe.AddMonths(qtdCobrancas - 1).Month, ara.VencimentoDe.AddMonths(qtdCobrancas - 1).Day, 23, 59, 59, 0); //new DateTime(contrato.Admissao.Year, contrato.Admissao.Month, contrato.Admissao.Day, 23, 59, 59, 0);
        //                            cobranca.EstipulanteNome = "";
        //                            cobranca.FilialNome = "";
        //                            cobranca.OperadoraID = contrato.OperadoraID;
        //                            cobranca.OperadoraNome = "";
        //                            cobranca.Pago = false;
        //                            cobranca.Parcela = parcela;
        //                            cobranca.PropostaID = contrato.ID;
        //                            cobranca.Tipo = (Int32)Cobranca.eTipo.Normal;
        //                            cobranca.Valor = Contrato.CalculaValorDaProposta2(contrato.ID, cobranca.DataVencimento, pm, false, true, ref composite, true);
        //                            cobranca.Carteira = 2; // aras[0].Carteira;

        //                            foreach (var aux in _cobrancas)
        //                            {
        //                                if (aux.DataVencimento.Day == cobranca.DataVencimento.Day &&
        //                                    aux.DataVencimento.Year == cobranca.DataVencimento.Year &&
        //                                    aux.DataVencimento.Month == cobranca.DataVencimento.Month)
        //                                {
        //                                    //JA TEM UMA COBRANCA COM ESSA DATA DE VENCIMENTO
        //                                    _break = true;
        //                                    break;
        //                                }
        //                            }

        //                            if (_break) continue;

        //                            if (cobranca.Valor > 0)
        //                            {
        //                                //if (contrato.Vencimento >= venctoDe && contrato.Vencimento <= venctoAte)
        //                                //{
        //                                pm.Save(cobranca);
        //                                retornar.Add(cobranca);
        //                                CobrancaComposite.Salvar(cobranca.ID, composite, pm);
        //                                cobrancasAdicionadas++;
        //                                //}
        //                            }

        //                            #endregion

        //                            parcela++;
        //                        }
        //                    }


        //                    #endregion

        //                } //foreach (Contrato contrato in contratos)

        //                pm.CloseSingleCommandInstance();

        //            }

        //            return retornar;
        //        }
        //        catch
        //        {
        //            throw;
        //        }
        //        finally
        //        {
        //            if (pm != null)
        //            {
        //                pm.CloseSingleCommandInstance();
        //                pm.Dispose();
        //                pm = null;
        //            }
        //        }
        //    }

        //    [Obsolete("Usar a outra sobrecarga disponível.", true)]
        //    static IList<Cobranca> __ProcessarCobrancasNormaisParaGerarRemessa(String[] estipulanteIDs, String[] operadoraIDs, String[] filialIDs, Int32 mes, Int32 ano)
        //    {
        //        #region query

        //        String filIN = String.Join(",", filialIDs);
        //        String opeIN = String.Join(",", operadoraIDs);
        //        String estIN = String.Join(",", estipulanteIDs);

        //        String qry = String.Concat(
        //            "SELECT DISTINCT(contrato_id), contrato_operadoraid, filial_nome, estipulante_descricao, operadora_nome, contrato_numero, contrato_numeroId, contrato_vigencia, contrato_admissao, contrato_vencimento, contrato_enderecoCobrancaId, contrato_codcobranca ",
        //            "   FROM contrato ",
        //            "       INNER JOIN usuario_filial   ON contrato_donoId=usuariofilial_usuarioId ",
        //            "       INNER JOIN filial           ON filial_id=usuariofilial_filialId ",
        //            "       INNER JOIN operadora        ON operadora_id=contrato_operadoraId ",
        //            "       INNER JOIN estipulante      ON estipulante_id=contrato_estipulanteId ",
        //            "       INNER JOIN contrato_beneficiario ON contratobeneficiario_status NOT IN (0,1,10,15,17,21) AND contratobeneficiario_contratoId=contrato_id ",
        //            "   WHERE ", Contrato.CondicaoBasicaQuery, " AND ",
        //            "       usuariofilial_filialId IN (", filIN, ") AND ",
        //            "       contrato_estipulanteId IN (", estIN, ") AND ",
        //            "       contrato_operadoraId IN (", opeIN, ") ",
        //            "   ORDER BY filial_nome, estipulante_descricao, operadora_nome, contrato_vencimento");

        //        #endregion

        //        PersistenceManager pm = new PersistenceManager();
        //        pm.UseSingleCommandInstance();
        //        List<CobrancaComposite> composite = null;

        //        try
        //        {
        //            IList<Contrato> contratos = LocatorHelper.Instance.ExecuteQuery<Contrato>(qry, typeof(Contrato), pm);

        //            if (contratos == null) { return null; }

        //            IList<Cobranca> _cobrancas = null;
        //            List<Cobranca> retornar = new List<Cobranca>();
        //            int parcela = 1; Boolean existente = false;
        //            int i = 0;
        //            foreach (Contrato contrato in contratos)
        //            {
        //                //Para cada contrato gerar a cobrança.
        //                //  checar se há uma cobrança ativa com as mesmas características. se existir, não gerar.
        //                _cobrancas = Cobranca.CarregarTodas(contrato.ID, true, eTipo.Normal, pm);

        //                if (_cobrancas == null || _cobrancas.Count == 0)
        //                {
        //                    parcela = 1;

        //                    #region gera cobranca

        //                    Cobranca cobranca = new Cobranca();
        //                    cobranca.BeneficiarioEmail = "";
        //                    cobranca.BeneficiarioId = null;
        //                    cobranca.ContratoEnderecoCobrancaID = contrato.EnderecoCobrancaID;
        //                    cobranca.ContratoNumero = contrato.Numero;
        //                    cobranca.ContratoTitularNome = "";
        //                    cobranca.DataCriacao = DateTime.Now;
        //                    cobranca.DataVencimento = new DateTime(ano, mes, contrato.Vencimento.Day, 23, 59, 59, 0);
        //                    cobranca.EstipulanteNome = "";
        //                    cobranca.FilialNome = "";
        //                    cobranca.OperadoraID = contrato.OperadoraID;
        //                    cobranca.OperadoraNome = "";
        //                    cobranca.Pago = false;
        //                    cobranca.Parcela = parcela;
        //                    cobranca.PropostaID = contrato.ID;
        //                    cobranca.Tipo = (Int32)Cobranca.eTipo.Normal;
        //                    cobranca.Valor = Contrato.CalculaValorDaProposta2(contrato.ID, cobranca.DataVencimento, pm, false, true, ref composite, false);
        //                    if (cobranca.Valor > 0)
        //                    {
        //                        pm.Save(cobranca);
        //                        retornar.Add(cobranca);
        //                        CobrancaComposite.Salvar(cobranca.ID, composite, pm);
        //                    }

        //                    #endregion
        //                }
        //                else
        //                {
        //                    existente = false;
        //                    i = 0;

        //                    foreach (Cobranca _existente in _cobrancas)
        //                    {
        //                        if (_existente.DataVencimento.Month == mes &&
        //                            _existente.DataVencimento.Year == ano &&
        //                            _existente.Tipo == (Int32)Cobranca.eTipo.Normal)
        //                        {
        //                            if (_existente.ArquivoIDUltimoEnvio == null && // nao enviado
        //                                _existente.Pago == false &&                // nao pago
        //                                _existente.Cancelada == false)             // ativa
        //                            {
        //                                if (i > 0)
        //                                {
        //                                    if (_cobrancas[i - 1].Pago) //checa se cobrança anterior está paga
        //                                    {
        //                                        retornar.Add(_existente);
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    retornar.Add(_existente);
        //                                }
        //                            }

        //                            existente = true;
        //                            break;
        //                        }

        //                        i++;
        //                    }

        //                    if (!existente) //cria uma nova cobranca
        //                    {
        //                        if (_cobrancas.Count == 0 ||
        //                            _cobrancas[_cobrancas.Count - 1].Pago) //checa se cobrança anterior está paga
        //                        {
        //                            parcela = _cobrancas.Count + 1;

        //                            #region gera cobranca

        //                            Cobranca cobranca = new Cobranca();
        //                            cobranca.BeneficiarioEmail = "";
        //                            cobranca.BeneficiarioId = null;
        //                            cobranca.ContratoEnderecoCobrancaID = contrato.EnderecoCobrancaID;
        //                            cobranca.ContratoNumero = contrato.Numero;
        //                            cobranca.ContratoTitularNome = "";
        //                            cobranca.DataCriacao = DateTime.Now;
        //                            cobranca.DataVencimento = new DateTime(ano, mes, contrato.Vencimento.Day, 23, 59, 59);
        //                            cobranca.EstipulanteNome = "";
        //                            cobranca.FilialNome = "";
        //                            cobranca.OperadoraID = contrato.OperadoraID;
        //                            cobranca.OperadoraNome = "";
        //                            cobranca.Pago = false;
        //                            cobranca.Parcela = parcela;
        //                            cobranca.PropostaID = contrato.ID;
        //                            cobranca.Tipo = (Int32)Cobranca.eTipo.Normal;
        //                            cobranca.Valor = Contrato.CalculaValorDaProposta2(contrato.ID, cobranca.DataVencimento, pm, false, true, ref composite, false);

        //                            if (cobranca.Valor > 0)
        //                            {
        //                                pm.Save(cobranca);
        //                                retornar.Add(cobranca);
        //                                CobrancaComposite.Salvar(cobranca.ID, composite, pm);
        //                            }
        //                            #endregion
        //                        }
        //                    }
        //                }
        //            }

        //            return retornar;
        //        }
        //        catch (Exception ex)
        //        {
        //            throw ex;
        //        }
        //        finally
        //        {
        //            pm.CloseSingleCommandInstance();
        //            pm.Dispose();
        //            pm = null;
        //        }
        //    }

        //    static int MonthDifference(DateTime lValue, DateTime rValue)
        //    {
        //        return Math.Abs((lValue.Month - rValue.Month) + 12 * (lValue.Year - rValue.Year));
        //    }

        //    public static IList<Cobranca> ArrumaFurosNaCadeia(ref String err)
        //    {
        //        PersistenceManager pm = new PersistenceManager();
        //        pm.UseSingleCommandInstance();

        //        String qry = String.Concat(
        //            "select contrato_id,contrato_vencimento from contrato ",
        //            "   where ",
        //            //"       contrato_id > 202402 and ", // contrato_id <> 177176 and
        //            "       (contrato_inativo is null or contrato_inativo=0) and ",
        //            "       (contrato_cancelado is null or contrato_cancelado=0) and year(contrato_data) >= 2012 order by contrato_id ");

        //        List<Contrato> contratos = new List<Contrato>();
        //        System.Globalization.CultureInfo cinfo = new System.Globalization.CultureInfo("pt-Br");
        //        DataTable dt = LocatorHelper.Instance.ExecuteQuery(qry, "result").Tables[0];
        //        foreach (DataRow row in dt.Rows)
        //        {
        //            Contrato contrato = new Contrato(row[0]);
        //            contrato.Vencimento = Convert.ToDateTime(row[1], cinfo);
        //            contratos.Add(contrato);
        //        }

        //        //IList<Contrato> contratos = LocatorHelper.Instance.ExecuteQuery<Contrato>(qry, typeof(Contrato), pm);

        //        if (contratos == null) { pm.Dispose(); return null; }

        //        //int min = 1, max = 0, curr = 0;

        //        //Object ret = null;
        //        Cobranca cobranca = null;
        //        IList<Cobranca> cobrancas = new List<Cobranca>();
        //        DateTime vencimento, proxVencimento;
        //        List<CobrancaComposite> composite = null;
        //        int diff = 0, index = 0;

        //        qry = "select max(cobranca_parcela) from cobranca where cobranca_propostaId=";
        //        qry = "select cobranca_id,cobranca_datavencimento,cobranca_parcela from cobranca where cobranca_tipo=0 and cobranca_propostaId=";

        //        foreach (Contrato contrato in contratos)
        //        {
        //            vencimento = DateTime.MinValue;
        //            proxVencimento = DateTime.MinValue;

        //            index++;

        //            cobrancas = LocatorHelper.Instance.ExecuteQuery<Cobranca>(String.Concat(qry, contrato.ID, " order by cobranca_dataVencimento"), typeof(Cobranca), pm);

        //            if (cobrancas == null) { continue; }

        //            foreach (Cobranca _cobranca in cobrancas)
        //            {
        //                //a primeira parcela sempre existe, pois é criada com o cadastro do contrato
        //                if (_cobranca.Parcela == 1) { continue; }

        //                if (_cobranca.Parcela == 2)
        //                {
        //                    proxVencimento = _cobranca.DataVencimento.AddMonths(1);
        //                    continue;
        //                }

        //                //reseta as datas para comparação
        //                proxVencimento = new DateTime(proxVencimento.Year, proxVencimento.Month, proxVencimento.Day, 0, 0, 0, 0);
        //                _cobranca.DataVencimento = new DateTime(_cobranca.DataVencimento.Year,
        //                    _cobranca.DataVencimento.Month, _cobranca.DataVencimento.Day, 0, 0, 0, 0);

        //                if (_cobranca.DataVencimento > proxVencimento &&
        //                    _cobranca.DataVencimento.Month != proxVencimento.Month)
        //                {
        //                    //TEM FURO NA CADEIA, arrumar
        //                    //tira a diferenca para saber qtas cobrancas devem ser geradas
        //                    diff = MonthDifference(proxVencimento, _cobranca.DataVencimento);
        //                    vencimento = proxVencimento;

        //                    if (diff < 1) { break; }

        //                    if (diff > 1) { int j = 0; }

        //                    for (int i = 1; i <= diff; i++)
        //                    {
        //                        cobranca = new Cobranca();
        //                        cobranca.BeneficiarioEmail = "";
        //                        cobranca.BeneficiarioId = null;
        //                        cobranca.ContratoEnderecoCobrancaID = contrato.EnderecoCobrancaID;
        //                        cobranca.ContratoNumero = contrato.Numero;
        //                        cobranca.ContratoTitularNome = "";
        //                        cobranca.DataCriacao = DateTime.Now;

        //                        cobranca.EstipulanteNome = "";
        //                        cobranca.FilialNome = "";
        //                        cobranca.OperadoraID = contrato.OperadoraID;
        //                        cobranca.OperadoraNome = "";
        //                        cobranca.Pago = false;
        //                        cobranca.Parcela = 0;
        //                        cobranca.PropostaID = contrato.ID;
        //                        cobranca.Tipo = (Int32)Cobranca.eTipo.Normal;

        //                        ////calcula a data de vencimento
        //                        //if (index == 2)
        //                        //{
        //                        //    //se é a segunda parcela, usa o vencto. cadastrado na proposta
        //                        //    cobranca.DataVencimento = new DateTime(contrato.Vencimento.Year,
        //                        //        contrato.Vencimento.Month, contrato.Vencimento.Day, 23, 59, 59, 500);
        //                        //}
        //                        //else
        //                        //{
        //                        //atribui o vencimento
        //                        cobranca.DataVencimento = new DateTime(proxVencimento.Year,
        //                            proxVencimento.Month, proxVencimento.Day, 23, 59, 59, 500);
        //                        //}

        //                        cobranca.Valor = Contrato.CalculaValorDaProposta2(contrato.ID, cobranca.DataVencimento, pm, false, true, ref composite, true); //força vigencia

        //                        if (cobranca.Valor == 0) { err += Convert.ToString(contrato.ID) + ","; break; } //throw new ApplicationException("Erro valorando cobrança"); }

        //                        pm.Save(cobranca);////////////////////////////////////

        //                        //incrementa o vencimento
        //                        if (i == diff)
        //                            proxVencimento = _cobranca.DataVencimento.AddMonths(1);// proxVencimento.AddMonths(1);
        //                        else
        //                            proxVencimento = proxVencimento.AddMonths(1);

        //                        //index++;
        //                    }
        //                }
        //                else
        //                {
        //                    proxVencimento = _cobranca.DataVencimento.AddMonths(1);
        //                    if (proxVencimento.Day != contrato.Vencimento.Day)
        //                    {
        //                        proxVencimento = new DateTime(proxVencimento.Year,
        //                                proxVencimento.Month, contrato.Vencimento.Day, 23, 59, 59, 500);
        //                    }
        //                }
        //            }
        //        }


        //        pm.CloseSingleCommandInstance();
        //        pm.Dispose();

        //        return null;
        //    }

        //    //As cobrancas nao sao mais geradas em lote
        //    //public static void Gerar(Object propostaId, DateTime vencimento, Int32 qtd, PersistenceManager pm)
        //    //{
        //    //    DateTime _vencto = new DateTime(vencimento.Year, vencimento.Month, vencimento.Day, 23, 59, 59);
        //    //    List<Cobranca> cobrancas = new List<Cobranca>();
        //    //    Boolean firstInteraction = true;

        //    //    Int32 parcela = 0;
        //    //    IList<Cobranca> cobrancasExistentes = Cobranca.CarregarTodas(propostaId, pm);
        //    //    if (cobrancasExistentes != null && cobrancasExistentes.Count > 0)
        //    //    {
        //    //        parcela = cobrancasExistentes[cobrancasExistentes.Count - 1].Parcela + 1;
        //    //        cobrancasExistentes = null;
        //    //    }

        //    //    for (Int32 i = 1; i <= qtd; i++)
        //    //    {
        //    //        Cobranca cobranca = new Cobranca();
        //    //        cobranca.PropostaID = propostaId;

        //    //        if (firstInteraction)
        //    //        {
        //    //            cobranca.DataVencimento = _vencto;
        //    //            firstInteraction = false;
        //    //        }
        //    //        else
        //    //            cobranca.DataVencimento = _vencto.AddMonths(i - 1);

        //    //        cobranca.Valor = Contrato.CalculaValorDaProposta(propostaId, cobranca.DataVencimento, pm);// valorPlano + valorAdicionais + valorEstipulante;

        //    //        if (parcela == 0)
        //    //            cobranca.Parcela = i;
        //    //        else
        //    //        {
        //    //            cobranca.Parcela = parcela;
        //    //            parcela++;
        //    //        }

        //    //        cobrancas.Add(cobranca);
        //    //    }

        //    //    if (pm != null)
        //    //        Gerar(cobrancas, pm);
        //    //    else
        //    //    {
        //    //        PersistenceManager _pm = new PersistenceManager();
        //    //        _pm.BeginTransactionContext();
        //    //        try
        //    //        {
        //    //            Gerar(cobrancas, _pm);
        //    //            _pm.Commit();
        //    //        }
        //    //        catch (Exception ex)
        //    //        {
        //    //            _pm.Rollback();
        //    //            throw ex;
        //    //        }
        //    //    }
        //    //}
        //    //static void Gerar(List<Cobranca> cobrancas, PersistenceManager pm)
        //    //{
        //    //    foreach (Cobranca cobranca in cobrancas)
        //    //    {
        //    //        pm.Save(cobranca);
        //    //    }
        //    //}

        //    public static IList<Cobranca> CarregarBoletos(Object operadoraId, String numeroContrato)
        //    {
        //        String qry = String.Concat("SELECT cobranca_id, cobranca_valor, cobranca_dataVencimento, beneficiario_nome, beneficiario_id, beneficiario_email ",
        //            "   FROM contrato ",
        //            "       INNER JOIN endereco ON contrato_enderecoCobrancaId = endereco_id ",
        //            "       INNER JOIN cobranca ON cobranca_propostaId = contrato_id ",
        //            "       INNER JOIN contrato_beneficiario ON contratobeneficiario_contratoId = contrato_id ",
        //            "       INNER JOIN beneficiario ON contratobeneficiario_beneficiarioId = beneficiario_id ",
        //            "   WHERE ",
        //            "       contrato_numero = @NumeroContrato AND ",
        //            "       contrato_operadoraId = ", operadoraId, " AND ",
        //            "       contratobeneficiario_tipo = 0 AND ",
        //            "       cobranca_pago = 0 ",
        //            "   ORDER BY ",
        //            "       cobranca_dataVencimento ASC");

        //        String[] pName = new String[] { "@NumeroContrato" };
        //        String[] pValue = new String[] { numeroContrato };

        //        return LocatorHelper.Instance.ExecuteParametrizedQuery<Cobranca>(qry, pName, pValue, typeof(Cobranca));
        //    }

        //    /// <summary>
        //    /// Loga a alteração da data de vencimento de uma cobrana, para emissão sem juro e multa.
        //    /// </summary>
        //    public static void LogaNovaDataDeVencimentoParaEmissao(Object cobrancaId, DateTime venctoOriginal, DateTime venctoNovo, Object usuarioId, PersistenceManager pm)
        //    {
        //        try
        //        {
        //            CobrancaVencimentoLog log = new CobrancaVencimentoLog();
        //            log.CobrancaID = cobrancaId;
        //            log.Data = DateTime.Now;
        //            log.UsuarioID = usuarioId;
        //            log.VenctoNovo = venctoNovo;
        //            log.VenctoOriginal = venctoOriginal;

        //            if (pm != null)
        //                pm.Save(log);
        //            else
        //            {
        //                PersistenceManager _pm = new PersistenceManager(log);
        //                _pm.Save();
        //                _pm.Dispose();
        //            }
        //        }
        //        catch { }
        //    }

        //    //public static void LogaCobrancaEnviada(Object boletoId
        //}

        //[Serializable]
        //[DBTable("arquivoCobrancaUnibanco")]
        //public class ArquivoCobrancaUnibanco : EntityBase, IPersisteableEntity
        //{
        //    #region fields

        //    Object _id;
        //    Object _operadoraId;
        //    Object _agendamentoId;
        //    String _nome;
        //    Int32 _versao;
        //    DateTime _dataCriacao;
        //    Int32 _mesReferencia;
        //    Int32 _anoReferencia;
        //    Int32 _qtdCobrancas;

        //    Int32 _qtdCobrancasEnviadas;
        //    String _operadoraNome;

        //    String _arquivoNome;
        //    String _descricaoCriterio;

        //    #endregion

        //    #region properties

        //    [DBFieldInfo("arquivocobranca_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("arquivocobranca_operadoraId", FieldType.Single)]
        //    public Object OperadoraID
        //    {
        //        get { return _operadoraId; }
        //        set { _operadoraId = value; }
        //    }

        //    [DBFieldInfo("arquivocobranca_agendamentoId", FieldType.Single)]
        //    public Object AgendamentoID
        //    {
        //        get { return _agendamentoId; }
        //        set { _agendamentoId = value; }
        //    }

        //    [DBFieldInfo("arquivocobranca_nome", FieldType.Single)]
        //    public String Nome
        //    {
        //        get { return _nome; }
        //        set { _nome = value; }
        //    }

        //    [DBFieldInfo("arquivocobranca_versao", FieldType.Single)]
        //    public Int32 Versao //1 até 99
        //    {
        //        get { return _versao; }
        //        set { _versao = value; }
        //    }

        //    [DBFieldInfo("arquivocobranca_data", FieldType.Single)]
        //    public DateTime DataCriacao
        //    {
        //        get { return _dataCriacao; }
        //        set { _dataCriacao = value; }
        //    }

        //    [DBFieldInfo("arquivocobranca_mesReferencia", FieldType.Single)]
        //    public Int32 MesReferencia
        //    {
        //        get { return _mesReferencia; }
        //        set { _mesReferencia = value; }
        //    }

        //    [DBFieldInfo("arquivocobranca_anoReferencia", FieldType.Single)]
        //    public Int32 AnoReferencia
        //    {
        //        get { return _anoReferencia; }
        //        set { _anoReferencia = value; }
        //    }

        //    /// <summary>
        //    /// Número detectado de cobranças que deveriam estar no arquivo.
        //    /// </summary>
        //    [DBFieldInfo("arquivocobranca_qtdCobrancas", FieldType.Single)]
        //    public Int32 QtdCobrancas
        //    {
        //        get { return _qtdCobrancas; }
        //        set { _qtdCobrancas = value; }
        //    }

        //    /// <summary>
        //    /// Número atual de cobranças no arquivo. Este número pode flutuar.
        //    /// </summary>
        //    [Joinned("cobrancas_qtd")]
        //    public Int32 QtdCobrancasEnviadas
        //    {
        //        get { return _qtdCobrancasEnviadas; }
        //        set { _qtdCobrancasEnviadas = value; }
        //    }

        //    [Joinned("operadora_nome")]
        //    public String OperadoraNome
        //    {
        //        get { return _operadoraNome; }
        //        set { _operadoraNome = value; }
        //    }

        //    [Joinned("arcrit_arquivoNome")]
        //    public String ArquivoNome
        //    {
        //        get { return _arquivoNome; }
        //        set { _arquivoNome = value; }
        //    }

        //    [Joinned("arcrit_descricao")]
        //    public String DescricaoCriterio
        //    {
        //        get { return _descricaoCriterio; }
        //        set { _descricaoCriterio = value; }
        //    }

        //    #endregion

        //    public ArquivoCobrancaUnibanco() { _qtdCobrancas = -1; }

        //    #region EntityBase methods

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public void SalvaItens(IList<Object> itemIDs)
        //    {
        //        ArquivoCobrancaUnibanco.SalvaItens(this._id, itemIDs, null);
        //    }
        //    public void SalvaItens(IList<Object> itemIDs, PersistenceManager pm)
        //    {
        //        ArquivoCobrancaUnibanco.SalvaItens(this._id, itemIDs, pm);
        //    }

        //    public static IList<ArquivoCobrancaUnibanco> Carregar(DateTime venctoDe, DateTime venctoAte)
        //    {
        //        String qry = String.Concat("arquivoCobrancaUnibanco.*, arquivocobranca_operadoraId,arquivocobranca_agendamentoId,arcrit_arquivoNome, arcrit_descricao, COUNT(arqitem_arquivoId) AS cobrancas_qtd ",
        //            "   FROM arquivoCobrancaUnibanco ",
        //            "       INNER JOIN arquivoRemessaAgendamento ON arcage_id=arquivocobranca_agendamentoId ",
        //            "       INNER JOIN arquivoRemessaCriterio ON arcage_criterioId=arcrit_id ",
        //            "       LEFT JOIN arquivoCobrancaUnibanco_cobanca ON arquivocobranca_id=arqitem_arquivoId ",
        //            "   WHERE ",
        //            "       arcage_vencimentoDe >=  '", venctoDe.ToString("yyyy-MM-dd 00:00:00"), "' AND ",
        //            "       arcage_vencimentoAte <= '", venctoAte.ToString("yyyy-MM-dd 23:59:59"), "'",
        //            "   GROUP BY arcage_vencimentoDe,arquivocobranca_id,arquivocobranca_operadoraId,arquivocobranca_agendamentoId,arquivocobranca_nome,arquivocobranca_versao,arquivocobranca_data,arquivocobranca_mesReferencia,arquivocobranca_anoReferencia, arquivocobranca_qtdCobrancas, arcrit_arquivoNome, arcrit_descricao ",
        //            "   ORDER BY arcage_vencimentoDe DESC, arcrit_arquivoNome, arquivocobranca_versao");

        //        return LocatorHelper.Instance.ExecuteQuery<ArquivoCobrancaUnibanco>(qry, typeof(ArquivoCobrancaUnibanco));
        //    }

        //    public static IList<ArquivoCobrancaUnibanco> Carregar(Object operadoraId, Int32 mesRef, Int32 anoRef)
        //    {
        //        String operadoraCond = "";
        //        if (operadoraId != null)
        //        {
        //            operadoraCond = " AND arquivocobranca_operadoraId=" + operadoraId.ToString();
        //        }

        //        String qry = String.Concat("arquivoCobrancaUnibanco.*, operadora_nome, COUNT(arqitem_arquivoId) AS cobrancas_qtd ",
        //            "   FROM arquivoCobrancaUnibanco ",
        //            "       INNER JOIN operadora ON operadora_id=arquivocobranca_operadoraId",
        //            "       LEFT JOIN arquivoCobrancaUnibanco_cobanca ON arquivocobranca_id=arqitem_arquivoId ",
        //            "   WHERE ",
        //            "       arquivocobranca_mesReferencia=", mesRef,
        //            "       AND arquivocobranca_anoReferencia=", anoRef, operadoraCond,
        //            "   GROUP BY arquivocobranca_id,arquivocobranca_operadoraId,arquivocobranca_nome,arquivocobranca_versao,arquivocobranca_data,arquivocobranca_mesReferencia,arquivocobranca_anoReferencia, arquivocobranca_qtdCobrancas, operadora_nome",
        //            "   ORDER BY operadora_nome, arquivocobranca_versao");

        //        return LocatorHelper.Instance.ExecuteQuery<ArquivoCobrancaUnibanco>(qry, typeof(ArquivoCobrancaUnibanco));
        //    }

        //    public static void SalvaItens(Object arquivoId, IList<Object> itemIDs)
        //    {
        //        SalvaItens(arquivoId, itemIDs, null);
        //    }
        //    public static void SalvaItens(Object arquivoId, IList<Object> itemIDs, PersistenceManager pm)
        //    {
        //        StringBuilder command = new StringBuilder();
        //        foreach (Object itemID in itemIDs)
        //        {
        //            if (command.Length > 0) { command.Append("; "); }
        //            command.Append("INSERT INTO arquivoCobrancaUnibanco_cobanca (arqitem_arquivoId, arqitem_cobrancaId) VALUES (");
        //            command.Append(arquivoId);
        //            command.Append(","); command.Append(itemID); command.Append(")");
        //        }

        //        NonQueryHelper.Instance.ExecuteNonQuery(command.ToString(), pm);
        //    }

        //    public static Int32 ObtemProximaVersao()
        //    {
        //        return ObtemProximaVersao(null);
        //    }
        //    public static Int32 ObtemProximaVersao(PersistenceManager pm)
        //    {
        //        String qry = "SELECT MAX(arquivocobranca_versao) FROM arquivoCobrancaUnibanco";

        //        Object returned = LocatorHelper.Instance.ExecuteScalar(qry, null, null, pm);
        //        if (returned == DBNull.Value || Convert.ToInt32(returned) == 99)
        //            return 1;
        //        else
        //            return Convert.ToInt32(returned) + 1;
        //    }

        //    public static List<SumarioArquivoGeradoVO> GeraDocumentoCobrancaDUPLA_UNIBANCO(String[] operadoraIDs, Int32 mes, Int32 ano)
        //    {
        //        List<SumarioArquivoGeradoVO> vos = new List<SumarioArquivoGeradoVO>();
        //        String opeIN = String.Join(",", operadoraIDs);

        //        DateTime referencia = new DateTime(ano, mes, 2);
        //        DateTime referenciaPassda = referencia.AddMonths(-1);

        //        String qry = String.Concat("SELECT cobranca.*, operadora_id, operadora_nome ",
        //            "   FROM cobranca ",
        //            "       INNER JOIN contrato ON cobranca_propostaId=contrato_id ",
        //            "       INNER JOIN operadora ON contrato_operadoraId=operadora_id ",
        //            "   WHERE ",
        //            "       contrato_inativo=0 AND contrato_cancelado=0 AND contrato_rascunho=0 AND (cobranca_tipo=0 OR cobranca_tipo=1 OR (cobranca_tipo=2 AND cobranca_arquivoUltimoEnvioId IS NULL)) AND ",
        //            "       ((YEAR(cobranca_dataVencimento)=", ano, " AND ",
        //            "       MONTH(cobranca_dataVencimento)=", mes, ") OR ",
        //            "       (MONTH(cobranca_dataVencimento)=", referenciaPassda.Month, " AND ",
        //            "       YEAR(cobranca_dataVencimento)=", referenciaPassda.Year, " )) AND ",
        //            "       contrato_operadoraId IN (", opeIN, ") ",
        //            "   ORDER BY operadora_id ASC, cobranca_propostaId ASC, cobranca_dataVencimento DESC");

        //        PersistenceManager pm = new PersistenceManager();
        //        pm.BeginTransactionContext();

        //        try
        //        {
        //            IList<Cobranca> cobrancas =
        //                LocatorHelper.Instance.ExecuteQuery<Cobranca>(qry, typeof(Cobranca), pm);

        //            if (cobrancas == null) { pm.Commit(); pm = null; return null; }

        //            Decimal jurosDia = Convert.ToDecimal(ConfigurationManager.AppSettings["jurosDia"]);
        //            Decimal jurosAtraso = Convert.ToDecimal(ConfigurationManager.AppSettings["jurosAtraso"]);

        //            foreach (String operadoraId in operadoraIDs)
        //            {
        //                String arquivoNome = "", arquivoConteudo = "", arquivoVersao = "";
        //                Object arquivoId = null;
        //                Int32 qtdCobrancas = 0;
        //                List<String> cobrancaIDs = new List<String>();

        //                //Separa as cobrancas da operadora corrente
        //                List<Cobranca> cobrancasDaOperadora = new List<Cobranca>();
        //                foreach (Cobranca cobranca in cobrancas)
        //                {
        //                    if (Convert.ToString(cobranca.OperadoraID) != operadoraId) { continue; }
        //                    cobrancasDaOperadora.Add(cobranca);
        //                }

        //                List<Cobranca> cobrancasDuplas = new List<Cobranca>();
        //                foreach (Cobranca cobranca in cobrancasDaOperadora)
        //                {
        //                    //Calcula as cobrancas DUPLAS
        //                    if (((Cobranca.eTipo)cobranca.Tipo) == Cobranca.eTipo.Dupla && cobranca.ArquivoIDUltimoEnvio == null)
        //                    {
        //                        cobrancasDuplas.Add(cobranca);
        //                        cobrancaIDs.Add(Convert.ToString(cobranca.ID));
        //                    }
        //                    else
        //                    {
        //                        //checa se tem uma cobranca de parcela anterior à cobranca corrente,
        //                        //vencida e em aberto. Se tem, gera acobranca dupla.
        //                        Cobranca cobrancaAnterior = existeParcelaAnterior(cobranca, cobrancasDaOperadora);
        //                        if (cobrancaAnterior != null && cobrancaAnterior.Pago == false)
        //                        {
        //                            //Há uma cobranca anterior a esta em aberto. Cria-se a cobranca dupla
        //                            cobranca.Tipo = (Int32)Cobranca.eTipo.Dupla;
        //                            cobranca.ValorNominal = cobranca.Valor;
        //                            cobranca.Valor += cobrancaAnterior.Valor;
        //                            cobranca.CobrancaRefID = cobrancaAnterior.ID;

        //                            //calcula o juros da cobrancaAnterior até o vencimento da 
        //                            //cobranca autal, pois está atrasada.
        //                            TimeSpan atraso = cobranca.DataVencimento.Subtract(cobrancaAnterior.DataVencimento);
        //                            cobranca.Valor += cobrancaAnterior.Valor * jurosAtraso;
        //                            if (atraso.Days > 1)
        //                            {
        //                                cobranca.Valor += cobrancaAnterior.Valor * (jurosDia * (atraso.Days - 1));
        //                            }

        //                            pm.Save(cobranca);
        //                            cobrancasDuplas.Add(cobranca);
        //                            cobrancaIDs.Add(Convert.ToString(cobranca.ID));
        //                        }
        //                    }
        //                }

        //                if (cobrancasDuplas.Count == 0) { return null; }

        //                /////////////////////////////////////////
        //                qtdCobrancas = cobrancasDuplas.Count;
        //                GeraDocumentoCobranca_UNIBANCO(cobrancaIDs, ref arquivoNome, ref arquivoConteudo, ref arquivoId, ref arquivoVersao, null, pm);

        //                //armazena na colecao para retorno à UI
        //                SumarioArquivoGeradoVO vo = new SumarioArquivoGeradoVO();
        //                vo.ArquivoConteudo = arquivoConteudo;
        //                vo.ArquivoID = arquivoId;
        //                vo.ArquivoNome = arquivoNome;
        //                vo.ArquivoVersao = arquivoVersao;
        //                vo.OperadoraID = operadoraId;
        //                vo.OperadoraNome = cobrancasDuplas[0].OperadoraNome;
        //                vo.QtdCobrancas = qtdCobrancas;
        //                vos.Add(vo);
        //            }

        //            pm.Commit();
        //        }
        //        catch (Exception ex)
        //        {
        //            pm.Rollback();
        //            throw ex;
        //        }
        //        finally
        //        {
        //            pm = null;
        //        }

        //        return vos;
        //    }

        //    /// <summary>
        //    /// Retorna a cobrança anterior a uma cobranca em foco.
        //    /// </summary>
        //    /// <param name="referencia">Cobrança em foco.</param>
        //    /// <param name="lista">Lista de cobranças em que ocorrerá a procura.</param>
        //    /// <returns>Cobrança anterior, ou Null.</returns>
        //    static Cobranca existeParcelaAnterior(Cobranca referencia, IList<Cobranca> lista)
        //    {
        //        if (referencia.Parcela == 1 || lista == null || lista.Count == 0)
        //            return null;

        //        foreach (Cobranca cobranca in lista)
        //        {
        //            if (Convert.ToString(cobranca.ID) == Convert.ToString(referencia.ID)) { continue; }
        //            if (Convert.ToString(cobranca.PropostaID) == Convert.ToString(referencia.PropostaID) &&
        //                cobranca.Parcela == (referencia.Parcela - 1) &&
        //                Convert.ToString(cobranca.OperadoraID) == Convert.ToString(referencia.OperadoraID))
        //            {
        //                return cobranca;
        //            }
        //        }

        //        return null;
        //    }


        //    /// <summary>
        //    /// SEGUNDA VERSÃO DO MÉTODO - temporario para gerar cobrancas de clientes inativos
        //    /// </summary>
        //    public static String __GeraDocumentoCobranca_UNIBANCO2B(IList<String> cobrancaIDs, ref String arquivoNome, ref String arquivoConteudo, PersistenceManager _pm)
        //    {
        //        PersistenceManager pm = _pm;

        //        if (_pm == null)
        //        {
        //            pm = new PersistenceManager();
        //            pm.BeginTransactionContext();
        //        }

        //        try
        //        {
        //            if (cobrancaIDs == null) { return null; }

        //            String dataAgora = DateTime.Now.ToString("ddMMyy");
        //            String versao = "";
        //            StringBuilder doc = new StringBuilder();

        //            Cobranca.eCarteira carteira = Cobranca.eCarteira.Unibanco;

        //            #region HEADER

        //            EntityBase.AppendPreparedField(ref doc, "0", 1);
        //            EntityBase.AppendPreparedField(ref doc, "1", 1);
        //            EntityBase.AppendPreparedField(ref doc, "REMESSA", 7);
        //            EntityBase.AppendPreparedField(ref doc, "03", 2);
        //            EntityBase.AppendPreparedField(ref doc, "COBR.  ESPECIAL", 15); //005

        //            //////////////////////////////////////////////////////////////////////////////////////
        //            if (carteira == Cobranca.eCarteira.Unibanco)
        //                EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C006.PadLeft(11, ' '), 11);
        //            else
        //                EntityBase.AppendPreparedField(ref doc, "9108080533".PadLeft(11, ' '), 11);
        //            //////////////////////////////////////////////////////////////////////////////////////

        //            EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C007, 4);//Se utilizado, o 011 é preenchido com zeros. Se 011 é ultilizado, 007 é preenchido com zeros
        //            EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C008, 1);  //008
        //            EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C009, 1);  //009 
        //            EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C010, 1);  //010
        //            EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C011, 7);  //011
        //            EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C012, 2);  //012 ????
        //            EntityBase.AppendPreparedField(ref doc, " ", 41);       //013
        //            EntityBase.AppendPreparedField(ref doc, dataAgora, 6);  //014
        //            EntityBase.AppendPreparedField(ref doc, "01600", 5);    //015
        //            EntityBase.AppendPreparedField(ref doc, "BPI", 3);      //016
        //            EntityBase.AppendPreparedField(ref doc, " ", 116);      //017
        //            EntityBase.AppendPreparedField(ref doc, "0".PadRight(167, '0'), 167); //018

        //            String arquivoVersao = versao.PadRight(3, '0');
        //            EntityBase.AppendPreparedField(ref doc, versao, 3);     //019
        //            EntityBase.AppendPreparedField(ref doc, " ".PadLeft(200, ' '), 200); //20
        //            EntityBase.AppendPreparedField(ref doc, "000001", 6);   //021

        //            #endregion

        //            //Carrega cobrancas envolvidas
        //            IList<Cobranca> cobrancas = Cobranca.CarregarTodas_OrdemPorContratoParcela(cobrancaIDs, pm);
        //            List<Object> cobrancaIds = new List<Object>();
        //            if (cobrancas == null) { return null; }

        //            //arquivoId = null;

        //            List<TabelaValorVencimentoVO> lista = new List<TabelaValorVencimentoVO>();

        //            #region DETAIL

        //            Endereco endereco = null;
        //            Int32 numSequencial = 1, diaDataSemJuros, result = 0;
        //            String mascara6 = new String('0', 6), nossoNumero = "";
        //            Decimal valorTotal = 0, mora = 0, multa = 0;
        //            Object valorDataLimite = null;
        //            DateTime contratoAdmissao = DateTime.MinValue, vigencia, vencimento, dataLimite = DateTime.MinValue;
        //            CalendarioVencimento rcv = null;
        //            TabelaValorVencimentoVO retTvv = null;
        //            Contrato contrato = null;
        //            IList<TabelaValor> tabela = null; Taxa taxa = null; EstipulanteTaxa estipulanteTaxa = null;
        //            IList<ArquivoRemessaCriterio> arcrits = ArquivoRemessaCriterio.CarregarTodos();
        //            ArquivoRemessaCriterio arqCriterio = null; String[] arr = null;

        //            int qtdTotalBoletos = 0, numBoletoCorrente = 0, idContratoAtual = 0;

        //            foreach (Cobranca cob in cobrancas)
        //            {
        //                contrato = Contrato.CarregarParcial(cob.PropostaID, pm);

        //                #region localiza o critério correspondente

        //                foreach (ArquivoRemessaCriterio obj in arcrits)
        //                {
        //                    if (Convert.ToString(obj.OperadoraID) == Convert.ToString(contrato.OperadoraID))
        //                    {
        //                        arr = obj.ContratoAdmIDs.Split(',');
        //                        foreach (String itemarr in arr)
        //                        {
        //                            if (itemarr.Trim() == Convert.ToString(contrato.ContratoADMID).Trim())
        //                            {
        //                                arqCriterio = obj;
        //                                break;
        //                            }
        //                        }
        //                    }
        //                }
        //                #endregion

        //                numSequencial++;
        //                cobrancaIds.Add(cob.ID);

        //                cob.DataVencimento = new DateTime(2011, 10, 31, 23, 59, 59, 995);

        //                if (Convert.ToInt32(cob.PropostaID) != idContratoAtual)
        //                {
        //                    numBoletoCorrente = 0; idContratoAtual = Convert.ToInt32(cob.PropostaID);
        //                    qtdTotalBoletos = 0;
        //                    foreach (Cobranca _temp in cobrancas)
        //                    {
        //                        if (Convert.ToInt32(_temp.PropostaID) == idContratoAtual) { qtdTotalBoletos++; }
        //                        else if (qtdTotalBoletos > 0) { break; }
        //                    }
        //                }

        //                numBoletoCorrente++;

        //                #region checa se tem despesa nao embutida com postagem. se tem, incrementa o valor da cobranca:

        //                retTvv = TabelaValorVencimentoVO.ExisteProposta(cob.PropostaID, lista);
        //                if (retTvv == null)
        //                {
        //                    //contrato = Contrato.CarregarParcial(cob.PropostaID, pm);
        //                    tabela = TabelaValor.CarregarTabelaVigente(contrato.ContratoADMID, contrato.Admissao, cob.DataVencimento, pm);
        //                    if (tabela != null && tabela.Count > 0)
        //                    {
        //                        retTvv = TabelaValorVencimentoVO.ExisteTabela(tabela[0].ID, lista);
        //                        if (retTvv == null)
        //                        {
        //                            taxa = Taxa.CarregarPorTabela(tabela[0].ID, pm);
        //                            if (taxa != null && !taxa.Embutido)
        //                            {
        //                                cob.Valor += taxa.ValorEmbutido;
        //                            }

        //                            retTvv = new TabelaValorVencimentoVO();
        //                            retTvv.PropostaID = contrato.ID;
        //                            retTvv.TabelaID = tabela[0].ID;
        //                            if (tabela[0].VencimentoFim != DateTime.MinValue)
        //                            { retTvv.Vencimento = tabela[0].VencimentoFim.AddMonths(1); }
        //                            if (taxa != null && !taxa.Embutido)
        //                            { retTvv.ValorBancario = taxa.ValorEmbutido; }

        //                            if (contrato.CobrarTaxaAssociativa)
        //                            {
        //                                estipulanteTaxa = EstipulanteTaxa.CarregarVigente(contrato.EstipulanteID, pm);
        //                                if (estipulanteTaxa != null)
        //                                { retTvv.ValorSindicalizacao = estipulanteTaxa.Valor; }
        //                            }

        //                            lista.Add(retTvv);
        //                            //taxa = null;
        //                        }
        //                        else
        //                            cob.Valor += retTvv.ValorBancario;
        //                    }
        //                }
        //                else
        //                    cob.Valor += retTvv.ValorBancario;

        //                #endregion

        //                #region data de admissao do contrato

        //                if (contrato != null) { contratoAdmissao = contrato.Admissao; }
        //                else { continue; /*TODO: Logar */ }
        //                #endregion

        //                valorTotal += cob.Valor;
        //                doc.Append(Environment.NewLine);

        //                EntityBase.AppendPreparedField(ref doc, "2", 1); //021

        //                cob.Tipo = 4;
        //                nossoNumero = cob.GeraNossoNumero();
        //                EntityBase.AppendPreparedField(ref doc, nossoNumero, 14); //022
        //                EntityBase.AppendPreparedField(ref doc, cob._CalculaDVMod11(cob.Tipo, cob.ContratoCodCobranca, cob.Parcela), 1); //023 - Depende do 009 ou do 302 (usamos o 009)
        //                EntityBase.AppendPreparedField(ref doc, cob.DataVencimento.ToString("ddMMyy"), 6); //024
        //                EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C025, 4);  //025
        //                cob.Tipo = 0;

        //                //////////////////////////////////////////////////////////////////////////////////////
        //                if (carteira == Cobranca.eCarteira.Unibanco)
        //                    EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C026.PadLeft(11, '0'), 11); //026
        //                else
        //                    EntityBase.AppendPreparedField(ref doc, "9108080533".PadLeft(11, ' '), 11);
        //                //////////////////////////////////////////////////////////////////////////////////////

        //                EntityBase.AppendPreparedField(ref doc, cob.ContratoTitularNome, 30); //027

        //                endereco = new Endereco(cob.ContratoEnderecoCobrancaID);
        //                endereco.Carregar(pm);
        //                if (endereco.CEP.IndexOf('-') > -1) { endereco.CEP = endereco.CEP.Replace("-", ""); }

        //                EntityBase.AppendPreparedField(ref doc, "", 30);              //028
        //                EntityBase.AppendPreparedField(ref doc, endereco.Bairro, 20); //029
        //                EntityBase.AppendPreparedField(ref doc, endereco.Cidade, 20); //030
        //                EntityBase.AppendPreparedField(ref doc, endereco.UF, 2);      //031
        //                EntityBase.AppendPreparedField(ref doc, endereco.CEP.Substring(0, 5), 5); //032
        //                EntityBase.AppendPreparedField(ref doc, endereco.CEP.Substring(5, 3), 3); //033 
        //                EntityBase.AppendPreparedField(ref doc, dataAgora, 6);        //034
        //                EntityBase.AppendPreparedField(ref doc, "", 2);               //035
        //                EntityBase.AppendPreparedField(ref doc, "0000000000", 10);    //036 -- quantidade de moeda - para moeda diferente de REAL
        //                EntityBase.AppendPreparedField(ref doc, cob.Valor.ToString("N2").Replace(".", "").Replace(",", "").PadLeft(15, '0'), 15); //037 -- ???? valor do titulo - como preencher
        //                EntityBase.AppendPreparedField(ref doc, "000000000000000", 15);//038 -- desconto 

        //                mora = Convert.ToDecimal(CobrancaConfig.C039) * cob.Valor;
        //                EntityBase.AppendPreparedField(ref doc, mora.ToString("N2").Replace(",", "").Replace(".", "").PadLeft(12, '0'), 12);   //039 -- juros de mora 

        //                multa = Convert.ToDecimal(CobrancaConfig.MultaPercentual) * cob.Valor;
        //                EntityBase.AppendPreparedField(ref doc, multa.ToString("N2").Replace(",", "").Replace(".", "").PadLeft(12, '0'), 12);   //040 -- multa atraso 
        //                EntityBase.AppendPreparedField(ref doc, cob.Parcela.ToString().PadLeft(3, '0'), 3);             //041 -- num da parcela. deve ser 000 ????
        //                EntityBase.AppendPreparedField(ref doc, " ", 42);              //042
        //                EntityBase.AppendPreparedField(ref doc, cob.ContratoNumero.PadRight(18, ' '), 18); //043 - numero do documento
        //                //EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C044a, 1);
        //                EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C044, 6);//044 -- especie documento
        //                EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C045, 2);//045 -- ???? aceite
        //                EntityBase.AppendPreparedField(ref doc, dataAgora, 6);          //046 -- data processamento


        //                //////////////////////////////////////////////////////////////////////////////////////
        //                if (carteira == Cobranca.eCarteira.Unibanco)
        //                    EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C047, 2);//047
        //                else
        //                    EntityBase.AppendPreparedField(ref doc, "198", 3);//047
        //                //////////////////////////////////////////////////////////////////////////////////////

        //                EntityBase.AppendPreparedField(ref doc, "0", 1);                //048 -- ???? indicador do registro de msg
        //                EntityBase.AppendPreparedField(ref doc, cob.DataVencimento.ToString("ddMMyy"), 6); //049 data limite desconto

        //                EntityBase.AppendPreparedField(ref doc, cob.DataVencimento.AddDays(1).ToString("ddMMyy"), 6);//050 -- data para multa

        //                EntityBase.AppendPreparedField(ref doc, "0", 1);                   //051 -- prazo de mora diária
        //                EntityBase.AppendPreparedField(ref doc, "0", 1);                   //052 -- codigo de moeda
        //                EntityBase.AppendPreparedField(ref doc, "0".PadRight(18, ' '), 18);//053 -- uso do banco

        //                //contr
        //                if (endereco.Logradouro.Length > 48)
        //                {
        //                    endereco.Logradouro = endereco.Logradouro.Substring(0, 48);
        //                }

        //                endereco.Logradouro += ", " + endereco.Numero;

        //                if (!String.IsNullOrEmpty(endereco.Complemento))
        //                {
        //                    endereco.Logradouro += " " + endereco.Complemento;
        //                }

        //                EntityBase.AppendPreparedField(ref doc, endereco.Logradouro.PadRight(60, ' '), 60); //054

        //                EntityBase.AppendPreparedField(ref doc, " ", 3);                                    //055

        //                EntityBase.AppendPreparedField(ref doc, arqCriterio.Projeto.PadLeft(4, '0'), 4);           //Projeto
        //                EntityBase.AppendPreparedField(ref doc, qtdTotalBoletos.ToString().PadLeft(2, '0'), 2);    //QtdBoletos col.:399
        //                EntityBase.AppendPreparedField(ref doc, numBoletoCorrente.ToString().PadLeft(2, '0'), 2);  //Boleto atual
        //                EntityBase.AppendPreparedField(ref doc, arqCriterio.FoneAtendimento.PadRight(15, ' '), 15);//Telefone de atendimento

        //                if (retTvv != null && retTvv.Vencimento != DateTime.MinValue)
        //                    EntityBase.AppendPreparedField(ref doc, retTvv.Vencimento.ToString("dd/MM/yyyy"), 10); //Mes reajuste
        //                else
        //                    EntityBase.AppendPreparedField(ref doc, retTvv.Vencimento.ToString("0000000000"), 10); //Mes reajuste

        //                EntityBase.AppendPreparedField(ref doc, arqCriterio.Operadora.PadRight(30, ' '), 30);      //Operadora

        //                CalendarioAdmissaoVigencia.CalculaDatasDeVigenciaEVencimento(contrato.ContratoADMID, cob.DataVencimento,
        //                    out vigencia, out vencimento, out diaDataSemJuros, out valorDataLimite, out rcv, pm);

        //                if (diaDataSemJuros <= 0)
        //                    EntityBase.AppendPreparedField(ref doc, " ".PadLeft(6, ' '), 6); //Data Sem juros TODO
        //                else
        //                    EntityBase.AppendPreparedField(ref doc, cob.DataVencimento.AddDays(diaDataSemJuros).ToString("ddMMyy"), 6); //Data Sem juros TODO

        //                #region Texto data limite
        //                if (valorDataLimite != null)
        //                {
        //                    if (Int32.TryParse(Convert.ToString(valorDataLimite), out result))
        //                    {
        //                        if (result < cob.DataVencimento.Day)
        //                        {
        //                            dataLimite = new DateTime(cob.DataVencimento.AddMonths(1).Year,
        //                                cob.DataVencimento.AddMonths(1).Month, result);
        //                        }
        //                        else
        //                        {
        //                            dataLimite = new DateTime(cob.DataVencimento.Year, cob.DataVencimento.Month, result);
        //                        }

        //                        EntityBase.AppendPreparedField(ref doc, dataLimite.ToString("dd/MM/yyyy").PadRight(50, ' '), 50); //data limite calculada
        //                    }
        //                    else
        //                    {
        //                        EntityBase.AppendPreparedField(ref doc, Convert.ToString(valorDataLimite).PadRight(50, ' '), 50);
        //                    }
        //                }
        //                else
        //                    EntityBase.AppendPreparedField(ref doc, " ".PadRight(50, ' '), 50);  //Texto data limite

        //                #endregion

        //                EntityBase.AppendPreparedField(ref doc, arqCriterio.Ans.PadLeft(6, '0'), 6); //ANS

        //                //Taxa associativa (tarifa bancaria + taxa de sindicalizacao)
        //                if (retTvv != null)
        //                    EntityBase.AppendPreparedField(ref doc, (retTvv.ValorBancario + retTvv.ValorSindicalizacao).ToString("N2").Replace(".", "").Replace(",", "").PadLeft(15, '0'), 15);
        //                else
        //                    EntityBase.AppendPreparedField(ref doc, " ".PadLeft(15, '0'), 15);

        //                //////////////////////////////////////////////////////////////////////////////////////
        //                if (carteira == Cobranca.eCarteira.Unibanco)
        //                    EntityBase.AppendPreparedField(ref doc, " ".PadLeft(60, ' '), 60); //reservado
        //                else
        //                    EntityBase.AppendPreparedField(ref doc, " ".PadLeft(59, ' '), 59); //reservado
        //                //////////////////////////////////////////////////////////////////////////////////////

        //                EntityBase.AppendPreparedField(ref doc, String.Format("{0:" + mascara6 + "}", numSequencial), 6);//056

        //                //cob.ArquivoIDUltimoEnvio = arquivo.ID;
        //                //pm.Save(cob);
        //            }
        //            #endregion

        //            #region TRAILLER

        //            numSequencial++;
        //            doc.Append(Environment.NewLine);
        //            EntityBase.AppendPreparedField(ref doc, "9", 1);  //142
        //            EntityBase.AppendPreparedField(ref doc, "", 25);  //143
        //            //////////////////////////////////////////////////////////////////////////////////////
        //            if (carteira == Cobranca.eCarteira.Unibanco)
        //                EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C006, 11); //144
        //            else
        //                EntityBase.AppendPreparedField(ref doc, "9108080533".PadLeft(11, ' '), 11);
        //            //////////////////////////////////////////////////////////////////////////////////////
        //            EntityBase.AppendPreparedField(ref doc, "", 334); //145
        //            EntityBase.AppendPreparedField(ref doc, String.Format("{0:" + mascara6 + "}", numSequencial), 6); //146
        //            EntityBase.AppendPreparedField(ref doc, valorTotal.ToString("N2").Replace(".", "").Replace(",", "").PadLeft(17, '0'), 17); //147
        //            EntityBase.AppendPreparedField(ref doc, " ".PadLeft(200, ' '), 200); //148
        //            EntityBase.AppendPreparedField(ref doc, String.Format("{0:" + mascara6 + "}", numSequencial), 6); //149

        //            #endregion

        //            if (_pm == null) { pm.Commit(); } //commit apenas se nao estiver participando de uma transacao externa
        //            arquivoConteudo = doc.ToString();
        //            return arquivoConteudo;
        //        }
        //        catch
        //        {
        //            if (_pm == null) { pm.Rollback(); }
        //            throw;
        //        }
        //        finally
        //        {
        //            if (_pm == null) { pm = null; }
        //        }
        //    }



        //    /// <summary>
        //    /// SEGUNDA VERSÃO DO MÉTODO
        //    /// </summary>
        //    public static List<SumarioArquivoGeradoVO> GeraDocumentoCobranca_UNIBANCO2(IList<Cobranca> cobrancas, IList<ArquivoRemessaAgendamento> aras)
        //    {
        //        List<SumarioArquivoGeradoVO> vos = new List<SumarioArquivoGeradoVO>();

        //        //separa as operadoras
        //        List<String> operadoraIDs = new List<String>();
        //        System.Collections.Hashtable ht = new System.Collections.Hashtable();

        //        PersistenceManager pm = new PersistenceManager();
        //        pm.UseSingleCommandInstance();

        //        //foreach (Cobranca cobranca in cobrancas)
        //        //{
        //        //    if (!operadoraIDs.Contains(cobranca.OperadoraID.ToString()))
        //        //        operadoraIDs.Add(cobranca.OperadoraID.ToString());
        //        //}

        //        pm.CloseSingleCommandInstance();
        //        pm.Dispose();

        //        //processa os arquivos, um para cada operadora.
        //        //foreach (String operadoraId in operadoraIDs)
        //        //{
        //        String arquivoNome = "", arquivoConteudo = "", arquivoVersao = "", operadoraNome = "";
        //        Object arquivoId = null;
        //        Int32 qtdCobrancas = 0;

        //        Operadora operadora = new Operadora(cobrancas[0].OperadoraID); //Operadora operadora = new Operadora(operadoraId);
        //        operadora.Carregar();
        //        operadoraNome = operadora.Nome;

        //        List<String> cobrancaIDs = new List<String>();
        //        foreach (Cobranca cobranca in cobrancas)
        //        {
        //            //if (cobranca.OperadoraID.ToString() != operadoraId) { continue; }
        //            cobrancaIDs.Add(cobranca.ID.ToString());
        //        }

        //        qtdCobrancas = cobrancaIDs.Count;
        //        GeraDocumentoCobranca_UNIBANCO2(cobrancaIDs, ref arquivoNome, ref arquivoConteudo, ref arquivoId, ref arquivoVersao, aras, null);

        //        //armazena na colecao para retorno à UI
        //        SumarioArquivoGeradoVO vo = new SumarioArquivoGeradoVO();
        //        vo.ArquivoConteudo = arquivoConteudo;
        //        vo.ArquivoID = arquivoId;
        //        vo.ArquivoNome = arquivoNome;
        //        vo.ArquivoVersao = arquivoVersao;
        //        vo.OperadoraID = cobrancas[0].OperadoraID; //operadoraId;
        //        vo.OperadoraNome = operadora.Nome;
        //        vo.QtdCobrancas = qtdCobrancas;
        //        vos.Add(vo);
        //        //}

        //        return vos;
        //    }
        //    /// <summary>
        //    /// SEGUNDA VERSÃO DO MÉTODO
        //    /// </summary>
        //    internal static String GeraDocumentoCobranca_UNIBANCO2(IList<String> cobrancaIDs, ref String arquivoNome, ref String arquivoConteudo, ref Object arquivoId, ref String arquivoVersao, IList<ArquivoRemessaAgendamento> aras, PersistenceManager _pm)
        //    {
        //        if (cobrancaIDs == null) { return null; }

        //        PersistenceManager pm = _pm;

        //        Int32 contratoadmQualicorpID = Convert.ToInt32(ConfigurationManager.AppSettings["contratoAdmQualicorpIdIncial"]);

        //        if (_pm == null)
        //        {
        //            pm = new PersistenceManager();
        //            pm.IsoLevel = IsolationLevel.ReadUncommitted;
        //            pm.BeginTransactionContext();
        //        }

        //        Cobranca cobprova = new Cobranca(cobrancaIDs[0]);
        //        pm.Load(cobprova);
        //        Contrato contratoprova = new Contrato(cobprova.PropostaID);
        //        pm.Load(contratoprova);

        //        String agCCDV_itau = "";
        //        String headerCedente = "";

        //        ////////////////////////////////////////////////// Só haverá cedente qualicorp
        //        agCCDV_itau = "0646042606";    //qualicorp
        //        headerCedente = " QUALICORP ADM. E SERV. LTDA";
        //        //////////////////////////////////////////////////

        //        try
        //        {
        //            if (cobrancaIDs == null) { return null; }

        //            String dataAgora = DateTime.Now.ToString("ddMMyy");
        //            String versao = "";
        //            StringBuilder doc = new StringBuilder();

        //            Cobranca.eCarteira carteira = (Cobranca.eCarteira)aras[0].Carteira;
        //            arquivoNome = String.Concat(aras[0].ArquivoNomeInstance, "_", DateTime.Now.ToString("yyyyMMddHHmmss"), ".dat");

        //            #region HEADER

        //            EntityBase.AppendPreparedField(ref doc, "0", 1);
        //            EntityBase.AppendPreparedField(ref doc, "1", 1);
        //            EntityBase.AppendPreparedField(ref doc, "REMESSA", 7);
        //            EntityBase.AppendPreparedField(ref doc, "03", 2);
        //            EntityBase.AppendPreparedField(ref doc, "COBR.  ESPECIAL", 15); //005

        //            //////////////////////////////////////////////////////////////////////////////////////
        //            if (carteira == Cobranca.eCarteira.Unibanco)
        //                EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C006.PadLeft(11, ' '), 11);
        //            else
        //                EntityBase.AppendPreparedField(ref doc, agCCDV_itau.PadLeft(11, ' '), 11);
        //            //////////////////////////////////////////////////////////////////////////////////////

        //            EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C007, 4);//Se utilizado, o 011 é preenchido com zeros. Se 011 é ultilizado, 007 é preenchido com zeros
        //            EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C008, 1);  //008
        //            EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C009, 1);  //009 
        //            EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C010, 1);  //010
        //            EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C011, 7);  //011
        //            EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C012, 2);  //012 ????
        //            EntityBase.AppendPreparedField(ref doc, " ", 41);                 //013
        //            EntityBase.AppendPreparedField(ref doc, dataAgora, 6);            //014
        //            EntityBase.AppendPreparedField(ref doc, "01600", 5);              //015
        //            EntityBase.AppendPreparedField(ref doc, "BPI", 3);                //016
        //            EntityBase.AppendPreparedField(ref doc, headerCedente, 116);      //017
        //            EntityBase.AppendPreparedField(ref doc, "0".PadRight(167, '0'), 167); //018

        //            ArquivoCobrancaUnibanco arquivo = new ArquivoCobrancaUnibanco();
        //            arquivo.DataCriacao = DateTime.Now;
        //            versao = ArquivoCobrancaUnibanco.ObtemProximaVersao(pm).ToString().PadLeft(3, '0');
        //            arquivo.Versao = Convert.ToInt32(versao);
        //            arquivo.AgendamentoID = null; // ara.ID; 

        //            ArquivoRemessaCriterio arqCriterio = null; //new ArquivoRemessaCriterio(ara.CriterioID);
        //            //pm.Load(arqCriterio);

        //            arquivoVersao = versao.PadRight(3, '0');
        //            EntityBase.AppendPreparedField(ref doc, versao, 3);     //019
        //            EntityBase.AppendPreparedField(ref doc, " ".PadLeft(200, ' '), 200); //20
        //            EntityBase.AppendPreparedField(ref doc, "000001", 6);   //021

        //            #endregion

        //            //Carrega cobrancas envolvidas
        //            IList<Cobranca> cobrancas = Cobranca.CarregarTodas_OrdemPorContratoParcela_Optimized(cobrancaIDs, pm); //
        //            List<Object> cobrancaIds = new List<Object>();
        //            if (cobrancas == null) { return null; }

        //            arquivo.MesReferencia = cobrancas[0].DataVencimento.Month;
        //            arquivo.AnoReferencia = cobrancas[0].DataVencimento.Year;
        //            arquivo.OperadoraID = cobrancas[0].OperadoraID;
        //            arquivo.Nome = arquivoNome;
        //            arquivo.QtdCobrancas = cobrancaIDs.Count;
        //            pm.Save(arquivo);
        //            arquivoId = arquivo.ID;

        //            List<TabelaValorVencimentoVO> lista = new List<TabelaValorVencimentoVO>();

        //            #region DETAIL

        //            Endereco endereco = null;
        //            Int32 numSequencial = 1, diaDataSemJuros, result = 0;
        //            String mascara6 = new String('0', 6), nossoNumero = "";
        //            Decimal valorTotal = 0, mora = 0, multa = 0;
        //            Object valorDataLimite = null;
        //            DateTime contratoAdmissao = DateTime.MinValue, vigencia, vencimento, dataLimite = DateTime.MinValue;
        //            CalendarioVencimento rcv = null;
        //            TabelaValorVencimentoVO retTvv = null;
        //            Contrato contrato = null;
        //            IList<TabelaValor> tabela = null; Taxa taxa = null; EstipulanteTaxa estipulanteTaxa = null;

        //            int qtdTotalBoletos = 0, numBoletoCorrente = 0, idContratoAtual = 0;

        //            int i = 0;

        //            String[] contratoAdmIds = null;
        //            System.Collections.Hashtable contratoADM_Criterio = new System.Collections.Hashtable();
        //            List<string> parametrosProcessados = new List<string>();
        //            Cobranca _cob = null;

        //            foreach (Cobranca cob in cobrancas)
        //            {
        //                if (parametrosProcessados.Contains(string.Concat(cob.DataVencimento.ToString("ddMMyyyy"), cob.PropostaID))) continue;

        //                parametrosProcessados.Add(string.Concat(cob.DataVencimento.ToString("ddMMyyyy"), cob.PropostaID));

        //                if (cob.ID == null) { continue; }

        //                _cob = null;
        //                _cob = Cobranca.CarregarEnviadasPor(cob.PropostaID, cob.DataVencimento, (int)Cobranca.eTipo.Normal, pm);
        //                if (_cob != null) { continue; }

        //                i++;
        //                try
        //                {
        //                    #region processamento

        //                    #region localiza o critério correspondente

        //                    contrato = Contrato.CarregarParcial(cob.PropostaID, pm);

        //                    if (contratoADM_Criterio.Contains(Convert.ToString(contrato.ContratoADMID)))
        //                    {
        //                        arqCriterio = (ArquivoRemessaCriterio)contratoADM_Criterio[Convert.ToString(contrato.ContratoADMID)];
        //                    }
        //                    else
        //                    {
        //                        foreach (ArquivoRemessaAgendamento ara in aras)
        //                        {
        //                            if (cob.Criterio != null) { break; }

        //                            contratoAdmIds = ArquivoRemessaCriterio.CarregarContratoAdmIds(ara.CriterioID, pm); /////

        //                            foreach (String contratoAdmId in contratoAdmIds)
        //                            {
        //                                if (Convert.ToString(contrato.ContratoADMID).Equals(contratoAdmId))
        //                                {
        //                                    ArquivoRemessaCriterio criterio = new ArquivoRemessaCriterio(ara.CriterioID);
        //                                    pm.Load(criterio);
        //                                    arqCriterio = criterio;

        //                                    try
        //                                    {
        //                                        contratoADM_Criterio.Add(contratoAdmId, criterio);
        //                                    }
        //                                    catch //(Exception ex)
        //                                    {
        //                                        continue;
        //                                    }
        //                                    break;
        //                                }
        //                            }
        //                        }
        //                    }
        //                    #endregion

        //                    numSequencial++;
        //                    cobrancaIds.Add(cob.ID);

        //                    if (Convert.ToInt32(cob.PropostaID) != idContratoAtual)
        //                    {
        //                        numBoletoCorrente = 0; idContratoAtual = Convert.ToInt32(cob.PropostaID);
        //                        qtdTotalBoletos = 0;
        //                        foreach (Cobranca _temp in cobrancas)
        //                        {
        //                            if (Convert.ToInt32(_temp.PropostaID) == idContratoAtual) { qtdTotalBoletos++; }
        //                            else if (qtdTotalBoletos > 0) { break; }
        //                        }
        //                    }

        //                    numBoletoCorrente++;

        //                    #region checa se tem despesa nao embutida com postagem. se tem, incrementa o valor da cobranca:

        //                    retTvv = TabelaValorVencimentoVO.ExisteProposta(cob.PropostaID, lista);
        //                    if (retTvv == null)
        //                    {
        //                        //contrato = Contrato.CarregarParcial(cob.PropostaID, pm);
        //                        tabela = TabelaValor.CarregarTabelaVigente(contrato.ContratoADMID, contrato.Admissao, cob.DataVencimento, pm);
        //                        if (tabela != null && tabela.Count > 0)
        //                        {
        //                            retTvv = TabelaValorVencimentoVO.ExisteTabela(tabela[0].ID, lista);
        //                            if (retTvv == null)
        //                            {
        //                                taxa = Taxa.CarregarPorTabela(tabela[0].ID, pm);
        //                                if (taxa != null && !taxa.Embutido)
        //                                {
        //                                    cob.Valor += taxa.ValorEmbutido;
        //                                }

        //                                retTvv = new TabelaValorVencimentoVO();
        //                                retTvv.PropostaID = contrato.ID;
        //                                retTvv.TabelaID = tabela[0].ID;
        //                                if (tabela[0].VencimentoFim != DateTime.MinValue)
        //                                { retTvv.Vencimento = tabela[0].VencimentoFim.AddMonths(1); }
        //                                if (taxa != null && !taxa.Embutido)
        //                                { retTvv.ValorBancario = taxa.ValorEmbutido; }

        //                                if (contrato.CobrarTaxaAssociativa)
        //                                {
        //                                    estipulanteTaxa = EstipulanteTaxa.CarregarVigente(contrato.EstipulanteID, pm);
        //                                    if (estipulanteTaxa != null)
        //                                    { retTvv.ValorSindicalizacao = estipulanteTaxa.Valor; }
        //                                }

        //                                lista.Add(retTvv);
        //                                //taxa = null;
        //                            }
        //                            else
        //                                cob.Valor += retTvv.ValorBancario;
        //                        }
        //                    }
        //                    else
        //                        cob.Valor += retTvv.ValorBancario;

        //                    #endregion

        //                    #region data de admissao do contrato

        //                    //Contrato _contrato = Contrato.CarregarParcial(cob.PropostaID, pm);
        //                    if (contrato != null) { contratoAdmissao = contrato.Admissao; }
        //                    else { continue; }
        //                    #endregion

        //                    valorTotal += cob.Valor;
        //                    doc.Append(Environment.NewLine);

        //                    EntityBase.AppendPreparedField(ref doc, "2", 1); //021

        //                    nossoNumero = cob.GeraNossoNumero();
        //                    if (Cobranca.NossoNumeroITAU)
        //                        doc.Append(nossoNumero.PadLeft(14, '0'));
        //                    else
        //                        EntityBase.AppendPreparedField(ref doc, nossoNumero, 14); //022
        //                    EntityBase.AppendPreparedField(ref doc, cob.CalculaDVMod10(cob.Tipo, cob.ContratoCodCobranca, cob.Parcela), 1); //023 - Depende do 009 ou do 302 (usamos o 009)
        //                    EntityBase.AppendPreparedField(ref doc, cob.DataVencimento.ToString("ddMMyy"), 6); //024
        //                    EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C025, 4);  //025

        //                    //////////////////////////////////////////////////////////////////////////////////////
        //                    if (!Cobranca.NossoNumeroITAU) //if (carteira == Cobranca.eCarteira.Unibanco)
        //                        EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C026.PadLeft(11, '0'), 11); //026
        //                    else
        //                        EntityBase.AppendPreparedField(ref doc, agCCDV_itau.PadLeft(11, '0'), 11);
        //                    //////////////////////////////////////////////////////////////////////////////////////

        //                    EntityBase.AppendPreparedField(ref doc, cob.ContratoTitularNome, 30); //027

        //                    endereco = new Endereco(cob.ContratoEnderecoCobrancaID);
        //                    endereco.Carregar(pm);
        //                    if (endereco.CEP.IndexOf('-') > -1) { endereco.CEP = endereco.CEP.Replace("-", ""); }

        //                    EntityBase.AppendPreparedField(ref doc, "", 30);              //028
        //                    EntityBase.AppendPreparedField(ref doc, endereco.Bairro, 20); //029
        //                    EntityBase.AppendPreparedField(ref doc, endereco.Cidade, 20); //030
        //                    EntityBase.AppendPreparedField(ref doc, endereco.UF, 2);      //031
        //                    EntityBase.AppendPreparedField(ref doc, endereco.CEP.Substring(0, 5), 5); //032
        //                    EntityBase.AppendPreparedField(ref doc, endereco.CEP.Substring(5, 3), 3); //033 
        //                    EntityBase.AppendPreparedField(ref doc, dataAgora, 6);        //034
        //                    EntityBase.AppendPreparedField(ref doc, "", 2);               //035
        //                    EntityBase.AppendPreparedField(ref doc, "0000000000", 10);    //036 -- quantidade de moeda - para moeda diferente de REAL
        //                    EntityBase.AppendPreparedField(ref doc, cob.Valor.ToString("N2").Replace(".", "").Replace(",", "").PadLeft(15, '0'), 15); //037 -- ???? valor do titulo - como preencher
        //                    EntityBase.AppendPreparedField(ref doc, "000000000000000", 15);//038 -- desconto 

        //                    mora = Convert.ToDecimal(CobrancaConfig.C039) * cob.Valor;
        //                    EntityBase.AppendPreparedField(ref doc, mora.ToString("N2").Replace(",", "").Replace(".", "").PadLeft(12, '0'), 12);   //039 -- juros de mora 

        //                    multa = Convert.ToDecimal(CobrancaConfig.MultaPercentual) * cob.Valor;
        //                    EntityBase.AppendPreparedField(ref doc, multa.ToString("N2").Replace(",", "").Replace(".", "").PadLeft(12, '0'), 12);   //040 -- multa atraso 
        //                    EntityBase.AppendPreparedField(ref doc, cob.Parcela.ToString().PadLeft(3, '0'), 3);             //041 -- num da parcela. deve ser 000 ????
        //                    EntityBase.AppendPreparedField(ref doc, " ", 42);              //042
        //                    EntityBase.AppendPreparedField(ref doc, cob.ContratoNumero.PadRight(18, ' '), 18); //043 - numero do documento
        //                    //EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C044a, 1);
        //                    EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C044, 6);//044 -- especie documento
        //                    EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C045, 2);//045 -- aceite
        //                    EntityBase.AppendPreparedField(ref doc, dataAgora, 6);          //046 -- data processamento


        //                    //////////////////////////////////////////////////////////////////////////////////////
        //                    if (!Cobranca.NossoNumeroITAU) //if (carteira == Cobranca.eCarteira.Unibanco)
        //                        EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C047, 2);//047
        //                    else
        //                        EntityBase.AppendPreparedField(ref doc, "175", 3);//047
        //                    //////////////////////////////////////////////////////////////////////////////////////

        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);                //048 -- ???? indicador do registro de msg
        //                    EntityBase.AppendPreparedField(ref doc, cob.DataVencimento.ToString("ddMMyy"), 6); //049 data limite desconto

        //                    EntityBase.AppendPreparedField(ref doc, cob.DataVencimento.AddDays(1).ToString("ddMMyy"), 6);//050 -- data para multa

        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);                   //051 -- prazo de mora diária
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);                   //052 -- codigo de moeda
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadRight(18, ' '), 18);//053 -- uso do banco

        //                    //contr
        //                    if (endereco.Logradouro.Length > 48)
        //                    {
        //                        endereco.Logradouro = endereco.Logradouro.Substring(0, 48);
        //                    }

        //                    endereco.Logradouro += ", " + endereco.Numero;

        //                    if (!String.IsNullOrEmpty(endereco.Complemento))
        //                    {
        //                        endereco.Logradouro += " " + endereco.Complemento;
        //                    }

        //                    EntityBase.AppendPreparedField(ref doc, endereco.Logradouro.PadRight(60, ' '), 60); //054

        //                    EntityBase.AppendPreparedField(ref doc, " ", 3);                                    //055

        //                    EntityBase.AppendPreparedField(ref doc, arqCriterio.Projeto.PadLeft(4, '0'), 4);           //Projeto
        //                    EntityBase.AppendPreparedField(ref doc, qtdTotalBoletos.ToString().PadLeft(2, '0'), 2);    //QtdBoletos col.:399
        //                    EntityBase.AppendPreparedField(ref doc, numBoletoCorrente.ToString().PadLeft(2, '0'), 2);  //Boleto atual
        //                    EntityBase.AppendPreparedField(ref doc, arqCriterio.FoneAtendimento.PadRight(15, ' '), 15);//Telefone de atendimento

        //                    if (retTvv != null && retTvv.Vencimento != DateTime.MinValue)
        //                        EntityBase.AppendPreparedField(ref doc, retTvv.Vencimento.ToString("dd/MM/yyyy"), 10); //Mes reajuste
        //                    else
        //                        EntityBase.AppendPreparedField(ref doc, retTvv.Vencimento.ToString("0000000000"), 10); //Mes reajuste

        //                    EntityBase.AppendPreparedField(ref doc, arqCriterio.Operadora.PadRight(30, ' '), 30);      //Operadora

        //                    CalendarioAdmissaoVigencia.CalculaDatasDeVigenciaEVencimento(contrato.ContratoADMID, cob.DataVencimento,
        //                        out vigencia, out vencimento, out diaDataSemJuros, out valorDataLimite, out rcv, pm);

        //                    if (diaDataSemJuros <= 0)
        //                        EntityBase.AppendPreparedField(ref doc, " ".PadLeft(6, ' '), 6); //Data Sem juros TODO
        //                    else
        //                        EntityBase.AppendPreparedField(ref doc, cob.DataVencimento.AddDays(diaDataSemJuros).ToString("ddMMyy"), 6); //Data Sem juros TODO

        //                    #region Texto data limite
        //                    if (valorDataLimite != null) // && Convert.ToString(valorDataLimite) != "0")
        //                    {
        //                        if (Int32.TryParse(Convert.ToString(valorDataLimite), out result))
        //                        {
        //                            if (result < cob.DataVencimento.Day)
        //                            {
        //                                dataLimite = new DateTime(cob.DataVencimento.AddMonths(1).Year,
        //                                    cob.DataVencimento.AddMonths(1).Month, result);
        //                            }
        //                            else
        //                            {
        //                                dataLimite = new DateTime(cob.DataVencimento.Year, cob.DataVencimento.Month, result);
        //                            }

        //                            EntityBase.AppendPreparedField(ref doc, dataLimite.ToString("dd/MM/yyyy").PadRight(50, ' '), 50); //data limite calculada
        //                        }
        //                        else
        //                        {
        //                            EntityBase.AppendPreparedField(ref doc, Convert.ToString(valorDataLimite).PadRight(50, ' '), 50);
        //                        }
        //                    }
        //                    else
        //                        EntityBase.AppendPreparedField(ref doc, " ".PadRight(50, ' '), 50);  //Texto data limite

        //                    #endregion

        //                    EntityBase.AppendPreparedField(ref doc, arqCriterio.Ans.PadLeft(6, '0'), 6); //ANS

        //                    //Taxa associativa (tarifa bancaria + taxa de sindicalizacao)
        //                    if (retTvv != null)
        //                        EntityBase.AppendPreparedField(ref doc, (retTvv.ValorBancario + retTvv.ValorSindicalizacao).ToString("N2").Replace(".", "").Replace(",", "").PadLeft(15, '0'), 15);
        //                    else
        //                        EntityBase.AppendPreparedField(ref doc, " ".PadLeft(15, '0'), 15);

        //                    //////////////////////////////////////////////////////////////////////////////////////
        //                    if (!Cobranca.NossoNumeroITAU) //if (carteira == Cobranca.eCarteira.Unibanco)
        //                        EntityBase.AppendPreparedField(ref doc, " ".PadLeft(60, ' '), 60); //reservado
        //                    else
        //                        EntityBase.AppendPreparedField(ref doc, " ".PadLeft(59, ' '), 59); //reservado
        //                    //////////////////////////////////////////////////////////////////////////////////////

        //                    EntityBase.AppendPreparedField(ref doc, String.Format("{0:" + mascara6 + "}", numSequencial), 6);//056

        //                    cob.ArquivoIDUltimoEnvio = arquivo.ID;
        //                    cob.DataCriacao = DateTime.Now;
        //                    pm.Save(cob);

        //                    #endregion
        //                }
        //                catch (Exception ex)
        //                {
        //                    try
        //                    {
        //                        string path = System.Configuration.ConfigurationSettings.AppSettings["financialFilePath"].Replace("/", @"\");
        //                        System.IO.File.WriteAllText(path + "err_" + DateTime.Now.ToString("ddMMyyyyHHmmssfff") + ".txt",
        //                            ex.Message +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + ex.StackTrace +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + Convert.ToString(cob.ID) +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + i.ToString(),
        //                            System.Text.Encoding.ASCII);
        //                    }
        //                    catch { }
        //                    continue;
        //                }
        //            }
        //            #endregion

        //            #region TRAILLER

        //            numSequencial++;
        //            doc.Append(Environment.NewLine);
        //            EntityBase.AppendPreparedField(ref doc, "9", 1);  //142
        //            EntityBase.AppendPreparedField(ref doc, "", 25);  //143
        //            //////////////////////////////////////////////////////////////////////////////////////
        //            if (!Cobranca.NossoNumeroITAU) //if (carteira == Cobranca.eCarteira.Unibanco)
        //                EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C006, 11); //144
        //            else
        //                EntityBase.AppendPreparedField(ref doc, "9108080533".PadLeft(11, ' '), 11);
        //            //////////////////////////////////////////////////////////////////////////////////////
        //            EntityBase.AppendPreparedField(ref doc, "", 334); //145
        //            EntityBase.AppendPreparedField(ref doc, String.Format("{0:" + mascara6 + "}", numSequencial), 6); //146
        //            EntityBase.AppendPreparedField(ref doc, valorTotal.ToString("N2").Replace(".", "").Replace(",", "").PadLeft(17, '0'), 17); //147
        //            EntityBase.AppendPreparedField(ref doc, " ".PadLeft(200, ' '), 200); //148
        //            EntityBase.AppendPreparedField(ref doc, String.Format("{0:" + mascara6 + "}", numSequencial), 6); //149

        //            #endregion

        //            arquivo.SalvaItens(cobrancaIds, pm);

        //            if (_pm == null) { pm.Commit(); } //commit apenas se nao estiver participando de uma transacao externa
        //            arquivoConteudo = doc.ToString();
        //            return arquivoConteudo;
        //        }
        //        catch
        //        {
        //            if (_pm == null) { pm.Rollback(); }
        //            throw;
        //        }
        //        finally
        //        {
        //            if (_pm == null) { pm = null; }
        //        }
        //    }

        //    /// <summary>
        //    /// PRIMEIRA VERSÃO DO MÉTODO
        //    /// </summary>
        //    public static List<SumarioArquivoGeradoVO> GeraDocumentoCobranca_UNIBANCO(IList<Cobranca> cobrancas, ArquivoRemessaAgendamento ara)
        //    {
        //        List<SumarioArquivoGeradoVO> vos = new List<SumarioArquivoGeradoVO>();

        //        //separa as operadoras
        //        List<String> operadoraIDs = new List<String>();
        //        foreach (Cobranca cobranca in cobrancas)
        //        {
        //            if (!operadoraIDs.Contains(cobranca.OperadoraID.ToString()))
        //                operadoraIDs.Add(cobranca.OperadoraID.ToString());
        //        }

        //        //processa os arquivos, um para cada operadora.
        //        foreach (String operadoraId in operadoraIDs)
        //        {
        //            String arquivoNome = "", arquivoConteudo = "", arquivoVersao = "", operadoraNome = "";
        //            Object arquivoId = null;
        //            Int32 qtdCobrancas = 0;

        //            Operadora operadora = new Operadora(operadoraId);
        //            operadora.Carregar();
        //            operadoraNome = operadora.Nome;

        //            List<String> cobrancaIDs = new List<String>();
        //            foreach (Cobranca cobranca in cobrancas)
        //            {
        //                if (cobranca.OperadoraID.ToString() != operadoraId) { continue; }
        //                cobrancaIDs.Add(cobranca.ID.ToString());
        //            }

        //            qtdCobrancas = cobrancaIDs.Count;
        //            GeraDocumentoCobranca_UNIBANCO(cobrancaIDs, ref arquivoNome, ref arquivoConteudo, ref arquivoId, ref arquivoVersao, ara.ID, null);

        //            //armazena na colecao para retorno à UI
        //            SumarioArquivoGeradoVO vo = new SumarioArquivoGeradoVO();
        //            vo.ArquivoConteudo = arquivoConteudo;
        //            vo.ArquivoID = arquivoId;
        //            vo.ArquivoNome = arquivoNome;
        //            vo.ArquivoVersao = arquivoVersao;
        //            vo.OperadoraID = operadoraId;
        //            vo.OperadoraNome = operadora.Nome;
        //            vo.QtdCobrancas = qtdCobrancas;
        //            vos.Add(vo);
        //        }

        //        return vos;
        //    }
        //    /// <summary>
        //    /// PRIMEIRA versão do método.
        //    /// </summary>
        //    internal static String GeraDocumentoCobranca_UNIBANCO(IList<String> cobrancaIDs, ref String arquivoNome, ref String arquivoConteudo, ref Object arquivoId, ref String arquivoVersao, Object agendamentoId, PersistenceManager _pm)
        //    {
        //        PersistenceManager pm = _pm;

        //        if (_pm == null)
        //        {
        //            pm = new PersistenceManager();
        //            pm.BeginTransactionContext();
        //        }

        //        try
        //        {
        //            if (cobrancaIDs == null) { return null; }

        //            //Carrega cobrancas envolvidas
        //            IList<Cobranca> cobrancas = Cobranca.CarregarTodas(cobrancaIDs, pm);
        //            List<Object> cobrancaIds = new List<Object>();
        //            if (cobrancas == null) { return null; }

        //            String dataAgora = DateTime.Now.ToString("ddMMyy");
        //            String versao = "";
        //            StringBuilder doc = new StringBuilder();

        //            Cobranca.eCarteira carteira = (Cobranca.eCarteira)cobrancas[0].Carteira;

        //            #region HEADER

        //            EntityBase.AppendPreparedField(ref doc, "0", 1);
        //            EntityBase.AppendPreparedField(ref doc, "1", 1);
        //            EntityBase.AppendPreparedField(ref doc, "REMESSA", 7);
        //            EntityBase.AppendPreparedField(ref doc, "03", 2);
        //            EntityBase.AppendPreparedField(ref doc, "COBR.  ESPECIAL", 15); //005

        //            //////////////////////////////////////////////////////////////////////////////////////
        //            if (carteira == Cobranca.eCarteira.Unibanco)
        //                EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C006.PadLeft(11, ' '), 11);
        //            else
        //                EntityBase.AppendPreparedField(ref doc, "9108080533".PadLeft(11, ' '), 11);
        //            //////////////////////////////////////////////////////////////////////////////////////

        //            EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C007, 4);//Se utilizado, o 011 é preenchido com zeros. Se 011 é ultilizado, 007 é preenchido com zeros
        //            EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C008, 1);  //008
        //            EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C009, 1);  //009 
        //            EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C010, 1);  //010
        //            EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C011, 7);  //011
        //            EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C012, 2);  //012 ????
        //            EntityBase.AppendPreparedField(ref doc, " ", 41);       //013
        //            EntityBase.AppendPreparedField(ref doc, dataAgora, 6);  //014
        //            EntityBase.AppendPreparedField(ref doc, "01600", 5);    //015
        //            EntityBase.AppendPreparedField(ref doc, "BPI", 3);      //016
        //            EntityBase.AppendPreparedField(ref doc, " ", 116);      //017
        //            EntityBase.AppendPreparedField(ref doc, "0".PadRight(167, '0'), 167); //018

        //            ArquivoCobrancaUnibanco arquivo = new ArquivoCobrancaUnibanco();
        //            arquivo.DataCriacao = DateTime.Now;
        //            versao = ArquivoCobrancaUnibanco.ObtemProximaVersao(pm).ToString().PadLeft(3, '0');
        //            arquivo.Versao = Convert.ToInt32(versao);
        //            arquivo.AgendamentoID = agendamentoId;

        //            arquivoNome = String.Concat(versao, "_", arquivo.DataCriacao.ToString("ddMMyyHHmmffff"), ".txt");

        //            arquivoVersao = versao.PadRight(3, '0');
        //            EntityBase.AppendPreparedField(ref doc, versao, 3);     //019
        //            EntityBase.AppendPreparedField(ref doc, "000001", 6);   //020

        //            #endregion

        //            arquivo.MesReferencia = cobrancas[0].DataVencimento.Month;
        //            arquivo.AnoReferencia = cobrancas[0].DataVencimento.Year;
        //            arquivo.OperadoraID = cobrancas[0].OperadoraID;
        //            arquivo.Nome = arquivoNome;
        //            arquivo.QtdCobrancas = cobrancaIDs.Count;
        //            pm.Save(arquivo);
        //            arquivoId = arquivo.ID;

        //            #region DETAIL

        //            Endereco endereco = null;
        //            Int32 numSequencial = 1, diaDataSemJuros, result = 0;
        //            String mascara6 = new String('0', 6), nossoNumero = "";
        //            Decimal valorTotal = 0, mora = 0, multa = 0;
        //            Object contratoAdmID = null, valorDataLimite = null;
        //            DateTime contratoAdmissao = DateTime.MinValue, vigencia, vencimento, dataLimite = DateTime.MinValue;
        //            CalendarioVencimento rcv = null;

        //            foreach (Cobranca cob in cobrancas)
        //            {
        //                numSequencial++;
        //                cobrancaIds.Add(cob.ID);

        //                #region checa se tem despesa nao embutida com postagem. se tem, incrementa o valor da cobranca:

        //                contratoAdmID = Contrato.CarregaContratoAdmID(cob.PropostaID, pm);
        //                IList<TabelaValor> tabela = TabelaValor.CarregarTabelaAtual(contratoAdmID, pm);
        //                if (tabela != null && tabela.Count > 0)
        //                {
        //                    Taxa taxa = Taxa.CarregarPorTabela(tabela[0].ID, pm);
        //                    tabela = null;
        //                    if (taxa != null && !taxa.Embutido)
        //                    {
        //                        cob.Valor += taxa.ValorEmbutido;
        //                        taxa = null;
        //                    }
        //                }
        //                #endregion

        //                #region data de admissao do contrato

        //                Contrato _contrato = Contrato.CarregarParcial(cob.PropostaID, pm);
        //                if (_contrato != null) { contratoAdmissao = _contrato.Admissao; _contrato = null; }
        //                else { continue; }
        //                #endregion

        //                valorTotal += cob.Valor;
        //                doc.Append(Environment.NewLine);

        //                EntityBase.AppendPreparedField(ref doc, "2", 1); //021

        //                nossoNumero = cob.GeraNossoNumero();
        //                EntityBase.AppendPreparedField(ref doc, nossoNumero, 14); //022
        //                EntityBase.AppendPreparedField(ref doc, cob._CalculaDVMod11(cob.Tipo, cob.ContratoCodCobranca, cob.Parcela), 1); //cob.CalculaDVMod11(nossoNumero), 1); //023 - Depende do 009 ou do 302 (usamos o 009)
        //                EntityBase.AppendPreparedField(ref doc, cob.DataVencimento.ToString("ddMMyy"), 6); //024
        //                EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C025, 4);  //025

        //                //////////////////////////////////////////////////////////////////////////////////////
        //                if (carteira == Cobranca.eCarteira.Unibanco)
        //                    EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C026.PadLeft(11, '0'), 11); //026
        //                else
        //                    EntityBase.AppendPreparedField(ref doc, "9108080533".PadLeft(11, ' '), 11);
        //                //////////////////////////////////////////////////////////////////////////////////////

        //                EntityBase.AppendPreparedField(ref doc, cob.ContratoTitularNome, 30); //027

        //                endereco = new Endereco(cob.ContratoEnderecoCobrancaID);
        //                endereco.Carregar(pm);
        //                if (endereco.CEP.IndexOf('-') > -1) { endereco.CEP = endereco.CEP.Replace("-", ""); }

        //                EntityBase.AppendPreparedField(ref doc, "", 30);              //028
        //                EntityBase.AppendPreparedField(ref doc, endereco.Bairro, 20); //029
        //                EntityBase.AppendPreparedField(ref doc, endereco.Cidade, 20); //030
        //                EntityBase.AppendPreparedField(ref doc, endereco.UF, 2);      //031
        //                EntityBase.AppendPreparedField(ref doc, endereco.CEP.Substring(0, 5), 5); //032
        //                EntityBase.AppendPreparedField(ref doc, endereco.CEP.Substring(5, 3), 3); //033 
        //                EntityBase.AppendPreparedField(ref doc, dataAgora, 6);        //034
        //                EntityBase.AppendPreparedField(ref doc, "", 2);               //035
        //                EntityBase.AppendPreparedField(ref doc, "0000000000", 10);    //036 -- quantidade de moeda - para moeda diferente de REAL
        //                EntityBase.AppendPreparedField(ref doc, cob.Valor.ToString("N2").Replace(".", "").Replace(",", "").PadLeft(15, '0'), 15); //037 -- ???? valor do titulo - como preencher
        //                EntityBase.AppendPreparedField(ref doc, "000000000000000", 15);//038 -- desconto 

        //                mora = Convert.ToDecimal(CobrancaConfig.C039) * cob.Valor;
        //                EntityBase.AppendPreparedField(ref doc, mora.ToString("N2").Replace(",", "").Replace(".", "").PadLeft(12, '0'), 12);   //039 -- juros de mora 

        //                multa = Convert.ToDecimal(CobrancaConfig.MultaPercentual) * cob.Valor;
        //                EntityBase.AppendPreparedField(ref doc, multa.ToString("N2").Replace(",", "").Replace(".", "").PadLeft(12, '0'), 12);   //040 -- multa atraso 
        //                EntityBase.AppendPreparedField(ref doc, "000", 3);             //041 -- num da parcela. deve ser 000 ????
        //                EntityBase.AppendPreparedField(ref doc, " ", 42);              //042
        //                EntityBase.AppendPreparedField(ref doc, cob.ContratoNumero.PadRight(17, ' '), 17); //043 - numero do documento
        //                EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C044a, 1);
        //                EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C044, 6);//044 -- especie documento
        //                EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C045, 2);//045 -- ???? aceite
        //                EntityBase.AppendPreparedField(ref doc, dataAgora, 6);          //046 -- data processamento

        //                //////////////////////////////////////////////////////////////////////////////////////
        //                if (carteira == Cobranca.eCarteira.Unibanco)
        //                    EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C047, 2);//047
        //                else
        //                    EntityBase.AppendPreparedField(ref doc, "20", 2);//047
        //                //////////////////////////////////////////////////////////////////////////////////////

        //                EntityBase.AppendPreparedField(ref doc, "0", 1);                //048 -- ???? indicador do registro de msg
        //                EntityBase.AppendPreparedField(ref doc, cob.DataVencimento.ToString("ddMMyy"), 6); //049 data limite desconto

        //                //CalendarioAdmissaoVigencia.CalculaDatasDeVigenciaEVencimento(contratoAdmID, contratoAdmissao,
        //                //    out vigencia, out vencimento, out diaDataSemJuros, out valorDataLimite, pm);

        //                //if(diaDataSemJuros > -1)
        //                //    dataSemJuros = cob.DataVencimento.AddDays(diaDataSemJuros);
        //                //else
        //                //    dataSemJuros = cob.DataVencimento;
        //                //EntityBase.AppendPreparedField(ref doc, dataSemJuros.ToString("ddMMyy"), 6);//050 -- ???? data para multa

        //                EntityBase.AppendPreparedField(ref doc, cob.DataVencimento.AddDays(1).ToString("ddMMyy"), 6);//050 -- data para multa

        //                EntityBase.AppendPreparedField(ref doc, "0", 1);                   //051 -- prazo de mora diária
        //                EntityBase.AppendPreparedField(ref doc, "0", 1);                   //052 -- codigo de moeda
        //                EntityBase.AppendPreparedField(ref doc, "0".PadRight(18, ' '), 18); //053 -- uso do banco

        //                //contr
        //                if (endereco.Logradouro.Length > 48)
        //                {
        //                    endereco.Logradouro = endereco.Logradouro.Substring(0, 48);
        //                }

        //                endereco.Logradouro += ", " + endereco.Numero;

        //                if (!String.IsNullOrEmpty(endereco.Complemento))
        //                {
        //                    endereco.Logradouro += " " + endereco.Complemento;
        //                }

        //                EntityBase.AppendPreparedField(ref doc, endereco.Logradouro.PadRight(60, ' '), 60); //054

        //                EntityBase.AppendPreparedField(ref doc, " ", 3);                                                 //055
        //                EntityBase.AppendPreparedField(ref doc, String.Format("{0:" + mascara6 + "}", numSequencial), 6);//056

        //                #region  descomentar bloco qdo o biro estiver preparado
        //                //CalendarioAdmissaoVigencia.CalculaDatasDeVigenciaEVencimento(contratoAdmID, cob.DataVencimento,
        //                //    out vigencia, out vencimento, out diaDataSemJuros, out valorDataLimite, out rcv, pm);

        //                //if (valorDataLimite != null)
        //                //{
        //                //    if (Int32.TryParse(Convert.ToString(valorDataLimite), out result))
        //                //    {
        //                //        if (result < cob.DataVencimento.Day)
        //                //        {
        //                //            dataLimite = new DateTime(cob.DataVencimento.AddMonths(1).Year,
        //                //                cob.DataVencimento.AddMonths(1).Month, result);
        //                //        }
        //                //        else
        //                //        {
        //                //            dataLimite = new DateTime(cob.DataVencimento.Year, cob.DataVencimento.Month, result);
        //                //        }

        //                //        EntityBase.AppendPreparedField(ref doc, dataLimite.ToString("ddMMyy"), 6); //data limite calculada
        //                //    }
        //                //    else
        //                //    {
        //                //        EntityBase.AppendPreparedField(ref doc, Convert.ToString(valorDataLimite), 40);
        //                //    }
        //                //}
        //                #endregion

        //                cob.ArquivoIDUltimoEnvio = arquivo.ID;
        //                pm.Save(cob);
        //            }
        //            #endregion

        //            #region TRAILLER

        //            numSequencial++;
        //            doc.Append(Environment.NewLine);
        //            EntityBase.AppendPreparedField(ref doc, "9", 1);  //142
        //            EntityBase.AppendPreparedField(ref doc, "", 25);  //143
        //            //////////////////////////////////////////////////////////////////////////////////////
        //            if (carteira == Cobranca.eCarteira.Unibanco)
        //                EntityBase.AppendPreparedField(ref doc, CobrancaConfig.C006, 11); //144
        //            else
        //                EntityBase.AppendPreparedField(ref doc, "9108080533".PadLeft(11, ' '), 11);
        //            //////////////////////////////////////////////////////////////////////////////////////
        //            EntityBase.AppendPreparedField(ref doc, "", 334); //145
        //            EntityBase.AppendPreparedField(ref doc, String.Format("{0:" + mascara6 + "}", numSequencial), 6); //146
        //            EntityBase.AppendPreparedField(ref doc, valorTotal.ToString("N2").Replace(".", "").Replace(",", "").PadLeft(17, '0'), 17); //147
        //            EntityBase.AppendPreparedField(ref doc, String.Format("{0:" + mascara6 + "}", numSequencial), 6); //148

        //            #endregion

        //            arquivo.SalvaItens(cobrancaIds, pm);

        //            if (_pm == null) { pm.Commit(); }
        //            arquivoConteudo = doc.ToString();
        //            return arquivoConteudo;
        //        }
        //        catch
        //        {
        //            if (_pm == null) { pm.Rollback(); }
        //            throw;
        //        }
        //        finally
        //        {
        //            if (_pm == null) { pm = null; }
        //        }
        //    }

        //    static DateTime CToDateTime(String param6pos, Int32 hora, Int32 minunto, Int32 segundo, Boolean ddMMyy)
        //    {
        //        Int32 dia;
        //        Int32 mes;
        //        Int32 ano;

        //        if (ddMMyy)
        //        {
        //            dia = Convert.ToInt32(param6pos.Substring(0, 2));
        //            mes = Convert.ToInt32(param6pos.Substring(2, 2));
        //            ano = Convert.ToInt32(param6pos.Substring(4, 2));
        //        }
        //        else
        //        {
        //            ano = Convert.ToInt32(param6pos.Substring(0, 2));
        //            mes = Convert.ToInt32(param6pos.Substring(2, 2));
        //            dia = Convert.ToInt32(param6pos.Substring(4, 2));
        //        }

        //        if (ano >= 0 && ano <= 95)
        //            ano = Convert.ToInt32("20" + ano.ToString());
        //        else
        //            ano = Convert.ToInt32("19" + ano.ToString());

        //        DateTime data = new DateTime(ano, mes, dia, hora, minunto, segundo);
        //        return data;
        //    }

        //    public static List<CriticaRetornoVO> ProcessaRetorno(IList<String> linhas, out Int32 titulosProcessados, out Int32 titulosBaixados)
        //    {
        //        PersistenceManager pm = new PersistenceManager();
        //        //pm.BeginTransactionContext();

        //        int i = 0; String linhaAtual = null;

        //        try
        //        {
        //            String codigoRegistro = null, codigoRejeicao = null;
        //            CriticaRetornoVO vo = null;
        //            Cobranca cobranca = null;

        //            List<CriticaRetornoVO> vos = new List<CriticaRetornoVO>();
        //            List<String> idsCobrancas = new List<String>();
        //            Contrato contrato = null;
        //            IList<TabelaValor> tabela = null;
        //            Taxa taxa = null;
        //            EstipulanteTaxa taxaEstipulante = null;

        //            titulosProcessados = linhas.Count - 2;
        //            titulosBaixados = 0;
        //            Boolean dupla = false;

        //            for (i = 0; i < linhas.Count; i++)
        //            {
        //                pm = new PersistenceManager();
        //                pm.BeginTransactionContext();

        //                linhaAtual = linhas[i];

        //                //codigo registro
        //                if (linhaAtual == null || linhaAtual.Trim() == "") { continue; }
        //                codigoRegistro = linhaAtual.Substring(0, 1);
        //                if (codigoRegistro == "0" || codigoRegistro == "9") { continue; } //se é cabecalho ou trailler, ignora

        //                cobranca = new Cobranca();
        //                vo = new CriticaRetornoVO();

        //                //DATA VENCIMENTO
        //                String strDataVencimento = linhaAtual.Substring(146, 6);
        //                vo.DataVencto = CToDateTime(strDataVencimento, 23, 59, 59, true);


        //                //NOSSO NÚMERO - identifica tipo de cobranca, codigo de cobrança e num da parcela
        //                vo.NossoNumero = linhaAtual.Substring(37, 16);
        //                cobranca.LeNossoNumero(vo.NossoNumero);

        //                if (cobranca.Tipo == (int)Cobranca.eTipo.Dupla)
        //                    dupla = true;
        //                else
        //                    dupla = false;

        //                vo.Parcela = cobranca.Parcela.ToString();
        //                vo.PropostaCodCobranca = cobranca.ContratoCodCobranca;
        //                vo.CobrancaTipo = cobranca.Tipo.ToString();

        //                contrato = Contrato.CarregarParcialPorCodCobranca(vo.PropostaCodCobranca, pm);
        //                if (contrato == null)
        //                {
        //                    vo.Status = "Título não localizado";
        //                    vos.Add(vo); continue;
        //                }
        //                cobranca.PropostaID = contrato.ID;

        //                if (contrato.Inativo) { vo.PropostaInativa = true; }

        //                //valores do titulo
        //                vo.Valor = Convert.ToDecimal(linhaAtual.Substring(153, 12), new System.Globalization.CultureInfo("pt-Br")) / 100;
        //                vo.ValorPgto = Convert.ToDecimal(linhaAtual.Substring(254, 12), new System.Globalization.CultureInfo("pt-Br")) / 100;

        //                cobranca = Cobranca.CarregarPor(cobranca.PropostaID, cobranca.Parcela, ((int)Cobranca.eTipo.Indefinido), pm);

        //                if (cobranca != null)
        //                {
        //                    vo.CobrancaID = Convert.ToString(cobranca.ID);
        //                    cobranca.ValorPgto = vo.ValorPgto;
        //                    vo.OperadoraNome = cobranca.OperadoraNome;
        //                    vo.PropostaNumero = cobranca.ContratoNumero;
        //                    if (vo.OperadoraNome != null && vo.OperadoraNome.Length > 30)
        //                        vo.OperadoraNome = vo.OperadoraNome.Substring(0, 30);

        //                    if (idsCobrancas.Contains(vo.CobrancaID)) { vo.EmDuplicidade = true; }
        //                    else { idsCobrancas.Add(vo.CobrancaID); }
        //                }

        //                //checa se foi rejeitado
        //                codigoRejeicao = linhaAtual.Substring(378, 2);
        //                if (codigoRejeicao != "00") // foi rejeitado
        //                {
        //                    vo.CodigoRejeicao = linhaAtual.Substring(378, 2);
        //                    vo.Status = linhaAtual.Substring(378, 2) + " Rejeitado"; //TODO
        //                    vo.PagamentoRejeitado = true;
        //                    vos.Add(vo);
        //                    continue;
        //                }
        //                else
        //                {
        //                    //DATA PAGTO
        //                    String strDataPgto = linhaAtual.Substring(292, 6);
        //                    vo.DataPgto = CToDateTime(strDataPgto, 0, 0, 0, false);
        //                }

        //                if (cobranca == null) //cobranca nao localizada
        //                {
        //                    if (String.IsNullOrEmpty(vo.Status)) { vo.Status = "Título não localizado"; }
        //                    vos.Add(vo); continue;
        //                }
        //                else
        //                {
        //                    cobranca.DataPgto = vo.DataPgto;
        //                    cobranca.ValorPgto = vo.ValorPgto;

        //                    tabela = TabelaValor.CarregarTabelaAtual(contrato.ContratoADMID, pm);
        //                    if (tabela != null)
        //                    {
        //                        taxa = Taxa.CarregarPorTabela(tabela[0].ID, pm);
        //                    }
        //                    else
        //                    {
        //                        taxa = null;
        //                    }

        //                    Decimal valorBruto = vo.ValorPgto;
        //                    if (taxa != null && !taxa.Embutido) { valorBruto -= taxa.ValorEmbutido; }

        //                    //COBRANCA FOI PAGA
        //                    //calcula o valor pago
        //                    if (contrato.CobrarTaxaAssociativa && ((Cobranca.eTipo)cobranca.Tipo) == Cobranca.eTipo.Normal)
        //                    {
        //                        taxaEstipulante = EstipulanteTaxa.CarregarVigente(contrato.EstipulanteID);
        //                        if (taxaEstipulante != null)
        //                        {
        //                            valorBruto -= taxaEstipulante.Valor; //ATENCAO: e se for taxa por vida?
        //                        }
        //                    }

        //                    if (valorBruto < cobranca.Valor)
        //                    {
        //                        vo.ValorMenor = true;
        //                    }

        //                    cobranca.Pago = true;
        //                    if (!dupla) //if (((Cobranca.eTipo)cobranca.Tipo) != Cobranca.eTipo.Dupla)
        //                    {
        //                        cobranca.ValorPgto = valorBruto; //a comissao será paga sobre este valor
        //                        pm.Save(cobranca);
        //                    }
        //                    //se a cobranca é dupla e está paga, baixa tb a cobranca referencia
        //                    else //if (((Cobranca.eTipo)cobranca.Tipo) == Cobranca.eTipo.Dupla)
        //                    {
        //                        Cobranca cobrancaReferencia = Cobranca.CarregarPor(cobranca.PropostaID, (cobranca.Parcela - 1), ((int)Cobranca.eTipo.Indefinido), pm); //new Cobranca(cobranca.CobrancaRefID);
        //                        if (cobrancaReferencia != null)
        //                        {
        //                            cobrancaReferencia.ValorPgto = valorBruto - cobranca.Valor; //o valor pago menos o valor nominal da cobranca mais atual é o valor pago da cobranca mais antiga
        //                            cobrancaReferencia.DataPgto = cobranca.DataPgto;
        //                            cobrancaReferencia.Pago = true;
        //                            pm.Save(cobrancaReferencia);
        //                        }
        //                        else
        //                            cobrancaReferencia = new Cobranca();

        //                        cobranca.ValorPgto = cobranca.Valor;
        //                        cobrancaReferencia.Pago = true;
        //                        pm.Save(cobranca);
        //                    }

        //                    titulosBaixados++;
        //                    vo.Status = "Título baixado";
        //                    vos.Add(vo);
        //                }

        //                pm.Commit();
        //            }

        //            if (titulosBaixados > 0)
        //            {
        //                //LC.Web.PadraoSeguros.Facade.ContratoFacade.Instance.AtribuiStatusAdimplenteOuInadimplente(pm);
        //            }

        //            //pm.Commit();

        //            return vos;
        //        }
        //        catch //(Exception ex)
        //        {
        //            try
        //            {
        //                pm.Rollback();
        //            }
        //            catch { }
        //            throw; //ex;
        //        }
        //        finally
        //        {
        //            pm = null;
        //        }
        //    }



        //    /***************************************************************************************************************/

        //    /// <summary>
        //    /// SEGUNDA VERSÃO DO MÉTODO
        //    /// </summary>
        //    public static List<SumarioArquivoGeradoVO> GeraDocumentoCobranca_BB(IList<Cobranca> cobrancas, IList<ArquivoRemessaAgendamento> aras)
        //    {
        //        List<SumarioArquivoGeradoVO> vos = new List<SumarioArquivoGeradoVO>();

        //        //separa as operadoras
        //        List<String> operadoraIDs = new List<String>();
        //        System.Collections.Hashtable ht = new System.Collections.Hashtable();

        //        PersistenceManager pm = new PersistenceManager();
        //        pm.UseSingleCommandInstance();

        //        //foreach (Cobranca cobranca in cobrancas)
        //        //{
        //        //    if (!operadoraIDs.Contains(cobranca.OperadoraID.ToString()))
        //        //        operadoraIDs.Add(cobranca.OperadoraID.ToString());
        //        //}

        //        pm.CloseSingleCommandInstance();
        //        pm.Dispose();

        //        //processa os arquivos, um para cada operadora.
        //        //foreach (String operadoraId in operadoraIDs)
        //        //{
        //        String arquivoNome = "", arquivoConteudo = "", arquivoVersao = "", operadoraNome = "";
        //        Object arquivoId = null;
        //        Int32 qtdCobrancas = 0;

        //        Operadora operadora = new Operadora(cobrancas[0].OperadoraID); //Operadora operadora = new Operadora(operadoraId);
        //        operadora.Carregar();
        //        operadoraNome = operadora.Nome;

        //        List<String> cobrancaIDs = new List<String>();
        //        foreach (Cobranca cobranca in cobrancas)
        //        {
        //            //if (cobranca.OperadoraID.ToString() != operadoraId) { continue; }
        //            cobrancaIDs.Add(cobranca.ID.ToString());
        //        }

        //        qtdCobrancas = cobrancaIDs.Count;
        //        /////////////GeraDocumentoCobranca_UNIBANCO2(cobrancaIDs, ref arquivoNome, ref arquivoConteudo, ref arquivoId, ref arquivoVersao, aras, null);
        //        GeraDocumentoCobranca_BB(cobrancaIDs, ref arquivoNome, ref arquivoConteudo, ref arquivoId, ref arquivoVersao, aras, null);

        //        //armazena na colecao para retorno à UI
        //        SumarioArquivoGeradoVO vo = new SumarioArquivoGeradoVO();
        //        vo.ArquivoConteudo = arquivoConteudo;
        //        vo.ArquivoID = arquivoId;
        //        vo.ArquivoNome = arquivoNome;
        //        vo.ArquivoVersao = arquivoVersao;
        //        vo.OperadoraID = cobrancas[0].OperadoraID; //operadoraId;
        //        vo.OperadoraNome = operadora.Nome;
        //        vo.QtdCobrancas = qtdCobrancas;
        //        vos.Add(vo);
        //        //}

        //        return vos;
        //    }
        //    /// <summary>
        //    /// SEGUNDA VERSÃO DO MÉTODO
        //    /// </summary>
        //    public static String GeraDocumentoCobranca_BB(IList<String> cobrancaIDs, ref String arquivoNome, ref String arquivoConteudo, ref Object arquivoId, ref String arquivoVersao, IList<ArquivoRemessaAgendamento> aras, PersistenceManager _pm)
        //    {
        //        if (cobrancaIDs == null) { return null; }

        //        Int32 numSequencial = 0;

        //        PersistenceManager pm = _pm;

        //        Int32 contratoadmQualicorpID = Convert.ToInt32(ConfigurationManager.AppSettings["contratoAdmQualicorpIdIncial"]);

        //        if (_pm == null)
        //        {
        //            pm = new PersistenceManager();
        //            pm.IsoLevel = IsolationLevel.ReadUncommitted;
        //            pm.BeginTransactionContext();
        //        }

        //        Cobranca cobprova = new Cobranca(cobrancaIDs[0]);
        //        pm.Load(cobprova);
        //        Contrato contratoprova = new Contrato(cobprova.PropostaID);
        //        pm.Load(contratoprova);

        //        //String agCCDV_itau = "";
        //        String headerCedente = "UBRASP";
        //        string agencia = "05956", agenciadv = "0";
        //        string numcontacorr = "40037".PadLeft(12, '0');
        //        string dvcontacorr = "8";
        //        string cnpj = "49938327000106";

        //        ////////////////////////////////////////////////// Só haverá cedente ubrasp

        //        //agCCDV_itau = "0646042606";    //qualicorp
        //        string numConvenio = Cobranca.ConvenioUBRASP.PadLeft(9, '0'), carteira = "11", variacao = "019";
        //        //////////////////////////////////////////////////

        //        try
        //        {
        //            if (cobrancaIDs == null) { return null; }

        //            String dataAgora = DateTime.Now.ToString("ddMMyy");
        //            String versao = "";
        //            StringBuilder doc = new StringBuilder();

        //            ////Cobranca.eCarteira carteira = (Cobranca.eCarteira)aras[0].Carteira;

        //            if (aras == null)
        //                arquivoNome = "arquivo.dat"; // 
        //            else
        //                arquivoNome = String.Concat(aras[0].ArquivoNome, "_", DateTime.Now.ToString("yyyyMMddHHmmss"), ".dat");  //String.Concat(aras[0].ArquivoNomeInstance, "_", DateTime.Now.ToString("yyyyMMddHHmmss"), ".dat");

        //            #region HEADER -------------------------------------------

        //            EntityBase.AppendPreparedField(ref doc, "001", 3);          //codigo do banco na compensacao
        //            EntityBase.AppendPreparedField(ref doc, "0000", 4);         //lote de serviço
        //            EntityBase.AppendPreparedField(ref doc, "0", 1);            //tipo de registro
        //            EntityBase.AppendPreparedField(ref doc, "         ", 9);    //brancos
        //            EntityBase.AppendPreparedField(ref doc, "2", 1);            //tipo de inscrição - 2 para CNPJ, 1 para CPF
        //            //EntityBase.AppendPreparedField(ref doc, "0".PadLeft(14, '0'), 14);  //CNPJ (ou cpf) //faltou: cnpj
        //            EntityBase.AppendPreparedField(ref doc, cnpj, 14);          //CNPJ (ou cpf) 
        //            EntityBase.AppendPreparedField(ref doc, numConvenio, 9);    //Nùmero do convênio de cobrança BB
        //            EntityBase.AppendPreparedField(ref doc, "0014", 4);         //Cobrança Cedente BB
        //            EntityBase.AppendPreparedField(ref doc, carteira, 2);       //Número da carteira de cobrança BB
        //            EntityBase.AppendPreparedField(ref doc, variacao, 3);       //Número da variação da carteira de cobrança BB
        //            EntityBase.AppendPreparedField(ref doc, "  ", 2);           //Campo reservado BB
        //            EntityBase.AppendPreparedField(ref doc, agencia, 5);        //Agência mantenedora da conta
        //            EntityBase.AppendPreparedField(ref doc, agenciadv, 1);      //Dígito Verificador da Agência
        //            EntityBase.AppendPreparedField(ref doc, numcontacorr, 12);  //Número da Conta Corrente
        //            EntityBase.AppendPreparedField(ref doc, dvcontacorr, 1);    //Dígito Verificador da Conta
        //            EntityBase.AppendPreparedField(ref doc, " ", 1);            //Dígito Verificador da Ag/Conta - Campo não tratado pelo Banco do Brasil. Informar 'branco' (espaço) OU zero.
        //            EntityBase.AppendPreparedField(ref doc, headerCedente.PadRight(30, ' '), 30); //Nome da Empresa
        //            EntityBase.AppendPreparedField(ref doc, "BANCO DO BRASIL S.A.".PadRight(30, ' '), 30); //Nome do Banco
        //            EntityBase.AppendPreparedField(ref doc, " ", 10);           //Uso Exclusivo FEBRABAN / CNAB
        //            EntityBase.AppendPreparedField(ref doc, "1", 1);            //Código Remessa / Retorno - 1=remessa, 2=retorno
        //            EntityBase.AppendPreparedField(ref doc, DateTime.Now.ToString("ddMMyyyy"), 8); //Data de Geração do Arquivo
        //            EntityBase.AppendPreparedField(ref doc, DateTime.Now.ToString("HHmmss"), 6);   //Hora de Geração do Arquivo

        //            //posso usar a propriedade versao da classe...
        //            EntityBase.AppendPreparedField(ref doc, "000000", 6);       //Número Seqüencial do Arquivo

        //            EntityBase.AppendPreparedField(ref doc, "000", 3);          //Nº da Versão do Layout do Arquivo
        //            EntityBase.AppendPreparedField(ref doc, "00000", 5);        //Densidade de Gravação do Arquivo
        //            EntityBase.AppendPreparedField(ref doc, " ".PadRight(20, ' '), 20); //Para Uso Reservado do Banco
        //            EntityBase.AppendPreparedField(ref doc, " ".PadRight(20, ' '), 20); //Para Uso Reservado da Empresa
        //            EntityBase.AppendPreparedField(ref doc, " ".PadRight(29, ' '), 29); //Para Uso Reservado da Empresa

        //            ArquivoCobrancaUnibanco arquivo = new ArquivoCobrancaUnibanco();
        //            arquivo.DataCriacao = DateTime.Now;
        //            versao = ArquivoCobrancaUnibanco.ObtemProximaVersao(pm).ToString().PadLeft(3, '0');
        //            arquivo.Versao = Convert.ToInt32(versao);
        //            arquivo.AgendamentoID = aras[0].ID; // ara.ID; 

        //            ArquivoRemessaCriterio arqCriterio = null; //new ArquivoRemessaCriterio(ara.CriterioID);
        //            //pm.Load(arqCriterio);

        //            //arquivoVersao = versao.PadRight(3, '0');
        //            //EntityBase.AppendPreparedField(ref doc, versao, 3);     //019
        //            //EntityBase.AppendPreparedField(ref doc, " ".PadLeft(200, ' '), 200); //20
        //            //EntityBase.AppendPreparedField(ref doc, "000001", 6);   //021

        //            #endregion

        //            #region HEADER DE LOTE -----------------------------------

        //            doc.Append(Environment.NewLine);
        //            EntityBase.AppendPreparedField(ref doc, "001", 3);          //codigo do banco na compensacao
        //            EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Lote de Serviço
        //            EntityBase.AppendPreparedField(ref doc, "1", 1);            //tipo de registro
        //            EntityBase.AppendPreparedField(ref doc, "R", 1);            //tipo de operação
        //            EntityBase.AppendPreparedField(ref doc, "01", 2);           //tipo de serviço
        //            EntityBase.AppendPreparedField(ref doc, "  ", 2);           //
        //            EntityBase.AppendPreparedField(ref doc, "000", 3);          //Nº da Versão do Layout do Lote - nao criticado pelo banco
        //            EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //            EntityBase.AppendPreparedField(ref doc, "2", 1);            //Tipo de Inscrição da Empresa - 2=CNPJ
        //            EntityBase.AppendPreparedField(ref doc, cnpj.PadLeft(15, '0'), 15);  //CNPJ (ou cpf) //faltou: cnpj

        //            EntityBase.AppendPreparedField(ref doc, numConvenio, 9);    //Nùmero do convênio de cobrança BB
        //            EntityBase.AppendPreparedField(ref doc, "0014", 4);         //Cobrança Cedente BB
        //            EntityBase.AppendPreparedField(ref doc, carteira, 2);       //Número da carteira de cobrança BB
        //            EntityBase.AppendPreparedField(ref doc, variacao, 3);       //Número da variação da carteira de cobrança BB
        //            EntityBase.AppendPreparedField(ref doc, "  ", 2);           //campo que identifica remessa de testes: brancos ou TS
        //            EntityBase.AppendPreparedField(ref doc, agencia, 5);        //Agência mantenedora da conta
        //            EntityBase.AppendPreparedField(ref doc, agenciadv, 1);      //Dígito Verificador da Agência
        //            EntityBase.AppendPreparedField(ref doc, numcontacorr, 12);  //Número da Conta Corrente
        //            EntityBase.AppendPreparedField(ref doc, dvcontacorr, 1);    //Dígito Verificador da Conta
        //            EntityBase.AppendPreparedField(ref doc, " ", 1);            //Dígito Verificador da Ag/Conta - Campo não tratado pelo Banco do Brasil. Informar 'branco' (espaço) OU zero.

        //            EntityBase.AppendPreparedField(ref doc, headerCedente.PadRight(30, ' '), 30); //Nome da Empresa
        //            EntityBase.AppendPreparedField(ref doc, " ".PadRight(40, ' '), 40); //Mensagem 1
        //            EntityBase.AppendPreparedField(ref doc, " ".PadRight(40, ' '), 40); //Mensagem 2
        //            EntityBase.AppendPreparedField(ref doc, "00000000", 8);            //Número Remessa/Retorno 
        //            EntityBase.AppendPreparedField(ref doc, "00000000", 8);            //Data de Gravação Remessa/Retorno - pode ser zeros 
        //            EntityBase.AppendPreparedField(ref doc, "00000000", 8);            //Data do Crédito 
        //            EntityBase.AppendPreparedField(ref doc, " ", 33);           //Uso Exclusivo FEBRABAN/CNAB

        //            #endregion

        //            //Carrega cobrancas envolvidas
        //            IList<Cobranca> cobrancas = Cobranca.CarregarTodas_OrdemPorContratoParcela_Optimized(cobrancaIDs, pm); //
        //            List<Object> cobrancaIds = new List<Object>();
        //            if (cobrancas == null) { return null; }

        //            arquivo.MesReferencia = cobrancas[0].DataVencimento.Month;
        //            arquivo.AnoReferencia = cobrancas[0].DataVencimento.Year;
        //            arquivo.OperadoraID = cobrancas[0].OperadoraID;
        //            arquivo.Nome = arquivoNome;
        //            arquivo.QtdCobrancas = cobrancaIDs.Count;
        //            pm.Save(arquivo); ////////////////////////////////////////////////////////////////////////
        //            arquivoId = arquivo.ID;

        //            List<TabelaValorVencimentoVO> lista = new List<TabelaValorVencimentoVO>();

        //            #region DETAIL -------------------------------------------

        //            Endereco endereco = null;
        //            //, diaDataSemJuros, result = 0, 
        //            int totalRegistrosDetalhe = 0;
        //            String mascara6 = new String('0', 6); //, nossoNumero = "";
        //            Decimal valorTotal = 0; //, mora = 0, multa = 0;
        //            //Object valorDataLimite = null;
        //            DateTime contratoAdmissao = DateTime.MinValue, vigencia, vencimento, dataLimite = DateTime.MinValue;
        //            //CalendarioVencimento rcv = null;
        //            TabelaValorVencimentoVO retTvv = null;
        //            Contrato contrato = null;
        //            IList<TabelaValor> tabela = null; Taxa taxa = null; EstipulanteTaxa estipulanteTaxa = null;
        //            System.Globalization.CultureInfo cinfo = new System.Globalization.CultureInfo("pt-Br");

        //            int qtdTotalBoletos = 0, numBoletoCorrente = 0, idContratoAtual = 0;

        //            int i = 0;

        //            //String[] contratoAdmIds = null;
        //            System.Collections.Hashtable contratoADM_Criterio = new System.Collections.Hashtable();
        //            List<string> parametrosProcessados = new List<string>();
        //            Cobranca _cob = null;

        //            foreach (Cobranca cob in cobrancas)
        //            {
        //                if (parametrosProcessados.Contains(string.Concat(cob.DataVencimento.ToString("ddMMyyyy"), cob.PropostaID))) continue;

        //                parametrosProcessados.Add(string.Concat(cob.DataVencimento.ToString("ddMMyyyy"), cob.PropostaID));

        //                if (cob.ID == null) { continue; }

        //                _cob = null;
        //                _cob = Cobranca.CarregarEnviadasPor(cob.PropostaID, cob.DataVencimento, (int)Cobranca.eTipo.Normal, pm);
        //                if (_cob != null) { continue; }

        //                i++;
        //                try
        //                {
        //                    #region DETAIL P ---------------------------------

        //                    #region

        //                    #region localiza o critério correspondente

        //                    contrato = Contrato.CarregarParcial(cob.PropostaID, pm);

        //                    //if (contratoADM_Criterio.Contains(Convert.ToString(contrato.ContratoADMID)))
        //                    //{
        //                    //    arqCriterio = (ArquivoRemessaCriterio)contratoADM_Criterio[Convert.ToString(contrato.ContratoADMID)];
        //                    //}
        //                    //else
        //                    //{
        //                    //    foreach (ArquivoRemessaAgendamento ara in aras)
        //                    //    {
        //                    //        if (cob.Criterio != null) { break; }

        //                    //        contratoAdmIds = ArquivoRemessaCriterio.CarregarContratoAdmIds(ara.CriterioID, pm); /////

        //                    //        foreach (String contratoAdmId in contratoAdmIds)
        //                    //        {
        //                    //            if (Convert.ToString(contrato.ContratoADMID).Equals(contratoAdmId))
        //                    //            {
        //                    //                ArquivoRemessaCriterio criterio = new ArquivoRemessaCriterio(ara.CriterioID);
        //                    //                pm.Load(criterio);
        //                    //                arqCriterio = criterio;

        //                    //                try
        //                    //                {
        //                    //                    contratoADM_Criterio.Add(contratoAdmId, criterio);
        //                    //                }
        //                    //                catch //(Exception ex)
        //                    //                {
        //                    //                    continue;
        //                    //                }
        //                    //                break;
        //                    //            }
        //                    //        }
        //                    //    }
        //                    //}
        //                    #endregion

        //                    numSequencial++;

        //                    cobrancaIds.Add(cob.ID);

        //                    if (Convert.ToInt32(cob.PropostaID) != idContratoAtual)
        //                    {
        //                        numBoletoCorrente = 0; idContratoAtual = Convert.ToInt32(cob.PropostaID);
        //                        qtdTotalBoletos = 0;
        //                        foreach (Cobranca _temp in cobrancas)
        //                        {
        //                            if (Convert.ToInt32(_temp.PropostaID) == idContratoAtual) { qtdTotalBoletos++; }
        //                            else if (qtdTotalBoletos > 0) { break; }
        //                        }
        //                    }

        //                    numBoletoCorrente++;

        //                    #region checa se tem despesa nao embutida com postagem. se tem, incrementa o valor da cobranca:

        //                    retTvv = TabelaValorVencimentoVO.ExisteProposta(cob.PropostaID, lista);
        //                    if (retTvv == null)
        //                    {
        //                        //contrato = Contrato.CarregarParcial(cob.PropostaID, pm);
        //                        tabela = TabelaValor.CarregarTabelaVigente(contrato.ContratoADMID, contrato.Admissao, cob.DataVencimento, pm);
        //                        if (tabela != null && tabela.Count > 0)
        //                        {
        //                            retTvv = TabelaValorVencimentoVO.ExisteTabela(tabela[0].ID, lista);
        //                            if (retTvv == null)
        //                            {
        //                                taxa = Taxa.CarregarPorTabela(tabela[0].ID, pm);
        //                                if (taxa != null && !taxa.Embutido)
        //                                {
        //                                    cob.Valor += taxa.ValorEmbutido;
        //                                }

        //                                retTvv = new TabelaValorVencimentoVO();
        //                                retTvv.PropostaID = contrato.ID;
        //                                retTvv.TabelaID = tabela[0].ID;
        //                                if (tabela[0].VencimentoFim != DateTime.MinValue)
        //                                { retTvv.Vencimento = tabela[0].VencimentoFim.AddMonths(1); }
        //                                if (taxa != null && !taxa.Embutido)
        //                                { retTvv.ValorBancario = taxa.ValorEmbutido; }

        //                                if (contrato.CobrarTaxaAssociativa)
        //                                {
        //                                    estipulanteTaxa = EstipulanteTaxa.CarregarVigente(contrato.EstipulanteID, pm);
        //                                    if (estipulanteTaxa != null)
        //                                    { retTvv.ValorSindicalizacao = estipulanteTaxa.Valor; }
        //                                }

        //                                lista.Add(retTvv);
        //                                //taxa = null;
        //                            }
        //                            else
        //                                cob.Valor += retTvv.ValorBancario;
        //                        }
        //                    }
        //                    else
        //                        cob.Valor += retTvv.ValorBancario;

        //                    #endregion

        //                    #region data de admissao do contrato

        //                    //Contrato _contrato = Contrato.CarregarParcial(cob.PropostaID, pm);
        //                    if (contrato != null) { contratoAdmissao = contrato.Admissao; }
        //                    else { continue; }
        //                    #endregion

        //                    #endregion

        //                    doc.Append(Environment.NewLine);

        //                    EntityBase.AppendPreparedField(ref doc, "001", 3);          //codigo do banco na compensacao
        //                    EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Lote de Serviço
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //tipo de registro
        //                    EntityBase.AppendPreparedField(ref doc, numSequencial.ToString().PadLeft(5, '0'), 5); //Nº do Registro - 04.3A
        //                    EntityBase.AppendPreparedField(ref doc, "P", 1);            //Código de Segmento do Reg. Detalhe
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "01", 2);           //Código de Movimento Remessa - C004

        //                    //
        //                    EntityBase.AppendPreparedField(ref doc, agencia, 5);        //Agência mantenedora da conta
        //                    EntityBase.AppendPreparedField(ref doc, agenciadv, 1);      //Dígito Verificador da Agência
        //                    EntityBase.AppendPreparedField(ref doc, numcontacorr, 12);  //Número da Conta Corrente
        //                    EntityBase.AppendPreparedField(ref doc, dvcontacorr, 1);    //Dígito Verificador da Conta
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //Dígito Verificador da Ag/Conta - Campo não tratado pelo Banco do Brasil. Informar 'branco' (espaço) OU zero.

        //                    cob.NossoNumero = cob.GeraNossoNumero();
        //                    EntityBase.AppendPreparedField(ref doc, cob.GeraNossoNumero(), 20); //Seu Número
        //                    //EntityBase.AppendPreparedField(ref doc, "0".PadRight(20, '0'), 20); //Seu Número - pos 38

        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);   // Código da carteira 11
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);   // Forma de Cadastr. do Título no Banco - ampo não tratado pelo sistema do Banco do Brasil
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);   // Tipo de documento - campo não tratado pelo sistema do Banco do Brasil

        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);   // Identificação da Emissão do Bloqueto: 1 banco emite, 0 nos emitimos C009 - 17.3P faltou: definir
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);   // Identificação da Destibuição do Bloqueto: 1 banco distribui, 0 nos distribuimos C008 - C010 - 18.3P faltou: definir
        //                    EntityBase.AppendPreparedField(ref doc, Convert.ToString(cob.ID).PadRight(15, ' '), 15); // Número do Documento de Cobrança
        //                    EntityBase.AppendPreparedField(ref doc, cob.DataVencimento.ToString("ddMMyyyy"), 8);  // Data de vencimento - pos 78

        //                    //valor do boleto
        //                    EntityBase.AppendPreparedField(ref doc, cob.Valor.ToString("N2", cinfo).Split(',')[0].Replace(".", "").PadLeft(13, '0'), 13);
        //                    EntityBase.AppendPreparedField(ref doc, cob.Valor.ToString("N2", cinfo).Split(',')[1].PadLeft(2, '0'), 2);


        //                    EntityBase.AppendPreparedField(ref doc, "00000", 5);    //Agência Encarregada da Cobrança
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);        //Dígito Verificador da Agência

        //                    EntityBase.AppendPreparedField(ref doc, "02", 2);        //Espécie do Título - posicao 107
        //                    EntityBase.AppendPreparedField(ref doc, "A", 1);        //dentific. de Título Aceito/Não Aceito 
        //                    EntityBase.AppendPreparedField(ref doc, cob.DataCriacao.ToString("ddMMyyyy"), 8);  // Data de emissão - pos 110
        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);        //Código do Juros de Mora faltou: definir '1'=Valor por Dia '2'=Taxa Mensal '3'=Isento
        //                    EntityBase.AppendPreparedField(ref doc, cob.DataVencimento.AddDays(1).ToString("ddMMyyyy"), 8);  // Data do Juros de Mora - pos 119
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Juros de Mora por Dia/Taxa faltou: definir

        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);        //Código do Desconto 1 - pos 142
        //                    EntityBase.AppendPreparedField(ref doc, "00000000", 8); //Data do Desconto 1  - pos 143
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Desconto 1 Valor/Percentual a ser Concedido 
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Valor do IOF a ser Recolhido
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Valor do Abatimento
        //                    EntityBase.AppendPreparedField(ref doc, Convert.ToString(cob.ID).PadLeft(25, '0'), 25); //Identificação do Título na Empresa - pos 196

        //                    EntityBase.AppendPreparedField(ref doc, "3", 1); //Código para Protesto - 1' – Protestar dias corridos, '2' – Protestar dias úteis, e '3' – Não protestar. faltou: definir - pos 221
        //                    EntityBase.AppendPreparedField(ref doc, "00", 2); //Número de Dias para Protesto - Preencher de acordo com o código informado na posição 221. Para código '1' – é possível, de 6 a 29 dias, 35º, 40º, dia corrido. Para código '2' – é possível, 3º, 4º ou 5º dia útil. Para código '3' preencher com Zeros. faltou: definir
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1); // Código para Baixa/Devolução - não tratado
        //                    EntityBase.AppendPreparedField(ref doc, "000", 3); // Número de Dias para Baixa/Devolução - não tratado
        //                    EntityBase.AppendPreparedField(ref doc, "09", 2); // Código da Moeda - g065
        //                    EntityBase.AppendPreparedField(ref doc, "0000000000", 10); // Nº do Contrato da Operação de Créd.  - não tratado
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1); //Uso Exclusivo FEBRABAN/CNAB 


        //                    #endregion

        //                    #region DETAIL Q ---------------------------------

        //                    doc.Append(Environment.NewLine);

        //                    numSequencial++;

        //                    EntityBase.AppendPreparedField(ref doc, "001", 3);          //codigo do banco na compensacao
        //                    EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Lote de Serviço
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //tipo de registro
        //                    EntityBase.AppendPreparedField(ref doc, numSequencial.ToString().PadLeft(5, '0'), 5); //Nº do Registro - 04.3A
        //                    EntityBase.AppendPreparedField(ref doc, "Q", 1);            //Código de Segmento do Reg. Detalhe
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "01", 2);           //Código de Movimento Remessa - C004 - pos 16

        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);           //Tipo e inscrição - C005
        //                    EntityBase.AppendPreparedField(ref doc, cob.ContratoTitularCPF.PadLeft(15, '0'), 15); //Número de inscrição - C006 - pos 19

        //                    EntityBase.AppendPreparedField(ref doc, cob.ContratoTitularNome, 40); //Nome - C013 - pos 34

        //                    endereco = new Endereco(cob.ContratoEnderecoCobrancaID);
        //                    endereco.Carregar(pm);
        //                    if (endereco.CEP.IndexOf('-') > -1) { endereco.CEP = endereco.CEP.Replace("-", ""); }

        //                    if (endereco.Numero == null) endereco.Numero = "";
        //                    if (string.IsNullOrEmpty(endereco.Complemento))
        //                    {
        //                        int tamanhoDisponivel = 40 - (endereco.Numero.Length + 1);

        //                        if (endereco.Logradouro.Length > tamanhoDisponivel)
        //                        {
        //                            endereco.Logradouro = endereco.Logradouro.Substring(0, tamanhoDisponivel);
        //                        }

        //                        if (!string.IsNullOrEmpty(endereco.Numero))
        //                            endereco.Logradouro += string.Concat(",", endereco.Numero);
        //                    }
        //                    else
        //                    {
        //                        int tamanhoDisponivel = 40 - ((endereco.Numero.Length + 1) + (endereco.Complemento.Length + 1));

        //                        if (endereco.Logradouro.Length > tamanhoDisponivel)
        //                        {
        //                            endereco.Logradouro = endereco.Logradouro.Substring(0, tamanhoDisponivel);
        //                        }

        //                        if (!string.IsNullOrEmpty(endereco.Numero))
        //                            endereco.Logradouro += string.Concat(",", endereco.Numero, ",", endereco.Complemento);
        //                        else
        //                            endereco.Logradouro += string.Concat(",", endereco.Complemento);
        //                    }

        //                    EntityBase.AppendPreparedField(ref doc, endereco.Logradouro, 40); // endereco - pos 74
        //                    EntityBase.AppendPreparedField(ref doc, endereco.Bairro, 15);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.CEP, 8);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.Cidade, 15);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.UF, 2);

        //                    EntityBase.AppendPreparedField(ref doc, "0", 1); //Tipo de Inscrição - pos 154
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Número de Inscrição

        //                    EntityBase.AppendPreparedField(ref doc, " ".PadLeft(40, ' '), 40); //Nome do Sacador/Avalista
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(3, '0'), 3); //Cód. Bco. Corresp. na Compensação - não tratado - pos 210
        //                    EntityBase.AppendPreparedField(ref doc, " ".PadLeft(20, ' '), 20); //Nosso Nº no Banco Correspondente - não tratado
        //                    EntityBase.AppendPreparedField(ref doc, " ".PadLeft(8, ' '), 8); //Uso Exclusivo FEBRABAN/CNAB 

        //                    #region Texto data limite - comentado
        //                    //if (valorDataLimite != null) // && Convert.ToString(valorDataLimite) != "0")
        //                    //{
        //                    //    if (Int32.TryParse(Convert.ToString(valorDataLimite), out result))
        //                    //    {
        //                    //        if (result < cob.DataVencimento.Day)
        //                    //        {
        //                    //            dataLimite = new DateTime(cob.DataVencimento.AddMonths(1).Year,
        //                    //                cob.DataVencimento.AddMonths(1).Month, result);
        //                    //        }
        //                    //        else
        //                    //        {
        //                    //            dataLimite = new DateTime(cob.DataVencimento.Year, cob.DataVencimento.Month, result);
        //                    //        }

        //                    //        EntityBase.AppendPreparedField(ref doc, dataLimite.ToString("dd/MM/yyyy").PadRight(50, ' '), 50); //data limite calculada
        //                    //    }
        //                    //    else
        //                    //    {
        //                    //        EntityBase.AppendPreparedField(ref doc, Convert.ToString(valorDataLimite).PadRight(50, ' '), 50);
        //                    //    }
        //                    //}
        //                    //else
        //                    //    EntityBase.AppendPreparedField(ref doc, " ".PadRight(50, ' '), 50);  //Texto data limite

        //                    #endregion

        //                    cob.Carteira = Convert.ToInt32(carteira);
        //                    cob.ArquivoIDUltimoEnvio = arquivo.ID;
        //                    cob.DataCriacao = DateTime.Now;
        //                    cob.Carteira = 11;
        //                    pm.Save(cob); /////////////////////////////////////////////////////////////////////////////////

        //                    #endregion

        //                    totalRegistrosDetalhe++;
        //                    valorTotal += cob.Valor;
        //                }
        //                catch (Exception ex)
        //                {
        //                    try
        //                    {
        //                        string path = System.Configuration.ConfigurationManager.AppSettings["financialFilePath"].Replace("/", @"\");
        //                        System.IO.File.WriteAllText(path + "err_" + DateTime.Now.ToString("ddMMyyyyHHmmssfff") + ".txt",
        //                            ex.Message +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + ex.StackTrace +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + Convert.ToString(cob.ID) +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + i.ToString(),
        //                            System.Text.Encoding.ASCII);
        //                    }
        //                    catch { }
        //                    continue;
        //                }

        //                //numSequencial++;
        //            }
        //            #endregion

        //            #region TRAILLER DE LOTE ---------------------------------

        //            doc.Append(Environment.NewLine);

        //            EntityBase.AppendPreparedField(ref doc, "001", 3);
        //            EntityBase.AppendPreparedField(ref doc, "0001", 4);
        //            EntityBase.AppendPreparedField(ref doc, "5", 1);
        //            EntityBase.AppendPreparedField(ref doc, " ", 9);
        //            EntityBase.AppendPreparedField(ref doc, (numSequencial + 2).ToString().PadLeft(6, '0'), 6);
        //            EntityBase.AppendPreparedField(ref doc, " ", 217);

        //            #endregion

        //            #region TRAILLER -----------------------------------------

        //            doc.Append(Environment.NewLine);

        //            EntityBase.AppendPreparedField(ref doc, "001", 3);
        //            EntityBase.AppendPreparedField(ref doc, "9999", 4);
        //            EntityBase.AppendPreparedField(ref doc, "9", 1);
        //            EntityBase.AppendPreparedField(ref doc, " ", 9); //branco
        //            EntityBase.AppendPreparedField(ref doc, "1".PadLeft(6, '0'), 6); //qtd de lotes
        //            EntityBase.AppendPreparedField(ref doc, (numSequencial + 4).ToString().PadLeft(6, '0'), 6);
        //            EntityBase.AppendPreparedField(ref doc, "0".PadLeft(6, '0'), 6); //Qtde de Contas p/ Conc. (Lotes)
        //            EntityBase.AppendPreparedField(ref doc, " ", 205); //

        //            //EntityBase.AppendPreparedField(ref doc, "", 334); //145
        //            //EntityBase.AppendPreparedField(ref doc, String.Format("{0:" + mascara6 + "}", numSequencial), 6); //146
        //            //EntityBase.AppendPreparedField(ref doc, valorTotal.ToString("N2").Replace(".", "").Replace(",", "").PadLeft(17, '0'), 17); //147
        //            //EntityBase.AppendPreparedField(ref doc, " ".PadLeft(200, ' '), 200); //148
        //            //EntityBase.AppendPreparedField(ref doc, String.Format("{0:" + mascara6 + "}", numSequencial), 6); //149

        //            #endregion

        //            arquivo.SalvaItens(cobrancaIds, pm);

        //            if (_pm == null) { pm.Commit(); } //commit apenas se nao estiver participando de uma transacao externa
        //            arquivoConteudo = doc.ToString();
        //            return arquivoConteudo;
        //        }
        //        catch
        //        {
        //            if (_pm == null) { pm.Rollback(); }
        //            throw;
        //        }
        //        finally
        //        {
        //            if (_pm == null) { pm = null; }
        //        }
        //    }

        //    public static String GeraDocumentoCobranca_BB(string cobrancaId, PersistenceManager _pm)
        //    {
        //        Int32 numSequencial = 0;

        //        PersistenceManager pm = _pm;

        //        Int32 contratoadmQualicorpID = Convert.ToInt32(ConfigurationManager.AppSettings["contratoAdmQualicorpIdIncial"]);

        //        if (_pm == null)
        //        {
        //            pm = new PersistenceManager();
        //            pm.IsoLevel = IsolationLevel.ReadUncommitted;
        //            pm.BeginTransactionContext();
        //        }

        //        Cobranca cobprova = new Cobranca(cobrancaId);
        //        pm.Load(cobprova);
        //        Contrato contratoprova = new Contrato(cobprova.PropostaID);
        //        pm.Load(contratoprova);

        //        //String agCCDV_itau = "";
        //        String headerCedente = "UBRASP";
        //        string agencia = "05956", agenciadv = "0";
        //        string numcontacorr = "40037".PadLeft(12, '0');
        //        string dvcontacorr = "8";
        //        string cnpj = "49938327000106"; //

        //        ////////////////////////////////////////////////// Só haverá cedente ubrasp

        //        //agCCDV_itau = "0646042606";    //qualicorp
        //        string numConvenio = Cobranca.ConvenioUBRASP.PadLeft(9, '0'), carteira = "11", variacao = "019";
        //        //////////////////////////////////////////////////

        //        try
        //        {
        //            if (cobrancaId == null) { return null; }

        //            String dataAgora = DateTime.Now.ToString("ddMMyy");
        //            StringBuilder doc = new StringBuilder();

        //            ////Cobranca.eCarteira carteira = (Cobranca.eCarteira)aras[0].Carteira;

        //            #region HEADER -------------------------------------------

        //            EntityBase.AppendPreparedField(ref doc, "001", 3);          //codigo do banco na compensacao
        //            EntityBase.AppendPreparedField(ref doc, "0000", 4);         //lote de serviço
        //            EntityBase.AppendPreparedField(ref doc, "0", 1);            //tipo de registro
        //            EntityBase.AppendPreparedField(ref doc, "         ", 9);    //brancos
        //            EntityBase.AppendPreparedField(ref doc, "2", 1);            //tipo de inscrição - 2 para CNPJ, 1 para CPF
        //            //EntityBase.AppendPreparedField(ref doc, "0".PadLeft(14, '0'), 14);  //CNPJ (ou cpf) //faltou: cnpj
        //            EntityBase.AppendPreparedField(ref doc, cnpj, 14);          //CNPJ (ou cpf) 
        //            EntityBase.AppendPreparedField(ref doc, numConvenio, 9);    //Nùmero do convênio de cobrança BB
        //            EntityBase.AppendPreparedField(ref doc, "0014", 4);         //Cobrança Cedente BB
        //            EntityBase.AppendPreparedField(ref doc, carteira, 2);       //Número da carteira de cobrança BB - pos.46
        //            EntityBase.AppendPreparedField(ref doc, variacao, 3);       //Número da variação da carteira de cobrança BB
        //            EntityBase.AppendPreparedField(ref doc, "  ", 2);           //Campo reservado BB
        //            EntityBase.AppendPreparedField(ref doc, agencia, 5);        //Agência mantenedora da conta
        //            EntityBase.AppendPreparedField(ref doc, agenciadv, 1);      //Dígito Verificador da Agência
        //            EntityBase.AppendPreparedField(ref doc, numcontacorr, 12);  //Número da Conta Corrente
        //            EntityBase.AppendPreparedField(ref doc, dvcontacorr, 1);    //Dígito Verificador da Conta
        //            EntityBase.AppendPreparedField(ref doc, " ", 1);            //Dígito Verificador da Ag/Conta - Campo não tratado pelo Banco do Brasil. Informar 'branco' (espaço) OU zero.
        //            EntityBase.AppendPreparedField(ref doc, headerCedente.PadRight(30, ' '), 30); //Nome da Empresa
        //            EntityBase.AppendPreparedField(ref doc, "BANCO DO BRASIL S.A.".PadRight(30, ' '), 30); //Nome do Banco
        //            EntityBase.AppendPreparedField(ref doc, " ", 10);           //Uso Exclusivo FEBRABAN / CNAB
        //            EntityBase.AppendPreparedField(ref doc, "1", 1);            //Código Remessa / Retorno - 1=remessa, 2=retorno
        //            EntityBase.AppendPreparedField(ref doc, DateTime.Now.ToString("ddMMyyyy"), 8); //Data de Geração do Arquivo
        //            EntityBase.AppendPreparedField(ref doc, DateTime.Now.ToString("HHmmss"), 6);   //Hora de Geração do Arquivo

        //            //posso usar a propriedade versao da classe...
        //            EntityBase.AppendPreparedField(ref doc, "000000", 6);       //Número Seqüencial do Arquivo

        //            EntityBase.AppendPreparedField(ref doc, "000", 3);          //Nº da Versão do Layout do Arquivo
        //            EntityBase.AppendPreparedField(ref doc, "00000", 5);        //Densidade de Gravação do Arquivo
        //            EntityBase.AppendPreparedField(ref doc, " ".PadRight(20, ' '), 20); //Para Uso Reservado do Banco
        //            EntityBase.AppendPreparedField(ref doc, " ".PadRight(20, ' '), 20); //Para Uso Reservado da Empresa
        //            EntityBase.AppendPreparedField(ref doc, " ".PadRight(29, ' '), 29); //Para Uso Reservado da Empresa

        //            #endregion

        //            #region HEADER DE LOTE -----------------------------------

        //            doc.Append(Environment.NewLine);
        //            EntityBase.AppendPreparedField(ref doc, "001", 3);          //codigo do banco na compensacao
        //            EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Lote de Serviço
        //            EntityBase.AppendPreparedField(ref doc, "1", 1);            //tipo de registro
        //            EntityBase.AppendPreparedField(ref doc, "R", 1);            //tipo de operação
        //            EntityBase.AppendPreparedField(ref doc, "01", 2);           //tipo de serviço
        //            EntityBase.AppendPreparedField(ref doc, "  ", 2);           //
        //            EntityBase.AppendPreparedField(ref doc, "000", 3);          //Nº da Versão do Layout do Lote - nao criticado pelo banco
        //            EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //            EntityBase.AppendPreparedField(ref doc, "2", 1);            //Tipo de Inscrição da Empresa - 2=CNPJ
        //            EntityBase.AppendPreparedField(ref doc, cnpj.PadLeft(15, '0'), 15);  //CNPJ (ou cpf) //faltou: cnpj

        //            EntityBase.AppendPreparedField(ref doc, numConvenio, 9);    //Nùmero do convênio de cobrança BB
        //            EntityBase.AppendPreparedField(ref doc, "0014", 4);         //Cobrança Cedente BB
        //            EntityBase.AppendPreparedField(ref doc, carteira, 2);       //Número da carteira de cobrança BB
        //            EntityBase.AppendPreparedField(ref doc, variacao, 3);       //Número da variação da carteira de cobrança BB
        //            EntityBase.AppendPreparedField(ref doc, "  ", 2);           //campo que identifica remessa de testes: brancos ou TS
        //            EntityBase.AppendPreparedField(ref doc, agencia, 5);        //Agência mantenedora da conta
        //            EntityBase.AppendPreparedField(ref doc, agenciadv, 1);      //Dígito Verificador da Agência
        //            EntityBase.AppendPreparedField(ref doc, numcontacorr, 12);  //Número da Conta Corrente
        //            EntityBase.AppendPreparedField(ref doc, dvcontacorr, 1);    //Dígito Verificador da Conta
        //            EntityBase.AppendPreparedField(ref doc, " ", 1);            //Dígito Verificador da Ag/Conta - Campo não tratado pelo Banco do Brasil. Informar 'branco' (espaço) OU zero.

        //            EntityBase.AppendPreparedField(ref doc, headerCedente.PadRight(30, ' '), 30); //Nome da Empresa
        //            EntityBase.AppendPreparedField(ref doc, " ".PadRight(40, ' '), 40); //Mensagem 1
        //            EntityBase.AppendPreparedField(ref doc, " ".PadRight(40, ' '), 40); //Mensagem 2
        //            EntityBase.AppendPreparedField(ref doc, "00000000", 8);            //Número Remessa/Retorno 
        //            EntityBase.AppendPreparedField(ref doc, "00000000", 8);            //Data de Gravação Remessa/Retorno - pode ser zeros 
        //            EntityBase.AppendPreparedField(ref doc, "00000000", 8);            //Data do Crédito 
        //            EntityBase.AppendPreparedField(ref doc, " ", 33);           //Uso Exclusivo FEBRABAN/CNAB

        //            #endregion

        //            //Carrega cobrancas envolvidas
        //            List<string> cobrancaIDs = new List<string>(); cobrancaIDs.Add(cobrancaId);
        //            IList<Cobranca> cobrancas = Cobranca.CarregarTodas_OrdemPorContratoParcela_Optimized(cobrancaIDs, pm); //
        //            List<Object> cobrancaIds = new List<Object>();
        //            if (cobrancas == null) { return null; }

        //            List<TabelaValorVencimentoVO> lista = new List<TabelaValorVencimentoVO>();

        //            #region DETAIL -------------------------------------------

        //            Endereco endereco = null;
        //            //, diaDataSemJuros, result = 0, 
        //            int totalRegistrosDetalhe = 0;
        //            String mascara6 = new String('0', 6); //, nossoNumero = "";
        //            Decimal valorTotal = 0; //, mora = 0, multa = 0;
        //            //Object valorDataLimite = null;
        //            DateTime contratoAdmissao = DateTime.MinValue, vigencia, vencimento, dataLimite = DateTime.MinValue;
        //            //CalendarioVencimento rcv = null;
        //            TabelaValorVencimentoVO retTvv = null;
        //            Contrato contrato = null;
        //            IList<TabelaValor> tabela = null; Taxa taxa = null; EstipulanteTaxa estipulanteTaxa = null;
        //            System.Globalization.CultureInfo cinfo = new System.Globalization.CultureInfo("pt-Br");

        //            int qtdTotalBoletos = 0, numBoletoCorrente = 0, idContratoAtual = 0;

        //            int i = 0;

        //            //String[] contratoAdmIds = null;
        //            System.Collections.Hashtable contratoADM_Criterio = new System.Collections.Hashtable();
        //            List<string> parametrosProcessados = new List<string>();

        //            foreach (Cobranca cob in cobrancas)
        //            {
        //                if (parametrosProcessados.Contains(string.Concat(cob.DataVencimento.ToString("ddMMyyyy"), cob.PropostaID))) continue;

        //                parametrosProcessados.Add(string.Concat(cob.DataVencimento.ToString("ddMMyyyy"), cob.PropostaID));

        //                i++;
        //                try
        //                {
        //                    #region DETAIL P ---------------------------------

        //                    #region

        //                    #region localiza o critério correspondente

        //                    contrato = Contrato.CarregarParcial(cob.PropostaID, pm);

        //                    #endregion

        //                    numSequencial++;

        //                    cobrancaIds.Add(cob.ID);

        //                    if (Convert.ToInt32(cob.PropostaID) != idContratoAtual)
        //                    {
        //                        numBoletoCorrente = 0; idContratoAtual = Convert.ToInt32(cob.PropostaID);
        //                        qtdTotalBoletos = 0;
        //                        foreach (Cobranca _temp in cobrancas)
        //                        {
        //                            if (Convert.ToInt32(_temp.PropostaID) == idContratoAtual) { qtdTotalBoletos++; }
        //                            else if (qtdTotalBoletos > 0) { break; }
        //                        }
        //                    }

        //                    numBoletoCorrente++;

        //                    #region checa se tem despesa nao embutida com postagem. se tem, incrementa o valor da cobranca:

        //                    retTvv = TabelaValorVencimentoVO.ExisteProposta(cob.PropostaID, lista);
        //                    if (retTvv == null)
        //                    {
        //                        //contrato = Contrato.CarregarParcial(cob.PropostaID, pm);
        //                        tabela = TabelaValor.CarregarTabelaVigente(contrato.ContratoADMID, contrato.Admissao, cob.DataVencimento, pm);
        //                        if (tabela != null && tabela.Count > 0)
        //                        {
        //                            retTvv = TabelaValorVencimentoVO.ExisteTabela(tabela[0].ID, lista);
        //                            if (retTvv == null)
        //                            {
        //                                taxa = Taxa.CarregarPorTabela(tabela[0].ID, pm);
        //                                if (taxa != null && !taxa.Embutido)
        //                                {
        //                                    cob.Valor += taxa.ValorEmbutido;
        //                                }

        //                                retTvv = new TabelaValorVencimentoVO();
        //                                retTvv.PropostaID = contrato.ID;
        //                                retTvv.TabelaID = tabela[0].ID;
        //                                if (tabela[0].VencimentoFim != DateTime.MinValue)
        //                                { retTvv.Vencimento = tabela[0].VencimentoFim.AddMonths(1); }
        //                                if (taxa != null && !taxa.Embutido)
        //                                { retTvv.ValorBancario = taxa.ValorEmbutido; }

        //                                if (contrato.CobrarTaxaAssociativa)
        //                                {
        //                                    estipulanteTaxa = EstipulanteTaxa.CarregarVigente(contrato.EstipulanteID, pm);
        //                                    if (estipulanteTaxa != null)
        //                                    { retTvv.ValorSindicalizacao = estipulanteTaxa.Valor; }
        //                                }

        //                                lista.Add(retTvv);
        //                                //taxa = null;
        //                            }
        //                            else
        //                                cob.Valor += retTvv.ValorBancario;
        //                        }
        //                    }
        //                    else
        //                        cob.Valor += retTvv.ValorBancario;

        //                    #endregion

        //                    #region data de admissao do contrato

        //                    //Contrato _contrato = Contrato.CarregarParcial(cob.PropostaID, pm);
        //                    if (contrato != null) { contratoAdmissao = contrato.Admissao; }
        //                    else { continue; }
        //                    #endregion

        //                    #endregion

        //                    doc.Append(Environment.NewLine);

        //                    EntityBase.AppendPreparedField(ref doc, "001", 3);          //codigo do banco na compensacao
        //                    EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Lote de Serviço
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //tipo de registro
        //                    EntityBase.AppendPreparedField(ref doc, numSequencial.ToString().PadLeft(5, '0'), 5); //Nº do Registro - 04.3A
        //                    EntityBase.AppendPreparedField(ref doc, "P", 1);            //Código de Segmento do Reg. Detalhe
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "01", 2);           //Código de Movimento Remessa - C004

        //                    //
        //                    EntityBase.AppendPreparedField(ref doc, agencia, 5);        //Agência mantenedora da conta
        //                    EntityBase.AppendPreparedField(ref doc, agenciadv, 1);      //Dígito Verificador da Agência
        //                    EntityBase.AppendPreparedField(ref doc, numcontacorr, 12);  //Número da Conta Corrente
        //                    EntityBase.AppendPreparedField(ref doc, dvcontacorr, 1);    //Dígito Verificador da Conta
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //Dígito Verificador da Ag/Conta - Campo não tratado pelo Banco do Brasil. Informar 'branco' (espaço) OU zero.

        //                    cob.NossoNumero = cob.GeraNossoNumero();
        //                    EntityBase.AppendPreparedField(ref doc, cob.NossoNumero, 20); //Seu Número
        //                    //EntityBase.AppendPreparedField(ref doc, "0".PadRight(20, '0'), 20); //Seu Número - pos 38

        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);   // Código da carteira 11
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);   // Forma de Cadastr. do Título no Banco - ampo não tratado pelo sistema do Banco do Brasil
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);   // Tipo de documento - campo não tratado pelo sistema do Banco do Brasil

        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);   // Identificação da Emissão do Bloqueto: 1 banco emite, 0 nos emitimos C009 - 17.3P faltou: definir
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);   // Identificação da Destibuição do Bloqueto: 1 banco distribui, 0 nos distribuimos C008 - C010 - 18.3P faltou: definir
        //                    EntityBase.AppendPreparedField(ref doc, Convert.ToString(cob.ID).PadRight(15, ' '), 15); // Número do Documento de Cobrança
        //                    EntityBase.AppendPreparedField(ref doc, cob.DataVencimento.ToString("ddMMyyyy"), 8);  // Data de vencimento - pos 78

        //                    //valor do boleto
        //                    EntityBase.AppendPreparedField(ref doc, cob.Valor.ToString("N2", cinfo).Split(',')[0].Replace(".", "").PadLeft(13, '0'), 13);
        //                    EntityBase.AppendPreparedField(ref doc, cob.Valor.ToString("N2", cinfo).Split(',')[1].PadLeft(2, '0'), 2);


        //                    EntityBase.AppendPreparedField(ref doc, "00000", 5);    //Agência Encarregada da Cobrança
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);        //Dígito Verificador da Agência

        //                    EntityBase.AppendPreparedField(ref doc, "02", 2);        //Espécie do Título - posicao 107
        //                    EntityBase.AppendPreparedField(ref doc, "A", 1);        //dentific. de Título Aceito/Não Aceito 
        //                    EntityBase.AppendPreparedField(ref doc, cob.DataCriacao.ToString("ddMMyyyy"), 8);  // Data de emissão - pos 110
        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);        //Código do Juros de Mora faltou: definir '1'=Valor por Dia '2'=Taxa Mensal '3'=Isento
        //                    EntityBase.AppendPreparedField(ref doc, cob.DataVencimento.AddDays(1).ToString("ddMMyyyy"), 8);  // Data do Juros de Mora - pos 119
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Juros de Mora por Dia/Taxa faltou: definir

        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);        //Código do Desconto 1 - pos 142
        //                    EntityBase.AppendPreparedField(ref doc, "00000000", 8); //Data do Desconto 1  - pos 143
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Desconto 1 Valor/Percentual a ser Concedido 
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Valor do IOF a ser Recolhido
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Valor do Abatimento
        //                    EntityBase.AppendPreparedField(ref doc, Convert.ToString(cob.ID).PadLeft(25, '0'), 25); //Identificação do Título na Empresa - pos 196

        //                    EntityBase.AppendPreparedField(ref doc, "3", 1); //Código para Protesto - 1' – Protestar dias corridos, '2' – Protestar dias úteis, e '3' – Não protestar. faltou: definir - pos 221
        //                    EntityBase.AppendPreparedField(ref doc, "00", 2); //Número de Dias para Protesto - Preencher de acordo com o código informado na posição 221. Para código '1' – é possível, de 6 a 29 dias, 35º, 40º, dia corrido. Para código '2' – é possível, 3º, 4º ou 5º dia útil. Para código '3' preencher com Zeros. faltou: definir
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1); // Código para Baixa/Devolução - não tratado
        //                    EntityBase.AppendPreparedField(ref doc, "000", 3); // Número de Dias para Baixa/Devolução - não tratado
        //                    EntityBase.AppendPreparedField(ref doc, "09", 2); // Código da Moeda - g065
        //                    EntityBase.AppendPreparedField(ref doc, "0000000000", 10); // Nº do Contrato da Operação de Créd.  - não tratado
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1); //Uso Exclusivo FEBRABAN/CNAB 


        //                    #endregion

        //                    #region DETAIL Q ---------------------------------

        //                    doc.Append(Environment.NewLine);

        //                    numSequencial++;

        //                    EntityBase.AppendPreparedField(ref doc, "001", 3);          //codigo do banco na compensacao
        //                    EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Lote de Serviço
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //tipo de registro
        //                    EntityBase.AppendPreparedField(ref doc, numSequencial.ToString().PadLeft(5, '0'), 5); //Nº do Registro - 04.3A
        //                    EntityBase.AppendPreparedField(ref doc, "Q", 1);            //Código de Segmento do Reg. Detalhe
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "01", 2);           //Código de Movimento Remessa - C004 - pos 16

        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);           //Tipo e inscrição - C005
        //                    EntityBase.AppendPreparedField(ref doc, cob.ContratoTitularCPF.PadLeft(15, '0'), 15); //Número de inscrição - C006 - pos 19

        //                    EntityBase.AppendPreparedField(ref doc, cob.ContratoTitularNome, 40); //Nome - C013 - pos 34

        //                    endereco = new Endereco(cob.ContratoEnderecoCobrancaID);
        //                    endereco.Carregar(pm);
        //                    if (endereco.CEP.IndexOf('-') > -1) { endereco.CEP = endereco.CEP.Replace("-", ""); }

        //                    if (endereco.Numero == null) endereco.Numero = "";
        //                    if (string.IsNullOrEmpty(endereco.Complemento))
        //                    {
        //                        int tamanhoDisponivel = 40 - (endereco.Numero.Length + 1);

        //                        if (endereco.Logradouro.Length > tamanhoDisponivel)
        //                        {
        //                            endereco.Logradouro = endereco.Logradouro.Substring(0, tamanhoDisponivel);
        //                        }

        //                        if (!string.IsNullOrEmpty(endereco.Numero))
        //                            endereco.Logradouro += string.Concat(",", endereco.Numero);
        //                    }
        //                    else
        //                    {
        //                        int tamanhoDisponivel = 40 - ((endereco.Numero.Length + 1) + (endereco.Complemento.Length + 1));

        //                        if (endereco.Logradouro.Length > tamanhoDisponivel)
        //                        {
        //                            endereco.Logradouro = endereco.Logradouro.Substring(0, tamanhoDisponivel);
        //                        }

        //                        if (!string.IsNullOrEmpty(endereco.Numero))
        //                            endereco.Logradouro += string.Concat(",", endereco.Numero, ",", endereco.Complemento);
        //                        else
        //                            endereco.Logradouro += string.Concat(",", endereco.Complemento);
        //                    }

        //                    EntityBase.AppendPreparedField(ref doc, endereco.Logradouro, 40); // endereco - pos 74
        //                    EntityBase.AppendPreparedField(ref doc, endereco.Bairro, 15);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.CEP, 8);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.Cidade, 15);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.UF, 2);

        //                    EntityBase.AppendPreparedField(ref doc, "0", 1); //Tipo de Inscrição - pos 154
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Número de Inscrição

        //                    EntityBase.AppendPreparedField(ref doc, " ".PadLeft(40, ' '), 40); //Nome do Sacador/Avalista
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(3, '0'), 3); //Cód. Bco. Corresp. na Compensação - não tratado - pos 210
        //                    EntityBase.AppendPreparedField(ref doc, " ".PadLeft(20, ' '), 20); //Nosso Nº no Banco Correspondente - não tratado
        //                    EntityBase.AppendPreparedField(ref doc, " ".PadLeft(8, ' '), 8); //Uso Exclusivo FEBRABAN/CNAB 

        //                    #endregion

        //                    totalRegistrosDetalhe++;
        //                    valorTotal += cob.Valor;

        //                    cob.Carteira = Convert.ToInt32(carteira);
        //                    cob.ArquivoIDUltimoEnvio = -10;
        //                    pm.Save(cob);
        //                }
        //                catch (Exception ex)
        //                {
        //                    try
        //                    {
        //                        string path = System.Configuration.ConfigurationManager.AppSettings["financialFilePath"].Replace("/", @"\");
        //                        System.IO.File.WriteAllText(path + "err_" + DateTime.Now.ToString("ddMMyyyyHHmmssfff") + ".txt",
        //                            ex.Message +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + ex.StackTrace +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + Convert.ToString(cob.ID) +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + i.ToString(),
        //                            System.Text.Encoding.ASCII);
        //                    }
        //                    catch { }
        //                    continue;
        //                }
        //            }
        //            #endregion

        //            #region TRAILLER DE LOTE ---------------------------------

        //            doc.Append(Environment.NewLine);

        //            EntityBase.AppendPreparedField(ref doc, "001", 3);
        //            EntityBase.AppendPreparedField(ref doc, "0001", 4);
        //            EntityBase.AppendPreparedField(ref doc, "5", 1);
        //            EntityBase.AppendPreparedField(ref doc, " ", 9);
        //            EntityBase.AppendPreparedField(ref doc, (numSequencial + 2).ToString().PadLeft(6, '0'), 6);
        //            EntityBase.AppendPreparedField(ref doc, " ", 217);

        //            #endregion

        //            #region TRAILLER -----------------------------------------

        //            doc.Append(Environment.NewLine);

        //            EntityBase.AppendPreparedField(ref doc, "001", 3);
        //            EntityBase.AppendPreparedField(ref doc, "9999", 4);
        //            EntityBase.AppendPreparedField(ref doc, "9", 1);
        //            EntityBase.AppendPreparedField(ref doc, " ", 9); //branco
        //            EntityBase.AppendPreparedField(ref doc, "1".PadLeft(6, '0'), 6); //qtd de lotes
        //            EntityBase.AppendPreparedField(ref doc, (numSequencial + 4).ToString().PadLeft(6, '0'), 6);
        //            EntityBase.AppendPreparedField(ref doc, "0".PadLeft(6, '0'), 6); //Qtde de Contas p/ Conc. (Lotes)
        //            EntityBase.AppendPreparedField(ref doc, " ", 205); //

        //            #endregion

        //            if (_pm == null) { pm.Commit(); } //se não está partcipando de uma transacao externa, comita
        //            return doc.ToString();
        //        }
        //        catch
        //        {
        //            if (_pm == null) { pm.Rollback(); }
        //            throw;
        //        }
        //        finally
        //        {
        //            if (_pm == null) { pm = null; }
        //        }
        //    }

        //    public static String GeraDocumentoCobranca_BB_Test(string cobrancaId, PersistenceManager _pm)
        //    {
        //        Int32 numSequencial = 0;

        //        PersistenceManager pm = _pm;

        //        Int32 contratoadmQualicorpID = Convert.ToInt32(ConfigurationManager.AppSettings["contratoAdmQualicorpIdIncial"]);

        //        if (_pm == null)
        //        {
        //            pm = new PersistenceManager();
        //            pm.IsoLevel = IsolationLevel.ReadUncommitted;
        //            pm.BeginTransactionContext();
        //        }

        //        //Cobranca cobprova = new Cobranca(cobrancaId);
        //        //pm.Load(cobprova);
        //        //Contrato contratoprova = new Contrato(cobprova.PropostaID);
        //        //pm.Load(contratoprova);

        //        //String agCCDV_itau = "";
        //        String headerCedente = "UBRASP";
        //        string agencia = "05956", agenciadv = "0";
        //        string numcontacorr = "40037".PadLeft(12, '0');
        //        string dvcontacorr = "8";
        //        string cnpj = "49938327000106"; //

        //        ////////////////////////////////////////////////// Só haverá cedente ubrasp

        //        //agCCDV_itau = "0646042606";    //qualicorp
        //        string numConvenio = Cobranca.ConvenioUBRASP.PadLeft(9, '0'), carteira = "17", variacao = "019";
        //        //////////////////////////////////////////////////

        //        try
        //        {
        //            String dataAgora = DateTime.Now.ToString("ddMMyy");
        //            StringBuilder doc = new StringBuilder();

        //            ////Cobranca.eCarteira carteira = (Cobranca.eCarteira)aras[0].Carteira;

        //            #region HEADER -------------------------------------------

        //            EntityBase.AppendPreparedField(ref doc, "001", 3);          //codigo do banco na compensacao
        //            EntityBase.AppendPreparedField(ref doc, "0000", 4);         //lote de serviço
        //            EntityBase.AppendPreparedField(ref doc, "0", 1);            //tipo de registro
        //            EntityBase.AppendPreparedField(ref doc, "         ", 9);    //brancos
        //            EntityBase.AppendPreparedField(ref doc, "2", 1);            //tipo de inscrição - 2 para CNPJ, 1 para CPF
        //            //EntityBase.AppendPreparedField(ref doc, "0".PadLeft(14, '0'), 14);  //CNPJ (ou cpf) //faltou: cnpj
        //            EntityBase.AppendPreparedField(ref doc, cnpj, 14);          //CNPJ (ou cpf) 
        //            EntityBase.AppendPreparedField(ref doc, numConvenio, 9);    //Nùmero do convênio de cobrança BB
        //            EntityBase.AppendPreparedField(ref doc, "0014", 4);         //Cobrança Cedente BB
        //            EntityBase.AppendPreparedField(ref doc, carteira, 2);       //Número da carteira de cobrança BB - pos.46
        //            EntityBase.AppendPreparedField(ref doc, variacao, 3);       //Número da variação da carteira de cobrança BB
        //            EntityBase.AppendPreparedField(ref doc, "  ", 2);           //Campo reservado BB
        //            EntityBase.AppendPreparedField(ref doc, agencia, 5);        //Agência mantenedora da conta
        //            EntityBase.AppendPreparedField(ref doc, agenciadv, 1);      //Dígito Verificador da Agência
        //            EntityBase.AppendPreparedField(ref doc, numcontacorr, 12);  //Número da Conta Corrente
        //            EntityBase.AppendPreparedField(ref doc, dvcontacorr, 1);    //Dígito Verificador da Conta
        //            EntityBase.AppendPreparedField(ref doc, " ", 1);            //Dígito Verificador da Ag/Conta - Campo não tratado pelo Banco do Brasil. Informar 'branco' (espaço) OU zero.
        //            EntityBase.AppendPreparedField(ref doc, headerCedente.PadRight(30, ' '), 30); //Nome da Empresa
        //            EntityBase.AppendPreparedField(ref doc, "BANCO DO BRASIL S.A.".PadRight(30, ' '), 30); //Nome do Banco
        //            EntityBase.AppendPreparedField(ref doc, " ", 10);           //Uso Exclusivo FEBRABAN / CNAB
        //            EntityBase.AppendPreparedField(ref doc, "1", 1);            //Código Remessa / Retorno - 1=remessa, 2=retorno
        //            EntityBase.AppendPreparedField(ref doc, DateTime.Now.ToString("ddMMyyyy"), 8); //Data de Geração do Arquivo
        //            EntityBase.AppendPreparedField(ref doc, DateTime.Now.ToString("HHmmss"), 6);   //Hora de Geração do Arquivo

        //            //posso usar a propriedade versao da classe...
        //            EntityBase.AppendPreparedField(ref doc, "000000", 6);       //Número Seqüencial do Arquivo

        //            EntityBase.AppendPreparedField(ref doc, "000", 3);          //Nº da Versão do Layout do Arquivo
        //            EntityBase.AppendPreparedField(ref doc, "00000", 5);        //Densidade de Gravação do Arquivo
        //            EntityBase.AppendPreparedField(ref doc, " ".PadRight(20, ' '), 20); //Para Uso Reservado do Banco
        //            EntityBase.AppendPreparedField(ref doc, " ".PadRight(20, ' '), 20); //Para Uso Reservado da Empresa
        //            EntityBase.AppendPreparedField(ref doc, " ".PadRight(29, ' '), 29); //Para Uso Reservado da Empresa

        //            #endregion

        //            #region HEADER DE LOTE -----------------------------------

        //            doc.Append(Environment.NewLine);
        //            EntityBase.AppendPreparedField(ref doc, "001", 3);          //codigo do banco na compensacao
        //            EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Lote de Serviço
        //            EntityBase.AppendPreparedField(ref doc, "1", 1);            //tipo de registro
        //            EntityBase.AppendPreparedField(ref doc, "R", 1);            //tipo de operação
        //            EntityBase.AppendPreparedField(ref doc, "01", 2);           //tipo de serviço
        //            EntityBase.AppendPreparedField(ref doc, "  ", 2);           //
        //            EntityBase.AppendPreparedField(ref doc, "000", 3);          //Nº da Versão do Layout do Lote - nao criticado pelo banco
        //            EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //            EntityBase.AppendPreparedField(ref doc, "2", 1);            //Tipo de Inscrição da Empresa - 2=CNPJ
        //            EntityBase.AppendPreparedField(ref doc, cnpj.PadLeft(15, '0'), 15);  //CNPJ (ou cpf) //faltou: cnpj

        //            EntityBase.AppendPreparedField(ref doc, numConvenio, 9);    //Nùmero do convênio de cobrança BB
        //            EntityBase.AppendPreparedField(ref doc, "0014", 4);         //Cobrança Cedente BB
        //            EntityBase.AppendPreparedField(ref doc, carteira, 2);       //Número da carteira de cobrança BB
        //            EntityBase.AppendPreparedField(ref doc, variacao, 3);       //Número da variação da carteira de cobrança BB
        //            EntityBase.AppendPreparedField(ref doc, "  ", 2);           //campo que identifica remessa de testes: brancos ou TS
        //            EntityBase.AppendPreparedField(ref doc, agencia, 5);        //Agência mantenedora da conta
        //            EntityBase.AppendPreparedField(ref doc, agenciadv, 1);      //Dígito Verificador da Agência
        //            EntityBase.AppendPreparedField(ref doc, numcontacorr, 12);  //Número da Conta Corrente
        //            EntityBase.AppendPreparedField(ref doc, dvcontacorr, 1);    //Dígito Verificador da Conta
        //            EntityBase.AppendPreparedField(ref doc, " ", 1);            //Dígito Verificador da Ag/Conta - Campo não tratado pelo Banco do Brasil. Informar 'branco' (espaço) OU zero.

        //            EntityBase.AppendPreparedField(ref doc, headerCedente.PadRight(30, ' '), 30); //Nome da Empresa
        //            EntityBase.AppendPreparedField(ref doc, " ".PadRight(40, ' '), 40); //Mensagem 1
        //            EntityBase.AppendPreparedField(ref doc, " ".PadRight(40, ' '), 40); //Mensagem 2
        //            EntityBase.AppendPreparedField(ref doc, "00000000", 8);            //Número Remessa/Retorno 
        //            EntityBase.AppendPreparedField(ref doc, "00000000", 8);            //Data de Gravação Remessa/Retorno - pode ser zeros 
        //            EntityBase.AppendPreparedField(ref doc, "00000000", 8);            //Data do Crédito 
        //            EntityBase.AppendPreparedField(ref doc, " ", 33);           //Uso Exclusivo FEBRABAN/CNAB

        //            #endregion

        //            //Carrega cobrancas envolvidas
        //            List<string> cobrancaIDs = new List<string>();
        //            cobrancaIDs.Add("2839");
        //            cobrancaIDs.Add("2811");
        //            cobrancaIDs.Add("2897");
        //            IList<Cobranca> cobrancas = Cobranca.CarregarTodas_OrdemPorContratoParcela_Optimized(cobrancaIDs, pm); //
        //            List<Object> cobrancaIds = new List<Object>();
        //            if (cobrancas == null) { return null; }

        //            List<TabelaValorVencimentoVO> lista = new List<TabelaValorVencimentoVO>();

        //            #region DETAIL -------------------------------------------

        //            Endereco endereco = null;
        //            //, diaDataSemJuros, result = 0, 
        //            int totalRegistrosDetalhe = 0;
        //            String mascara6 = new String('0', 6); //, nossoNumero = "";
        //            Decimal valorTotal = 0; //, mora = 0, multa = 0;
        //            //Object valorDataLimite = null;
        //            DateTime contratoAdmissao = DateTime.MinValue, vigencia, vencimento, dataLimite = DateTime.MinValue;
        //            //CalendarioVencimento rcv = null;
        //            TabelaValorVencimentoVO retTvv = null;
        //            Contrato contrato = null;
        //            IList<TabelaValor> tabela = null; Taxa taxa = null; EstipulanteTaxa estipulanteTaxa = null;
        //            System.Globalization.CultureInfo cinfo = new System.Globalization.CultureInfo("pt-Br");

        //            int qtdTotalBoletos = 0, numBoletoCorrente = 0, idContratoAtual = 0;

        //            int i = 0;

        //            //String[] contratoAdmIds = null;
        //            System.Collections.Hashtable contratoADM_Criterio = new System.Collections.Hashtable();
        //            List<string> parametrosProcessados = new List<string>();

        //            foreach (Cobranca cob in cobrancas)
        //            {
        //                if (parametrosProcessados.Contains(string.Concat(cob.DataVencimento.ToString("ddMMyyyy"), cob.PropostaID))) continue;

        //                parametrosProcessados.Add(string.Concat(cob.DataVencimento.ToString("ddMMyyyy"), cob.PropostaID));

        //                i++;
        //                try
        //                {
        //                    #region DETAIL P ---------------------------------

        //                    #region

        //                    #region localiza o critério correspondente

        //                    contrato = Contrato.CarregarParcial(cob.PropostaID, pm);

        //                    #endregion

        //                    numSequencial++;

        //                    cobrancaIds.Add(cob.ID);

        //                    if (Convert.ToInt32(cob.PropostaID) != idContratoAtual)
        //                    {
        //                        numBoletoCorrente = 0; idContratoAtual = Convert.ToInt32(cob.PropostaID);
        //                        qtdTotalBoletos = 0;
        //                        foreach (Cobranca _temp in cobrancas)
        //                        {
        //                            if (Convert.ToInt32(_temp.PropostaID) == idContratoAtual) { qtdTotalBoletos++; }
        //                            else if (qtdTotalBoletos > 0) { break; }
        //                        }
        //                    }

        //                    numBoletoCorrente++;

        //                    #region checa se tem despesa nao embutida com postagem. se tem, incrementa o valor da cobranca:

        //                    retTvv = TabelaValorVencimentoVO.ExisteProposta(cob.PropostaID, lista);
        //                    if (retTvv == null)
        //                    {
        //                        //contrato = Contrato.CarregarParcial(cob.PropostaID, pm);
        //                        tabela = TabelaValor.CarregarTabelaVigente(contrato.ContratoADMID, contrato.Admissao, cob.DataVencimento, pm);
        //                        if (tabela != null && tabela.Count > 0)
        //                        {
        //                            retTvv = TabelaValorVencimentoVO.ExisteTabela(tabela[0].ID, lista);
        //                            if (retTvv == null)
        //                            {
        //                                taxa = Taxa.CarregarPorTabela(tabela[0].ID, pm);
        //                                if (taxa != null && !taxa.Embutido)
        //                                {
        //                                    cob.Valor += taxa.ValorEmbutido;
        //                                }

        //                                retTvv = new TabelaValorVencimentoVO();
        //                                retTvv.PropostaID = contrato.ID;
        //                                retTvv.TabelaID = tabela[0].ID;
        //                                if (tabela[0].VencimentoFim != DateTime.MinValue)
        //                                { retTvv.Vencimento = tabela[0].VencimentoFim.AddMonths(1); }
        //                                if (taxa != null && !taxa.Embutido)
        //                                { retTvv.ValorBancario = taxa.ValorEmbutido; }

        //                                if (contrato.CobrarTaxaAssociativa)
        //                                {
        //                                    estipulanteTaxa = EstipulanteTaxa.CarregarVigente(contrato.EstipulanteID, pm);
        //                                    if (estipulanteTaxa != null)
        //                                    { retTvv.ValorSindicalizacao = estipulanteTaxa.Valor; }
        //                                }

        //                                lista.Add(retTvv);
        //                                //taxa = null;
        //                            }
        //                            else
        //                                cob.Valor += retTvv.ValorBancario;
        //                        }
        //                    }
        //                    else
        //                        cob.Valor += retTvv.ValorBancario;

        //                    #endregion

        //                    #region data de admissao do contrato

        //                    //Contrato _contrato = Contrato.CarregarParcial(cob.PropostaID, pm);
        //                    if (contrato != null) { contratoAdmissao = contrato.Admissao; }
        //                    else { continue; }
        //                    #endregion

        //                    #endregion

        //                    doc.Append(Environment.NewLine);

        //                    EntityBase.AppendPreparedField(ref doc, "001", 3);          //codigo do banco na compensacao
        //                    EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Lote de Serviço
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //tipo de registro
        //                    EntityBase.AppendPreparedField(ref doc, numSequencial.ToString().PadLeft(5, '0'), 5); //Nº do Registro - 04.3A
        //                    EntityBase.AppendPreparedField(ref doc, "P", 1);            //Código de Segmento do Reg. Detalhe
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "01", 2);           //Código de Movimento Remessa - C004

        //                    //
        //                    EntityBase.AppendPreparedField(ref doc, agencia, 5);        //Agência mantenedora da conta
        //                    EntityBase.AppendPreparedField(ref doc, agenciadv, 1);      //Dígito Verificador da Agência
        //                    EntityBase.AppendPreparedField(ref doc, numcontacorr, 12);  //Número da Conta Corrente
        //                    EntityBase.AppendPreparedField(ref doc, dvcontacorr, 1);    //Dígito Verificador da Conta
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //Dígito Verificador da Ag/Conta - Campo não tratado pelo Banco do Brasil. Informar 'branco' (espaço) OU zero.

        //                    cob.NossoNumero = cob.GeraNossoNumero();
        //                    EntityBase.AppendPreparedField(ref doc, cob.NossoNumero, 20); //Seu Número
        //                    //EntityBase.AppendPreparedField(ref doc, "0".PadRight(20, '0'), 20); //Seu Número - pos 38

        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);   // Código da carteira 11
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);   // Forma de Cadastr. do Título no Banco - ampo não tratado pelo sistema do Banco do Brasil
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);   // Tipo de documento - campo não tratado pelo sistema do Banco do Brasil

        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);   // Identificação da Emissão do Bloqueto: 1 banco emite, 0 nos emitimos C009 - 17.3P faltou: definir
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);   // Identificação da Destibuição do Bloqueto: 1 banco distribui, 0 nos distribuimos C008 - C010 - 18.3P faltou: definir
        //                    EntityBase.AppendPreparedField(ref doc, Convert.ToString(cob.ID).PadRight(15, ' '), 15); // Número do Documento de Cobrança
        //                    EntityBase.AppendPreparedField(ref doc, cob.DataVencimento.ToString("ddMMyyyy"), 8);  // Data de vencimento - pos 78

        //                    //valor do boleto
        //                    EntityBase.AppendPreparedField(ref doc, cob.Valor.ToString("N2", cinfo).Split(',')[0].Replace(".", "").PadLeft(13, '0'), 13);
        //                    EntityBase.AppendPreparedField(ref doc, cob.Valor.ToString("N2", cinfo).Split(',')[1].PadLeft(2, '0'), 2);


        //                    EntityBase.AppendPreparedField(ref doc, "00000", 5);    //Agência Encarregada da Cobrança
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);        //Dígito Verificador da Agência

        //                    EntityBase.AppendPreparedField(ref doc, "02", 2);        //Espécie do Título - posicao 107
        //                    EntityBase.AppendPreparedField(ref doc, "A", 1);        //dentific. de Título Aceito/Não Aceito 
        //                    EntityBase.AppendPreparedField(ref doc, cob.DataCriacao.ToString("ddMMyyyy"), 8);  // Data de emissão - pos 110
        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);        //Código do Juros de Mora faltou: definir '1'=Valor por Dia '2'=Taxa Mensal '3'=Isento
        //                    EntityBase.AppendPreparedField(ref doc, cob.DataVencimento.AddDays(1).ToString("ddMMyyyy"), 8);  // Data do Juros de Mora - pos 119
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Juros de Mora por Dia/Taxa faltou: definir

        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);        //Código do Desconto 1 - pos 142
        //                    EntityBase.AppendPreparedField(ref doc, "00000000", 8); //Data do Desconto 1  - pos 143
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Desconto 1 Valor/Percentual a ser Concedido 
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Valor do IOF a ser Recolhido
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Valor do Abatimento
        //                    EntityBase.AppendPreparedField(ref doc, Convert.ToString(cob.ID).PadLeft(25, '0'), 25); //Identificação do Título na Empresa - pos 196

        //                    EntityBase.AppendPreparedField(ref doc, "3", 1); //Código para Protesto - 1' – Protestar dias corridos, '2' – Protestar dias úteis, e '3' – Não protestar. faltou: definir - pos 221
        //                    EntityBase.AppendPreparedField(ref doc, "00", 2); //Número de Dias para Protesto - Preencher de acordo com o código informado na posição 221. Para código '1' – é possível, de 6 a 29 dias, 35º, 40º, dia corrido. Para código '2' – é possível, 3º, 4º ou 5º dia útil. Para código '3' preencher com Zeros. faltou: definir
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1); // Código para Baixa/Devolução - não tratado
        //                    EntityBase.AppendPreparedField(ref doc, "000", 3); // Número de Dias para Baixa/Devolução - não tratado
        //                    EntityBase.AppendPreparedField(ref doc, "09", 2); // Código da Moeda - g065
        //                    EntityBase.AppendPreparedField(ref doc, "0000000000", 10); // Nº do Contrato da Operação de Créd.  - não tratado
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1); //Uso Exclusivo FEBRABAN/CNAB 


        //                    #endregion

        //                    #region DETAIL Q ---------------------------------

        //                    doc.Append(Environment.NewLine);

        //                    numSequencial++;

        //                    EntityBase.AppendPreparedField(ref doc, "001", 3);          //codigo do banco na compensacao
        //                    EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Lote de Serviço
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //tipo de registro
        //                    EntityBase.AppendPreparedField(ref doc, numSequencial.ToString().PadLeft(5, '0'), 5); //Nº do Registro - 04.3A
        //                    EntityBase.AppendPreparedField(ref doc, "Q", 1);            //Código de Segmento do Reg. Detalhe
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "01", 2);           //Código de Movimento Remessa - C004 - pos 16

        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);           //Tipo e inscrição - C005
        //                    EntityBase.AppendPreparedField(ref doc, cob.ContratoTitularCPF.PadLeft(15, '0'), 15); //Número de inscrição - C006 - pos 19

        //                    EntityBase.AppendPreparedField(ref doc, cob.ContratoTitularNome, 40); //Nome - C013 - pos 34

        //                    endereco = new Endereco(cob.ContratoEnderecoCobrancaID);
        //                    endereco.Carregar(pm);
        //                    if (endereco.CEP.IndexOf('-') > -1) { endereco.CEP = endereco.CEP.Replace("-", ""); }

        //                    if (endereco.Numero == null) endereco.Numero = "";
        //                    if (string.IsNullOrEmpty(endereco.Complemento))
        //                    {
        //                        int tamanhoDisponivel = 40 - (endereco.Numero.Length + 1);

        //                        if (endereco.Logradouro.Length > tamanhoDisponivel)
        //                        {
        //                            endereco.Logradouro = endereco.Logradouro.Substring(0, tamanhoDisponivel);
        //                        }

        //                        if (!string.IsNullOrEmpty(endereco.Numero))
        //                            endereco.Logradouro += string.Concat(",", endereco.Numero);
        //                    }
        //                    else
        //                    {
        //                        int tamanhoDisponivel = 40 - ((endereco.Numero.Length + 1) + (endereco.Complemento.Length + 1));

        //                        if (endereco.Logradouro.Length > tamanhoDisponivel)
        //                        {
        //                            endereco.Logradouro = endereco.Logradouro.Substring(0, tamanhoDisponivel);
        //                        }

        //                        if (!string.IsNullOrEmpty(endereco.Numero))
        //                            endereco.Logradouro += string.Concat(",", endereco.Numero, ",", endereco.Complemento);
        //                        else
        //                            endereco.Logradouro += string.Concat(",", endereco.Complemento);
        //                    }

        //                    EntityBase.AppendPreparedField(ref doc, endereco.Logradouro, 40); // endereco - pos 74
        //                    EntityBase.AppendPreparedField(ref doc, endereco.Bairro, 15);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.CEP, 8);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.Cidade, 15);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.UF, 2);

        //                    EntityBase.AppendPreparedField(ref doc, "0", 1); //Tipo de Inscrição - pos 154
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Número de Inscrição

        //                    EntityBase.AppendPreparedField(ref doc, " ".PadLeft(40, ' '), 40); //Nome do Sacador/Avalista
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(3, '0'), 3); //Cód. Bco. Corresp. na Compensação - não tratado - pos 210
        //                    EntityBase.AppendPreparedField(ref doc, " ".PadLeft(20, ' '), 20); //Nosso Nº no Banco Correspondente - não tratado
        //                    EntityBase.AppendPreparedField(ref doc, " ".PadLeft(8, ' '), 8); //Uso Exclusivo FEBRABAN/CNAB 

        //                    #endregion

        //                    totalRegistrosDetalhe++;
        //                    valorTotal += cob.Valor;

        //                    cob.Carteira = Convert.ToInt32(carteira);
        //                    cob.ArquivoIDUltimoEnvio = -10;
        //                    pm.Save(cob);
        //                }
        //                catch (Exception ex)
        //                {
        //                    try
        //                    {
        //                        string path = System.Configuration.ConfigurationManager.AppSettings["financialFilePath"].Replace("/", @"\");
        //                        System.IO.File.WriteAllText(path + "err_" + DateTime.Now.ToString("ddMMyyyyHHmmssfff") + ".txt",
        //                            ex.Message +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + ex.StackTrace +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + Convert.ToString(cob.ID) +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + i.ToString(),
        //                            System.Text.Encoding.ASCII);
        //                    }
        //                    catch { }
        //                    continue;
        //                }
        //            }
        //            #endregion

        //            #region TRAILLER DE LOTE ---------------------------------

        //            doc.Append(Environment.NewLine);

        //            EntityBase.AppendPreparedField(ref doc, "001", 3);
        //            EntityBase.AppendPreparedField(ref doc, "0001", 4);
        //            EntityBase.AppendPreparedField(ref doc, "5", 1);
        //            EntityBase.AppendPreparedField(ref doc, " ", 9);
        //            EntityBase.AppendPreparedField(ref doc, (numSequencial + 2).ToString().PadLeft(6, '0'), 6);
        //            EntityBase.AppendPreparedField(ref doc, " ", 217);

        //            #endregion

        //            #region TRAILLER -----------------------------------------

        //            doc.Append(Environment.NewLine);

        //            EntityBase.AppendPreparedField(ref doc, "001", 3);
        //            EntityBase.AppendPreparedField(ref doc, "9999", 4);
        //            EntityBase.AppendPreparedField(ref doc, "9", 1);
        //            EntityBase.AppendPreparedField(ref doc, " ", 9); //branco
        //            EntityBase.AppendPreparedField(ref doc, "1".PadLeft(6, '0'), 6); //qtd de lotes
        //            EntityBase.AppendPreparedField(ref doc, (numSequencial + 4).ToString().PadLeft(6, '0'), 6);
        //            EntityBase.AppendPreparedField(ref doc, "0".PadLeft(6, '0'), 6); //Qtde de Contas p/ Conc. (Lotes)
        //            EntityBase.AppendPreparedField(ref doc, " ", 205); //

        //            #endregion

        //            if (_pm == null) { pm.Rollback(); } //se não está partcipando de uma transacao externa, comita
        //            return doc.ToString();
        //        }
        //        catch
        //        {
        //            if (_pm == null) { pm.Rollback(); }
        //            throw;
        //        }
        //        finally
        //        {
        //            if (_pm == null) { pm = null; }
        //        }
        //    }

        //    /***************/

        //    public static String GeraDocumentoCobranca_BB17(IList<String> cobrancaIDs, ref String arquivoNome, ref String arquivoConteudo, ref Object arquivoId, ref String arquivoVersao, IList<ArquivoRemessaAgendamento> aras, PersistenceManager _pm)
        //    {
        //        if (cobrancaIDs == null) { return null; }

        //        Int32 numSequencial = 0;

        //        PersistenceManager pm = _pm;

        //        Int32 contratoadmQualicorpID = Convert.ToInt32(ConfigurationManager.AppSettings["contratoAdmQualicorpIdIncial"]);

        //        if (_pm == null)
        //        {
        //            pm = new PersistenceManager();
        //            pm.IsoLevel = IsolationLevel.ReadUncommitted;
        //            pm.BeginTransactionContext();
        //        }

        //        Cobranca cobprova = new Cobranca(cobrancaIDs[0]);
        //        pm.Load(cobprova);
        //        Contrato contratoprova = new Contrato(cobprova.PropostaID);
        //        pm.Load(contratoprova);

        //        //String agCCDV_itau = "";
        //        String headerCedente = "UBRASP";
        //        string agencia = "05956", agenciadv = "0";
        //        string numcontacorr = "40037".PadLeft(12, '0');
        //        string dvcontacorr = "8";
        //        string cnpj = "49938327000106";

        //        ////////////////////////////////////////////////// Só haverá cedente ubrasp

        //        //agCCDV_itau = "0646042606";    //qualicorp
        //        string numConvenio = Cobranca.Convenio2UBRASP.PadLeft(9, '0'), carteira = "17", variacao = "019";
        //        //////////////////////////////////////////////////

        //        try
        //        {
        //            if (cobrancaIDs == null) { return null; }

        //            String dataAgora = DateTime.Now.ToString("ddMMyy");
        //            String versao = "";
        //            StringBuilder doc = new StringBuilder();

        //            ////Cobranca.eCarteira carteira = (Cobranca.eCarteira)aras[0].Carteira;

        //            if (aras == null)
        //                arquivoNome = "arquivo.dat"; // 
        //            else
        //                arquivoNome = String.Concat(aras[0].ArquivoNome, "_", DateTime.Now.ToString("yyyyMMddHHmmss"), ".dat");  //String.Concat(aras[0].ArquivoNomeInstance, "_", DateTime.Now.ToString("yyyyMMddHHmmss"), ".dat");

        //            #region HEADER -------------------------------------------

        //            EntityBase.AppendPreparedField(ref doc, "001", 3);          //codigo do banco na compensacao
        //            EntityBase.AppendPreparedField(ref doc, "0000", 4);         //lote de serviço
        //            EntityBase.AppendPreparedField(ref doc, "0", 1);            //tipo de registro
        //            EntityBase.AppendPreparedField(ref doc, "         ", 9);    //brancos
        //            EntityBase.AppendPreparedField(ref doc, "2", 1);            //tipo de inscrição - 2 para CNPJ, 1 para CPF
        //            //EntityBase.AppendPreparedField(ref doc, "0".PadLeft(14, '0'), 14);  //CNPJ (ou cpf) //faltou: cnpj
        //            EntityBase.AppendPreparedField(ref doc, cnpj, 14);          //CNPJ (ou cpf) 

        //            //EntityBase.AppendPreparedField(ref doc, numConvenio, 9);    //Nùmero do convênio de cobrança BB
        //            //EntityBase.AppendPreparedField(ref doc, "0014", 4);         //Cobrança Cedente BB
        //            //EntityBase.AppendPreparedField(ref doc, carteira, 2);       //Número da carteira de cobrança BB
        //            //EntityBase.AppendPreparedField(ref doc, variacao, 3);       //Número da variação da carteira de cobrança BB
        //            EntityBase.AppendPreparedField(ref doc, "002896830001417019", 18);

        //            EntityBase.AppendPreparedField(ref doc, "  ", 2);           //Campo reservado BB
        //            EntityBase.AppendPreparedField(ref doc, agencia, 5);        //Agência mantenedora da conta
        //            EntityBase.AppendPreparedField(ref doc, agenciadv, 1);      //Dígito Verificador da Agência
        //            EntityBase.AppendPreparedField(ref doc, numcontacorr, 12);  //Número da Conta Corrente
        //            EntityBase.AppendPreparedField(ref doc, dvcontacorr, 1);    //Dígito Verificador da Conta
        //            EntityBase.AppendPreparedField(ref doc, " ", 1);            //Dígito Verificador da Ag/Conta - Campo não tratado pelo Banco do Brasil. Informar 'branco' (espaço) OU zero.
        //            EntityBase.AppendPreparedField(ref doc, headerCedente.PadRight(30, ' '), 30); //Nome da Empresa
        //            EntityBase.AppendPreparedField(ref doc, "BANCO DO BRASIL S.A.".PadRight(30, ' '), 30); //Nome do Banco
        //            EntityBase.AppendPreparedField(ref doc, " ", 10);           //Uso Exclusivo FEBRABAN / CNAB
        //            EntityBase.AppendPreparedField(ref doc, "1", 1);            //Código Remessa / Retorno - 1=remessa, 2=retorno
        //            EntityBase.AppendPreparedField(ref doc, DateTime.Now.ToString("ddMMyyyy"), 8); //Data de Geração do Arquivo
        //            EntityBase.AppendPreparedField(ref doc, DateTime.Now.ToString("HHmmss"), 6);   //Hora de Geração do Arquivo

        //            //posso usar a propriedade versao da classe...
        //            EntityBase.AppendPreparedField(ref doc, "000000", 6);       //Número Seqüencial do Arquivo

        //            EntityBase.AppendPreparedField(ref doc, "000", 3);          //Nº da Versão do Layout do Arquivo
        //            EntityBase.AppendPreparedField(ref doc, "00000", 5);        //Densidade de Gravação do Arquivo
        //            EntityBase.AppendPreparedField(ref doc, " ".PadRight(20, ' '), 20); //Para Uso Reservado do Banco
        //            EntityBase.AppendPreparedField(ref doc, " ".PadRight(20, ' '), 20); //Para Uso Reservado da Empresa
        //            EntityBase.AppendPreparedField(ref doc, " ".PadRight(29, ' '), 29); //Para Uso Reservado da Empresa

        //            ArquivoCobrancaUnibanco arquivo = new ArquivoCobrancaUnibanco();
        //            arquivo.DataCriacao = DateTime.Now;
        //            versao = ArquivoCobrancaUnibanco.ObtemProximaVersao(pm).ToString().PadLeft(3, '0');
        //            arquivo.Versao = Convert.ToInt32(versao);
        //            arquivo.AgendamentoID = aras[0].ID; // ara.ID; 

        //            ArquivoRemessaCriterio arqCriterio = null; //new ArquivoRemessaCriterio(ara.CriterioID);
        //            //pm.Load(arqCriterio);

        //            //arquivoVersao = versao.PadRight(3, '0');
        //            //EntityBase.AppendPreparedField(ref doc, versao, 3);     //019
        //            //EntityBase.AppendPreparedField(ref doc, " ".PadLeft(200, ' '), 200); //20
        //            //EntityBase.AppendPreparedField(ref doc, "000001", 6);   //021

        //            #endregion

        //            #region HEADER DE LOTE -----------------------------------

        //            doc.Append(Environment.NewLine);
        //            EntityBase.AppendPreparedField(ref doc, "001", 3);          //codigo do banco na compensacao
        //            EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Lote de Serviço
        //            EntityBase.AppendPreparedField(ref doc, "1", 1);            //tipo de registro
        //            EntityBase.AppendPreparedField(ref doc, "R", 1);            //tipo de operação
        //            EntityBase.AppendPreparedField(ref doc, "01", 2);           //tipo de serviço
        //            EntityBase.AppendPreparedField(ref doc, "  ", 2);           //
        //            EntityBase.AppendPreparedField(ref doc, "000", 3);          //Nº da Versão do Layout do Lote - nao criticado pelo banco
        //            EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //            EntityBase.AppendPreparedField(ref doc, "2", 1);            //Tipo de Inscrição da Empresa - 2=CNPJ
        //            EntityBase.AppendPreparedField(ref doc, cnpj.PadLeft(15, '0'), 15);  //CNPJ (ou cpf) //faltou: cnpj

        //            //EntityBase.AppendPreparedField(ref doc, numConvenio, 9);    //Nùmero do convênio de cobrança BB
        //            //EntityBase.AppendPreparedField(ref doc, "0014", 4);         //Cobrança Cedente BB
        //            //EntityBase.AppendPreparedField(ref doc, carteira, 2);       //Número da carteira de cobrança BB
        //            //EntityBase.AppendPreparedField(ref doc, variacao, 3);       //Número da variação da carteira de cobrança BB
        //            EntityBase.AppendPreparedField(ref doc, "002896830001417019", 18);

        //            EntityBase.AppendPreparedField(ref doc, "  ", 2);           //campo que identifica remessa de testes: brancos ou TS
        //            EntityBase.AppendPreparedField(ref doc, agencia, 5);        //Agência mantenedora da conta
        //            EntityBase.AppendPreparedField(ref doc, agenciadv, 1);      //Dígito Verificador da Agência
        //            EntityBase.AppendPreparedField(ref doc, numcontacorr, 12);  //Número da Conta Corrente
        //            EntityBase.AppendPreparedField(ref doc, dvcontacorr, 1);    //Dígito Verificador da Conta
        //            EntityBase.AppendPreparedField(ref doc, " ", 1);            //Dígito Verificador da Ag/Conta - Campo não tratado pelo Banco do Brasil. Informar 'branco' (espaço) OU zero.

        //            EntityBase.AppendPreparedField(ref doc, headerCedente.PadRight(30, ' '), 30); //Nome da Empresa
        //            EntityBase.AppendPreparedField(ref doc, " ".PadRight(40, ' '), 40); //Mensagem 1
        //            EntityBase.AppendPreparedField(ref doc, " ".PadRight(40, ' '), 40); //Mensagem 2
        //            EntityBase.AppendPreparedField(ref doc, "00000000", 8);            //Número Remessa/Retorno 
        //            EntityBase.AppendPreparedField(ref doc, "00000000", 8);            //Data de Gravação Remessa/Retorno - pode ser zeros 
        //            EntityBase.AppendPreparedField(ref doc, "00000000", 8);            //Data do Crédito 
        //            EntityBase.AppendPreparedField(ref doc, " ", 33);           //Uso Exclusivo FEBRABAN/CNAB

        //            #endregion

        //            //Carrega cobrancas envolvidas
        //            IList<Cobranca> cobrancas = Cobranca.CarregarTodas_OrdemPorContratoParcela_Optimized(cobrancaIDs, pm); //
        //            List<Object> cobrancaIds = new List<Object>();
        //            if (cobrancas == null) { return null; }

        //            arquivo.MesReferencia = cobrancas[0].DataVencimento.Month;
        //            arquivo.AnoReferencia = cobrancas[0].DataVencimento.Year;
        //            arquivo.OperadoraID = cobrancas[0].OperadoraID;
        //            arquivo.Nome = arquivoNome;
        //            arquivo.QtdCobrancas = cobrancaIDs.Count;
        //            pm.Save(arquivo); ////////////////////////////////////////////////////////////////////////
        //            arquivoId = arquivo.ID;

        //            List<TabelaValorVencimentoVO> lista = new List<TabelaValorVencimentoVO>();

        //            #region DETAIL -------------------------------------------

        //            Endereco endereco = null;
        //            //, diaDataSemJuros, result = 0, 
        //            int totalRegistrosDetalhe = 0;
        //            String mascara6 = new String('0', 6); //, nossoNumero = "";
        //            Decimal valorTotal = 0; //, mora = 0, multa = 0;
        //            //Object valorDataLimite = null;
        //            DateTime contratoAdmissao = DateTime.MinValue, vigencia, vencimento, dataLimite = DateTime.MinValue;
        //            //CalendarioVencimento rcv = null;
        //            TabelaValorVencimentoVO retTvv = null;
        //            Contrato contrato = null;
        //            IList<TabelaValor> tabela = null; Taxa taxa = null; EstipulanteTaxa estipulanteTaxa = null;
        //            System.Globalization.CultureInfo cinfo = new System.Globalization.CultureInfo("pt-Br");

        //            int qtdTotalBoletos = 0, numBoletoCorrente = 0, idContratoAtual = 0;

        //            int i = 0;

        //            //String[] contratoAdmIds = null;
        //            System.Collections.Hashtable contratoADM_Criterio = new System.Collections.Hashtable();
        //            List<string> parametrosProcessados = new List<string>();
        //            Cobranca _cob = null;

        //            foreach (Cobranca cob in cobrancas)
        //            {
        //                if (parametrosProcessados.Contains(string.Concat(cob.DataVencimento.ToString("ddMMyyyy"), cob.PropostaID))) continue;

        //                parametrosProcessados.Add(string.Concat(cob.DataVencimento.ToString("ddMMyyyy"), cob.PropostaID));

        //                if (cob.ID == null) { continue; }

        //                _cob = null;
        //                _cob = Cobranca.CarregarEnviadasPor(cob.PropostaID, cob.DataVencimento, (int)Cobranca.eTipo.Normal, pm);
        //                if (_cob != null) { continue; }

        //                i++;
        //                try
        //                {
        //                    #region DETAIL P ---------------------------------

        //                    #region

        //                    #region localiza o critério correspondente

        //                    contrato = Contrato.CarregarParcial(cob.PropostaID, pm);

        //                    //if (contratoADM_Criterio.Contains(Convert.ToString(contrato.ContratoADMID)))
        //                    //{
        //                    //    arqCriterio = (ArquivoRemessaCriterio)contratoADM_Criterio[Convert.ToString(contrato.ContratoADMID)];
        //                    //}
        //                    //else
        //                    //{
        //                    //    foreach (ArquivoRemessaAgendamento ara in aras)
        //                    //    {
        //                    //        if (cob.Criterio != null) { break; }

        //                    //        contratoAdmIds = ArquivoRemessaCriterio.CarregarContratoAdmIds(ara.CriterioID, pm); /////

        //                    //        foreach (String contratoAdmId in contratoAdmIds)
        //                    //        {
        //                    //            if (Convert.ToString(contrato.ContratoADMID).Equals(contratoAdmId))
        //                    //            {
        //                    //                ArquivoRemessaCriterio criterio = new ArquivoRemessaCriterio(ara.CriterioID);
        //                    //                pm.Load(criterio);
        //                    //                arqCriterio = criterio;

        //                    //                try
        //                    //                {
        //                    //                    contratoADM_Criterio.Add(contratoAdmId, criterio);
        //                    //                }
        //                    //                catch //(Exception ex)
        //                    //                {
        //                    //                    continue;
        //                    //                }
        //                    //                break;
        //                    //            }
        //                    //        }
        //                    //    }
        //                    //}
        //                    #endregion

        //                    numSequencial++;

        //                    cobrancaIds.Add(cob.ID);

        //                    if (Convert.ToInt32(cob.PropostaID) != idContratoAtual)
        //                    {
        //                        numBoletoCorrente = 0; idContratoAtual = Convert.ToInt32(cob.PropostaID);
        //                        qtdTotalBoletos = 0;
        //                        foreach (Cobranca _temp in cobrancas)
        //                        {
        //                            if (Convert.ToInt32(_temp.PropostaID) == idContratoAtual) { qtdTotalBoletos++; }
        //                            else if (qtdTotalBoletos > 0) { break; }
        //                        }
        //                    }

        //                    numBoletoCorrente++;

        //                    #region checa se tem despesa nao embutida com postagem. se tem, incrementa o valor da cobranca:

        //                    retTvv = TabelaValorVencimentoVO.ExisteProposta(cob.PropostaID, lista);
        //                    if (retTvv == null)
        //                    {
        //                        //contrato = Contrato.CarregarParcial(cob.PropostaID, pm);
        //                        tabela = TabelaValor.CarregarTabelaVigente(contrato.ContratoADMID, contrato.Admissao, cob.DataVencimento, pm);
        //                        if (tabela != null && tabela.Count > 0)
        //                        {
        //                            retTvv = TabelaValorVencimentoVO.ExisteTabela(tabela[0].ID, lista);
        //                            if (retTvv == null)
        //                            {
        //                                taxa = Taxa.CarregarPorTabela(tabela[0].ID, pm);
        //                                if (taxa != null && !taxa.Embutido)
        //                                {
        //                                    cob.Valor += taxa.ValorEmbutido;
        //                                }

        //                                retTvv = new TabelaValorVencimentoVO();
        //                                retTvv.PropostaID = contrato.ID;
        //                                retTvv.TabelaID = tabela[0].ID;
        //                                if (tabela[0].VencimentoFim != DateTime.MinValue)
        //                                { retTvv.Vencimento = tabela[0].VencimentoFim.AddMonths(1); }
        //                                if (taxa != null && !taxa.Embutido)
        //                                { retTvv.ValorBancario = taxa.ValorEmbutido; }

        //                                if (contrato.CobrarTaxaAssociativa)
        //                                {
        //                                    estipulanteTaxa = EstipulanteTaxa.CarregarVigente(contrato.EstipulanteID, pm);
        //                                    if (estipulanteTaxa != null)
        //                                    { retTvv.ValorSindicalizacao = estipulanteTaxa.Valor; }
        //                                }

        //                                lista.Add(retTvv);
        //                                //taxa = null;
        //                            }
        //                            else
        //                                cob.Valor += retTvv.ValorBancario;
        //                        }
        //                    }
        //                    else
        //                        cob.Valor += retTvv.ValorBancario;

        //                    #endregion

        //                    #region data de admissao do contrato

        //                    //Contrato _contrato = Contrato.CarregarParcial(cob.PropostaID, pm);
        //                    if (contrato != null) { contratoAdmissao = contrato.Admissao; }
        //                    else { continue; }
        //                    #endregion

        //                    #endregion

        //                    doc.Append(Environment.NewLine);

        //                    EntityBase.AppendPreparedField(ref doc, "001", 3);          //codigo do banco na compensacao
        //                    EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Lote de Serviço
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //tipo de registro
        //                    EntityBase.AppendPreparedField(ref doc, numSequencial.ToString().PadLeft(5, '0'), 5); //Nº do Registro - 04.3A
        //                    EntityBase.AppendPreparedField(ref doc, "P", 1);            //Código de Segmento do Reg. Detalhe
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "01", 2);           //Código de Movimento Remessa - C004

        //                    //
        //                    EntityBase.AppendPreparedField(ref doc, agencia, 5);        //Agência mantenedora da conta
        //                    EntityBase.AppendPreparedField(ref doc, agenciadv, 1);      //Dígito Verificador da Agência
        //                    EntityBase.AppendPreparedField(ref doc, numcontacorr, 12);  //Número da Conta Corrente
        //                    EntityBase.AppendPreparedField(ref doc, dvcontacorr, 1);    //Dígito Verificador da Conta
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //Dígito Verificador da Ag/Conta - Campo não tratado pelo Banco do Brasil. Informar 'branco' (espaço) OU zero.

        //                    cob.Carteira = 17;
        //                    cob.NossoNumero = cob.GeraNossoNumero();
        //                    EntityBase.AppendPreparedField(ref doc, cob.GeraNossoNumero(), 20); //Seu Número
        //                    //EntityBase.AppendPreparedField(ref doc, "0".PadRight(20, '0'), 20); //Seu Número - pos 38

        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);   // Código da carteira 11
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);   // Forma de Cadastr. do Título no Banco - ampo não tratado pelo sistema do Banco do Brasil
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);   // Tipo de documento - campo não tratado pelo sistema do Banco do Brasil

        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);   // Identificação da Emissão do Bloqueto: 1 banco emite, 0 nos emitimos C009 - 17.3P faltou: definir
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);   // Identificação da Destibuição do Bloqueto: 1 banco distribui, 0 nos distribuimos C008 - C010 - 18.3P faltou: definir
        //                    EntityBase.AppendPreparedField(ref doc, Convert.ToString(cob.ID).PadRight(15, ' '), 15); // Número do Documento de Cobrança
        //                    EntityBase.AppendPreparedField(ref doc, cob.DataVencimento.ToString("ddMMyyyy"), 8);  // Data de vencimento - pos 78

        //                    //valor do boleto
        //                    EntityBase.AppendPreparedField(ref doc, cob.Valor.ToString("N2", cinfo).Split(',')[0].Replace(".", "").PadLeft(13, '0'), 13);
        //                    EntityBase.AppendPreparedField(ref doc, cob.Valor.ToString("N2", cinfo).Split(',')[1].PadLeft(2, '0'), 2);


        //                    EntityBase.AppendPreparedField(ref doc, "00000", 5);    //Agência Encarregada da Cobrança
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);        //Dígito Verificador da Agência

        //                    EntityBase.AppendPreparedField(ref doc, "02", 2);        //Espécie do Título - posicao 107
        //                    EntityBase.AppendPreparedField(ref doc, "A", 1);        //dentific. de Título Aceito/Não Aceito 
        //                    EntityBase.AppendPreparedField(ref doc, cob.DataCriacao.ToString("ddMMyyyy"), 8);  // Data de emissão - pos 110
        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);        //Código do Juros de Mora faltou: definir '1'=Valor por Dia '2'=Taxa Mensal '3'=Isento
        //                    EntityBase.AppendPreparedField(ref doc, cob.DataVencimento.AddDays(1).ToString("ddMMyyyy"), 8);  // Data do Juros de Mora - pos 119
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Juros de Mora por Dia/Taxa faltou: definir

        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);        //Código do Desconto 1 - pos 142
        //                    EntityBase.AppendPreparedField(ref doc, "00000000", 8); //Data do Desconto 1  - pos 143
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Desconto 1 Valor/Percentual a ser Concedido 
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Valor do IOF a ser Recolhido
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Valor do Abatimento
        //                    EntityBase.AppendPreparedField(ref doc, Convert.ToString(cob.ID).PadLeft(25, '0'), 25); //Identificação do Título na Empresa - pos 196

        //                    EntityBase.AppendPreparedField(ref doc, "3", 1); //Código para Protesto - 1' – Protestar dias corridos, '2' – Protestar dias úteis, e '3' – Não protestar. faltou: definir - pos 221
        //                    EntityBase.AppendPreparedField(ref doc, "00", 2); //Número de Dias para Protesto - Preencher de acordo com o código informado na posição 221. Para código '1' – é possível, de 6 a 29 dias, 35º, 40º, dia corrido. Para código '2' – é possível, 3º, 4º ou 5º dia útil. Para código '3' preencher com Zeros. faltou: definir
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1); // Código para Baixa/Devolução - não tratado
        //                    EntityBase.AppendPreparedField(ref doc, "000", 3); // Número de Dias para Baixa/Devolução - não tratado
        //                    EntityBase.AppendPreparedField(ref doc, "09", 2); // Código da Moeda - g065
        //                    EntityBase.AppendPreparedField(ref doc, "0000000000", 10); // Nº do Contrato da Operação de Créd.  - não tratado
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1); //Uso Exclusivo FEBRABAN/CNAB 


        //                    #endregion

        //                    #region DETAIL Q ---------------------------------

        //                    doc.Append(Environment.NewLine);

        //                    numSequencial++;

        //                    EntityBase.AppendPreparedField(ref doc, "001", 3);          //codigo do banco na compensacao
        //                    EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Lote de Serviço
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //tipo de registro
        //                    EntityBase.AppendPreparedField(ref doc, numSequencial.ToString().PadLeft(5, '0'), 5); //Nº do Registro - 04.3A
        //                    EntityBase.AppendPreparedField(ref doc, "Q", 1);            //Código de Segmento do Reg. Detalhe
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "01", 2);           //Código de Movimento Remessa - C004 - pos 16

        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);           //Tipo e inscrição - C005
        //                    EntityBase.AppendPreparedField(ref doc, cob.ContratoTitularCPF.PadLeft(15, '0'), 15); //Número de inscrição - C006 - pos 19

        //                    EntityBase.AppendPreparedField(ref doc, cob.ContratoTitularNome, 40); //Nome - C013 - pos 34

        //                    endereco = new Endereco(cob.ContratoEnderecoCobrancaID);
        //                    endereco.Carregar(pm);
        //                    if (endereco.CEP.IndexOf('-') > -1) { endereco.CEP = endereco.CEP.Replace("-", ""); }

        //                    if (endereco.Numero == null) endereco.Numero = "";
        //                    if (string.IsNullOrEmpty(endereco.Complemento))
        //                    {
        //                        int tamanhoDisponivel = 40 - (endereco.Numero.Length + 1);

        //                        if (endereco.Logradouro.Length > tamanhoDisponivel)
        //                        {
        //                            endereco.Logradouro = endereco.Logradouro.Substring(0, tamanhoDisponivel);
        //                        }

        //                        if (!string.IsNullOrEmpty(endereco.Numero))
        //                            endereco.Logradouro += string.Concat(",", endereco.Numero);
        //                    }
        //                    else
        //                    {
        //                        int tamanhoDisponivel = 40 - ((endereco.Numero.Length + 1) + (endereco.Complemento.Length + 1));

        //                        if (endereco.Logradouro.Length > tamanhoDisponivel)
        //                        {
        //                            endereco.Logradouro = endereco.Logradouro.Substring(0, tamanhoDisponivel);
        //                        }

        //                        if (!string.IsNullOrEmpty(endereco.Numero))
        //                            endereco.Logradouro += string.Concat(",", endereco.Numero, ",", endereco.Complemento);
        //                        else
        //                            endereco.Logradouro += string.Concat(",", endereco.Complemento);
        //                    }

        //                    EntityBase.AppendPreparedField(ref doc, endereco.Logradouro, 40); // endereco - pos 74
        //                    EntityBase.AppendPreparedField(ref doc, endereco.Bairro, 15);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.CEP, 8);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.Cidade, 15);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.UF, 2);

        //                    EntityBase.AppendPreparedField(ref doc, "0", 1); //Tipo de Inscrição - pos 154
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Número de Inscrição

        //                    EntityBase.AppendPreparedField(ref doc, " ".PadLeft(40, ' '), 40); //Nome do Sacador/Avalista
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(3, '0'), 3); //Cód. Bco. Corresp. na Compensação - não tratado - pos 210
        //                    EntityBase.AppendPreparedField(ref doc, " ".PadLeft(20, ' '), 20); //Nosso Nº no Banco Correspondente - não tratado
        //                    EntityBase.AppendPreparedField(ref doc, " ".PadLeft(8, ' '), 8); //Uso Exclusivo FEBRABAN/CNAB 

        //                    #region Texto data limite - comentado
        //                    //if (valorDataLimite != null) // && Convert.ToString(valorDataLimite) != "0")
        //                    //{
        //                    //    if (Int32.TryParse(Convert.ToString(valorDataLimite), out result))
        //                    //    {
        //                    //        if (result < cob.DataVencimento.Day)
        //                    //        {
        //                    //            dataLimite = new DateTime(cob.DataVencimento.AddMonths(1).Year,
        //                    //                cob.DataVencimento.AddMonths(1).Month, result);
        //                    //        }
        //                    //        else
        //                    //        {
        //                    //            dataLimite = new DateTime(cob.DataVencimento.Year, cob.DataVencimento.Month, result);
        //                    //        }

        //                    //        EntityBase.AppendPreparedField(ref doc, dataLimite.ToString("dd/MM/yyyy").PadRight(50, ' '), 50); //data limite calculada
        //                    //    }
        //                    //    else
        //                    //    {
        //                    //        EntityBase.AppendPreparedField(ref doc, Convert.ToString(valorDataLimite).PadRight(50, ' '), 50);
        //                    //    }
        //                    //}
        //                    //else
        //                    //    EntityBase.AppendPreparedField(ref doc, " ".PadRight(50, ' '), 50);  //Texto data limite

        //                    #endregion

        //                    cob.Carteira = Convert.ToInt32(carteira);
        //                    cob.ArquivoIDUltimoEnvio = arquivo.ID;
        //                    cob.DataCriacao = DateTime.Now;
        //                    pm.Save(cob); /////////////////////////////////////////////////////////////////////////////////

        //                    #endregion

        //                    totalRegistrosDetalhe++;
        //                    valorTotal += cob.Valor;
        //                }
        //                catch (Exception ex)
        //                {
        //                    try
        //                    {
        //                        string path = System.Configuration.ConfigurationManager.AppSettings["financialFilePath"].Replace("/", @"\");
        //                        System.IO.File.WriteAllText(path + "err_" + DateTime.Now.ToString("ddMMyyyyHHmmssfff") + ".txt",
        //                            ex.Message +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + ex.StackTrace +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + Convert.ToString(cob.ID) +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + i.ToString(),
        //                            System.Text.Encoding.ASCII);
        //                    }
        //                    catch { }
        //                    continue;
        //                }

        //                //numSequencial++;
        //            }
        //            #endregion

        //            #region TRAILLER DE LOTE ---------------------------------

        //            doc.Append(Environment.NewLine);

        //            EntityBase.AppendPreparedField(ref doc, "001", 3);
        //            EntityBase.AppendPreparedField(ref doc, "0001", 4);
        //            EntityBase.AppendPreparedField(ref doc, "5", 1);
        //            EntityBase.AppendPreparedField(ref doc, " ", 9);
        //            EntityBase.AppendPreparedField(ref doc, (numSequencial + 2).ToString().PadLeft(6, '0'), 6);
        //            EntityBase.AppendPreparedField(ref doc, " ", 217);

        //            #endregion

        //            #region TRAILLER -----------------------------------------

        //            doc.Append(Environment.NewLine);

        //            EntityBase.AppendPreparedField(ref doc, "001", 3);
        //            EntityBase.AppendPreparedField(ref doc, "9999", 4);
        //            EntityBase.AppendPreparedField(ref doc, "9", 1);
        //            EntityBase.AppendPreparedField(ref doc, " ", 9); //branco
        //            EntityBase.AppendPreparedField(ref doc, "1".PadLeft(6, '0'), 6); //qtd de lotes
        //            EntityBase.AppendPreparedField(ref doc, (numSequencial + 4).ToString().PadLeft(6, '0'), 6);
        //            EntityBase.AppendPreparedField(ref doc, "0".PadLeft(6, '0'), 6); //Qtde de Contas p/ Conc. (Lotes)
        //            EntityBase.AppendPreparedField(ref doc, " ", 205); //

        //            //EntityBase.AppendPreparedField(ref doc, "", 334); //145
        //            //EntityBase.AppendPreparedField(ref doc, String.Format("{0:" + mascara6 + "}", numSequencial), 6); //146
        //            //EntityBase.AppendPreparedField(ref doc, valorTotal.ToString("N2").Replace(".", "").Replace(",", "").PadLeft(17, '0'), 17); //147
        //            //EntityBase.AppendPreparedField(ref doc, " ".PadLeft(200, ' '), 200); //148
        //            //EntityBase.AppendPreparedField(ref doc, String.Format("{0:" + mascara6 + "}", numSequencial), 6); //149

        //            #endregion

        //            arquivo.SalvaItens(cobrancaIds, pm);

        //            if (_pm == null) { pm.Commit(); } //commit apenas se nao estiver participando de uma transacao externa
        //            arquivoConteudo = doc.ToString();
        //            return arquivoConteudo;
        //        }
        //        catch
        //        {
        //            if (_pm == null) { pm.Rollback(); }
        //            throw;
        //        }
        //        finally
        //        {
        //            if (_pm == null) { pm = null; }
        //        }
        //    }

        //    public static String GeraDocumentoCobranca_BB17(string cobrancaId, PersistenceManager _pm)
        //    {
        //        Int32 numSequencial = 0;

        //        PersistenceManager pm = _pm;

        //        Int32 contratoadmQualicorpID = Convert.ToInt32(ConfigurationManager.AppSettings["contratoAdmQualicorpIdIncial"]);

        //        if (_pm == null)
        //        {
        //            pm = new PersistenceManager();
        //            pm.IsoLevel = IsolationLevel.ReadUncommitted;
        //            pm.BeginTransactionContext();
        //        }

        //        Cobranca cobprova = new Cobranca(cobrancaId);
        //        pm.Load(cobprova);
        //        Contrato contratoprova = new Contrato(cobprova.PropostaID);
        //        pm.Load(contratoprova);

        //        //String agCCDV_itau = "";
        //        String headerCedente = "UBRASP";
        //        string agencia = "05956", agenciadv = "0";
        //        string numcontacorr = "40037".PadLeft(12, '0');
        //        string dvcontacorr = "8";
        //        string cnpj = "49938327000106"; //

        //        ////////////////////////////////////////////////// Só haverá cedente ubrasp

        //        //agCCDV_itau = "0646042606";    //qualicorp
        //        string numConvenio = Cobranca.Convenio2UBRASP.PadLeft(9, '0'), carteira = "17", variacao = "019";
        //        //////////////////////////////////////////////////

        //        try
        //        {
        //            if (cobrancaId == null) { return null; }

        //            String dataAgora = DateTime.Now.ToString("ddMMyy");
        //            StringBuilder doc = new StringBuilder();

        //            ////Cobranca.eCarteira carteira = (Cobranca.eCarteira)aras[0].Carteira;

        //            #region HEADER -------------------------------------------

        //            EntityBase.AppendPreparedField(ref doc, "001", 3);          //codigo do banco na compensacao
        //            EntityBase.AppendPreparedField(ref doc, "0000", 4);         //lote de serviço
        //            EntityBase.AppendPreparedField(ref doc, "0", 1);            //tipo de registro
        //            EntityBase.AppendPreparedField(ref doc, "         ", 9);    //brancos
        //            EntityBase.AppendPreparedField(ref doc, "2", 1);            //tipo de inscrição - 2 para CNPJ, 1 para CPF
        //            //EntityBase.AppendPreparedField(ref doc, "0".PadLeft(14, '0'), 14);  //CNPJ (ou cpf) //faltou: cnpj
        //            EntityBase.AppendPreparedField(ref doc, cnpj, 14);          //CNPJ (ou cpf) 

        //            //EntityBase.AppendPreparedField(ref doc, numConvenio, 9);    //Nùmero do convênio de cobrança BB
        //            //EntityBase.AppendPreparedField(ref doc, "0014", 4);         //Cobrança Cedente BB
        //            //EntityBase.AppendPreparedField(ref doc, carteira, 2);       //Número da carteira de cobrança BB - pos.46
        //            //EntityBase.AppendPreparedField(ref doc, variacao, 3);       //Número da variação da carteira de cobrança BB
        //            EntityBase.AppendPreparedField(ref doc, "002896830001417019", 18);

        //            EntityBase.AppendPreparedField(ref doc, "  ", 2);           //Campo reservado BB
        //            EntityBase.AppendPreparedField(ref doc, agencia, 5);        //Agência mantenedora da conta
        //            EntityBase.AppendPreparedField(ref doc, agenciadv, 1);      //Dígito Verificador da Agência
        //            EntityBase.AppendPreparedField(ref doc, numcontacorr, 12);  //Número da Conta Corrente
        //            EntityBase.AppendPreparedField(ref doc, dvcontacorr, 1);    //Dígito Verificador da Conta
        //            EntityBase.AppendPreparedField(ref doc, " ", 1);            //Dígito Verificador da Ag/Conta - Campo não tratado pelo Banco do Brasil. Informar 'branco' (espaço) OU zero.
        //            EntityBase.AppendPreparedField(ref doc, headerCedente.PadRight(30, ' '), 30); //Nome da Empresa
        //            EntityBase.AppendPreparedField(ref doc, "BANCO DO BRASIL S.A.".PadRight(30, ' '), 30); //Nome do Banco
        //            EntityBase.AppendPreparedField(ref doc, " ", 10);           //Uso Exclusivo FEBRABAN / CNAB
        //            EntityBase.AppendPreparedField(ref doc, "1", 1);            //Código Remessa / Retorno - 1=remessa, 2=retorno
        //            EntityBase.AppendPreparedField(ref doc, DateTime.Now.ToString("ddMMyyyy"), 8); //Data de Geração do Arquivo
        //            EntityBase.AppendPreparedField(ref doc, DateTime.Now.ToString("HHmmss"), 6);   //Hora de Geração do Arquivo

        //            //posso usar a propriedade versao da classe...
        //            EntityBase.AppendPreparedField(ref doc, "000000", 6);       //Número Seqüencial do Arquivo

        //            EntityBase.AppendPreparedField(ref doc, "000", 3);          //Nº da Versão do Layout do Arquivo
        //            EntityBase.AppendPreparedField(ref doc, "00000", 5);        //Densidade de Gravação do Arquivo
        //            EntityBase.AppendPreparedField(ref doc, " ".PadRight(20, ' '), 20); //Para Uso Reservado do Banco
        //            EntityBase.AppendPreparedField(ref doc, " ".PadRight(20, ' '), 20); //Para Uso Reservado da Empresa
        //            EntityBase.AppendPreparedField(ref doc, " ".PadRight(29, ' '), 29); //Para Uso Reservado da Empresa

        //            #endregion

        //            #region HEADER DE LOTE -----------------------------------

        //            doc.Append(Environment.NewLine);
        //            EntityBase.AppendPreparedField(ref doc, "001", 3);          //codigo do banco na compensacao
        //            EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Lote de Serviço
        //            EntityBase.AppendPreparedField(ref doc, "1", 1);            //tipo de registro
        //            EntityBase.AppendPreparedField(ref doc, "R", 1);            //tipo de operação
        //            EntityBase.AppendPreparedField(ref doc, "01", 2);           //tipo de serviço
        //            EntityBase.AppendPreparedField(ref doc, "  ", 2);           //
        //            EntityBase.AppendPreparedField(ref doc, "000", 3);          //Nº da Versão do Layout do Lote - nao criticado pelo banco
        //            EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //            EntityBase.AppendPreparedField(ref doc, "2", 1);            //Tipo de Inscrição da Empresa - 2=CNPJ
        //            EntityBase.AppendPreparedField(ref doc, cnpj.PadLeft(15, '0'), 15);  //CNPJ (ou cpf) //faltou: cnpj

        //            //EntityBase.AppendPreparedField(ref doc, numConvenio, 9);    //Nùmero do convênio de cobrança BB
        //            //EntityBase.AppendPreparedField(ref doc, "0014", 4);         //Cobrança Cedente BB
        //            //EntityBase.AppendPreparedField(ref doc, carteira, 2);       //Número da carteira de cobrança BB
        //            //EntityBase.AppendPreparedField(ref doc, variacao, 3);       //Número da variação da carteira de cobrança BB
        //            EntityBase.AppendPreparedField(ref doc, "002896830001417019", 18);

        //            EntityBase.AppendPreparedField(ref doc, "  ", 2);           //campo que identifica remessa de testes: brancos ou TS
        //            EntityBase.AppendPreparedField(ref doc, agencia, 5);        //Agência mantenedora da conta
        //            EntityBase.AppendPreparedField(ref doc, agenciadv, 1);      //Dígito Verificador da Agência
        //            EntityBase.AppendPreparedField(ref doc, numcontacorr, 12);  //Número da Conta Corrente
        //            EntityBase.AppendPreparedField(ref doc, dvcontacorr, 1);    //Dígito Verificador da Conta
        //            EntityBase.AppendPreparedField(ref doc, " ", 1);            //Dígito Verificador da Ag/Conta - Campo não tratado pelo Banco do Brasil. Informar 'branco' (espaço) OU zero.

        //            EntityBase.AppendPreparedField(ref doc, headerCedente.PadRight(30, ' '), 30); //Nome da Empresa
        //            EntityBase.AppendPreparedField(ref doc, " ".PadRight(40, ' '), 40); //Mensagem 1
        //            EntityBase.AppendPreparedField(ref doc, " ".PadRight(40, ' '), 40); //Mensagem 2
        //            EntityBase.AppendPreparedField(ref doc, "00000000", 8);            //Número Remessa/Retorno 
        //            EntityBase.AppendPreparedField(ref doc, "00000000", 8);            //Data de Gravação Remessa/Retorno - pode ser zeros 
        //            EntityBase.AppendPreparedField(ref doc, "00000000", 8);            //Data do Crédito 
        //            EntityBase.AppendPreparedField(ref doc, " ", 33);           //Uso Exclusivo FEBRABAN/CNAB

        //            #endregion

        //            //Carrega cobrancas envolvidas
        //            List<string> cobrancaIDs = new List<string>(); cobrancaIDs.Add(cobrancaId);
        //            IList<Cobranca> cobrancas = Cobranca.CarregarTodas_OrdemPorContratoParcela_Optimized(cobrancaIDs, pm); //
        //            List<Object> cobrancaIds = new List<Object>();
        //            if (cobrancas == null) { return null; }

        //            List<TabelaValorVencimentoVO> lista = new List<TabelaValorVencimentoVO>();

        //            #region DETAIL -------------------------------------------

        //            Endereco endereco = null;
        //            //, diaDataSemJuros, result = 0, 
        //            int totalRegistrosDetalhe = 0;
        //            String mascara6 = new String('0', 6); //, nossoNumero = "";
        //            Decimal valorTotal = 0; //, mora = 0, multa = 0;
        //            //Object valorDataLimite = null;
        //            DateTime contratoAdmissao = DateTime.MinValue, vigencia, vencimento, dataLimite = DateTime.MinValue;
        //            //CalendarioVencimento rcv = null;
        //            TabelaValorVencimentoVO retTvv = null;
        //            Contrato contrato = null;
        //            IList<TabelaValor> tabela = null; Taxa taxa = null; EstipulanteTaxa estipulanteTaxa = null;
        //            System.Globalization.CultureInfo cinfo = new System.Globalization.CultureInfo("pt-Br");

        //            int qtdTotalBoletos = 0, numBoletoCorrente = 0, idContratoAtual = 0;

        //            int i = 0;

        //            //String[] contratoAdmIds = null;
        //            System.Collections.Hashtable contratoADM_Criterio = new System.Collections.Hashtable();
        //            List<string> parametrosProcessados = new List<string>();

        //            foreach (Cobranca cob in cobrancas)
        //            {
        //                if (parametrosProcessados.Contains(string.Concat(cob.DataVencimento.ToString("ddMMyyyy"), cob.PropostaID))) continue;

        //                parametrosProcessados.Add(string.Concat(cob.DataVencimento.ToString("ddMMyyyy"), cob.PropostaID));

        //                i++;
        //                try
        //                {
        //                    #region DETAIL P ---------------------------------

        //                    #region

        //                    #region localiza o critério correspondente

        //                    contrato = Contrato.CarregarParcial(cob.PropostaID, pm);

        //                    #endregion

        //                    numSequencial++;

        //                    cobrancaIds.Add(cob.ID);

        //                    if (Convert.ToInt32(cob.PropostaID) != idContratoAtual)
        //                    {
        //                        numBoletoCorrente = 0; idContratoAtual = Convert.ToInt32(cob.PropostaID);
        //                        qtdTotalBoletos = 0;
        //                        foreach (Cobranca _temp in cobrancas)
        //                        {
        //                            if (Convert.ToInt32(_temp.PropostaID) == idContratoAtual) { qtdTotalBoletos++; }
        //                            else if (qtdTotalBoletos > 0) { break; }
        //                        }
        //                    }

        //                    numBoletoCorrente++;

        //                    #region checa se tem despesa nao embutida com postagem. se tem, incrementa o valor da cobranca:

        //                    retTvv = TabelaValorVencimentoVO.ExisteProposta(cob.PropostaID, lista);
        //                    if (retTvv == null)
        //                    {
        //                        //contrato = Contrato.CarregarParcial(cob.PropostaID, pm);
        //                        tabela = TabelaValor.CarregarTabelaVigente(contrato.ContratoADMID, contrato.Admissao, cob.DataVencimento, pm);
        //                        if (tabela != null && tabela.Count > 0)
        //                        {
        //                            retTvv = TabelaValorVencimentoVO.ExisteTabela(tabela[0].ID, lista);
        //                            if (retTvv == null)
        //                            {
        //                                taxa = Taxa.CarregarPorTabela(tabela[0].ID, pm);
        //                                if (taxa != null && !taxa.Embutido)
        //                                {
        //                                    cob.Valor += taxa.ValorEmbutido;
        //                                }

        //                                retTvv = new TabelaValorVencimentoVO();
        //                                retTvv.PropostaID = contrato.ID;
        //                                retTvv.TabelaID = tabela[0].ID;
        //                                if (tabela[0].VencimentoFim != DateTime.MinValue)
        //                                { retTvv.Vencimento = tabela[0].VencimentoFim.AddMonths(1); }
        //                                if (taxa != null && !taxa.Embutido)
        //                                { retTvv.ValorBancario = taxa.ValorEmbutido; }

        //                                if (contrato.CobrarTaxaAssociativa)
        //                                {
        //                                    estipulanteTaxa = EstipulanteTaxa.CarregarVigente(contrato.EstipulanteID, pm);
        //                                    if (estipulanteTaxa != null)
        //                                    { retTvv.ValorSindicalizacao = estipulanteTaxa.Valor; }
        //                                }

        //                                lista.Add(retTvv);
        //                                //taxa = null;
        //                            }
        //                            else
        //                                cob.Valor += retTvv.ValorBancario;
        //                        }
        //                    }
        //                    else
        //                        cob.Valor += retTvv.ValorBancario;

        //                    #endregion

        //                    #region data de admissao do contrato

        //                    //Contrato _contrato = Contrato.CarregarParcial(cob.PropostaID, pm);
        //                    if (contrato != null) { contratoAdmissao = contrato.Admissao; }
        //                    else { continue; }
        //                    #endregion

        //                    #endregion

        //                    doc.Append(Environment.NewLine);

        //                    EntityBase.AppendPreparedField(ref doc, "001", 3);          //codigo do banco na compensacao
        //                    EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Lote de Serviço
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //tipo de registro
        //                    EntityBase.AppendPreparedField(ref doc, numSequencial.ToString().PadLeft(5, '0'), 5); //Nº do Registro - 04.3A
        //                    EntityBase.AppendPreparedField(ref doc, "P", 1);            //Código de Segmento do Reg. Detalhe
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "01", 2);           //Código de Movimento Remessa - C004

        //                    //
        //                    EntityBase.AppendPreparedField(ref doc, agencia, 5);        //Agência mantenedora da conta
        //                    EntityBase.AppendPreparedField(ref doc, agenciadv, 1);      //Dígito Verificador da Agência
        //                    EntityBase.AppendPreparedField(ref doc, numcontacorr, 12);  //Número da Conta Corrente
        //                    EntityBase.AppendPreparedField(ref doc, dvcontacorr, 1);    //Dígito Verificador da Conta
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //Dígito Verificador da Ag/Conta - Campo não tratado pelo Banco do Brasil. Informar 'branco' (espaço) OU zero.

        //                    cob.Carteira = 17;
        //                    cob.NossoNumero = cob.GeraNossoNumero();
        //                    EntityBase.AppendPreparedField(ref doc, cob.NossoNumero, 20); //Seu Número
        //                    //EntityBase.AppendPreparedField(ref doc, "0".PadRight(20, '0'), 20); //Seu Número - pos 38

        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);   // Código da carteira 11
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);   // Forma de Cadastr. do Título no Banco - ampo não tratado pelo sistema do Banco do Brasil
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);   // Tipo de documento - campo não tratado pelo sistema do Banco do Brasil

        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);   // Identificação da Emissão do Bloqueto: 1 banco emite, 0 nos emitimos C009 - 17.3P faltou: definir
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);   // Identificação da Destibuição do Bloqueto: 1 banco distribui, 0 nos distribuimos C008 - C010 - 18.3P faltou: definir
        //                    EntityBase.AppendPreparedField(ref doc, Convert.ToString(cob.ID).PadRight(15, ' '), 15); // Número do Documento de Cobrança
        //                    EntityBase.AppendPreparedField(ref doc, cob.DataVencimento.ToString("ddMMyyyy"), 8);  // Data de vencimento - pos 78

        //                    //valor do boleto
        //                    EntityBase.AppendPreparedField(ref doc, cob.Valor.ToString("N2", cinfo).Split(',')[0].Replace(".", "").PadLeft(13, '0'), 13);
        //                    EntityBase.AppendPreparedField(ref doc, cob.Valor.ToString("N2", cinfo).Split(',')[1].PadLeft(2, '0'), 2);


        //                    EntityBase.AppendPreparedField(ref doc, "00000", 5);    //Agência Encarregada da Cobrança
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);        //Dígito Verificador da Agência

        //                    EntityBase.AppendPreparedField(ref doc, "02", 2);        //Espécie do Título - posicao 107
        //                    EntityBase.AppendPreparedField(ref doc, "A", 1);        //dentific. de Título Aceito/Não Aceito 
        //                    EntityBase.AppendPreparedField(ref doc, cob.DataCriacao.ToString("ddMMyyyy"), 8);  // Data de emissão - pos 110
        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);        //Código do Juros de Mora faltou: definir '1'=Valor por Dia '2'=Taxa Mensal '3'=Isento
        //                    EntityBase.AppendPreparedField(ref doc, cob.DataVencimento.AddDays(1).ToString("ddMMyyyy"), 8);  // Data do Juros de Mora - pos 119
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Juros de Mora por Dia/Taxa faltou: definir

        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);        //Código do Desconto 1 - pos 142
        //                    EntityBase.AppendPreparedField(ref doc, "00000000", 8); //Data do Desconto 1  - pos 143
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Desconto 1 Valor/Percentual a ser Concedido 
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Valor do IOF a ser Recolhido
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Valor do Abatimento
        //                    EntityBase.AppendPreparedField(ref doc, Convert.ToString(cob.ID).PadLeft(25, '0'), 25); //Identificação do Título na Empresa - pos 196

        //                    EntityBase.AppendPreparedField(ref doc, "3", 1); //Código para Protesto - 1' – Protestar dias corridos, '2' – Protestar dias úteis, e '3' – Não protestar. faltou: definir - pos 221
        //                    EntityBase.AppendPreparedField(ref doc, "00", 2); //Número de Dias para Protesto - Preencher de acordo com o código informado na posição 221. Para código '1' – é possível, de 6 a 29 dias, 35º, 40º, dia corrido. Para código '2' – é possível, 3º, 4º ou 5º dia útil. Para código '3' preencher com Zeros. faltou: definir
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1); // Código para Baixa/Devolução - não tratado
        //                    EntityBase.AppendPreparedField(ref doc, "000", 3); // Número de Dias para Baixa/Devolução - não tratado
        //                    EntityBase.AppendPreparedField(ref doc, "09", 2); // Código da Moeda - g065
        //                    EntityBase.AppendPreparedField(ref doc, "0000000000", 10); // Nº do Contrato da Operação de Créd.  - não tratado
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1); //Uso Exclusivo FEBRABAN/CNAB 


        //                    #endregion

        //                    #region DETAIL Q ---------------------------------

        //                    doc.Append(Environment.NewLine);

        //                    numSequencial++;

        //                    EntityBase.AppendPreparedField(ref doc, "001", 3);          //codigo do banco na compensacao
        //                    EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Lote de Serviço
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //tipo de registro
        //                    EntityBase.AppendPreparedField(ref doc, numSequencial.ToString().PadLeft(5, '0'), 5); //Nº do Registro - 04.3A
        //                    EntityBase.AppendPreparedField(ref doc, "Q", 1);            //Código de Segmento do Reg. Detalhe
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "01", 2);           //Código de Movimento Remessa - C004 - pos 16

        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);           //Tipo e inscrição - C005
        //                    EntityBase.AppendPreparedField(ref doc, cob.ContratoTitularCPF.PadLeft(15, '0'), 15); //Número de inscrição - C006 - pos 19

        //                    EntityBase.AppendPreparedField(ref doc, cob.ContratoTitularNome, 40); //Nome - C013 - pos 34

        //                    endereco = new Endereco(cob.ContratoEnderecoCobrancaID);
        //                    endereco.Carregar(pm);
        //                    if (endereco.CEP.IndexOf('-') > -1) { endereco.CEP = endereco.CEP.Replace("-", ""); }

        //                    if (endereco.Numero == null) endereco.Numero = "";
        //                    if (string.IsNullOrEmpty(endereco.Complemento))
        //                    {
        //                        int tamanhoDisponivel = 40 - (endereco.Numero.Length + 1);

        //                        if (endereco.Logradouro.Length > tamanhoDisponivel)
        //                        {
        //                            endereco.Logradouro = endereco.Logradouro.Substring(0, tamanhoDisponivel);
        //                        }

        //                        if (!string.IsNullOrEmpty(endereco.Numero))
        //                            endereco.Logradouro += string.Concat(",", endereco.Numero);
        //                    }
        //                    else
        //                    {
        //                        int tamanhoDisponivel = 40 - ((endereco.Numero.Length + 1) + (endereco.Complemento.Length + 1));

        //                        if (endereco.Logradouro.Length > tamanhoDisponivel)
        //                        {
        //                            endereco.Logradouro = endereco.Logradouro.Substring(0, tamanhoDisponivel);
        //                        }

        //                        if (!string.IsNullOrEmpty(endereco.Numero))
        //                            endereco.Logradouro += string.Concat(",", endereco.Numero, ",", endereco.Complemento);
        //                        else
        //                            endereco.Logradouro += string.Concat(",", endereco.Complemento);
        //                    }

        //                    EntityBase.AppendPreparedField(ref doc, endereco.Logradouro, 40); // endereco - pos 74
        //                    EntityBase.AppendPreparedField(ref doc, endereco.Bairro, 15);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.CEP, 8);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.Cidade, 15);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.UF, 2);

        //                    EntityBase.AppendPreparedField(ref doc, "0", 1); //Tipo de Inscrição - pos 154
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Número de Inscrição

        //                    EntityBase.AppendPreparedField(ref doc, " ".PadLeft(40, ' '), 40); //Nome do Sacador/Avalista
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(3, '0'), 3); //Cód. Bco. Corresp. na Compensação - não tratado - pos 210
        //                    EntityBase.AppendPreparedField(ref doc, " ".PadLeft(20, ' '), 20); //Nosso Nº no Banco Correspondente - não tratado
        //                    EntityBase.AppendPreparedField(ref doc, " ".PadLeft(8, ' '), 8); //Uso Exclusivo FEBRABAN/CNAB 

        //                    #endregion

        //                    totalRegistrosDetalhe++;
        //                    valorTotal += cob.Valor;

        //                    cob.Carteira = Convert.ToInt32(carteira);
        //                    cob.ArquivoIDUltimoEnvio = -10;
        //                    pm.Save(cob);
        //                }
        //                catch (Exception ex)
        //                {
        //                    try
        //                    {
        //                        string path = System.Configuration.ConfigurationManager.AppSettings["financialFilePath"].Replace("/", @"\");
        //                        System.IO.File.WriteAllText(path + "err_" + DateTime.Now.ToString("ddMMyyyyHHmmssfff") + ".txt",
        //                            ex.Message +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + ex.StackTrace +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + Convert.ToString(cob.ID) +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + i.ToString(),
        //                            System.Text.Encoding.ASCII);
        //                    }
        //                    catch { }
        //                    continue;
        //                }
        //            }
        //            #endregion

        //            #region TRAILLER DE LOTE ---------------------------------

        //            doc.Append(Environment.NewLine);

        //            EntityBase.AppendPreparedField(ref doc, "001", 3);
        //            EntityBase.AppendPreparedField(ref doc, "0001", 4);
        //            EntityBase.AppendPreparedField(ref doc, "5", 1);
        //            EntityBase.AppendPreparedField(ref doc, " ", 9);
        //            EntityBase.AppendPreparedField(ref doc, (numSequencial + 2).ToString().PadLeft(6, '0'), 6);
        //            EntityBase.AppendPreparedField(ref doc, " ", 217);

        //            #endregion

        //            #region TRAILLER -----------------------------------------

        //            doc.Append(Environment.NewLine);

        //            EntityBase.AppendPreparedField(ref doc, "001", 3);
        //            EntityBase.AppendPreparedField(ref doc, "9999", 4);
        //            EntityBase.AppendPreparedField(ref doc, "9", 1);
        //            EntityBase.AppendPreparedField(ref doc, " ", 9); //branco
        //            EntityBase.AppendPreparedField(ref doc, "1".PadLeft(6, '0'), 6); //qtd de lotes
        //            EntityBase.AppendPreparedField(ref doc, (numSequencial + 4).ToString().PadLeft(6, '0'), 6);
        //            EntityBase.AppendPreparedField(ref doc, "0".PadLeft(6, '0'), 6); //Qtde de Contas p/ Conc. (Lotes)
        //            EntityBase.AppendPreparedField(ref doc, " ", 205); //

        //            #endregion

        //            if (_pm == null) { pm.Commit(); } //se não está partcipando de uma transacao externa, comita
        //            return doc.ToString();
        //        }
        //        catch
        //        {
        //            if (_pm == null) { pm.Rollback(); }
        //            throw;
        //        }
        //        finally
        //        {
        //            if (_pm == null) { pm = null; }
        //        }
        //    }

        //    public static String GeraDocumentoCobranca_BB17_Test(IList<String> cobrancaIDs, PersistenceManager _pm)
        //    {
        //        Int32 numSequencial = 0;

        //        PersistenceManager pm = _pm;

        //        Int32 contratoadmQualicorpID = Convert.ToInt32(ConfigurationManager.AppSettings["contratoAdmQualicorpIdIncial"]);

        //        if (_pm == null)
        //        {
        //            pm = new PersistenceManager();
        //            pm.IsoLevel = IsolationLevel.ReadUncommitted;
        //            //pm.BeginTransactionContext();
        //        }

        //        //String agCCDV_itau = "";
        //        String headerCedente = "UBRASP";
        //        string agencia = "05956", agenciadv = "0";
        //        string numcontacorr = "40037".PadLeft(12, '0');
        //        string dvcontacorr = "8";
        //        string cnpj = "49938327000106"; //

        //        ////////////////////////////////////////////////// Só haverá cedente ubrasp

        //        //agCCDV_itau = "0646042606";    //qualicorp
        //        string numConvenio = Cobranca.Convenio2UBRASP.PadLeft(9, '0'), carteira = "17", variacao = "019";
        //        //////////////////////////////////////////////////

        //        try
        //        {
        //            String dataAgora = DateTime.Now.ToString("ddMMyy");
        //            StringBuilder doc = new StringBuilder();

        //            ////Cobranca.eCarteira carteira = (Cobranca.eCarteira)aras[0].Carteira;

        //            #region HEADER -------------------------------------------

        //            EntityBase.AppendPreparedField(ref doc, "001", 3);          //codigo do banco na compensacao
        //            EntityBase.AppendPreparedField(ref doc, "0000", 4);         //lote de serviço
        //            EntityBase.AppendPreparedField(ref doc, "0", 1);            //tipo de registro
        //            EntityBase.AppendPreparedField(ref doc, "         ", 9);    //brancos
        //            EntityBase.AppendPreparedField(ref doc, "2", 1);            //tipo de inscrição - 2 para CNPJ, 1 para CPF
        //            //EntityBase.AppendPreparedField(ref doc, "0".PadLeft(14, '0'), 14);  //CNPJ (ou cpf) //faltou: cnpj
        //            EntityBase.AppendPreparedField(ref doc, cnpj, 14);          //CNPJ (ou cpf) 

        //            //EntityBase.AppendPreparedField(ref doc, numConvenio, 9);    //Nùmero do convênio de cobrança BB
        //            //EntityBase.AppendPreparedField(ref doc, "0014", 4);         //Cobrança Cedente BB
        //            //EntityBase.AppendPreparedField(ref doc, carteira, 2);       //Número da carteira de cobrança BB - pos.46
        //            //EntityBase.AppendPreparedField(ref doc, variacao, 3);       //Número da variação da carteira de cobrança BB
        //            EntityBase.AppendPreparedField(ref doc, "002896830001417019", 18);

        //            EntityBase.AppendPreparedField(ref doc, "  ", 2);           //Campo reservado BB
        //            EntityBase.AppendPreparedField(ref doc, agencia, 5);        //Agência mantenedora da conta
        //            EntityBase.AppendPreparedField(ref doc, agenciadv, 1);      //Dígito Verificador da Agência
        //            EntityBase.AppendPreparedField(ref doc, numcontacorr, 12);  //Número da Conta Corrente
        //            EntityBase.AppendPreparedField(ref doc, dvcontacorr, 1);    //Dígito Verificador da Conta
        //            EntityBase.AppendPreparedField(ref doc, " ", 1);            //Dígito Verificador da Ag/Conta - Campo não tratado pelo Banco do Brasil. Informar 'branco' (espaço) OU zero.
        //            EntityBase.AppendPreparedField(ref doc, headerCedente.PadRight(30, ' '), 30); //Nome da Empresa
        //            EntityBase.AppendPreparedField(ref doc, "BANCO DO BRASIL S.A.".PadRight(30, ' '), 30); //Nome do Banco
        //            EntityBase.AppendPreparedField(ref doc, " ", 10);           //Uso Exclusivo FEBRABAN / CNAB
        //            EntityBase.AppendPreparedField(ref doc, "1", 1);            //Código Remessa / Retorno - 1=remessa, 2=retorno
        //            EntityBase.AppendPreparedField(ref doc, DateTime.Now.ToString("ddMMyyyy"), 8); //Data de Geração do Arquivo
        //            EntityBase.AppendPreparedField(ref doc, DateTime.Now.ToString("HHmmss"), 6);   //Hora de Geração do Arquivo

        //            //posso usar a propriedade versao da classe...
        //            EntityBase.AppendPreparedField(ref doc, "000000", 6);       //Número Seqüencial do Arquivo

        //            EntityBase.AppendPreparedField(ref doc, "000", 3);          //Nº da Versão do Layout do Arquivo
        //            EntityBase.AppendPreparedField(ref doc, "00000", 5);        //Densidade de Gravação do Arquivo
        //            EntityBase.AppendPreparedField(ref doc, " ".PadRight(20, ' '), 20); //Para Uso Reservado do Banco
        //            EntityBase.AppendPreparedField(ref doc, " ".PadRight(20, ' '), 20); //Para Uso Reservado da Empresa
        //            EntityBase.AppendPreparedField(ref doc, " ".PadRight(29, ' '), 29); //Para Uso Reservado da Empresa

        //            #endregion

        //            #region HEADER DE LOTE -----------------------------------

        //            doc.Append(Environment.NewLine);
        //            EntityBase.AppendPreparedField(ref doc, "001", 3);          //codigo do banco na compensacao
        //            EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Lote de Serviço
        //            EntityBase.AppendPreparedField(ref doc, "1", 1);            //tipo de registro
        //            EntityBase.AppendPreparedField(ref doc, "R", 1);            //tipo de operação
        //            EntityBase.AppendPreparedField(ref doc, "01", 2);           //tipo de serviço
        //            EntityBase.AppendPreparedField(ref doc, "  ", 2);           //
        //            EntityBase.AppendPreparedField(ref doc, "000", 3);          //Nº da Versão do Layout do Lote - nao criticado pelo banco
        //            EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //            EntityBase.AppendPreparedField(ref doc, "2", 1);            //Tipo de Inscrição da Empresa - 2=CNPJ
        //            EntityBase.AppendPreparedField(ref doc, cnpj.PadLeft(15, '0'), 15);  //CNPJ (ou cpf) //faltou: cnpj

        //            //EntityBase.AppendPreparedField(ref doc, numConvenio, 9);    //Nùmero do convênio de cobrança BB
        //            //EntityBase.AppendPreparedField(ref doc, "0014", 4);         //Cobrança Cedente BB
        //            //EntityBase.AppendPreparedField(ref doc, carteira, 2);       //Número da carteira de cobrança BB
        //            //EntityBase.AppendPreparedField(ref doc, variacao, 3);       //Número da variação da carteira de cobrança BB
        //            EntityBase.AppendPreparedField(ref doc, "002896830001417019", 18);

        //            EntityBase.AppendPreparedField(ref doc, "  ", 2);           //campo que identifica remessa de testes: brancos ou TS
        //            EntityBase.AppendPreparedField(ref doc, agencia, 5);        //Agência mantenedora da conta
        //            EntityBase.AppendPreparedField(ref doc, agenciadv, 1);      //Dígito Verificador da Agência
        //            EntityBase.AppendPreparedField(ref doc, numcontacorr, 12);  //Número da Conta Corrente
        //            EntityBase.AppendPreparedField(ref doc, dvcontacorr, 1);    //Dígito Verificador da Conta
        //            EntityBase.AppendPreparedField(ref doc, " ", 1);            //Dígito Verificador da Ag/Conta - Campo não tratado pelo Banco do Brasil. Informar 'branco' (espaço) OU zero.

        //            EntityBase.AppendPreparedField(ref doc, headerCedente.PadRight(30, ' '), 30); //Nome da Empresa
        //            EntityBase.AppendPreparedField(ref doc, " ".PadRight(40, ' '), 40); //Mensagem 1
        //            EntityBase.AppendPreparedField(ref doc, " ".PadRight(40, ' '), 40); //Mensagem 2
        //            EntityBase.AppendPreparedField(ref doc, "00000000", 8);            //Número Remessa/Retorno 
        //            EntityBase.AppendPreparedField(ref doc, "00000000", 8);            //Data de Gravação Remessa/Retorno - pode ser zeros 
        //            EntityBase.AppendPreparedField(ref doc, "00000000", 8);            //Data do Crédito 
        //            EntityBase.AppendPreparedField(ref doc, " ", 33);           //Uso Exclusivo FEBRABAN/CNAB

        //            #endregion

        //            //Carrega cobrancas envolvidas
        //            //List<string> cobrancaIDs = new List<string>();
        //            //cobrancaIDs.Add("2839");
        //            //cobrancaIDs.Add("2811");
        //            //cobrancaIDs.Add("2897");
        //            IList<Cobranca> cobrancas = Cobranca.CarregarTodas_OrdemPorContratoParcela_Optimized(cobrancaIDs, pm); //
        //            List<Object> cobrancaIds = new List<Object>();
        //            if (cobrancas == null) { return null; }

        //            List<TabelaValorVencimentoVO> lista = new List<TabelaValorVencimentoVO>();

        //            #region DETAIL -------------------------------------------

        //            Endereco endereco = null;
        //            //, diaDataSemJuros, result = 0, 
        //            int totalRegistrosDetalhe = 0;
        //            String mascara6 = new String('0', 6); //, nossoNumero = "";
        //            Decimal valorTotal = 0; //, mora = 0, multa = 0;
        //            //Object valorDataLimite = null;
        //            DateTime contratoAdmissao = DateTime.MinValue, vigencia, vencimento, dataLimite = DateTime.MinValue;
        //            //CalendarioVencimento rcv = null;
        //            TabelaValorVencimentoVO retTvv = null;
        //            Contrato contrato = null;
        //            IList<TabelaValor> tabela = null; Taxa taxa = null; EstipulanteTaxa estipulanteTaxa = null;
        //            System.Globalization.CultureInfo cinfo = new System.Globalization.CultureInfo("pt-Br");

        //            int qtdTotalBoletos = 0, numBoletoCorrente = 0, idContratoAtual = 0;

        //            int i = 0;

        //            //String[] contratoAdmIds = null;
        //            System.Collections.Hashtable contratoADM_Criterio = new System.Collections.Hashtable();
        //            List<string> parametrosProcessados = new List<string>();

        //            foreach (Cobranca cob in cobrancas)
        //            {
        //                if (parametrosProcessados.Contains(string.Concat(cob.DataVencimento.ToString("ddMMyyyy"), cob.PropostaID))) continue;

        //                parametrosProcessados.Add(string.Concat(cob.DataVencimento.ToString("ddMMyyyy"), cob.PropostaID));

        //                i++;
        //                try
        //                {
        //                    #region DETAIL P ---------------------------------

        //                    #region

        //                    #region localiza o critério correspondente

        //                    contrato = Contrato.CarregarParcial(cob.PropostaID, pm);

        //                    #endregion

        //                    numSequencial++;

        //                    cobrancaIds.Add(cob.ID);

        //                    if (Convert.ToInt32(cob.PropostaID) != idContratoAtual)
        //                    {
        //                        numBoletoCorrente = 0; idContratoAtual = Convert.ToInt32(cob.PropostaID);
        //                        qtdTotalBoletos = 0;
        //                        foreach (Cobranca _temp in cobrancas)
        //                        {
        //                            if (Convert.ToInt32(_temp.PropostaID) == idContratoAtual) { qtdTotalBoletos++; }
        //                            else if (qtdTotalBoletos > 0) { break; }
        //                        }
        //                    }

        //                    numBoletoCorrente++;

        //                    #region checa se tem despesa nao embutida com postagem. se tem, incrementa o valor da cobranca:

        //                    retTvv = TabelaValorVencimentoVO.ExisteProposta(cob.PropostaID, lista);
        //                    if (retTvv == null)
        //                    {
        //                        //contrato = Contrato.CarregarParcial(cob.PropostaID, pm);
        //                        tabela = TabelaValor.CarregarTabelaVigente(contrato.ContratoADMID, contrato.Admissao, cob.DataVencimento, pm);
        //                        if (tabela != null && tabela.Count > 0)
        //                        {
        //                            retTvv = TabelaValorVencimentoVO.ExisteTabela(tabela[0].ID, lista);
        //                            if (retTvv == null)
        //                            {
        //                                taxa = Taxa.CarregarPorTabela(tabela[0].ID, pm);
        //                                if (taxa != null && !taxa.Embutido)
        //                                {
        //                                    cob.Valor += taxa.ValorEmbutido;
        //                                }

        //                                retTvv = new TabelaValorVencimentoVO();
        //                                retTvv.PropostaID = contrato.ID;
        //                                retTvv.TabelaID = tabela[0].ID;
        //                                if (tabela[0].VencimentoFim != DateTime.MinValue)
        //                                { retTvv.Vencimento = tabela[0].VencimentoFim.AddMonths(1); }
        //                                if (taxa != null && !taxa.Embutido)
        //                                { retTvv.ValorBancario = taxa.ValorEmbutido; }

        //                                if (contrato.CobrarTaxaAssociativa)
        //                                {
        //                                    estipulanteTaxa = EstipulanteTaxa.CarregarVigente(contrato.EstipulanteID, pm);
        //                                    if (estipulanteTaxa != null)
        //                                    { retTvv.ValorSindicalizacao = estipulanteTaxa.Valor; }
        //                                }

        //                                lista.Add(retTvv);
        //                                //taxa = null;
        //                            }
        //                            else
        //                                cob.Valor += retTvv.ValorBancario;
        //                        }
        //                    }
        //                    else
        //                        cob.Valor += retTvv.ValorBancario;

        //                    #endregion

        //                    #region data de admissao do contrato

        //                    //Contrato _contrato = Contrato.CarregarParcial(cob.PropostaID, pm);
        //                    if (contrato != null) { contratoAdmissao = contrato.Admissao; }
        //                    else { continue; }
        //                    #endregion

        //                    #endregion

        //                    doc.Append(Environment.NewLine);

        //                    EntityBase.AppendPreparedField(ref doc, "001", 3);          //codigo do banco na compensacao
        //                    EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Lote de Serviço
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //tipo de registro
        //                    EntityBase.AppendPreparedField(ref doc, numSequencial.ToString().PadLeft(5, '0'), 5); //Nº do Registro - 04.3A
        //                    EntityBase.AppendPreparedField(ref doc, "P", 1);            //Código de Segmento do Reg. Detalhe
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "01", 2);           //Código de Movimento Remessa - C004

        //                    //
        //                    EntityBase.AppendPreparedField(ref doc, agencia, 5);        //Agência mantenedora da conta
        //                    EntityBase.AppendPreparedField(ref doc, agenciadv, 1);      //Dígito Verificador da Agência
        //                    EntityBase.AppendPreparedField(ref doc, numcontacorr, 12);  //Número da Conta Corrente
        //                    EntityBase.AppendPreparedField(ref doc, dvcontacorr, 1);    //Dígito Verificador da Conta
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //Dígito Verificador da Ag/Conta - Campo não tratado pelo Banco do Brasil. Informar 'branco' (espaço) OU zero.

        //                    cob.Carteira = 17;
        //                    cob.NossoNumero = cob.GeraNossoNumero();
        //                    EntityBase.AppendPreparedField(ref doc, cob.NossoNumero, 20); //Seu Número
        //                    //EntityBase.AppendPreparedField(ref doc, "0".PadRight(20, '0'), 20); //Seu Número - pos 38

        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);   // Código da carteira 11
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);   // Forma de Cadastr. do Título no Banco - ampo não tratado pelo sistema do Banco do Brasil
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);   // Tipo de documento - campo não tratado pelo sistema do Banco do Brasil

        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);   // Identificação da Emissão do Bloqueto: 1 banco emite, 0 nos emitimos C009 - 17.3P faltou: definir
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);   // Identificação da Destibuição do Bloqueto: 1 banco distribui, 0 nos distribuimos C008 - C010 - 18.3P faltou: definir
        //                    EntityBase.AppendPreparedField(ref doc, Convert.ToString(cob.ID).PadRight(15, ' '), 15); // Número do Documento de Cobrança
        //                    EntityBase.AppendPreparedField(ref doc, cob.DataVencimento.ToString("ddMMyyyy"), 8);  // Data de vencimento - pos 78

        //                    //valor do boleto
        //                    EntityBase.AppendPreparedField(ref doc, cob.Valor.ToString("N2", cinfo).Split(',')[0].Replace(".", "").PadLeft(13, '0'), 13);
        //                    EntityBase.AppendPreparedField(ref doc, cob.Valor.ToString("N2", cinfo).Split(',')[1].PadLeft(2, '0'), 2);


        //                    EntityBase.AppendPreparedField(ref doc, "00000", 5);    //Agência Encarregada da Cobrança
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);        //Dígito Verificador da Agência

        //                    EntityBase.AppendPreparedField(ref doc, "02", 2);        //Espécie do Título - posicao 107
        //                    EntityBase.AppendPreparedField(ref doc, "A", 1);        //dentific. de Título Aceito/Não Aceito 
        //                    EntityBase.AppendPreparedField(ref doc, cob.DataCriacao.ToString("ddMMyyyy"), 8);  // Data de emissão - pos 110
        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);        //Código do Juros de Mora faltou: definir '1'=Valor por Dia '2'=Taxa Mensal '3'=Isento
        //                    EntityBase.AppendPreparedField(ref doc, cob.DataVencimento.AddDays(1).ToString("ddMMyyyy"), 8);  // Data do Juros de Mora - pos 119
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Juros de Mora por Dia/Taxa faltou: definir

        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);        //Código do Desconto 1 - pos 142
        //                    EntityBase.AppendPreparedField(ref doc, "00000000", 8); //Data do Desconto 1  - pos 143
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Desconto 1 Valor/Percentual a ser Concedido 
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Valor do IOF a ser Recolhido
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Valor do Abatimento
        //                    EntityBase.AppendPreparedField(ref doc, Convert.ToString(cob.ID).PadLeft(25, '0'), 25); //Identificação do Título na Empresa - pos 196

        //                    EntityBase.AppendPreparedField(ref doc, "3", 1); //Código para Protesto - 1' – Protestar dias corridos, '2' – Protestar dias úteis, e '3' – Não protestar. faltou: definir - pos 221
        //                    EntityBase.AppendPreparedField(ref doc, "00", 2); //Número de Dias para Protesto - Preencher de acordo com o código informado na posição 221. Para código '1' – é possível, de 6 a 29 dias, 35º, 40º, dia corrido. Para código '2' – é possível, 3º, 4º ou 5º dia útil. Para código '3' preencher com Zeros. faltou: definir
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1); // Código para Baixa/Devolução - não tratado
        //                    EntityBase.AppendPreparedField(ref doc, "000", 3); // Número de Dias para Baixa/Devolução - não tratado
        //                    EntityBase.AppendPreparedField(ref doc, "09", 2); // Código da Moeda - g065
        //                    EntityBase.AppendPreparedField(ref doc, "0000000000", 10); // Nº do Contrato da Operação de Créd.  - não tratado
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1); //Uso Exclusivo FEBRABAN/CNAB 


        //                    #endregion

        //                    #region DETAIL Q ---------------------------------

        //                    doc.Append(Environment.NewLine);

        //                    numSequencial++;

        //                    EntityBase.AppendPreparedField(ref doc, "001", 3);          //codigo do banco na compensacao
        //                    EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Lote de Serviço
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //tipo de registro
        //                    EntityBase.AppendPreparedField(ref doc, numSequencial.ToString().PadLeft(5, '0'), 5); //Nº do Registro - 04.3A
        //                    EntityBase.AppendPreparedField(ref doc, "Q", 1);            //Código de Segmento do Reg. Detalhe
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "01", 2);           //Código de Movimento Remessa - C004 - pos 16

        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);           //Tipo e inscrição - C005
        //                    EntityBase.AppendPreparedField(ref doc, cob.ContratoTitularCPF.PadLeft(15, '0'), 15); //Número de inscrição - C006 - pos 19

        //                    EntityBase.AppendPreparedField(ref doc, cob.ContratoTitularNome, 40); //Nome - C013 - pos 34

        //                    endereco = new Endereco(cob.ContratoEnderecoCobrancaID);
        //                    endereco.Carregar(pm);
        //                    if (endereco.CEP.IndexOf('-') > -1) { endereco.CEP = endereco.CEP.Replace("-", ""); }

        //                    if (endereco.Numero == null) endereco.Numero = "";
        //                    if (string.IsNullOrEmpty(endereco.Complemento))
        //                    {
        //                        int tamanhoDisponivel = 40 - (endereco.Numero.Length + 1);

        //                        if (endereco.Logradouro.Length > tamanhoDisponivel)
        //                        {
        //                            endereco.Logradouro = endereco.Logradouro.Substring(0, tamanhoDisponivel);
        //                        }

        //                        if (!string.IsNullOrEmpty(endereco.Numero))
        //                            endereco.Logradouro += string.Concat(",", endereco.Numero);
        //                    }
        //                    else
        //                    {
        //                        int tamanhoDisponivel = 40 - ((endereco.Numero.Length + 1) + (endereco.Complemento.Length + 1));

        //                        if (endereco.Logradouro.Length > tamanhoDisponivel)
        //                        {
        //                            endereco.Logradouro = endereco.Logradouro.Substring(0, tamanhoDisponivel);
        //                        }

        //                        if (!string.IsNullOrEmpty(endereco.Numero))
        //                            endereco.Logradouro += string.Concat(",", endereco.Numero, ",", endereco.Complemento);
        //                        else
        //                            endereco.Logradouro += string.Concat(",", endereco.Complemento);
        //                    }

        //                    EntityBase.AppendPreparedField(ref doc, endereco.Logradouro, 40); // endereco - pos 74
        //                    EntityBase.AppendPreparedField(ref doc, endereco.Bairro, 15);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.CEP, 8);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.Cidade, 15);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.UF, 2);

        //                    EntityBase.AppendPreparedField(ref doc, "0", 1); //Tipo de Inscrição - pos 154
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Número de Inscrição

        //                    EntityBase.AppendPreparedField(ref doc, " ".PadLeft(40, ' '), 40); //Nome do Sacador/Avalista
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(3, '0'), 3); //Cód. Bco. Corresp. na Compensação - não tratado - pos 210
        //                    EntityBase.AppendPreparedField(ref doc, " ".PadLeft(20, ' '), 20); //Nosso Nº no Banco Correspondente - não tratado
        //                    EntityBase.AppendPreparedField(ref doc, " ".PadLeft(8, ' '), 8); //Uso Exclusivo FEBRABAN/CNAB 

        //                    #endregion

        //                    totalRegistrosDetalhe++;
        //                    valorTotal += cob.Valor;

        //                    cob.Carteira = Convert.ToInt32(carteira);
        //                    cob.ArquivoIDUltimoEnvio = -10;
        //                    //pm.Save(cob);
        //                }
        //                catch (Exception ex)
        //                {
        //                    try
        //                    {
        //                        string path = System.Configuration.ConfigurationManager.AppSettings["financialFilePath"].Replace("/", @"\");
        //                        System.IO.File.WriteAllText(path + "err_" + DateTime.Now.ToString("ddMMyyyyHHmmssfff") + ".txt",
        //                            ex.Message +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + ex.StackTrace +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + Convert.ToString(cob.ID) +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + i.ToString(),
        //                            System.Text.Encoding.ASCII);
        //                    }
        //                    catch { }
        //                    continue;
        //                }
        //            }
        //            #endregion

        //            #region TRAILLER DE LOTE ---------------------------------

        //            doc.Append(Environment.NewLine);

        //            EntityBase.AppendPreparedField(ref doc, "001", 3);
        //            EntityBase.AppendPreparedField(ref doc, "0001", 4);
        //            EntityBase.AppendPreparedField(ref doc, "5", 1);
        //            EntityBase.AppendPreparedField(ref doc, " ", 9);
        //            EntityBase.AppendPreparedField(ref doc, (numSequencial + 2).ToString().PadLeft(6, '0'), 6);
        //            EntityBase.AppendPreparedField(ref doc, " ", 217);

        //            #endregion

        //            #region TRAILLER -----------------------------------------

        //            doc.Append(Environment.NewLine);

        //            EntityBase.AppendPreparedField(ref doc, "001", 3);
        //            EntityBase.AppendPreparedField(ref doc, "9999", 4);
        //            EntityBase.AppendPreparedField(ref doc, "9", 1);
        //            EntityBase.AppendPreparedField(ref doc, " ", 9); //branco
        //            EntityBase.AppendPreparedField(ref doc, "1".PadLeft(6, '0'), 6); //qtd de lotes
        //            EntityBase.AppendPreparedField(ref doc, (numSequencial + 4).ToString().PadLeft(6, '0'), 6);
        //            EntityBase.AppendPreparedField(ref doc, "0".PadLeft(6, '0'), 6); //Qtde de Contas p/ Conc. (Lotes)
        //            EntityBase.AppendPreparedField(ref doc, " ", 205); //

        //            #endregion

        //            if (_pm == null) { pm.Rollback(); } //se não está partcipando de uma transacao externa, comita
        //            return doc.ToString();
        //        }
        //        catch
        //        {
        //            if (_pm == null) { pm.Rollback(); }
        //            throw;
        //        }
        //        finally
        //        {
        //            if (_pm == null) { pm = null; }
        //        }
        //    }

        //    /***************************************************************************************************************/

        //    public static List<SumarioArquivoGeradoVO> GeraDocumentoCobranca_SANTANDER(IList<Cobranca> cobrancas, IList<ArquivoRemessaAgendamento> aras)
        //    {
        //        List<SumarioArquivoGeradoVO> vos = new List<SumarioArquivoGeradoVO>();

        //        //separa as operadoras
        //        List<String> operadoraIDs = new List<String>();
        //        System.Collections.Hashtable ht = new System.Collections.Hashtable();

        //        PersistenceManager pm = new PersistenceManager();
        //        pm.UseSingleCommandInstance();

        //        //foreach (Cobranca cobranca in cobrancas)
        //        //{
        //        //    if (!operadoraIDs.Contains(cobranca.OperadoraID.ToString()))
        //        //        operadoraIDs.Add(cobranca.OperadoraID.ToString());
        //        //}

        //        pm.CloseSingleCommandInstance();
        //        pm.Dispose();

        //        //processa os arquivos, um para cada operadora.
        //        //foreach (String operadoraId in operadoraIDs)
        //        //{
        //        String arquivoNome = "", arquivoConteudo = "", arquivoVersao = "", operadoraNome = "";
        //        Object arquivoId = null;
        //        Int32 qtdCobrancas = 0;

        //        Operadora operadora = new Operadora(cobrancas[0].OperadoraID); //Operadora operadora = new Operadora(operadoraId);
        //        operadora.Carregar();
        //        operadoraNome = operadora.Nome;

        //        List<String> cobrancaIDs = new List<String>();
        //        foreach (Cobranca cobranca in cobrancas)
        //        {
        //            //if (cobranca.OperadoraID.ToString() != operadoraId) { continue; }
        //            cobrancaIDs.Add(cobranca.ID.ToString());
        //        }

        //        qtdCobrancas = cobrancaIDs.Count;
        //        /////////////GeraDocumentoCobranca_UNIBANCO2(cobrancaIDs, ref arquivoNome, ref arquivoConteudo, ref arquivoId, ref arquivoVersao, aras, null);
        //        GeraDocumentoCobranca_SANTANDER(cobrancaIDs, ref arquivoNome, ref arquivoConteudo, ref arquivoId, ref arquivoVersao, aras, null);

        //        //armazena na colecao para retorno à UI
        //        SumarioArquivoGeradoVO vo = new SumarioArquivoGeradoVO();
        //        vo.ArquivoConteudo = arquivoConteudo;
        //        vo.ArquivoID = arquivoId;
        //        vo.ArquivoNome = arquivoNome;
        //        vo.ArquivoVersao = arquivoVersao;
        //        vo.OperadoraID = cobrancas[0].OperadoraID; //operadoraId;
        //        vo.OperadoraNome = operadora.Nome;
        //        vo.QtdCobrancas = qtdCobrancas;
        //        vos.Add(vo);
        //        //}

        //        return vos;
        //    }

        //    public static String GeraDocumentoCobranca_SANTANDER(IList<String> cobrancaIDs, ref String arquivoNome, ref String arquivoConteudo, ref Object arquivoId, ref String arquivoVersao, IList<ArquivoRemessaAgendamento> aras, PersistenceManager _pm)
        //    {
        //        Int32 numSequencial = 0;

        //        PersistenceManager pm = _pm;

        //        Int32 contratoadmQualicorpID = Convert.ToInt32(ConfigurationManager.AppSettings["contratoAdmQualicorpIdIncial"]);

        //        if (_pm == null)
        //        {
        //            pm = new PersistenceManager();
        //            pm.IsoLevel = IsolationLevel.ReadUncommitted;
        //            pm.BeginTransactionContext();
        //        }

        //        String headerCedente = "UBRASP - UNIAO BRASILEIRA";
        //        string agencia = "0001"; //, agenciadv = "0";
        //        string numcontacorr = "13014765";
        //        string dvcontacorr = "2";
        //        string cnpj = "49938327000106"; //
        //        string codTransmissao = "000100001201344";
        //        //string complemento = "I 52";

        //        //agCCDV_itau = "0646042606";    //qualicorp
        //        string numConvenio = "1201344"; // Cobranca.ConvenioUBRASP.PadLeft(9, '0');
        //        //string carteira = "5"; //, variacao = "019";

        //        int numeroDoArquivo = 1;
        //        string[] arquivos = Directory.GetFiles(ConfigurationManager.AppSettings["financialFilePathFISICO"], "*.dat");
        //        if (arquivos != null && arquivos.Length > 0) numeroDoArquivo = arquivos.Length + 1;
        //        if (numeroDoArquivo > 999) numeroDoArquivo = 1 + (arquivos.Length - 999);

        //        ArquivoCobrancaUnibanco arquivo = new ArquivoCobrancaUnibanco();
        //        arquivo.DataCriacao = DateTime.Now;
        //        arquivo.Versao = 1;
        //        arquivo.AgendamentoID = aras[0].ID;

        //        try
        //        {
        //            String dataAgora = DateTime.Now.ToString("ddMMyyyy");
        //            StringBuilder doc = new StringBuilder();

        //            if (aras == null)
        //                arquivoNome = "arquivo.dat"; // 
        //            else
        //                arquivoNome = String.Concat(aras[0].ArquivoNomeInstance, "_", DateTime.Now.ToString("yyyyMMddHHmmss"), ".dat");

        //            #region HEADER -------------------------------------------

        //            EntityBase.AppendPreparedField(ref doc, "033", 3);          //codigo do banco na compensacao
        //            EntityBase.AppendPreparedField(ref doc, "0000", 4);         //lote de serviço
        //            EntityBase.AppendPreparedField(ref doc, "0", 1);            //tipo de registro
        //            EntityBase.AppendPreparedField(ref doc, "        ", 8);     //brancos
        //            EntityBase.AppendPreparedField(ref doc, "2", 1);            //tipo de inscrição - 2 para CNPJ, 1 para CPF

        //            EntityBase.AppendPreparedField(ref doc, cnpj.PadLeft(15, '0'), 15);          //CNPJ (ou cpf) 
        //            EntityBase.AppendPreparedField(ref doc, codTransmissao.PadLeft(15, '0'), 15); //Codigo de transmissao 
        //            EntityBase.AppendPreparedField(ref doc, " ", 25);           //brancos
        //            EntityBase.AppendPreparedField(ref doc, headerCedente.PadRight(30, ' '), 30); //nome empresa
        //            EntityBase.AppendPreparedField(ref doc, "Banco Santander".PadRight(30, ' '), 30); //Nome do Banco
        //            EntityBase.AppendPreparedField(ref doc, " ", 10);           //brancos
        //            EntityBase.AppendPreparedField(ref doc, "1", 1);            //Código Remessa: 1 = remessa
        //            EntityBase.AppendPreparedField(ref doc, dataAgora, 8);      //data de geracao do arquivo
        //            EntityBase.AppendPreparedField(ref doc, " ", 6);            //brancos
        //            EntityBase.AppendPreparedField(ref doc, numeroDoArquivo.ToString().PadLeft(6, '0'), 6); //brancos
        //            EntityBase.AppendPreparedField(ref doc, "040", 3);          //versão do layout do arquivo
        //            EntityBase.AppendPreparedField(ref doc, " ", 74);           //brancos

        //            #endregion

        //            #region HEADER DE LOTE -----------------------------------

        //            doc.Append(Environment.NewLine);
        //            EntityBase.AppendPreparedField(ref doc, "033", 3);          //codigo do banco na compensacao
        //            EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Lote de Serviço
        //            EntityBase.AppendPreparedField(ref doc, "1", 1);            //tipo de registro
        //            EntityBase.AppendPreparedField(ref doc, "R", 1);            //tipo de operação
        //            EntityBase.AppendPreparedField(ref doc, "01", 2);           //tipo de serviço
        //            EntityBase.AppendPreparedField(ref doc, "  ", 2);           //brancos
        //            EntityBase.AppendPreparedField(ref doc, "030", 3);          //Nº da Versão do Layout do Lote - nao criticado pelo banco
        //            EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //            EntityBase.AppendPreparedField(ref doc, "2", 1);            //Tipo de Inscrição da Empresa - 2=CNPJ
        //            EntityBase.AppendPreparedField(ref doc, cnpj.PadLeft(15, '0'), 15);  //CNPJ (ou cpf) //faltou: cnpj
        //            EntityBase.AppendPreparedField(ref doc, " ", 20);           //brancos
        //            EntityBase.AppendPreparedField(ref doc, codTransmissao.PadLeft(15, '0'), 15);//Codigo de transmissao 
        //            EntityBase.AppendPreparedField(ref doc, " ", 05);           //brancos
        //            EntityBase.AppendPreparedField(ref doc, headerCedente.PadRight(30, ' '), 30); //Nome do beneficiario
        //            EntityBase.AppendPreparedField(ref doc, " ", 40);           //Mensagem 1
        //            EntityBase.AppendPreparedField(ref doc, " ", 40);           //Mensagem 2
        //            EntityBase.AppendPreparedField(ref doc, "0001".PadLeft(8, '0'), 8); //Número remessa/retorno
        //            EntityBase.AppendPreparedField(ref doc, dataAgora, 8);      //data de gravaçao do arquivo
        //            EntityBase.AppendPreparedField(ref doc, " ", 41);           //brancos

        //            #endregion

        //            //Carrega cobrancas envolvidas
        //            IList<Cobranca> _cobrancas = Cobranca.CarregarTodas_OrdemPorContratoParcela_Optimized(cobrancaIDs, pm);
        //            if (_cobrancas == null) { return null; }
        //            List<Object> cobrancaIds = new List<Object>();

        //            IList<Cobranca> cobrancas = new List<Cobranca>();
        //            foreach (var c in _cobrancas)
        //            {
        //                //if (Convert.ToString(c.BeneficiarioId) == "39453" || Convert.ToString(c.BeneficiarioId) == "12971" || Convert.ToString(c.BeneficiarioId) == "13366") continue;
        //                cobrancas.Add(c);
        //            }

        //            if (cobrancas == null || cobrancas.Count == 0) { return null; }

        //            arquivo.MesReferencia = cobrancas[0].DataVencimento.Month;
        //            arquivo.AnoReferencia = cobrancas[0].DataVencimento.Year;
        //            arquivo.OperadoraID = cobrancas[0].OperadoraID;
        //            arquivo.Nome = arquivoNome;
        //            arquivo.QtdCobrancas = cobrancas.Count; // cobrancaIDs.Count;
        //            pm.Save(arquivo); ////////////////////////////////////////////////////////////////////////
        //            arquivoId = arquivo.ID;

        //            List<TabelaValorVencimentoVO> lista = new List<TabelaValorVencimentoVO>();

        //            #region DETAIL -------------------------------------------

        //            Endereco endereco = null;
        //            //, diaDataSemJuros, result = 0, 
        //            int totalRegistrosDetalhe = 0;
        //            String mascara6 = new String('0', 6); //, nossoNumero = "";
        //            Decimal valorTotal = 0; //, mora = 0, multa = 0;
        //            //Object valorDataLimite = null;
        //            DateTime contratoAdmissao = DateTime.MinValue, vigencia, vencimento, dataLimite = DateTime.MinValue;
        //            //CalendarioVencimento rcv = null;
        //            TabelaValorVencimentoVO retTvv = null;
        //            Contrato contrato = null;
        //            IList<TabelaValor> tabela = null; Taxa taxa = null; EstipulanteTaxa estipulanteTaxa = null;
        //            System.Globalization.CultureInfo cinfo = new System.Globalization.CultureInfo("pt-Br");

        //            int qtdTotalBoletos = 0, numBoletoCorrente = 0, idContratoAtual = 0;

        //            int i = 0;

        //            System.Collections.Hashtable contratoADM_Criterio = new System.Collections.Hashtable();
        //            List<string> parametrosProcessados = new List<string>();

        //            foreach (Cobranca cob in cobrancas)
        //            {
        //                if (parametrosProcessados.Contains(string.Concat(cob.DataVencimento.ToString("ddMMyyyy"), cob.PropostaID))) continue;

        //                parametrosProcessados.Add(string.Concat(cob.DataVencimento.ToString("ddMMyyyy"), cob.PropostaID));

        //                i++;
        //                try
        //                {
        //                    #region DETAIL P ---------------------------------

        //                    #region

        //                    #region localiza o critério correspondente

        //                    contrato = Contrato.CarregarParcial(cob.PropostaID, pm);

        //                    #endregion

        //                    numSequencial++;

        //                    cobrancaIds.Add(cob.ID);

        //                    if (Convert.ToInt32(cob.PropostaID) != idContratoAtual)
        //                    {
        //                        numBoletoCorrente = 0; idContratoAtual = Convert.ToInt32(cob.PropostaID);
        //                        qtdTotalBoletos = 0;
        //                        foreach (Cobranca _temp in cobrancas)
        //                        {
        //                            if (Convert.ToInt32(_temp.PropostaID) == idContratoAtual) { qtdTotalBoletos++; }
        //                            else if (qtdTotalBoletos > 0) { break; }
        //                        }
        //                    }

        //                    numBoletoCorrente++;

        //                    #region checa se tem despesa nao embutida com postagem. se tem, incrementa o valor da cobranca:

        //                    retTvv = TabelaValorVencimentoVO.ExisteProposta(cob.PropostaID, lista);
        //                    if (retTvv == null)
        //                    {
        //                        //contrato = Contrato.CarregarParcial(cob.PropostaID, pm);
        //                        tabela = TabelaValor.CarregarTabelaVigente(contrato.ContratoADMID, contrato.Admissao, cob.DataVencimento, pm);
        //                        if (tabela != null && tabela.Count > 0)
        //                        {
        //                            retTvv = TabelaValorVencimentoVO.ExisteTabela(tabela[0].ID, lista);
        //                            if (retTvv == null)
        //                            {
        //                                taxa = Taxa.CarregarPorTabela(tabela[0].ID, pm);
        //                                if (taxa != null && !taxa.Embutido)
        //                                {
        //                                    cob.Valor += taxa.ValorEmbutido;
        //                                }

        //                                retTvv = new TabelaValorVencimentoVO();
        //                                retTvv.PropostaID = contrato.ID;
        //                                retTvv.TabelaID = tabela[0].ID;
        //                                if (tabela[0].VencimentoFim != DateTime.MinValue)
        //                                { retTvv.Vencimento = tabela[0].VencimentoFim.AddMonths(1); }
        //                                if (taxa != null && !taxa.Embutido)
        //                                { retTvv.ValorBancario = taxa.ValorEmbutido; }

        //                                if (contrato.CobrarTaxaAssociativa)
        //                                {
        //                                    estipulanteTaxa = EstipulanteTaxa.CarregarVigente(contrato.EstipulanteID, pm);
        //                                    if (estipulanteTaxa != null)
        //                                    { retTvv.ValorSindicalizacao = estipulanteTaxa.Valor; }
        //                                }

        //                                lista.Add(retTvv);
        //                                //taxa = null;
        //                            }
        //                            else
        //                                cob.Valor += retTvv.ValorBancario;
        //                        }
        //                    }
        //                    else
        //                        cob.Valor += retTvv.ValorBancario;

        //                    #endregion

        //                    #region data de admissao do contrato

        //                    //Contrato _contrato = Contrato.CarregarParcial(cob.PropostaID, pm);
        //                    if (contrato != null) { contratoAdmissao = contrato.Admissao; }
        //                    else { continue; }
        //                    #endregion

        //                    #endregion

        //                    doc.Append(Environment.NewLine);

        //                    EntityBase.AppendPreparedField(ref doc, "033", 3);          //codigo do banco na compensacao
        //                    EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Numero do lote remessa
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //tipo de registro
        //                    EntityBase.AppendPreparedField(ref doc, numSequencial.ToString().PadLeft(5, '0'), 5); //Nº seqüencial do registro de lote
        //                    EntityBase.AppendPreparedField(ref doc, "P", 1);            //Código de Segmento do Reg. Detalhe
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "01", 2);           //Código de movimento remessa (pag3) - nota 14 (pag.14)
        //                    EntityBase.AppendPreparedField(ref doc, agencia, 4);        //Agência do Destinatária FIDC
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);            //Dígito da Agência do Destinatária FIDC ????
        //                    EntityBase.AppendPreparedField(ref doc, numcontacorr.PadLeft(9, '0'), 9); //Número da conta corrente
        //                    EntityBase.AppendPreparedField(ref doc, dvcontacorr, 1);            //Dígito da conta corrente (definido pela homologação)
        //                    EntityBase.AppendPreparedField(ref doc, numcontacorr.PadLeft(9, '0'), 9); //Conta cobrança Destinatária FIDC ????
        //                    EntityBase.AppendPreparedField(ref doc, dvcontacorr, 1); //Dígito da conta cobrança Destinatária FIDC ????
        //                    EntityBase.AppendPreparedField(ref doc, "  ", 2);           //branco
        //                    cob.NossoNumero = cob.GeraNossoNumeroSantander();
        //                    EntityBase.AppendPreparedField(ref doc, cob.NossoNumero, 13); //Identificação do título no Banco
        //                    EntityBase.AppendPreparedField(ref doc, "5", 1);            //Tipo de cobrança 
        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);            //Forma de Cadastramento - 1 para cobranca registrada
        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);            //Tipo de documento - 1- Tradicional , 2- Escritural
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, Convert.ToString(cob.ID).PadLeft(15, '0'), 15); //Seu número
        //                    EntityBase.AppendPreparedField(ref doc, cob.DataVencimento.ToString("ddMMyyyy"), 8);  // Data de vencimento - pos 78

        //                    //valor do boleto
        //                    EntityBase.AppendPreparedField(ref doc, cob.Valor.ToString("N2", cinfo).Split(',')[0].Replace(".", "").PadLeft(13, '0'), 13);
        //                    EntityBase.AppendPreparedField(ref doc, cob.Valor.ToString("N2", cinfo).Split(',')[1].PadLeft(2, '0'), 2);

        //                    EntityBase.AppendPreparedField(ref doc, "0000", 4);         //Agência encarregada da cobrança
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);            //Dígito da Agência do Beneficiário
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "02", 2);           //Espécie do título Nota 20 pag.15 ???
        //                    EntityBase.AppendPreparedField(ref doc, "N", 1);            //Identif. de título Aceito/Não Aceito
        //                    EntityBase.AppendPreparedField(ref doc, cob.DataCriacao.ToString("ddMMyyyy"), 8); //Data da emissão do título
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //Código do juros de mora - nota 21 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "00000000", 8); //Data do juros de mora - nota 22
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadRight(15, '0'), 15); //Valor da mora/dia ou Taxa mensal - nota 18 pag.15
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);            //Código do desconto 1 - nota 23 pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "00000000", 8);     //Data de desconto 1 - nota 23 pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Valor ou Percentual do desconto concedido
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Valor do IOF a ser recolhido
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Valor do abatimento

        //                    EntityBase.AppendPreparedField(ref doc, Convert.ToString(cob.ID).PadLeft(25, '0'), 25); //Identificação do título na empresa
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);            //Código para protesto - nota 25 pag.16 - 0=nao protestar
        //                    EntityBase.AppendPreparedField(ref doc, "00", 2);           //Número de dias para protesto
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //Código para Baixa/Devolução - nota 26 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "00", 2);           //Número de dias para Baixa/Devolução
        //                    EntityBase.AppendPreparedField(ref doc, "00", 2);           //Código da moeda - nota 27 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, " ".PadRight(11, ' '), 11); //branco

        //                    //
        //                    #endregion

        //                    #region DETAIL Q ---------------------------------

        //                    doc.Append(Environment.NewLine);

        //                    numSequencial++;

        //                    EntityBase.AppendPreparedField(ref doc, "033", 3);          //codigo do banco na compensacao
        //                    EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Numero do lote remessa
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //tipo de registro
        //                    EntityBase.AppendPreparedField(ref doc, numSequencial.ToString().PadLeft(5, '0'), 5); //Nº seqüencial do registro no lote - nota 11 - pg.14
        //                    EntityBase.AppendPreparedField(ref doc, "Q", 1);            //Código de Segmento do Reg. Detalhe
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "01", 2);           //Código de movimento remessa - nota 14 - pag 14

        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);           //Tipo de inscrição do Pagador - nota 29 - pag.17 - 1 = cpf
        //                    EntityBase.AppendPreparedField(ref doc, cob.ContratoTitularCPF.PadLeft(15, '0'), 15); //Número de inscrição do Pagador - pag. 4

        //                    EntityBase.AppendPreparedField(ref doc, cob.ContratoTitularNome, 40); //Nome Pagador

        //                    endereco = new Endereco(cob.ContratoEnderecoCobrancaID);
        //                    endereco.Carregar(pm);
        //                    if (endereco.CEP.IndexOf('-') > -1) { endereco.CEP = endereco.CEP.Replace("-", ""); }

        //                    if (endereco.Numero == null) endereco.Numero = "";
        //                    if (string.IsNullOrEmpty(endereco.Complemento))
        //                    {
        //                        int tamanhoDisponivel = 40 - (endereco.Numero.Length + 1);

        //                        if (endereco.Logradouro.Length > tamanhoDisponivel)
        //                        {
        //                            endereco.Logradouro = endereco.Logradouro.Substring(0, tamanhoDisponivel);
        //                        }

        //                        if (!string.IsNullOrEmpty(endereco.Numero))
        //                            endereco.Logradouro += string.Concat(",", endereco.Numero);
        //                    }
        //                    else
        //                    {
        //                        int tamanhoDisponivel = 40 - ((endereco.Numero.Length + 1) + (endereco.Complemento.Length + 1));

        //                        if (endereco.Logradouro.Length > tamanhoDisponivel)
        //                        {
        //                            endereco.Logradouro = endereco.Logradouro.Substring(0, tamanhoDisponivel);
        //                        }

        //                        if (!string.IsNullOrEmpty(endereco.Numero))
        //                            endereco.Logradouro += string.Concat(",", endereco.Numero, ",", endereco.Complemento);
        //                        else
        //                            endereco.Logradouro += string.Concat(",", endereco.Complemento);
        //                    }

        //                    if (string.IsNullOrEmpty(endereco.CEP)) { endereco.CEP = "00000000"; } else { endereco.CEP = endereco.CEP.Replace("-", ""); }
        //                    EntityBase.AppendPreparedField(ref doc, endereco.Logradouro, 40); // 
        //                    EntityBase.AppendPreparedField(ref doc, endereco.Bairro, 15);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.CEP, 8);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.Cidade, 15);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.UF, 2);

        //                    //if(string.IsNullOrEmpty(cob.ContratoTitularCPF) || cob.ContratoTitularCPF == "00000000000")
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1); //Tipo de inscrição Sacador/avalista - nota 29 - pag.17
        //                    //else
        //                    //    EntityBase.AppendPreparedField(ref doc, "1", 1); //Tipo de inscrição Sacador/avalista - nota 29 - pag.17

        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Nº de inscrição Sacador/avalista

        //                    EntityBase.AppendPreparedField(ref doc, " ".PadLeft(40, ' '), 40); //Nome do Sacador/Avalista

        //                    EntityBase.AppendPreparedField(ref doc, "000", 3); //Identificador de carne - nota 28 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "000", 3); //Sequencial da Parcela ou número inicial da parcela - nota 28 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "000", 3); //Quantidade total de parcelas - nota 28 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "000", 3); //Número do plano - nota 28 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, " ".PadRight(19, ' '), 19); //Brancos

        //                    #endregion

        //                    totalRegistrosDetalhe++;
        //                    valorTotal += cob.Valor;

        //                    cob.ArquivoIDUltimoEnvio = arquivo.ID;
        //                    cob.Carteira = 101;

        //                    pm.Save(cob);
        //                }
        //                catch (Exception ex)
        //                {
        //                    try
        //                    {
        //                        string path = System.Configuration.ConfigurationManager.AppSettings["financialFilePath"].Replace("/", @"\");
        //                        System.IO.File.WriteAllText(path + "err_" + DateTime.Now.ToString("ddMMyyyyHHmmssfff") + ".txt",
        //                            ex.Message +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + ex.StackTrace +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + Convert.ToString(cob.ID) +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + i.ToString(),
        //                            System.Text.Encoding.ASCII);
        //                    }
        //                    catch { }
        //                    continue;
        //                }
        //            }
        //            #endregion

        //            #region TRAILLER DE LOTE ---------------------------------

        //            doc.Append(Environment.NewLine);

        //            EntityBase.AppendPreparedField(ref doc, "033", 3);
        //            EntityBase.AppendPreparedField(ref doc, "0001", 4);
        //            EntityBase.AppendPreparedField(ref doc, "5", 1);
        //            EntityBase.AppendPreparedField(ref doc, " ", 9);
        //            EntityBase.AppendPreparedField(ref doc, (numSequencial + 2).ToString().PadLeft(6, '0'), 6);
        //            EntityBase.AppendPreparedField(ref doc, " ", 217);

        //            #endregion

        //            #region TRAILLER -----------------------------------------

        //            doc.Append(Environment.NewLine);

        //            EntityBase.AppendPreparedField(ref doc, "033", 3);
        //            EntityBase.AppendPreparedField(ref doc, "9999", 4); //9999 - Numero do lote remessa
        //            EntityBase.AppendPreparedField(ref doc, "9", 1);
        //            EntityBase.AppendPreparedField(ref doc, " ", 9); //branco
        //            EntityBase.AppendPreparedField(ref doc, "1".PadLeft(6, '0'), 6); //qtd de lotes - registros tipo 1
        //            EntityBase.AppendPreparedField(ref doc, (numSequencial + 4).ToString().PadLeft(6, '0'), 6);
        //            EntityBase.AppendPreparedField(ref doc, " ", 211); //

        //            #endregion

        //            arquivo.SalvaItens(cobrancaIds, pm);

        //            if (_pm == null) { pm.Commit(); } //se não está partcipando de uma transacao externa, comita //pm.Rollback();
        //            arquivoConteudo = doc.ToString();
        //            return arquivoConteudo;
        //        }
        //        catch
        //        {
        //            if (_pm == null) { pm.Rollback(); }
        //            throw;
        //        }
        //        finally
        //        {
        //            if (_pm == null) { pm = null; }
        //        }
        //    }

        //    public static String GeraDocumentoCobranca_SANTANDER(string cobrancaId, PersistenceManager _pm)
        //    {
        //        Int32 numSequencial = 0;

        //        PersistenceManager pm = _pm;

        //        Int32 contratoadmQualicorpID = Convert.ToInt32(ConfigurationManager.AppSettings["contratoAdmQualicorpIdIncial"]);

        //        if (_pm == null)
        //        {
        //            pm = new PersistenceManager();
        //            pm.IsoLevel = IsolationLevel.ReadUncommitted;
        //            pm.BeginTransactionContext();
        //        }

        //        //String agCCDV_itau = "";
        //        String headerCedente = "UBRASP - UNIAO BRASILEIRA";
        //        string agencia = "0001"; //, agenciadv = "0";
        //        string numcontacorr = "13014765";
        //        string dvcontacorr = "2";
        //        string cnpj = "49938327000106"; //
        //        string codTransmissao = "000100001201344";
        //        //string complemento = "I 52";

        //        //agCCDV_itau = "0646042606";    //qualicorp
        //        string numConvenio = "1201344"; // Cobranca.ConvenioUBRASP.PadLeft(9, '0');
        //        //string carteira = "5"; //, variacao = "019";

        //        int numeroDoArquivo = 1;
        //        string[] arquivos = Directory.GetFiles(ConfigurationManager.AppSettings["financialFilePathFISICO"], "*.dat");
        //        if (arquivos != null && arquivos.Length > 0) numeroDoArquivo = arquivos.Length + 1;
        //        if (numeroDoArquivo > 999) numeroDoArquivo = 1 + (arquivos.Length - 999);
        //        File.WriteAllText(
        //            ConfigurationManager.AppSettings["financialFilePathFISICO"] + cobrancaId + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".dat",
        //            "conteudo");

        //        //numeroDoArquivo = 5;


        //        try
        //        {
        //            if (cobrancaId == null) { return null; }

        //            String dataAgora = DateTime.Now.ToString("ddMMyyyy");
        //            StringBuilder doc = new StringBuilder();

        //            ////Cobranca.eCarteira carteira = (Cobranca.eCarteira)aras[0].Carteira;

        //            #region HEADER -------------------------------------------

        //            EntityBase.AppendPreparedField(ref doc, "033", 3);          //codigo do banco na compensacao
        //            EntityBase.AppendPreparedField(ref doc, "0000", 4);         //lote de serviço
        //            EntityBase.AppendPreparedField(ref doc, "0", 1);            //tipo de registro
        //            EntityBase.AppendPreparedField(ref doc, "        ", 8);     //brancos
        //            EntityBase.AppendPreparedField(ref doc, "2", 1);            //tipo de inscrição - 2 para CNPJ, 1 para CPF

        //            EntityBase.AppendPreparedField(ref doc, cnpj.PadLeft(15, '0'), 15);          //CNPJ (ou cpf) 
        //            EntityBase.AppendPreparedField(ref doc, codTransmissao.PadLeft(15, '0'), 15); //Codigo de transmissao 
        //            EntityBase.AppendPreparedField(ref doc, " ", 25);           //brancos
        //            EntityBase.AppendPreparedField(ref doc, headerCedente.PadRight(30, ' '), 30); //nome empresa
        //            EntityBase.AppendPreparedField(ref doc, "Banco Santander".PadRight(30, ' '), 30); //Nome do Banco
        //            EntityBase.AppendPreparedField(ref doc, " ", 10);           //brancos
        //            EntityBase.AppendPreparedField(ref doc, "1", 1);            //Código Remessa: 1 = remessa
        //            EntityBase.AppendPreparedField(ref doc, dataAgora, 8);      //data de geracao do arquivo
        //            EntityBase.AppendPreparedField(ref doc, " ", 6);            //brancos
        //            EntityBase.AppendPreparedField(ref doc, numeroDoArquivo.ToString().PadLeft(6, '0'), 6); //brancos
        //            EntityBase.AppendPreparedField(ref doc, "040", 3);          //versão do layout do arquivo
        //            EntityBase.AppendPreparedField(ref doc, " ", 74);           //brancos

        //            #endregion

        //            #region HEADER DE LOTE -----------------------------------

        //            doc.Append(Environment.NewLine);
        //            EntityBase.AppendPreparedField(ref doc, "033", 3);          //codigo do banco na compensacao
        //            EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Lote de Serviço
        //            EntityBase.AppendPreparedField(ref doc, "1", 1);            //tipo de registro
        //            EntityBase.AppendPreparedField(ref doc, "R", 1);            //tipo de operação
        //            EntityBase.AppendPreparedField(ref doc, "01", 2);           //tipo de serviço
        //            EntityBase.AppendPreparedField(ref doc, "  ", 2);           //brancos
        //            EntityBase.AppendPreparedField(ref doc, "030", 3);          //Nº da Versão do Layout do Lote - nao criticado pelo banco
        //            EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //            EntityBase.AppendPreparedField(ref doc, "2", 1);            //Tipo de Inscrição da Empresa - 2=CNPJ
        //            EntityBase.AppendPreparedField(ref doc, cnpj.PadLeft(15, '0'), 15);  //CNPJ (ou cpf) //faltou: cnpj
        //            EntityBase.AppendPreparedField(ref doc, " ", 20);           //brancos
        //            EntityBase.AppendPreparedField(ref doc, codTransmissao.PadLeft(15, '0'), 15);//Codigo de transmissao 
        //            EntityBase.AppendPreparedField(ref doc, " ", 05);           //brancos
        //            EntityBase.AppendPreparedField(ref doc, headerCedente.PadRight(30, ' '), 30); //Nome do beneficiario
        //            EntityBase.AppendPreparedField(ref doc, " ", 40);           //Mensagem 1
        //            EntityBase.AppendPreparedField(ref doc, " ", 40);           //Mensagem 2
        //            EntityBase.AppendPreparedField(ref doc, "0001".PadLeft(8, '0'), 8); //Número remessa/retorno
        //            EntityBase.AppendPreparedField(ref doc, dataAgora, 8);      //data de gravaçao do arquivo
        //            EntityBase.AppendPreparedField(ref doc, " ", 41);           //brancos

        //            #endregion

        //            //Carrega cobrancas envolvidas
        //            List<string> cobrancaIDs = new List<string>(); cobrancaIDs.Add(cobrancaId);
        //            IList<Cobranca> cobrancas = Cobranca.CarregarTodas_OrdemPorContratoParcela_Optimized(cobrancaIDs, pm); //
        //            List<Object> cobrancaIds = new List<Object>();
        //            if (cobrancas == null) { return null; }

        //            List<TabelaValorVencimentoVO> lista = new List<TabelaValorVencimentoVO>();

        //            #region DETAIL -------------------------------------------

        //            Endereco endereco = null;
        //            //, diaDataSemJuros, result = 0, 
        //            int totalRegistrosDetalhe = 0;
        //            String mascara6 = new String('0', 6); //, nossoNumero = "";
        //            Decimal valorTotal = 0; //, mora = 0, multa = 0;
        //            //Object valorDataLimite = null;
        //            DateTime contratoAdmissao = DateTime.MinValue, vigencia, vencimento, dataLimite = DateTime.MinValue;
        //            //CalendarioVencimento rcv = null;
        //            TabelaValorVencimentoVO retTvv = null;
        //            Contrato contrato = null;
        //            IList<TabelaValor> tabela = null; Taxa taxa = null; EstipulanteTaxa estipulanteTaxa = null;
        //            System.Globalization.CultureInfo cinfo = new System.Globalization.CultureInfo("pt-Br");

        //            int qtdTotalBoletos = 0, numBoletoCorrente = 0, idContratoAtual = 0;

        //            int i = 0;

        //            System.Collections.Hashtable contratoADM_Criterio = new System.Collections.Hashtable();
        //            List<string> parametrosProcessados = new List<string>();

        //            foreach (Cobranca cob in cobrancas)
        //            {
        //                if (parametrosProcessados.Contains(string.Concat(cob.DataVencimento.ToString("ddMMyyyy"), cob.PropostaID))) continue;

        //                parametrosProcessados.Add(string.Concat(cob.DataVencimento.ToString("ddMMyyyy"), cob.PropostaID));

        //                i++;
        //                try
        //                {
        //                    #region DETAIL P ---------------------------------

        //                    #region

        //                    #region localiza o critério correspondente

        //                    contrato = Contrato.CarregarParcial(cob.PropostaID, pm);

        //                    #endregion

        //                    numSequencial++;

        //                    cobrancaIds.Add(cob.ID);

        //                    if (Convert.ToInt32(cob.PropostaID) != idContratoAtual)
        //                    {
        //                        numBoletoCorrente = 0; idContratoAtual = Convert.ToInt32(cob.PropostaID);
        //                        qtdTotalBoletos = 0;
        //                        foreach (Cobranca _temp in cobrancas)
        //                        {
        //                            if (Convert.ToInt32(_temp.PropostaID) == idContratoAtual) { qtdTotalBoletos++; }
        //                            else if (qtdTotalBoletos > 0) { break; }
        //                        }
        //                    }

        //                    numBoletoCorrente++;

        //                    #region checa se tem despesa nao embutida com postagem. se tem, incrementa o valor da cobranca:

        //                    retTvv = TabelaValorVencimentoVO.ExisteProposta(cob.PropostaID, lista);
        //                    if (retTvv == null)
        //                    {
        //                        //contrato = Contrato.CarregarParcial(cob.PropostaID, pm);
        //                        tabela = TabelaValor.CarregarTabelaVigente(contrato.ContratoADMID, contrato.Admissao, cob.DataVencimento, pm);
        //                        if (tabela != null && tabela.Count > 0)
        //                        {
        //                            retTvv = TabelaValorVencimentoVO.ExisteTabela(tabela[0].ID, lista);
        //                            if (retTvv == null)
        //                            {
        //                                taxa = Taxa.CarregarPorTabela(tabela[0].ID, pm);
        //                                if (taxa != null && !taxa.Embutido)
        //                                {
        //                                    cob.Valor += taxa.ValorEmbutido;
        //                                }

        //                                retTvv = new TabelaValorVencimentoVO();
        //                                retTvv.PropostaID = contrato.ID;
        //                                retTvv.TabelaID = tabela[0].ID;
        //                                if (tabela[0].VencimentoFim != DateTime.MinValue)
        //                                { retTvv.Vencimento = tabela[0].VencimentoFim.AddMonths(1); }
        //                                if (taxa != null && !taxa.Embutido)
        //                                { retTvv.ValorBancario = taxa.ValorEmbutido; }

        //                                if (contrato.CobrarTaxaAssociativa)
        //                                {
        //                                    estipulanteTaxa = EstipulanteTaxa.CarregarVigente(contrato.EstipulanteID, pm);
        //                                    if (estipulanteTaxa != null)
        //                                    { retTvv.ValorSindicalizacao = estipulanteTaxa.Valor; }
        //                                }

        //                                lista.Add(retTvv);
        //                                //taxa = null;
        //                            }
        //                            else
        //                                cob.Valor += retTvv.ValorBancario;
        //                        }
        //                    }
        //                    else
        //                        cob.Valor += retTvv.ValorBancario;

        //                    #endregion

        //                    #region data de admissao do contrato

        //                    //Contrato _contrato = Contrato.CarregarParcial(cob.PropostaID, pm);
        //                    if (contrato != null) { contratoAdmissao = contrato.Admissao; }
        //                    else { continue; }
        //                    #endregion

        //                    #endregion

        //                    doc.Append(Environment.NewLine);

        //                    EntityBase.AppendPreparedField(ref doc, "033", 3);          //codigo do banco na compensacao
        //                    EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Numero do lote remessa
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //tipo de registro
        //                    EntityBase.AppendPreparedField(ref doc, numSequencial.ToString().PadLeft(5, '0'), 5); //Nº seqüencial do registro de lote
        //                    EntityBase.AppendPreparedField(ref doc, "P", 1);            //Código de Segmento do Reg. Detalhe
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "01", 2);           //Código de movimento remessa (pag3) - nota 14 (pag.14)
        //                    EntityBase.AppendPreparedField(ref doc, agencia, 4);        //Agência do Destinatária FIDC
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);            //Dígito da Agência do Destinatária FIDC ????
        //                    EntityBase.AppendPreparedField(ref doc, numcontacorr.PadLeft(9, '0'), 9); //Número da conta corrente
        //                    EntityBase.AppendPreparedField(ref doc, dvcontacorr, 1);            //Dígito da conta corrente (definido pela homologação)
        //                    EntityBase.AppendPreparedField(ref doc, numcontacorr.PadLeft(9, '0'), 9); //Conta cobrança Destinatária FIDC ????
        //                    EntityBase.AppendPreparedField(ref doc, dvcontacorr, 1); //Dígito da conta cobrança Destinatária FIDC ????
        //                    EntityBase.AppendPreparedField(ref doc, "  ", 2);           //branco
        //                    cob.NossoNumero = cob.GeraNossoNumeroSantander();
        //                    EntityBase.AppendPreparedField(ref doc, cob.NossoNumero, 13); //Identificação do título no Banco
        //                    EntityBase.AppendPreparedField(ref doc, "5", 1);            //Tipo de cobrança 
        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);            //Forma de Cadastramento - 1 para cobranca registrada
        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);            //Tipo de documento - 1- Tradicional , 2- Escritural
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, Convert.ToString(cob.ID).PadLeft(15, '0'), 15); //Seu número
        //                    EntityBase.AppendPreparedField(ref doc, cob.DataVencimento.ToString("ddMMyyyy"), 8);  // Data de vencimento - pos 78

        //                    //valor do boleto
        //                    EntityBase.AppendPreparedField(ref doc, cob.Valor.ToString("N2", cinfo).Split(',')[0].Replace(".", "").PadLeft(13, '0'), 13);
        //                    EntityBase.AppendPreparedField(ref doc, cob.Valor.ToString("N2", cinfo).Split(',')[1].PadLeft(2, '0'), 2);

        //                    EntityBase.AppendPreparedField(ref doc, "0000", 4);         //Agência encarregada da cobrança
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);            //Dígito da Agência do Beneficiário
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "02", 2);           //Espécie do título Nota 20 pag.15 ???
        //                    EntityBase.AppendPreparedField(ref doc, "N", 1);            //Identif. de título Aceito/Não Aceito
        //                    EntityBase.AppendPreparedField(ref doc, cob.DataCriacao.ToString("ddMMyyyy"), 8); //Data da emissão do título
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //Código do juros de mora - nota 21 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "00000000", 8); //Data do juros de mora - nota 22
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadRight(15, '0'), 15); //Valor da mora/dia ou Taxa mensal - nota 18 pag.15
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);            //Código do desconto 1 - nota 23 pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "00000000", 8);     //Data de desconto 1 - nota 23 pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Valor ou Percentual do desconto concedido
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Valor do IOF a ser recolhido
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Valor do abatimento

        //                    EntityBase.AppendPreparedField(ref doc, Convert.ToString(cob.ID).PadLeft(25, '0'), 25); //Identificação do título na empresa
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);            //Código para protesto - nota 25 pag.16 - 0=nao protestar
        //                    EntityBase.AppendPreparedField(ref doc, "00", 2);           //Número de dias para protesto
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //Código para Baixa/Devolução - nota 26 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "00", 2);           //Número de dias para Baixa/Devolução
        //                    EntityBase.AppendPreparedField(ref doc, "00", 2);           //Código da moeda - nota 27 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, " ".PadRight(11, ' '), 11); //branco

        //                    //
        //                    #endregion

        //                    #region DETAIL Q ---------------------------------

        //                    doc.Append(Environment.NewLine);

        //                    numSequencial++;

        //                    EntityBase.AppendPreparedField(ref doc, "033", 3);          //codigo do banco na compensacao
        //                    EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Numero do lote remessa
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //tipo de registro
        //                    EntityBase.AppendPreparedField(ref doc, numSequencial.ToString().PadLeft(5, '0'), 5); //Nº seqüencial do registro no lote - nota 11 - pg.14
        //                    EntityBase.AppendPreparedField(ref doc, "Q", 1);            //Código de Segmento do Reg. Detalhe
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "01", 2);           //Código de movimento remessa - nota 14 - pag 14

        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);           //Tipo de inscrição do Pagador - nota 29 - pag.17 - 1 = cpf
        //                    EntityBase.AppendPreparedField(ref doc, cob.ContratoTitularCPF.PadLeft(15, '0'), 15); //Número de inscrição do Pagador - pag. 4

        //                    EntityBase.AppendPreparedField(ref doc, cob.ContratoTitularNome, 40); //Nome Pagador

        //                    endereco = new Endereco(cob.ContratoEnderecoCobrancaID);
        //                    endereco.Carregar(pm);
        //                    if (endereco.CEP.IndexOf('-') > -1) { endereco.CEP = endereco.CEP.Replace("-", ""); }

        //                    if (endereco.Numero == null) endereco.Numero = "";
        //                    if (string.IsNullOrEmpty(endereco.Complemento))
        //                    {
        //                        int tamanhoDisponivel = 40 - (endereco.Numero.Length + 1);

        //                        if (endereco.Logradouro.Length > tamanhoDisponivel)
        //                        {
        //                            endereco.Logradouro = endereco.Logradouro.Substring(0, tamanhoDisponivel);
        //                        }

        //                        if (!string.IsNullOrEmpty(endereco.Numero))
        //                            endereco.Logradouro += string.Concat(",", endereco.Numero);
        //                    }
        //                    else
        //                    {
        //                        int tamanhoDisponivel = 40 - ((endereco.Numero.Length + 1) + (endereco.Complemento.Length + 1));

        //                        if (endereco.Logradouro.Length > tamanhoDisponivel)
        //                        {
        //                            endereco.Logradouro = endereco.Logradouro.Substring(0, tamanhoDisponivel);
        //                        }

        //                        if (!string.IsNullOrEmpty(endereco.Numero))
        //                            endereco.Logradouro += string.Concat(",", endereco.Numero, ",", endereco.Complemento);
        //                        else
        //                            endereco.Logradouro += string.Concat(",", endereco.Complemento);
        //                    }

        //                    if (string.IsNullOrEmpty(endereco.CEP)) { endereco.CEP = "00000000"; } else { endereco.CEP = endereco.CEP.Replace("-", ""); }
        //                    EntityBase.AppendPreparedField(ref doc, endereco.Logradouro, 40); // 
        //                    EntityBase.AppendPreparedField(ref doc, endereco.Bairro, 15);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.CEP, 8);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.Cidade, 15);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.UF, 2);

        //                    //if(string.IsNullOrEmpty(cob.ContratoTitularCPF) || cob.ContratoTitularCPF == "00000000000")
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1); //Tipo de inscrição Sacador/avalista - nota 29 - pag.17
        //                    //else
        //                    //    EntityBase.AppendPreparedField(ref doc, "1", 1); //Tipo de inscrição Sacador/avalista - nota 29 - pag.17

        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Nº de inscrição Sacador/avalista

        //                    EntityBase.AppendPreparedField(ref doc, " ".PadLeft(40, ' '), 40); //Nome do Sacador/Avalista

        //                    EntityBase.AppendPreparedField(ref doc, "000", 3); //Identificador de carne - nota 28 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "000", 3); //Sequencial da Parcela ou número inicial da parcela - nota 28 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "000", 3); //Quantidade total de parcelas - nota 28 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "000", 3); //Número do plano - nota 28 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, " ".PadRight(19, ' '), 19); //Brancos

        //                    #endregion

        //                    totalRegistrosDetalhe++;
        //                    valorTotal += cob.Valor;


        //                    if (cob.ArquivoIDUltimoEnvio == null) { cob.ArquivoIDUltimoEnvio = -10; }
        //                    cob.Banco = 353;
        //                    cob.Carteira = 101;
        //                    pm.Save(cob);
        //                }
        //                catch (Exception ex)
        //                {
        //                    try
        //                    {
        //                        string path = System.Configuration.ConfigurationManager.AppSettings["financialFilePath"].Replace("/", @"\");
        //                        System.IO.File.WriteAllText(path + "err_" + DateTime.Now.ToString("ddMMyyyyHHmmssfff") + ".txt",
        //                            ex.Message +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + ex.StackTrace +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + Convert.ToString(cob.ID) +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + i.ToString(),
        //                            System.Text.Encoding.ASCII);
        //                    }
        //                    catch { }
        //                    continue;
        //                }
        //            }
        //            #endregion

        //            #region TRAILLER DE LOTE ---------------------------------

        //            doc.Append(Environment.NewLine);

        //            EntityBase.AppendPreparedField(ref doc, "033", 3);
        //            EntityBase.AppendPreparedField(ref doc, "0001", 4);
        //            EntityBase.AppendPreparedField(ref doc, "5", 1);
        //            EntityBase.AppendPreparedField(ref doc, " ", 9);
        //            EntityBase.AppendPreparedField(ref doc, (numSequencial + 2).ToString().PadLeft(6, '0'), 6);
        //            EntityBase.AppendPreparedField(ref doc, " ", 217);

        //            #endregion

        //            #region TRAILLER -----------------------------------------

        //            doc.Append(Environment.NewLine);

        //            EntityBase.AppendPreparedField(ref doc, "033", 3);
        //            EntityBase.AppendPreparedField(ref doc, "9999", 4); //9999 - Numero do lote remessa
        //            EntityBase.AppendPreparedField(ref doc, "9", 1);
        //            EntityBase.AppendPreparedField(ref doc, " ", 9); //branco
        //            EntityBase.AppendPreparedField(ref doc, "1".PadLeft(6, '0'), 6); //qtd de lotes - registros tipo 1
        //            EntityBase.AppendPreparedField(ref doc, (numSequencial + 4).ToString().PadLeft(6, '0'), 6);
        //            EntityBase.AppendPreparedField(ref doc, " ", 211); //

        //            #endregion

        //            if (_pm == null) { pm.Commit(); } //se não está partcipando de uma transacao externa, comita //pm.Rollback();
        //            return doc.ToString();
        //        }
        //        catch
        //        {
        //            if (_pm == null) { pm.Rollback(); }
        //            throw;
        //        }
        //        finally
        //        {
        //            if (_pm == null) { pm = null; }
        //        }
        //    }

        //    public static String GeraDocumentoCobranca_SANTANDER_Test(string cobrancaId, PersistenceManager _pm)
        //    {
        //        Int32 numSequencial = 0;

        //        PersistenceManager pm = _pm;

        //        Int32 contratoadmQualicorpID = Convert.ToInt32(ConfigurationManager.AppSettings["contratoAdmQualicorpIdIncial"]);

        //        if (_pm == null)
        //        {
        //            pm = new PersistenceManager();
        //            pm.IsoLevel = IsolationLevel.ReadUncommitted;
        //            pm.BeginTransactionContext();
        //        }

        //        //Cobranca cobprova = new Cobranca(cobrancaId);
        //        //pm.Load(cobprova);
        //        //Contrato contratoprova = new Contrato(cobprova.PropostaID);
        //        //pm.Load(contratoprova);

        //        //String agCCDV_itau = "";
        //        String headerCedente = "UBRASP - UNIAO BRASILEIRA";
        //        string agencia = "0001"; //, agenciadv = "0";
        //        string numcontacorr = "13014765";
        //        string dvcontacorr = "2";
        //        string cnpj = "49938327000106"; //
        //        string codTransmissao = "000100001201344";
        //        //string complemento = "I 52";

        //        //agCCDV_itau = "0646042606";    //qualicorp
        //        string numConvenio = "1201344"; // Cobranca.ConvenioUBRASP.PadLeft(9, '0');
        //        //string carteira = "5"; //, variacao = "019";

        //        int numeroDoArquivo = 1;
        //        string[] arquivos = Directory.GetFiles(ConfigurationManager.AppSettings["financialFilePathFISICO"], "*.dat");
        //        if (arquivos != null && arquivos.Length > 0) numeroDoArquivo = arquivos.Length + 1;
        //        if (numeroDoArquivo > 999) numeroDoArquivo = 1 + (arquivos.Length - 999);


        //        try
        //        {
        //            if (cobrancaId == null) { return null; }

        //            String dataAgora = DateTime.Now.ToString("ddMMyyyy");
        //            StringBuilder doc = new StringBuilder();

        //            ////Cobranca.eCarteira carteira = (Cobranca.eCarteira)aras[0].Carteira;

        //            #region HEADER -------------------------------------------

        //            EntityBase.AppendPreparedField(ref doc, "033", 3);          //codigo do banco na compensacao
        //            EntityBase.AppendPreparedField(ref doc, "0000", 4);         //lote de serviço
        //            EntityBase.AppendPreparedField(ref doc, "0", 1);            //tipo de registro
        //            EntityBase.AppendPreparedField(ref doc, "        ", 8);     //brancos
        //            EntityBase.AppendPreparedField(ref doc, "2", 1);            //tipo de inscrição - 2 para CNPJ, 1 para CPF

        //            EntityBase.AppendPreparedField(ref doc, cnpj.PadLeft(15, '0'), 15);          //CNPJ (ou cpf) 
        //            EntityBase.AppendPreparedField(ref doc, codTransmissao.PadLeft(15, '0'), 15); //Codigo de transmissao 
        //            EntityBase.AppendPreparedField(ref doc, " ", 25);           //brancos
        //            EntityBase.AppendPreparedField(ref doc, headerCedente.PadRight(30, ' '), 30); //nome empresa
        //            EntityBase.AppendPreparedField(ref doc, "Banco Santander".PadRight(30, ' '), 30); //Nome do Banco
        //            EntityBase.AppendPreparedField(ref doc, " ", 10);           //brancos
        //            EntityBase.AppendPreparedField(ref doc, "1", 1);            //Código Remessa: 1 = remessa
        //            EntityBase.AppendPreparedField(ref doc, dataAgora, 8);      //data de geracao do arquivo
        //            EntityBase.AppendPreparedField(ref doc, " ", 6);            //brancos
        //            EntityBase.AppendPreparedField(ref doc, numeroDoArquivo.ToString().PadLeft(6, '0'), 6); //brancos
        //            EntityBase.AppendPreparedField(ref doc, "040", 3);          //versão do layout do arquivo
        //            EntityBase.AppendPreparedField(ref doc, " ", 74);           //brancos

        //            #endregion

        //            #region HEADER DE LOTE -----------------------------------

        //            doc.Append(Environment.NewLine);
        //            EntityBase.AppendPreparedField(ref doc, "033", 3);          //codigo do banco na compensacao
        //            EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Lote de Serviço
        //            EntityBase.AppendPreparedField(ref doc, "1", 1);            //tipo de registro
        //            EntityBase.AppendPreparedField(ref doc, "R", 1);            //tipo de operação
        //            EntityBase.AppendPreparedField(ref doc, "01", 2);           //tipo de serviço
        //            EntityBase.AppendPreparedField(ref doc, "  ", 2);           //brancos
        //            EntityBase.AppendPreparedField(ref doc, "030", 3);          //Nº da Versão do Layout do Lote - nao criticado pelo banco
        //            EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //            EntityBase.AppendPreparedField(ref doc, "2", 1);            //Tipo de Inscrição da Empresa - 2=CNPJ
        //            EntityBase.AppendPreparedField(ref doc, cnpj.PadLeft(15, '0'), 15);  //CNPJ (ou cpf) //faltou: cnpj
        //            EntityBase.AppendPreparedField(ref doc, " ", 20);           //brancos
        //            EntityBase.AppendPreparedField(ref doc, codTransmissao.PadLeft(15, '0'), 15);//Codigo de transmissao 
        //            EntityBase.AppendPreparedField(ref doc, " ", 05);           //brancos
        //            EntityBase.AppendPreparedField(ref doc, headerCedente.PadRight(30, ' '), 30); //Nome do beneficiario
        //            EntityBase.AppendPreparedField(ref doc, " ", 40);           //Mensagem 1
        //            EntityBase.AppendPreparedField(ref doc, " ", 40);           //Mensagem 2
        //            EntityBase.AppendPreparedField(ref doc, "0001".PadLeft(8, '0'), 8); //Número remessa/retorno
        //            EntityBase.AppendPreparedField(ref doc, dataAgora, 8);      //data de gravaçao do arquivo
        //            EntityBase.AppendPreparedField(ref doc, " ", 41);           //brancos

        //            #endregion

        //            //Carrega cobrancas envolvidas
        //            List<string> cobrancaIDs = new List<string>(); //cobrancaIDs.Add(cobrancaId);
        //            cobrancaIDs.AddRange(new string[] { "3375", "3376", "3377", "3378", "3379", "3380", "3381", "3382", "3383", "3384", "3385", "3386", "3387", "3388", "3389", "3390", "3391", "3392", "3393", "3394", "3395", "3396", "3397", "3398", "3399", "3400", "3401", "3402", "3403", "3404", "3405", "3406", "3407", "3408", "3409", "3410", "3411" });
        //            IList<Cobranca> cobrancas = Cobranca.CarregarTodas_OrdemPorContratoParcela_Optimized(cobrancaIDs, pm); //
        //            List<Object> cobrancaIds = new List<Object>();
        //            if (cobrancas == null) { return null; }

        //            List<TabelaValorVencimentoVO> lista = new List<TabelaValorVencimentoVO>();

        //            #region DETAIL -------------------------------------------

        //            Endereco endereco = null;
        //            //, diaDataSemJuros, result = 0, 
        //            int totalRegistrosDetalhe = 0;
        //            String mascara6 = new String('0', 6); //, nossoNumero = "";
        //            Decimal valorTotal = 0; //, mora = 0, multa = 0;
        //            //Object valorDataLimite = null;
        //            DateTime contratoAdmissao = DateTime.MinValue, vigencia, vencimento, dataLimite = DateTime.MinValue;
        //            //CalendarioVencimento rcv = null;
        //            TabelaValorVencimentoVO retTvv = null;
        //            Contrato contrato = null;
        //            IList<TabelaValor> tabela = null; Taxa taxa = null; EstipulanteTaxa estipulanteTaxa = null;
        //            System.Globalization.CultureInfo cinfo = new System.Globalization.CultureInfo("pt-Br");

        //            int qtdTotalBoletos = 0, numBoletoCorrente = 0, idContratoAtual = 0;

        //            int i = 0;

        //            System.Collections.Hashtable contratoADM_Criterio = new System.Collections.Hashtable();
        //            List<string> parametrosProcessados = new List<string>();

        //            foreach (Cobranca cob in cobrancas)
        //            {
        //                if (parametrosProcessados.Contains(string.Concat(cob.DataVencimento.ToString("ddMMyyyy"), cob.PropostaID))) continue;

        //                parametrosProcessados.Add(string.Concat(cob.DataVencimento.ToString("ddMMyyyy"), cob.PropostaID));

        //                i++;
        //                try
        //                {
        //                    #region DETAIL P ---------------------------------

        //                    #region

        //                    #region localiza o critério correspondente

        //                    contrato = Contrato.CarregarParcial(cob.PropostaID, pm);

        //                    #endregion

        //                    numSequencial++;

        //                    cobrancaIds.Add(cob.ID);

        //                    if (Convert.ToInt32(cob.PropostaID) != idContratoAtual)
        //                    {
        //                        numBoletoCorrente = 0; idContratoAtual = Convert.ToInt32(cob.PropostaID);
        //                        qtdTotalBoletos = 0;
        //                        foreach (Cobranca _temp in cobrancas)
        //                        {
        //                            if (Convert.ToInt32(_temp.PropostaID) == idContratoAtual) { qtdTotalBoletos++; }
        //                            else if (qtdTotalBoletos > 0) { break; }
        //                        }
        //                    }

        //                    numBoletoCorrente++;

        //                    #region checa se tem despesa nao embutida com postagem. se tem, incrementa o valor da cobranca:

        //                    retTvv = TabelaValorVencimentoVO.ExisteProposta(cob.PropostaID, lista);
        //                    if (retTvv == null)
        //                    {
        //                        //contrato = Contrato.CarregarParcial(cob.PropostaID, pm);
        //                        tabela = TabelaValor.CarregarTabelaVigente(contrato.ContratoADMID, contrato.Admissao, cob.DataVencimento, pm);
        //                        if (tabela != null && tabela.Count > 0)
        //                        {
        //                            retTvv = TabelaValorVencimentoVO.ExisteTabela(tabela[0].ID, lista);
        //                            if (retTvv == null)
        //                            {
        //                                taxa = Taxa.CarregarPorTabela(tabela[0].ID, pm);
        //                                if (taxa != null && !taxa.Embutido)
        //                                {
        //                                    cob.Valor += taxa.ValorEmbutido;
        //                                }

        //                                retTvv = new TabelaValorVencimentoVO();
        //                                retTvv.PropostaID = contrato.ID;
        //                                retTvv.TabelaID = tabela[0].ID;
        //                                if (tabela[0].VencimentoFim != DateTime.MinValue)
        //                                { retTvv.Vencimento = tabela[0].VencimentoFim.AddMonths(1); }
        //                                if (taxa != null && !taxa.Embutido)
        //                                { retTvv.ValorBancario = taxa.ValorEmbutido; }

        //                                if (contrato.CobrarTaxaAssociativa)
        //                                {
        //                                    estipulanteTaxa = EstipulanteTaxa.CarregarVigente(contrato.EstipulanteID, pm);
        //                                    if (estipulanteTaxa != null)
        //                                    { retTvv.ValorSindicalizacao = estipulanteTaxa.Valor; }
        //                                }

        //                                lista.Add(retTvv);
        //                                //taxa = null;
        //                            }
        //                            else
        //                                cob.Valor += retTvv.ValorBancario;
        //                        }
        //                    }
        //                    else
        //                        cob.Valor += retTvv.ValorBancario;

        //                    #endregion

        //                    #region data de admissao do contrato

        //                    //Contrato _contrato = Contrato.CarregarParcial(cob.PropostaID, pm);
        //                    if (contrato != null) { contratoAdmissao = contrato.Admissao; }
        //                    else { continue; }
        //                    #endregion

        //                    #endregion

        //                    doc.Append(Environment.NewLine);

        //                    EntityBase.AppendPreparedField(ref doc, "033", 3);          //codigo do banco na compensacao
        //                    EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Numero do lote remessa
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //tipo de registro
        //                    EntityBase.AppendPreparedField(ref doc, numSequencial.ToString().PadLeft(5, '0'), 5); //Nº seqüencial do registro de lote
        //                    EntityBase.AppendPreparedField(ref doc, "P", 1);            //Código de Segmento do Reg. Detalhe
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "01", 2);           //Código de movimento remessa (pag3) - nota 14 (pag.14)
        //                    EntityBase.AppendPreparedField(ref doc, agencia, 4);        //Agência do Destinatária FIDC
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);            //Dígito da Agência do Destinatária FIDC ????
        //                    EntityBase.AppendPreparedField(ref doc, numcontacorr.PadLeft(9, '0'), 9); //Número da conta corrente
        //                    EntityBase.AppendPreparedField(ref doc, dvcontacorr, 1);            //Dígito da conta corrente (definido pela homologação)
        //                    EntityBase.AppendPreparedField(ref doc, numcontacorr.PadLeft(9, '0'), 9); //Conta cobrança Destinatária FIDC ????
        //                    EntityBase.AppendPreparedField(ref doc, dvcontacorr, 1); //Dígito da conta cobrança Destinatária FIDC ????
        //                    EntityBase.AppendPreparedField(ref doc, "  ", 2);           //branco
        //                    cob.NossoNumero = cob.GeraNossoNumeroSantander();
        //                    EntityBase.AppendPreparedField(ref doc, cob.NossoNumero, 13); //Identificação do título no Banco
        //                    EntityBase.AppendPreparedField(ref doc, "5", 1);            //Tipo de cobrança 
        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);            //Forma de Cadastramento - 1 para cobranca registrada
        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);            //Tipo de documento - 1- Tradicional , 2- Escritural
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, Convert.ToString(cob.ID).PadLeft(15, '0'), 15); //Seu número
        //                    EntityBase.AppendPreparedField(ref doc, cob.DataVencimento.ToString("ddMMyyyy"), 8);  // Data de vencimento - pos 78

        //                    //valor do boleto
        //                    EntityBase.AppendPreparedField(ref doc, cob.Valor.ToString("N2", cinfo).Split(',')[0].Replace(".", "").PadLeft(13, '0'), 13);
        //                    EntityBase.AppendPreparedField(ref doc, cob.Valor.ToString("N2", cinfo).Split(',')[1].PadLeft(2, '0'), 2);

        //                    EntityBase.AppendPreparedField(ref doc, "0000", 4);         //Agência encarregada da cobrança
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);            //Dígito da Agência do Beneficiário
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "02", 2);           //Espécie do título Nota 20 pag.15 ???
        //                    EntityBase.AppendPreparedField(ref doc, "N", 1);            //Identif. de título Aceito/Não Aceito
        //                    EntityBase.AppendPreparedField(ref doc, cob.DataCriacao.ToString("ddMMyyyy"), 8); //Data da emissão do título
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //Código do juros de mora - nota 21 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "00000000", 8); //Data do juros de mora - nota 22
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadRight(15, '0'), 15); //Valor da mora/dia ou Taxa mensal - nota 18 pag.15
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);            //Código do desconto 1 - nota 23 pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "00000000", 8);     //Data de desconto 1 - nota 23 pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Valor ou Percentual do desconto concedido
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Valor do IOF a ser recolhido
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Valor do abatimento

        //                    EntityBase.AppendPreparedField(ref doc, Convert.ToString(cob.ID).PadLeft(25, '0'), 25); //Identificação do título na empresa
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);            //Código para protesto - nota 25 pag.16 - 0=nao protestar
        //                    EntityBase.AppendPreparedField(ref doc, "00", 2);           //Número de dias para protesto
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //Código para Baixa/Devolução - nota 26 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "00", 2);           //Número de dias para Baixa/Devolução
        //                    EntityBase.AppendPreparedField(ref doc, "00", 2);           //Código da moeda - nota 27 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, " ".PadRight(11, ' '), 11); //branco

        //                    //
        //                    #endregion

        //                    #region DETAIL Q ---------------------------------

        //                    doc.Append(Environment.NewLine);

        //                    numSequencial++;

        //                    EntityBase.AppendPreparedField(ref doc, "033", 3);          //codigo do banco na compensacao
        //                    EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Numero do lote remessa
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //tipo de registro
        //                    EntityBase.AppendPreparedField(ref doc, numSequencial.ToString().PadLeft(5, '0'), 5); //Nº seqüencial do registro no lote - nota 11 - pg.14
        //                    EntityBase.AppendPreparedField(ref doc, "Q", 1);            //Código de Segmento do Reg. Detalhe
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "01", 2);           //Código de movimento remessa - nota 14 - pag 14

        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);           //Tipo de inscrição do Pagador - nota 29 - pag.17 - 1 = cpf
        //                    EntityBase.AppendPreparedField(ref doc, cob.ContratoTitularCPF.PadLeft(15, '0'), 15); //Número de inscrição do Pagador - pag. 4

        //                    EntityBase.AppendPreparedField(ref doc, cob.ContratoTitularNome, 40); //Nome Pagador

        //                    endereco = new Endereco(cob.ContratoEnderecoCobrancaID);
        //                    endereco.Carregar(pm);
        //                    if (endereco.CEP.IndexOf('-') > -1) { endereco.CEP = endereco.CEP.Replace("-", ""); }

        //                    if (endereco.Numero == null) endereco.Numero = "";
        //                    if (string.IsNullOrEmpty(endereco.Complemento))
        //                    {
        //                        int tamanhoDisponivel = 40 - (endereco.Numero.Length + 1);

        //                        if (endereco.Logradouro.Length > tamanhoDisponivel)
        //                        {
        //                            endereco.Logradouro = endereco.Logradouro.Substring(0, tamanhoDisponivel);
        //                        }

        //                        if (!string.IsNullOrEmpty(endereco.Numero))
        //                            endereco.Logradouro += string.Concat(",", endereco.Numero);
        //                    }
        //                    else
        //                    {
        //                        int tamanhoDisponivel = 40 - ((endereco.Numero.Length + 1) + (endereco.Complemento.Length + 1));

        //                        if (endereco.Logradouro.Length > tamanhoDisponivel)
        //                        {
        //                            endereco.Logradouro = endereco.Logradouro.Substring(0, tamanhoDisponivel);
        //                        }

        //                        if (!string.IsNullOrEmpty(endereco.Numero))
        //                            endereco.Logradouro += string.Concat(",", endereco.Numero, ",", endereco.Complemento);
        //                        else
        //                            endereco.Logradouro += string.Concat(",", endereco.Complemento);
        //                    }

        //                    if (string.IsNullOrEmpty(endereco.CEP)) { endereco.CEP = "00000000"; } else { endereco.CEP = endereco.CEP.Replace("-", ""); }
        //                    EntityBase.AppendPreparedField(ref doc, endereco.Logradouro, 40); // 
        //                    EntityBase.AppendPreparedField(ref doc, endereco.Bairro, 15);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.CEP, 8);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.Cidade, 15);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.UF, 2);

        //                    //if(string.IsNullOrEmpty(cob.ContratoTitularCPF) || cob.ContratoTitularCPF == "00000000000")
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1); //Tipo de inscrição Sacador/avalista - nota 29 - pag.17
        //                    //else
        //                    //    EntityBase.AppendPreparedField(ref doc, "1", 1); //Tipo de inscrição Sacador/avalista - nota 29 - pag.17

        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Nº de inscrição Sacador/avalista

        //                    EntityBase.AppendPreparedField(ref doc, " ".PadLeft(40, ' '), 40); //Nome do Sacador/Avalista

        //                    EntityBase.AppendPreparedField(ref doc, "000", 3); //Identificador de carne - nota 28 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "000", 3); //Sequencial da Parcela ou número inicial da parcela - nota 28 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "000", 3); //Quantidade total de parcelas - nota 28 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "000", 3); //Número do plano - nota 28 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, " ".PadRight(19, ' '), 19); //Brancos

        //                    #endregion

        //                    totalRegistrosDetalhe++;
        //                    valorTotal += cob.Valor;


        //                    cob.ArquivoIDUltimoEnvio = -10;
        //                    cob.Carteira = 101;
        //                    pm.Save(cob);
        //                }
        //                catch (Exception ex)
        //                {
        //                    try
        //                    {
        //                        string path = System.Configuration.ConfigurationManager.AppSettings["financialFilePath"].Replace("/", @"\");
        //                        System.IO.File.WriteAllText(path + "err_" + DateTime.Now.ToString("ddMMyyyyHHmmssfff") + ".txt",
        //                            ex.Message +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + ex.StackTrace +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + Convert.ToString(cob.ID) +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + i.ToString(),
        //                            System.Text.Encoding.ASCII);
        //                    }
        //                    catch { }
        //                    continue;
        //                }
        //            }
        //            #endregion

        //            #region TRAILLER DE LOTE ---------------------------------

        //            doc.Append(Environment.NewLine);

        //            EntityBase.AppendPreparedField(ref doc, "033", 3);
        //            EntityBase.AppendPreparedField(ref doc, "0001", 4);
        //            EntityBase.AppendPreparedField(ref doc, "5", 1);
        //            EntityBase.AppendPreparedField(ref doc, " ", 9);
        //            EntityBase.AppendPreparedField(ref doc, (numSequencial + 2).ToString().PadLeft(6, '0'), 6);
        //            EntityBase.AppendPreparedField(ref doc, " ", 217);

        //            #endregion

        //            #region TRAILLER -----------------------------------------

        //            doc.Append(Environment.NewLine);

        //            EntityBase.AppendPreparedField(ref doc, "033", 3);
        //            EntityBase.AppendPreparedField(ref doc, "9999", 4); //9999 - Numero do lote remessa
        //            EntityBase.AppendPreparedField(ref doc, "9", 1);
        //            EntityBase.AppendPreparedField(ref doc, " ", 9); //branco
        //            EntityBase.AppendPreparedField(ref doc, "1".PadLeft(6, '0'), 6); //qtd de lotes - registros tipo 1
        //            EntityBase.AppendPreparedField(ref doc, (numSequencial + 4).ToString().PadLeft(6, '0'), 6);
        //            EntityBase.AppendPreparedField(ref doc, " ", 211); //

        //            #endregion

        //            if (_pm == null) { pm.Commit(); } //se não está partcipando de uma transacao externa, comita //pm.Rollback();
        //            return doc.ToString();
        //        }
        //        catch
        //        {
        //            if (_pm == null) { pm.Rollback(); }
        //            throw;
        //        }
        //        finally
        //        {
        //            if (_pm == null) { pm = null; }
        //        }
        //    }


        //    public static String GeraDocumentoCobranca_SANTANDER___TEMP(IList<String> cobrancaIDs, IList<ArquivoRemessaAgendamento> aras, PersistenceManager _pm)
        //    {
        //        Int32 numSequencial = 0;

        //        PersistenceManager pm = _pm;

        //        Int32 contratoadmQualicorpID = Convert.ToInt32(ConfigurationManager.AppSettings["contratoAdmQualicorpIdIncial"]);

        //        if (_pm == null)
        //        {
        //            pm = new PersistenceManager();
        //            pm.IsoLevel = IsolationLevel.ReadUncommitted;
        //            pm.BeginTransactionContext();
        //        }

        //        String headerCedente = "UBRASP - UNIAO BRASILEIRA";
        //        string agencia = "0001"; //, agenciadv = "0";
        //        string numcontacorr = "13014765";
        //        string dvcontacorr = "2";
        //        string cnpj = "49938327000106"; //
        //        string codTransmissao = "000100001201344";
        //        //string complemento = "I 52";

        //        //agCCDV_itau = "0646042606";    //qualicorp
        //        string numConvenio = "1201344"; // Cobranca.ConvenioUBRASP.PadLeft(9, '0');
        //        //string carteira = "5"; //, variacao = "019";

        //        int numeroDoArquivo = 1;
        //        string[] arquivos = Directory.GetFiles(ConfigurationManager.AppSettings["financialFilePathFISICO"], "*.dat");
        //        if (arquivos != null && arquivos.Length > 0) numeroDoArquivo = arquivos.Length + 1;
        //        if (numeroDoArquivo > 999) numeroDoArquivo = 1 + (arquivos.Length - 999);

        //        try
        //        {
        //            String dataAgora = DateTime.Now.ToString("ddMMyyyy");
        //            StringBuilder doc = new StringBuilder();

        //            #region HEADER -------------------------------------------

        //            EntityBase.AppendPreparedField(ref doc, "033", 3);          //codigo do banco na compensacao
        //            EntityBase.AppendPreparedField(ref doc, "0000", 4);         //lote de serviço
        //            EntityBase.AppendPreparedField(ref doc, "0", 1);            //tipo de registro
        //            EntityBase.AppendPreparedField(ref doc, "        ", 8);     //brancos
        //            EntityBase.AppendPreparedField(ref doc, "2", 1);            //tipo de inscrição - 2 para CNPJ, 1 para CPF

        //            EntityBase.AppendPreparedField(ref doc, cnpj.PadLeft(15, '0'), 15);          //CNPJ (ou cpf) 
        //            EntityBase.AppendPreparedField(ref doc, codTransmissao.PadLeft(15, '0'), 15); //Codigo de transmissao 
        //            EntityBase.AppendPreparedField(ref doc, " ", 25);           //brancos
        //            EntityBase.AppendPreparedField(ref doc, headerCedente.PadRight(30, ' '), 30); //nome empresa
        //            EntityBase.AppendPreparedField(ref doc, "Banco Santander".PadRight(30, ' '), 30); //Nome do Banco
        //            EntityBase.AppendPreparedField(ref doc, " ", 10);           //brancos
        //            EntityBase.AppendPreparedField(ref doc, "1", 1);            //Código Remessa: 1 = remessa
        //            EntityBase.AppendPreparedField(ref doc, dataAgora, 8);      //data de geracao do arquivo
        //            EntityBase.AppendPreparedField(ref doc, " ", 6);            //brancos
        //            EntityBase.AppendPreparedField(ref doc, numeroDoArquivo.ToString().PadLeft(6, '0'), 6); //brancos
        //            EntityBase.AppendPreparedField(ref doc, "040", 3);          //versão do layout do arquivo
        //            EntityBase.AppendPreparedField(ref doc, " ", 74);           //brancos

        //            #endregion

        //            #region HEADER DE LOTE -----------------------------------

        //            doc.Append(Environment.NewLine);
        //            EntityBase.AppendPreparedField(ref doc, "033", 3);          //codigo do banco na compensacao
        //            EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Lote de Serviço
        //            EntityBase.AppendPreparedField(ref doc, "1", 1);            //tipo de registro
        //            EntityBase.AppendPreparedField(ref doc, "R", 1);            //tipo de operação
        //            EntityBase.AppendPreparedField(ref doc, "01", 2);           //tipo de serviço
        //            EntityBase.AppendPreparedField(ref doc, "  ", 2);           //brancos
        //            EntityBase.AppendPreparedField(ref doc, "030", 3);          //Nº da Versão do Layout do Lote - nao criticado pelo banco
        //            EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //            EntityBase.AppendPreparedField(ref doc, "2", 1);            //Tipo de Inscrição da Empresa - 2=CNPJ
        //            EntityBase.AppendPreparedField(ref doc, cnpj.PadLeft(15, '0'), 15);  //CNPJ (ou cpf) //faltou: cnpj
        //            EntityBase.AppendPreparedField(ref doc, " ", 20);           //brancos
        //            EntityBase.AppendPreparedField(ref doc, codTransmissao.PadLeft(15, '0'), 15);//Codigo de transmissao 
        //            EntityBase.AppendPreparedField(ref doc, " ", 05);           //brancos
        //            EntityBase.AppendPreparedField(ref doc, headerCedente.PadRight(30, ' '), 30); //Nome do beneficiario
        //            EntityBase.AppendPreparedField(ref doc, " ", 40);           //Mensagem 1
        //            EntityBase.AppendPreparedField(ref doc, " ", 40);           //Mensagem 2
        //            EntityBase.AppendPreparedField(ref doc, "0001".PadLeft(8, '0'), 8); //Número remessa/retorno
        //            EntityBase.AppendPreparedField(ref doc, dataAgora, 8);      //data de gravaçao do arquivo
        //            EntityBase.AppendPreparedField(ref doc, " ", 41);           //brancos

        //            #endregion

        //            //Carrega cobrancas envolvidas
        //            IList<Cobranca> _cobrancas = Cobranca.CarregarTodas_OrdemPorContratoParcela_Optimized(cobrancaIDs, pm);
        //            if (_cobrancas == null) { return null; }
        //            List<Object> cobrancaIds = new List<Object>();

        //            IList<Cobranca> cobrancas = new List<Cobranca>();
        //            foreach (var c in _cobrancas)
        //            {
        //                //if (Convert.ToString(c.BeneficiarioId) == "39453" || Convert.ToString(c.BeneficiarioId) == "12971" || Convert.ToString(c.BeneficiarioId) == "13366") continue;
        //                cobrancas.Add(c);
        //            }

        //            if (cobrancas == null || cobrancas.Count == 0) { return null; }

        //            List<TabelaValorVencimentoVO> lista = new List<TabelaValorVencimentoVO>();

        //            #region DETAIL -------------------------------------------

        //            Endereco endereco = null;
        //            //, diaDataSemJuros, result = 0, 
        //            int totalRegistrosDetalhe = 0;
        //            String mascara6 = new String('0', 6); //, nossoNumero = "";
        //            Decimal valorTotal = 0; //, mora = 0, multa = 0;
        //            //Object valorDataLimite = null;
        //            DateTime contratoAdmissao = DateTime.MinValue, vigencia, vencimento, dataLimite = DateTime.MinValue;
        //            //CalendarioVencimento rcv = null;
        //            TabelaValorVencimentoVO retTvv = null;
        //            Contrato contrato = null;
        //            IList<TabelaValor> tabela = null; Taxa taxa = null; EstipulanteTaxa estipulanteTaxa = null;
        //            System.Globalization.CultureInfo cinfo = new System.Globalization.CultureInfo("pt-Br");

        //            int qtdTotalBoletos = 0, numBoletoCorrente = 0, idContratoAtual = 0;

        //            int i = 0;

        //            System.Collections.Hashtable contratoADM_Criterio = new System.Collections.Hashtable();
        //            List<string> parametrosProcessados = new List<string>();

        //            foreach (Cobranca cob in cobrancas)
        //            {
        //                if (Convert.ToString(cob.ID) == "4977") { int guenta = 0; }

        //                if (parametrosProcessados.Contains(string.Concat(cob.DataVencimento.ToString("ddMMyyyy"), cob.PropostaID))) continue;

        //                parametrosProcessados.Add(string.Concat(cob.DataVencimento.ToString("ddMMyyyy"), cob.PropostaID));

        //                i++;
        //                try
        //                {
        //                    #region DETAIL P ---------------------------------

        //                    #region

        //                    #region localiza o critério correspondente

        //                    contrato = Contrato.CarregarParcial(cob.PropostaID, pm);

        //                    #endregion

        //                    numSequencial++;

        //                    cobrancaIds.Add(cob.ID);

        //                    if (Convert.ToInt32(cob.PropostaID) != idContratoAtual)
        //                    {
        //                        numBoletoCorrente = 0; idContratoAtual = Convert.ToInt32(cob.PropostaID);
        //                        qtdTotalBoletos = 0;
        //                        foreach (Cobranca _temp in cobrancas)
        //                        {
        //                            if (Convert.ToInt32(_temp.PropostaID) == idContratoAtual) { qtdTotalBoletos++; }
        //                            else if (qtdTotalBoletos > 0) { break; }
        //                        }
        //                    }

        //                    numBoletoCorrente++;

        //                    #region checa se tem despesa nao embutida com postagem. se tem, incrementa o valor da cobranca:

        //                    retTvv = TabelaValorVencimentoVO.ExisteProposta(cob.PropostaID, lista);
        //                    if (retTvv == null)
        //                    {
        //                        //contrato = Contrato.CarregarParcial(cob.PropostaID, pm);
        //                        tabela = TabelaValor.CarregarTabelaVigente(contrato.ContratoADMID, contrato.Admissao, cob.DataVencimento, pm);
        //                        if (tabela != null && tabela.Count > 0)
        //                        {
        //                            retTvv = TabelaValorVencimentoVO.ExisteTabela(tabela[0].ID, lista);
        //                            if (retTvv == null)
        //                            {
        //                                taxa = Taxa.CarregarPorTabela(tabela[0].ID, pm);
        //                                if (taxa != null && !taxa.Embutido)
        //                                {
        //                                    cob.Valor += taxa.ValorEmbutido;
        //                                }

        //                                retTvv = new TabelaValorVencimentoVO();
        //                                retTvv.PropostaID = contrato.ID;
        //                                retTvv.TabelaID = tabela[0].ID;
        //                                if (tabela[0].VencimentoFim != DateTime.MinValue)
        //                                { retTvv.Vencimento = tabela[0].VencimentoFim.AddMonths(1); }
        //                                if (taxa != null && !taxa.Embutido)
        //                                { retTvv.ValorBancario = taxa.ValorEmbutido; }

        //                                if (contrato.CobrarTaxaAssociativa)
        //                                {
        //                                    estipulanteTaxa = EstipulanteTaxa.CarregarVigente(contrato.EstipulanteID, pm);
        //                                    if (estipulanteTaxa != null)
        //                                    { retTvv.ValorSindicalizacao = estipulanteTaxa.Valor; }
        //                                }

        //                                lista.Add(retTvv);
        //                                //taxa = null;
        //                            }
        //                            else
        //                                cob.Valor += retTvv.ValorBancario;
        //                        }
        //                    }
        //                    else
        //                        cob.Valor += retTvv.ValorBancario;

        //                    #endregion

        //                    #region data de admissao do contrato

        //                    //Contrato _contrato = Contrato.CarregarParcial(cob.PropostaID, pm);
        //                    if (contrato != null) { contratoAdmissao = contrato.Admissao; }
        //                    else { continue; }
        //                    #endregion

        //                    #endregion

        //                    doc.Append(Environment.NewLine);

        //                    EntityBase.AppendPreparedField(ref doc, "033", 3);          //codigo do banco na compensacao
        //                    EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Numero do lote remessa
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //tipo de registro
        //                    EntityBase.AppendPreparedField(ref doc, numSequencial.ToString().PadLeft(5, '0'), 5); //Nº seqüencial do registro de lote
        //                    EntityBase.AppendPreparedField(ref doc, "P", 1);            //Código de Segmento do Reg. Detalhe
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "01", 2);           //Código de movimento remessa (pag3) - nota 14 (pag.14)
        //                    EntityBase.AppendPreparedField(ref doc, agencia, 4);        //Agência do Destinatária FIDC
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);            //Dígito da Agência do Destinatária FIDC ????
        //                    EntityBase.AppendPreparedField(ref doc, numcontacorr.PadLeft(9, '0'), 9); //Número da conta corrente
        //                    EntityBase.AppendPreparedField(ref doc, dvcontacorr, 1);            //Dígito da conta corrente (definido pela homologação)
        //                    EntityBase.AppendPreparedField(ref doc, numcontacorr.PadLeft(9, '0'), 9); //Conta cobrança Destinatária FIDC ????
        //                    EntityBase.AppendPreparedField(ref doc, dvcontacorr, 1); //Dígito da conta cobrança Destinatária FIDC ????
        //                    EntityBase.AppendPreparedField(ref doc, "  ", 2);           //branco
        //                    cob.NossoNumero = cob.GeraNossoNumeroSantander();
        //                    EntityBase.AppendPreparedField(ref doc, cob.NossoNumero, 13); //Identificação do título no Banco
        //                    EntityBase.AppendPreparedField(ref doc, "5", 1);            //Tipo de cobrança 
        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);            //Forma de Cadastramento - 1 para cobranca registrada
        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);            //Tipo de documento - 1- Tradicional , 2- Escritural
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, Convert.ToString(cob.ID).PadLeft(15, '0'), 15); //Seu número
        //                    EntityBase.AppendPreparedField(ref doc, cob.DataVencimento.ToString("ddMMyyyy"), 8);  // Data de vencimento - pos 78

        //                    //valor do boleto
        //                    EntityBase.AppendPreparedField(ref doc, cob.Valor.ToString("N2", cinfo).Split(',')[0].Replace(".", "").PadLeft(13, '0'), 13);
        //                    EntityBase.AppendPreparedField(ref doc, cob.Valor.ToString("N2", cinfo).Split(',')[1].PadLeft(2, '0'), 2);

        //                    EntityBase.AppendPreparedField(ref doc, "0000", 4);         //Agência encarregada da cobrança
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);            //Dígito da Agência do Beneficiário
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "02", 2);           //Espécie do título Nota 20 pag.15 ???
        //                    EntityBase.AppendPreparedField(ref doc, "N", 1);            //Identif. de título Aceito/Não Aceito
        //                    EntityBase.AppendPreparedField(ref doc, cob.DataCriacao.ToString("ddMMyyyy"), 8); //Data da emissão do título
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //Código do juros de mora - nota 21 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "00000000", 8); //Data do juros de mora - nota 22
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadRight(15, '0'), 15); //Valor da mora/dia ou Taxa mensal - nota 18 pag.15
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);            //Código do desconto 1 - nota 23 pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "00000000", 8);     //Data de desconto 1 - nota 23 pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Valor ou Percentual do desconto concedido
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Valor do IOF a ser recolhido
        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Valor do abatimento

        //                    EntityBase.AppendPreparedField(ref doc, Convert.ToString(cob.ID).PadLeft(25, '0'), 25); //Identificação do título na empresa
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);            //Código para protesto - nota 25 pag.16 - 0=nao protestar
        //                    EntityBase.AppendPreparedField(ref doc, "00", 2);           //Número de dias para protesto
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //Código para Baixa/Devolução - nota 26 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "00", 2);           //Número de dias para Baixa/Devolução
        //                    EntityBase.AppendPreparedField(ref doc, "00", 2);           //Código da moeda - nota 27 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, " ".PadRight(11, ' '), 11); //branco

        //                    //
        //                    #endregion

        //                    #region DETAIL Q ---------------------------------

        //                    doc.Append(Environment.NewLine);

        //                    numSequencial++;

        //                    EntityBase.AppendPreparedField(ref doc, "033", 3);          //codigo do banco na compensacao
        //                    EntityBase.AppendPreparedField(ref doc, "0001", 4);         //Numero do lote remessa
        //                    EntityBase.AppendPreparedField(ref doc, "3", 1);            //tipo de registro
        //                    EntityBase.AppendPreparedField(ref doc, numSequencial.ToString().PadLeft(5, '0'), 5); //Nº seqüencial do registro no lote - nota 11 - pg.14
        //                    EntityBase.AppendPreparedField(ref doc, "Q", 1);            //Código de Segmento do Reg. Detalhe
        //                    EntityBase.AppendPreparedField(ref doc, " ", 1);            //branco
        //                    EntityBase.AppendPreparedField(ref doc, "01", 2);           //Código de movimento remessa - nota 14 - pag 14

        //                    EntityBase.AppendPreparedField(ref doc, "1", 1);           //Tipo de inscrição do Pagador - nota 29 - pag.17 - 1 = cpf
        //                    EntityBase.AppendPreparedField(ref doc, cob.ContratoTitularCPF.PadLeft(15, '0'), 15); //Número de inscrição do Pagador - pag. 4

        //                    EntityBase.AppendPreparedField(ref doc, cob.ContratoTitularNome, 40); //Nome Pagador

        //                    endereco = new Endereco(cob.ContratoEnderecoCobrancaID);
        //                    endereco.Carregar(pm);
        //                    if (endereco.CEP.IndexOf('-') > -1) { endereco.CEP = endereco.CEP.Replace("-", ""); }

        //                    if (endereco.Numero == null) endereco.Numero = "";
        //                    if (string.IsNullOrEmpty(endereco.Complemento))
        //                    {
        //                        int tamanhoDisponivel = 40 - (endereco.Numero.Length + 1);

        //                        if (endereco.Logradouro.Length > tamanhoDisponivel)
        //                        {
        //                            endereco.Logradouro = endereco.Logradouro.Substring(0, tamanhoDisponivel);
        //                        }

        //                        if (!string.IsNullOrEmpty(endereco.Numero))
        //                            endereco.Logradouro += string.Concat(",", endereco.Numero);
        //                    }
        //                    else
        //                    {
        //                        int tamanhoDisponivel = 40 - ((endereco.Numero.Length + 1) + (endereco.Complemento.Length + 1));

        //                        if (endereco.Logradouro.Length > tamanhoDisponivel)
        //                        {
        //                            endereco.Logradouro = endereco.Logradouro.Substring(0, tamanhoDisponivel);
        //                        }

        //                        if (!string.IsNullOrEmpty(endereco.Numero))
        //                            endereco.Logradouro += string.Concat(",", endereco.Numero, ",", endereco.Complemento);
        //                        else
        //                            endereco.Logradouro += string.Concat(",", endereco.Complemento);
        //                    }

        //                    if (string.IsNullOrEmpty(endereco.CEP)) { endereco.CEP = "00000000"; } else { endereco.CEP = endereco.CEP.Replace("-", ""); }
        //                    EntityBase.AppendPreparedField(ref doc, endereco.Logradouro, 40); // 
        //                    EntityBase.AppendPreparedField(ref doc, endereco.Bairro, 15);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.CEP, 8);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.Cidade, 15);
        //                    EntityBase.AppendPreparedField(ref doc, endereco.UF, 2);

        //                    //if(string.IsNullOrEmpty(cob.ContratoTitularCPF) || cob.ContratoTitularCPF == "00000000000")
        //                    EntityBase.AppendPreparedField(ref doc, "0", 1); //Tipo de inscrição Sacador/avalista - nota 29 - pag.17
        //                    //else
        //                    //    EntityBase.AppendPreparedField(ref doc, "1", 1); //Tipo de inscrição Sacador/avalista - nota 29 - pag.17

        //                    EntityBase.AppendPreparedField(ref doc, "0".PadLeft(15, '0'), 15); //Nº de inscrição Sacador/avalista

        //                    EntityBase.AppendPreparedField(ref doc, " ".PadLeft(40, ' '), 40); //Nome do Sacador/Avalista

        //                    EntityBase.AppendPreparedField(ref doc, "000", 3); //Identificador de carne - nota 28 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "000", 3); //Sequencial da Parcela ou número inicial da parcela - nota 28 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "000", 3); //Quantidade total de parcelas - nota 28 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, "000", 3); //Número do plano - nota 28 - pag.16
        //                    EntityBase.AppendPreparedField(ref doc, " ".PadRight(19, ' '), 19); //Brancos

        //                    #endregion

        //                    totalRegistrosDetalhe++;
        //                    valorTotal += cob.Valor;
        //                }
        //                catch (Exception ex)
        //                {
        //                    try
        //                    {
        //                        string path = System.Configuration.ConfigurationManager.AppSettings["financialFilePath"].Replace("/", @"\");
        //                        System.IO.File.WriteAllText(path + "err_" + DateTime.Now.ToString("ddMMyyyyHHmmssfff") + ".txt",
        //                            ex.Message +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + ex.StackTrace +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + Convert.ToString(cob.ID) +
        //                            Environment.NewLine + "-----------------------------------------" +
        //                            Environment.NewLine + i.ToString(),
        //                            System.Text.Encoding.ASCII);
        //                    }
        //                    catch { }
        //                    continue;
        //                }
        //            }
        //            #endregion

        //            #region TRAILLER DE LOTE ---------------------------------

        //            doc.Append(Environment.NewLine);

        //            EntityBase.AppendPreparedField(ref doc, "033", 3);
        //            EntityBase.AppendPreparedField(ref doc, "0001", 4);
        //            EntityBase.AppendPreparedField(ref doc, "5", 1);
        //            EntityBase.AppendPreparedField(ref doc, " ", 9);
        //            EntityBase.AppendPreparedField(ref doc, (numSequencial + 2).ToString().PadLeft(6, '0'), 6);
        //            EntityBase.AppendPreparedField(ref doc, " ", 217);

        //            #endregion

        //            #region TRAILLER -----------------------------------------

        //            doc.Append(Environment.NewLine);

        //            EntityBase.AppendPreparedField(ref doc, "033", 3);
        //            EntityBase.AppendPreparedField(ref doc, "9999", 4); //9999 - Numero do lote remessa
        //            EntityBase.AppendPreparedField(ref doc, "9", 1);
        //            EntityBase.AppendPreparedField(ref doc, " ", 9); //branco
        //            EntityBase.AppendPreparedField(ref doc, "1".PadLeft(6, '0'), 6); //qtd de lotes - registros tipo 1
        //            EntityBase.AppendPreparedField(ref doc, (numSequencial + 4).ToString().PadLeft(6, '0'), 6);
        //            EntityBase.AppendPreparedField(ref doc, " ", 211); //

        //            #endregion

        //            return doc.ToString();
        //        }
        //        catch
        //        {
        //            if (_pm == null) { pm.Rollback(); }
        //            throw;
        //        }
        //        finally
        //        {
        //            if (_pm == null) { pm = null; }
        //        }
        //    }
        //}

        //#region demais classes

        //class TabelaValorVencimentoVO
        //{
        //    Object _propostaId;
        //    Object _tabelaId;
        //    DateTime _vencimento;
        //    Decimal _valorBancario;
        //    Decimal _valorSindicalizacao;

        //    public Object PropostaID
        //    {
        //        get { return _propostaId; }
        //        set { _propostaId = value; }
        //    }

        //    public Object TabelaID
        //    {
        //        get { return _tabelaId; }
        //        set { _tabelaId = value; }
        //    }

        //    public DateTime Vencimento
        //    {
        //        get { return _vencimento; }
        //        set { _vencimento = value; }
        //    }

        //    public Decimal ValorBancario
        //    {
        //        get { return _valorBancario; }
        //        set { _valorBancario = value; }
        //    }

        //    public Decimal ValorSindicalizacao
        //    {
        //        get { return _valorSindicalizacao; }
        //        set { _valorSindicalizacao = value; }
        //    }

        //    public static TabelaValorVencimentoVO ExisteProposta(Object propostaId, IList<TabelaValorVencimentoVO> lista)
        //    {
        //        foreach (TabelaValorVencimentoVO tvv in lista)
        //        {
        //            if (Convert.ToString(tvv.PropostaID).Equals(Convert.ToString(propostaId))) { return tvv; }
        //        }

        //        return null;
        //    }

        //    public static TabelaValorVencimentoVO ExisteTabela(Object tabelaId, IList<TabelaValorVencimentoVO> lista)
        //    {
        //        foreach (TabelaValorVencimentoVO tvv in lista)
        //        {
        //            if (Convert.ToString(tvv.TabelaID).Equals(Convert.ToString(tabelaId))) { return tvv; }
        //        }

        //        return null;
        //    }
        //}

        ///// <summary>
        ///// Value object.
        ///// </summary>
        //[Serializable]
        //public class SumarioArquivoGeradoVO
        //{
        //    Object _arquivoId;
        //    String _arquivoNome;
        //    String _arquivoConteudo;
        //    String _arquivoVersao;
        //    Object _operadoraId;
        //    String _operadoraNome;
        //    Int32 _qtdCobrancas;

        //    public Object ArquivoID
        //    {
        //        get { return _arquivoId; }
        //        set { _arquivoId = value; }
        //    }
        //    public String ArquivoNome
        //    {
        //        get { return _arquivoNome; }
        //        set { _arquivoNome = value; }
        //    }
        //    public String ArquivoConteudo
        //    {
        //        get { return _arquivoConteudo; }
        //        set { _arquivoConteudo = value; }
        //    }
        //    public String ArquivoVersao
        //    {
        //        get { return _arquivoVersao; }
        //        set { _arquivoVersao = value; }
        //    }
        //    public Object OperadoraID
        //    {
        //        get { return _operadoraId; }
        //        set { _operadoraId = value; }
        //    }
        //    public String OperadoraNome
        //    {
        //        get { return _operadoraNome; }
        //        set { _operadoraNome = value; }
        //    }
        //    public Int32 QtdCobrancas
        //    {
        //        get { return _qtdCobrancas; }
        //        set { _qtdCobrancas = value; }
        //    }
        //}

        ///// <summary>
        ///// Value object.
        ///// </summary>
        //[Serializable]
        //public class CriticaRetornoVO : ICloneable
        //{
        //    //public enum Marcador : int
        //    //{
        //    //    Normal,
        //    //    PropostaInativa,
        //    //    ValorMenor,
        //    //    PagamentoRejeitado,
        //    //    PagamentoEmDuplicidade
        //    //}

        //    public Boolean PropostaInativa
        //    {
        //        get { return _propostaInativa; }
        //        set { _propostaInativa = value; }
        //    }
        //    public Boolean ValorMenor
        //    {
        //        get { return _valorMenor; }
        //        set { _valorMenor = value; }
        //    }
        //    public Boolean PagamentoRejeitado
        //    {
        //        get { return _pagamentoRejeicao; }
        //        set { _pagamentoRejeicao = value; }
        //    }
        //    public Boolean EmDuplicidade
        //    {
        //        get { return _emDuplicidade; }
        //        set { _emDuplicidade = value; }
        //    }
        //    public Boolean NaoLocalizado
        //    {
        //        get { return _naoLocalizado; }
        //        set { _naoLocalizado = value; }
        //    }

        //    Boolean _propostaInativa;
        //    Boolean _valorMenor;
        //    Boolean _pagamentoRejeicao;
        //    Boolean _emDuplicidade;
        //    Boolean _naoLocalizado;

        //    String _cobrancaId;
        //    String _codigoRejeicao;
        //    String _status;
        //    String _parcela;
        //    String _propostaId;
        //    String _propostaNumero;
        //    String _cobrancaTipo;
        //    decimal _taxaBoleto;
        //    Decimal _valor;
        //    Decimal _valorPgto;
        //    DateTime _dataVencto;
        //    DateTime _dataPgto;
        //    String _operadoraNome;
        //    String _nossoNumero;

        //    String _titularNome;
        //    String _titularCpf;

        //    DateTime _dataInativacaoCancelamento;

        //    public String CobrancaID
        //    {
        //        get { return _cobrancaId; }
        //        set { _cobrancaId = value; }
        //    }
        //    public String CodigoRejeicao
        //    {
        //        get { return _codigoRejeicao; }
        //        set { _codigoRejeicao = value; }
        //    }
        //    public String Status
        //    {
        //        get { return _status; }
        //        set { _status = value; }
        //    }
        //    public String Parcela
        //    {
        //        get { return _parcela; }
        //        set { _parcela = value; }
        //    }
        //    public String PropostaCodCobranca
        //    {
        //        get { return _propostaId; }
        //        set { _propostaId = value; }
        //    }
        //    public String PropostaNumero
        //    {
        //        get { return _propostaNumero; }
        //        set { _propostaNumero = value; }
        //    }
        //    public String CobrancaTipo
        //    {
        //        get { return _cobrancaTipo; }
        //        set { _cobrancaTipo = value; }
        //    }
        //    public Decimal TaxaBoleto
        //    {
        //        get { return _taxaBoleto; }
        //        set { _taxaBoleto = value; }
        //    }
        //    public Decimal Valor
        //    {
        //        get { return _valor; }
        //        set { _valor = value; }
        //    }
        //    public Decimal ValorPgto
        //    {
        //        get { return _valorPgto; }
        //        set { _valorPgto = value; }
        //    }
        //    public DateTime DataVencto
        //    {
        //        get { return _dataVencto; }
        //        set { _dataVencto = value; }
        //    }
        //    public DateTime DataPgto
        //    {
        //        get { return _dataPgto; }
        //        set { _dataPgto = value; }
        //    }
        //    public String OperadoraNome
        //    {
        //        get { return _operadoraNome; }
        //        set { _operadoraNome = value; }
        //    }
        //    public String NossoNumero
        //    {
        //        get { return _nossoNumero; }
        //        set { _nossoNumero = value; }
        //    }

        //    public String TitularNome
        //    {
        //        get { return _titularNome; }
        //        set { _titularNome = value; }
        //    }

        //    public String TitularCPF
        //    {
        //        get { return _titularCpf; }
        //        set { _titularCpf = value; }
        //    }

        //    public DateTime DataInativacaoCancelamento
        //    {
        //        get { return _dataInativacaoCancelamento; }
        //        set { _dataInativacaoCancelamento = value; }
        //    }

        //    #region ICloneable Members

        //    public Object Clone()
        //    {
        //        CriticaRetornoVO clone = new CriticaRetornoVO();

        //        clone._cobrancaId = this._cobrancaId;
        //        clone._cobrancaTipo = this._cobrancaTipo;
        //        clone._codigoRejeicao = this._codigoRejeicao;
        //        clone._dataPgto = this._dataPgto;
        //        clone._dataVencto = this._dataVencto;
        //        clone._emDuplicidade = this._emDuplicidade;
        //        clone._nossoNumero = this._nossoNumero;
        //        clone._operadoraNome = this._operadoraNome;
        //        clone._pagamentoRejeicao = this._pagamentoRejeicao;
        //        clone._parcela = this._parcela;
        //        clone._propostaId = this._propostaId;
        //        clone._propostaInativa = this._propostaInativa;
        //        clone._propostaNumero = this._propostaNumero;
        //        clone._status = this._status;
        //        clone._valor = this._valor;
        //        clone._valorMenor = this._valorMenor;
        //        clone._valorPgto = this._valorPgto;
        //        clone._titularCpf = this._titularCpf;
        //        clone._titularNome = this._titularNome;
        //        clone._dataInativacaoCancelamento = this._dataInativacaoCancelamento;

        //        return clone;
        //    }

        //    #endregion
        //}

        //[DBTable("retornoinput")]
        //public class RetornoInput : EntityBase, IPersisteableEntity
        //{
        //    Object _id;
        //    String _arquivoNome;
        //    String _texto;
        //    DateTime _data;
        //    Int32 _tipoBanco;
        //    Boolean _processado;

        //    [DBFieldInfo("retornoinput_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("retornoinput_arquivo", FieldType.Single)]
        //    public String ArquivoNome
        //    {
        //        get { return _arquivoNome; }
        //        set { _arquivoNome = value; }
        //    }

        //    [DBFieldInfo("retornoinput_texto", FieldType.Single)]
        //    public String Texto
        //    {
        //        get { return _texto; }
        //        set { _texto = value; }
        //    }

        //    [DBFieldInfo("retornoinput_tipoBanco", FieldType.Single)]
        //    public Int32 TipoBanco
        //    {
        //        get { return _tipoBanco; }
        //        set { _tipoBanco = value; }
        //    }

        //    [DBFieldInfo("retornoinput_data", FieldType.Single)]
        //    public DateTime Data
        //    {
        //        get { return _data; }
        //        set { _data = value; }
        //    }

        //    [DBFieldInfo("retornoinput_processado", FieldType.Single)]
        //    public Boolean Processado
        //    {
        //        get { return _processado; }
        //        set { _processado = value; }
        //    }

        //    public RetornoInput()
        //    {
        //        _tipoBanco = (Int32)Cobranca.eTipoBanco.Itau;
        //    }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }

        //    #endregion

        //    public static RetornoInput CarregarPendente()
        //    {
        //        String qry = "SELECT TOP 1 * FROM retornoinput WHERE retornoinput_processado=0 order by retornoinput_id";

        //        IList<RetornoInput> ret = LocatorHelper.Instance.ExecuteQuery<RetornoInput>(qry, typeof(RetornoInput));

        //        if (ret == null)
        //            return null;
        //        else
        //            return ret[0];
        //    }
        //}

        //[DBTable("retornoOutput")]
        //public class RetornoOutput : EntityBase, IPersisteableEntity
        //{
        //    Object _id;
        //    Object _inputId;
        //    String _descricao;
        //    String _serializedValueObject;
        //    String _serializedBusinessObject;
        //    DateTime _data;

        //    [DBFieldInfo("retornooutput_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("retornooutput_inputId", FieldType.Single)]
        //    public Object InputID
        //    {
        //        get { return _inputId; }
        //        set { _inputId = value; }
        //    }

        //    [DBFieldInfo("retornooutpu_descricao", FieldType.Single)]
        //    public String Descricao
        //    {
        //        get { return _descricao; }
        //        set { _descricao = value; }
        //    }

        //    [DBFieldInfo("retornooutpu_serializedVo", FieldType.Single)]
        //    public String SerializedValueObject
        //    {
        //        get { return _serializedValueObject; }
        //        set { _serializedValueObject = value; }
        //    }

        //    [DBFieldInfo("retornooutpu_serializedBo", FieldType.Single)]
        //    public String SerializedBusinessObject
        //    {
        //        get { return _serializedBusinessObject; }
        //        set { _serializedBusinessObject = value; }
        //    }

        //    [DBFieldInfo("retornooutput_data", FieldType.Single)]
        //    public DateTime Data
        //    {
        //        get { return _data; }
        //        set { _data = value; }
        //    }

        //    public static List<CriticaRetornoVO> Desserializar(String data)
        //    {
        //        String[] arr = data.Split('|');

        //        List<CriticaRetornoVO> vos = new List<CriticaRetornoVO>();

        //        String[] current = null;
        //        foreach (String strvo in arr)
        //        {
        //            if (strvo.Length == 0) { continue; }
        //            current = strvo.Split(';');

        //            CriticaRetornoVO vo = new CriticaRetornoVO();

        //            vo.CobrancaID = current[0];
        //            vo.CobrancaTipo = current[1];
        //            vo.CodigoRejeicao = current[2];
        //            vo.DataPgto = Convert.ToDateTime(current[3]);
        //            vo.DataVencto = Convert.ToDateTime(current[4]);
        //            vo.EmDuplicidade = Convert.ToBoolean(current[5]);
        //            vo.NossoNumero = current[6];
        //            vo.OperadoraNome = current[7];
        //            vo.PagamentoRejeitado = Convert.ToBoolean(current[8]);
        //            vo.Parcela = current[9];
        //            vo.PropostaCodCobranca = current[10];
        //            vo.PropostaInativa = Convert.ToBoolean(current[11]);
        //            vo.PropostaNumero = current[12];
        //            vo.Status = current[13];
        //            vo.Valor = Convert.ToDecimal(current[14]);
        //            vo.ValorMenor = Convert.ToBoolean(current[15]);
        //            vo.ValorPgto = Convert.ToDecimal(current[16]);

        //            if (current.Length > 17)
        //            {
        //                vo.TitularCPF = current[18];
        //                vo.TitularNome = current[17];
        //            }

        //            if (current.Length > 19 && current[19].Trim() != "")
        //                vo.DataInativacaoCancelamento = Convert.ToDateTime(current[19]);

        //            vos.Add(vo);
        //        }

        //        return vos;
        //    }

        //    public static String Serializar(List<CriticaRetornoVO> vos)
        //    {
        //        StringBuilder sb = new StringBuilder();

        //        foreach (CriticaRetornoVO vo in vos)
        //        {
        //            if (sb.Length > 0) { sb.Append("|"); }

        //            sb.Append(vo.CobrancaID);
        //            sb.Append(";");
        //            sb.Append(vo.CobrancaTipo);
        //            sb.Append(";");
        //            sb.Append(vo.CodigoRejeicao);
        //            sb.Append(";");
        //            sb.Append(vo.DataPgto.ToString("dd/MM/yyyy HH:mm"));
        //            sb.Append(";");
        //            sb.Append(vo.DataVencto.ToString("dd/MM/yyyy HH:mm"));
        //            sb.Append(";");
        //            sb.Append(vo.EmDuplicidade);
        //            sb.Append(";");
        //            sb.Append(vo.NossoNumero);
        //            sb.Append(";");
        //            sb.Append(vo.OperadoraNome);
        //            sb.Append(";");
        //            sb.Append(vo.PagamentoRejeitado);
        //            sb.Append(";");
        //            sb.Append(vo.Parcela);
        //            sb.Append(";");
        //            sb.Append(vo.PropostaCodCobranca);
        //            sb.Append(";");
        //            sb.Append(vo.PropostaInativa);
        //            sb.Append(";");
        //            sb.Append(vo.PropostaNumero);
        //            sb.Append(";");
        //            sb.Append(vo.Status);
        //            sb.Append(";");
        //            sb.Append(vo.Valor.ToString("N2"));
        //            sb.Append(";");
        //            sb.Append(vo.ValorMenor);
        //            sb.Append(";");
        //            sb.Append(vo.ValorPgto.ToString("N2"));
        //            sb.Append(";");
        //            sb.Append(vo.TitularNome);
        //            sb.Append(";");
        //            sb.Append(vo.TitularCPF);
        //            sb.Append(";");
        //            if (vo.DataInativacaoCancelamento != DateTime.MinValue)
        //                sb.Append(vo.DataInativacaoCancelamento.ToString("dd/MM/yyyy"));
        //        }

        //        return sb.ToString();
        //    }

        //    public System.Collections.ArrayList ValueObjects
        //    {
        //        get
        //        {
        //            if (_serializedValueObject == null) { return null; }
        //            return (System.Collections.ArrayList)LC.Framework.DataUtil.SerializationHelper.Desserializar(_serializedValueObject);
        //        }
        //    }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Salvar(IList<CriticaRetornoVO> vos)
        //    {
        //        this.Salvar();

        //        PersistenceManager pm = new PersistenceManager();
        //        pm.UseSingleCommandInstance();

        //        try
        //        {
        //            foreach (CriticaRetornoVO vo in vos)
        //            {
        //                if (vo.Status != "Título baixado") { continue; }
        //                NonQueryHelper.Instance.ExecuteNonQuery(String.Concat("insert into cobranca_titulosBaixados values (", vo.CobrancaID, ")"), pm);
        //            }
        //        }
        //        catch { }

        //        pm.CloseSingleCommandInstance();
        //        pm.Dispose();
        //    }

        //    public void SalvarDescricao()
        //    {
        //        NonQueryHelper.Instance.ExecuteNonQuery("UPDATE retornoOutput SET retornooutput_descricao='" + this._descricao.ToUpper() + "' WHERE retornooutput_id=" + this._id, null);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }

        //    #endregion

        //    public static IList<RetornoOutput> CarregarTodos()
        //    {
        //        String qry = "TOP 75 retornooutput_id, retornooutpu_descricao, retornooutput_data FROM retornoOutput ORDER BY retornooutput_id DESC";

        //        return LocatorHelper.Instance.ExecuteQuery<RetornoOutput>(qry, typeof(RetornoOutput));
        //    }

        //    public static IList<RetornoOutput> CarregarTodos(DateTime de, DateTime ate)
        //    {
        //        String qry = String.Concat("retornooutput_id, retornooutpu_descricao, retornooutput_data ",
        //            "   FROM retornoOutput ",
        //            "   WHERE retornooutput_data BETWEEN '", de.ToString("yyyy-MM-dd"), "' AND '", ate.ToString("yyyy-MM-dd 23:59:59.990"), "' ",
        //            "   ORDER BY retornooutput_id DESC");

        //        return LocatorHelper.Instance.ExecuteQuery<RetornoOutput>(qry, typeof(RetornoOutput));
        //    }

        //    public static RetornoOutput CarregarPorInputID(Object inputId)
        //    {
        //        String qry = String.Concat("retornooutput_id, retornooutpu_descricao, retornooutput_data ",
        //            "   FROM retornoOutput ",
        //            "   WHERE retornooutput_inputId=", inputId);

        //        IList<RetornoOutput> ret = LocatorHelper.Instance.ExecuteQuery<RetornoOutput>(qry, typeof(RetornoOutput));

        //        if (ret == null)
        //            return null;
        //        else
        //            return ret[0];
        //    }
        //}

        //[DBTable("arquivoRemessaCriterio")]
        //public class ArquivoRemessaCriterio : EntityBase, IPersisteableEntity
        //{
        //    public enum eTipoTaxa : int
        //    {
        //        Indiferente,
        //        ComTaxa,
        //        SemTaxa
        //    }

        //    public class UI
        //    {
        //        private UI() { }

        //        //public static void PreencheComboComTiposFiltroTaxa(System.Web.UI.WebControls.DropDownList combo)
        //        //{
        //        //    combo.Items.Clear();
        //        //    combo.Items.Add(new System.Web.UI.WebControls.ListItem("Todos", "0"));
        //        //    combo.Items.Add(new System.Web.UI.WebControls.ListItem("Apenas COM taxa associativa", "1"));
        //        //    combo.Items.Add(new System.Web.UI.WebControls.ListItem("Apenas SEM taxa associativa", "2"));
        //        //}
        //    }

        //    #region fields

        //    Object _id;
        //    Object _operadoraId;
        //    String _projeto;
        //    String _arquivo;
        //    String _descricao;
        //    String _foneAtendimento;
        //    String _operadora;
        //    String _ans;
        //    String _contratoAdmIDs;
        //    Int32 _tipoTaxa;

        //    String _operadoraNome;

        //    #endregion

        //    #region properties

        //    [DBFieldInfo("arcrit_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("arcrit_operadoraId", FieldType.Single)]
        //    public Object OperadoraID
        //    {
        //        get { return _operadoraId; }
        //        set { _operadoraId = value; }
        //    }

        //    [DBFieldInfo("arcrit_projeto", FieldType.Single)]
        //    public String Projeto
        //    {
        //        get { return _projeto; }
        //        set { _projeto = value; }
        //    }

        //    [DBFieldInfo("arcrit_arquivoNome", FieldType.Single)]
        //    public String ArquivoNome
        //    {
        //        get { return _arquivo; }
        //        set { _arquivo = value; }
        //    }

        //    [DBFieldInfo("arcrit_descricao", FieldType.Single)]
        //    public String Descricao
        //    {
        //        get { return _descricao; }
        //        set { _descricao = value; }
        //    }

        //    [DBFieldInfo("arcrit_foneAtendimento", FieldType.Single)]
        //    public String FoneAtendimento
        //    {
        //        get { return _foneAtendimento; }
        //        set { _foneAtendimento = value; }
        //    }

        //    [DBFieldInfo("arcrit_operadora", FieldType.Single)]
        //    public String Operadora
        //    {
        //        get { return _operadora; }
        //        set { _operadora = value; }
        //    }

        //    [DBFieldInfo("arcrit_ans", FieldType.Single)]
        //    public String Ans
        //    {
        //        get { return _ans; }
        //        set { _ans = value; }
        //    }

        //    /// <summary>
        //    /// Uma string com os ids de contratos administrativos separados por vírgula
        //    /// </summary>
        //    [DBFieldInfo("arcrit_contratoAdmIds", FieldType.Single)]
        //    public String ContratoAdmIDs
        //    {
        //        get { return _contratoAdmIDs; }
        //        set { _contratoAdmIDs = value; }
        //    }

        //    [DBFieldInfo("arcrit_tipoTaxa", FieldType.Single)]
        //    public Int32 TipoTaxa
        //    {
        //        get { return _tipoTaxa; }
        //        set { _tipoTaxa = value; }
        //    }

        //    [Joinned("operadora_nome")]
        //    public String OperadoraNome
        //    {
        //        get { return _operadoraNome; }
        //        set { _operadoraNome = value; }
        //    }

        //    #endregion

        //    public ArquivoRemessaCriterio() { }
        //    public ArquivoRemessaCriterio(Object id) { _id = id; }

        //    #region EntityBase methods

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }

        //    #endregion

        //    public static IList<ArquivoRemessaCriterio> CarregarTodos()
        //    {
        //        String qry = "arquivoRemessaCriterio.*, operadora_nome FROM arquivoRemessaCriterio INNER JOIN operadora ON arcrit_operadoraId=operadora_id ORDER BY operadora_nome ";

        //        return LocatorHelper.Instance.ExecuteQuery<ArquivoRemessaCriterio>(qry, typeof(ArquivoRemessaCriterio));
        //    }

        //    public static String[] CarregarContratoAdmIds(Object criterioId, PersistenceManager pm)
        //    {
        //        String ret = Convert.ToString(LocatorHelper.Instance.ExecuteScalar("SELECT arcrit_contratoAdmIds FROM arquivoRemessaCriterio WHERE arcrit_id=" + criterioId, null, null, pm));

        //        return ret.Split(',');
        //    }
        //}

        //[DBTable("arquivoRemessaAgendamento")]
        //public class ArquivoRemessaAgendamento : EntityBase, IPersisteableEntity
        //{
        //    #region fields

        //    Object _id;
        //    Object _criterioId;
        //    DateTime _vencimentoDe;
        //    DateTime _vencimentoAte;
        //    DateTime _vigenciaDe;
        //    DateTime _vigenciaAte;
        //    DateTime _processamentoEm;
        //    Int32 _qtdBoletos;
        //    Boolean _processado;
        //    DateTime _dataProcessado;
        //    String _grupo;
        //    Int32 _carteira;
        //    String _arquivoNomeInstancia;
        //    bool _legado;

        //    String _arquivoNome;
        //    String _criterioDescricao;
        //    Int32 _arquivoCobrancaId;

        //    #endregion

        //    #region properties

        //    [DBFieldInfo("arcage_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("arcage_criterioId", FieldType.Single)]
        //    public Object CriterioID
        //    {
        //        get { return _criterioId; }
        //        set { _criterioId = value; }
        //    }

        //    [DBFieldInfo("arcage_vencimentoDe", FieldType.Single)]
        //    public DateTime VencimentoDe
        //    {
        //        get { return _vencimentoDe; }
        //        set { _vencimentoDe = value; }
        //    }

        //    [DBFieldInfo("arcage_vencimentoAte", FieldType.Single)]
        //    public DateTime VencimentoAte
        //    {
        //        get { return _vencimentoAte; }
        //        set { _vencimentoAte = value; }
        //    }

        //    [DBFieldInfo("arcage_vigenciaDe", FieldType.Single)]
        //    public DateTime VigenciaDe
        //    {
        //        get { return _vigenciaDe; }
        //        set { _vigenciaDe = value; }
        //    }

        //    [DBFieldInfo("arcage_vigenciaAte", FieldType.Single)]
        //    public DateTime VigenciaAte
        //    {
        //        get { return _vigenciaAte; }
        //        set { _vigenciaAte = value; }
        //    }

        //    [DBFieldInfo("arcage_qtdBoletos", FieldType.Single)]
        //    public Int32 QtdBoletos
        //    {
        //        get { return _qtdBoletos; }
        //        set { _qtdBoletos = value; }
        //    }

        //    [DBFieldInfo("arcage_legado", FieldType.Single)]
        //    public bool Legado
        //    {
        //        get { return _legado; }
        //        set { _legado = value; }
        //    }

        //    /// <summary>
        //    /// Se legado, retorna SP. Do contrário retorna RJ.
        //    /// </summary>
        //    public string Origem
        //    {
        //        get
        //        {
        //            if (this._legado) return "SP";
        //            else return "RJ";
        //        }
        //    }

        //    [DBFieldInfo("arcage_grupo", FieldType.Single)]
        //    public String Grupo
        //    {
        //        get { return _grupo; }
        //        set { _grupo = value; }
        //    }

        //    /// <summary>
        //    /// Data para a qual foi agendado o processamento.
        //    /// </summary>
        //    [DBFieldInfo("arcage_processamentoEm", FieldType.Single)]
        //    public DateTime ProcessamentoEm
        //    {
        //        get { return _processamentoEm; }
        //        set { _processamentoEm = value; }
        //    }

        //    [DBFieldInfo("arcage_processado", FieldType.Single)]
        //    public Boolean Processado
        //    {
        //        get { return _processado; }
        //        set { _processado = value; }
        //    }

        //    /// <summary>
        //    /// Data em que efetivamente ocorreu o processamento.
        //    /// </summary>
        //    [DBFieldInfo("arcage_dataProcessado", FieldType.Single)]
        //    public DateTime DataProcessado
        //    {
        //        get { return _dataProcessado; }
        //        set { _dataProcessado = value; }
        //    }

        //    [DBFieldInfo("arcage_carteira", FieldType.Single)]
        //    public Int32 Carteira
        //    {
        //        get { return _carteira; }
        //        set { _carteira = value; }
        //    }


        //    [DBFieldInfo("arcage_banco", FieldType.Single)]
        //    public Int32 Banco
        //    {
        //        get;
        //        set;
        //    }

        //    [DBFieldInfo("arcage_arquivoNomeInstancia", FieldType.Single)]
        //    public String ArquivoNomeInstance
        //    {
        //        get { return _arquivoNomeInstancia; }
        //        set
        //        {
        //            if (value != null && value != "[nenhum arquivo gerado - 0 cobraças geradas]") { value = value.Replace(@"/", "_").Replace(@"\", "_").Replace(" ", "_"); }
        //            _arquivoNomeInstancia = value;
        //        }
        //    }

        //    /// <summary>
        //    /// Mesmo que DIFERENCA UBRASP
        //    /// </summary>
        //    [DBFieldInfo("arcage_somenteNaoRecorrentes", FieldType.Single)]
        //    public bool SomenteNaoRecorrentes
        //    {
        //        get;
        //        set;
        //    }

        //    [DBFieldInfo("arcage_somenteBoletoUbrasp", FieldType.Single)]
        //    public bool SomenteBoletosUBRASP
        //    {
        //        get;
        //        set;
        //    }

        //    [Joinned("arcrit_arquivoNome")]
        //    public String ArquivoNome
        //    {
        //        get { return _arquivoNome; }
        //        set { _arquivoNome = value; }
        //    }

        //    [Joinned("arcrit_descricao")]
        //    public String CriterioDescricao
        //    {
        //        get { return _criterioDescricao; }
        //        set { _criterioDescricao = value; }
        //    }

        //    [Joinned("arquivocobranca_id")]
        //    public Int32 ArquivoCobrancaID
        //    {
        //        get { return _arquivoCobrancaId; }
        //        set { _arquivoCobrancaId = value; }
        //    }

        //    public String STRVencimento
        //    {
        //        get
        //        {
        //            if (_vencimentoDe.ToString("dd/MM/yyyy") != _vencimentoAte.ToString("dd/MM/yyyy"))
        //                return String.Concat("de ", _vencimentoDe.ToString("dd/MM/yyyy"), " até ", _vencimentoAte.ToString("dd/MM/yyyy"));
        //            else
        //                return _vencimentoDe.ToString("dd/MM/yyyy");
        //        }
        //    }

        //    public String STRVigencia
        //    {
        //        get
        //        {
        //            if (_vigenciaDe.ToString("dd/MM/yyyy") != _vigenciaAte.ToString("dd/MM/yyyy"))
        //                return String.Concat("de ", _vigenciaDe.ToString("dd/MM/yyyy"), " até ", _vigenciaAte.ToString("dd/MM/yyyy"));
        //            else
        //                return _vigenciaDe.ToString("dd/MM/yyyy");
        //        }
        //    }

        //    #endregion

        //    public ArquivoRemessaAgendamento() { _legado = false; _processado = false; _carteira = (Int32)Cobranca.eCarteira.Unibanco; }
        //    public ArquivoRemessaAgendamento(Object id) : this() { _id = id; }

        //    #region EntityBase methods

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }

        //    #endregion

        //    public static IList<ArquivoRemessaAgendamento> CarregarTodos(Boolean somenteNaoProcessados, DateTime? dataProcessamento)
        //    {
        //        String cond = "";

        //        if (somenteNaoProcessados)
        //            cond = " WHERE arcage_processado=0 and arcage_legado=0 ";

        //        if (dataProcessamento != null)
        //        {
        //            if (cond.Length == 0)
        //                cond = " WHERE ";
        //            else
        //                cond += " AND ";

        //            cond += " GETDATE() >= arcage_processamentoEm ";
        //        }

        //        String qry = " arquivoRemessaAgendamento.*, arcrit_arquivoNome FROM arquivoRemessaAgendamento INNER JOIN arquivoRemessaCriterio ON arcage_criterioId=arcrit_id " + cond + " ORDER BY arcage_processamentoEm";

        //        return LocatorHelper.Instance.ExecuteQuery<ArquivoRemessaAgendamento>(qry, typeof(ArquivoRemessaAgendamento));
        //    }

        //    public static IList<ArquivoRemessaAgendamento> CarregarTodosLEGADO(Boolean somenteNaoProcessados, DateTime? dataProcessamento)
        //    {
        //        String cond = "";

        //        if (somenteNaoProcessados)
        //            cond = " WHERE arcage_processado=0 and arcage_legado=1 ";

        //        if (dataProcessamento != null)
        //        {
        //            if (cond.Length == 0)
        //                cond = " WHERE ";
        //            else
        //                cond += " AND ";

        //            cond += " GETDATE() >= arcage_processamentoEm ";
        //        }

        //        String qry = " arquivoRemessaAgendamento.*, arcrit_arquivoNome FROM arquivoRemessaAgendamento left JOIN arquivoRemessaCriterio ON arcage_criterioId=arcrit_id " + cond + " ORDER BY arcage_processamentoEm";

        //        return LocatorHelper.Instance.ExecuteQuery<ArquivoRemessaAgendamento>(qry, typeof(ArquivoRemessaAgendamento));
        //    }

        //    public static IList<ArquivoRemessaAgendamento> CarregarTodos(Object id)
        //    {
        //        String qry = "arquivoRemessaAgendamento.*, arcrit_arquivoNome FROM arquivoRemessaAgendamento LEFT JOIN arquivoRemessaCriterio ON arcage_criterioId=arcrit_id WHERE arcage_id =  " + id; // " arquivoRemessaAgendamento.*, arcrit_arquivoNome FROM arquivoRemessaAgendamento INNER JOIN arquivoRemessaCriterio ON arcage_criterioId=arcrit_id " + cond + " ORDER BY arcage_processamentoEm DESC";

        //        return LocatorHelper.Instance.ExecuteQuery<ArquivoRemessaAgendamento>(qry, typeof(ArquivoRemessaAgendamento));
        //    }

        //    public static IList<ArquivoRemessaAgendamento> CarregarTodos(Boolean somenteProcessados, DateTime? dataProcessamento, DateTime? venctoDe, DateTime? venctoAte, DateTime? vigenciaDe, DateTime? vigenciaAte)
        //    {
        //        String condSomenteProcessado = "";
        //        String condProcessadoEm = "";
        //        String condVencto = "";
        //        String condVigencia = "";

        //        if (somenteProcessados)
        //            condSomenteProcessado = " arcage_processado=1 ";

        //        if (dataProcessamento != null)
        //            condProcessadoEm += String.Concat(" DAY(arcage_processamentoEm)=", dataProcessamento.Value.Day, " AND MONTH(arcage_processamentoEm)=", dataProcessamento.Value.Month, "  AND YEAR(arcage_processamentoEm)=", dataProcessamento.Value.Year);

        //        if (venctoDe != null && venctoAte != null)
        //            condVencto = String.Concat(" arcage_vencimentoDe >= '", venctoDe.Value.ToString("yyyy-MM-dd 00:00:00.000"), "' AND arcage_vencimentoAte <= '", venctoAte.Value.ToString("yyyy-MM-dd 23:59:59.998"), "' ");

        //        if (vigenciaDe != null && vigenciaAte != null)
        //            condVencto = String.Concat(" arcage_vigenciaDe >= '", vigenciaDe.Value.ToString("yyyy-MM-dd 00:00:00.000"), "' AND arcage_vigenciaAte <= '", vigenciaAte.Value.ToString("yyyy-MM-dd 23:59:59.998"), "' ");

        //        String cond = "";
        //        if (condSomenteProcessado != "" || condProcessadoEm != "" || condVencto != "" || condVigencia != "")
        //        {
        //            String and = " and ";
        //            cond = " WHERE (arcage_arquivoNomeInstancia IS NOT NULL AND arcage_arquivoNomeInstancia <> '') ";

        //            if (condSomenteProcessado != "") { cond += and + condSomenteProcessado; and = " and "; }
        //            if (condProcessadoEm != "") { cond += and + condProcessadoEm; and = " and "; }
        //            if (condVencto != "") { cond += and + condVencto; and = " and "; }
        //            if (condVigencia != "") { cond += and + condVigencia; }
        //        }

        //        //String qry = " arquivoRemessaAgendamento.*, arcrit_descricao,arcrit_arquivoNome FROM arquivoRemessaAgendamento INNER JOIN arquivoRemessaCriterio ON arcage_criterioId=arcrit_id " + cond + " ORDER BY arcage_processamentoEm DESC";
        //        String qry = String.Concat("SELECT arcage_arquivoNomeInstancia,arcage_qtdBoletos,arcage_vigenciade,arcage_vigenciaAte,arcage_vencimentoDe,arcage_vencimentoAte FROM ",
        //            "   arquivoRemessaAgendamento ",
        //            "       INNER JOIN arquivoRemessaCriterio ON arcage_criterioId=arcrit_id ",
        //            cond,
        //            "   GROUP BY arcage_arquivoNomeInstancia,arcage_qtdBoletos, arcage_vigenciade,arcage_vigenciaAte,arcage_vencimentoDe,arcage_vencimentoAte ",
        //            "   ORDER BY arcage_arquivoNomeInstancia DESC");

        //        return LocatorHelper.Instance.ExecuteQuery<ArquivoRemessaAgendamento>(qry, typeof(ArquivoRemessaAgendamento));
        //    }

        //    public static IList<ArquivoRemessaAgendamento> CarregarTodosMesmoSemCobrancas(Boolean somenteProcessados, DateTime? dataProcessamento, DateTime? venctoDe, DateTime? venctoAte, DateTime? vigenciaDe, DateTime? vigenciaAte)
        //    {
        //        String condSomenteProcessado = "";
        //        String condProcessadoEm = "";
        //        String condVencto = "";
        //        String condVigencia = "";

        //        if (somenteProcessados)
        //            condSomenteProcessado = " arcage_processado=1 ";

        //        if (dataProcessamento != null)
        //            condProcessadoEm += String.Concat(" DAY(arcage_processamentoEm)=", dataProcessamento.Value.Day, " AND MONTH(arcage_processamentoEm)=", dataProcessamento.Value.Month, "  AND YEAR(arcage_processamentoEm)=", dataProcessamento.Value.Year);

        //        if (venctoDe != null && venctoAte != null)
        //            condVencto = String.Concat(" arcage_vencimentoDe >= '", venctoDe.Value.ToString("yyyy-MM-dd 00:00:00.000"), "' AND arcage_vencimentoAte <= '", venctoAte.Value.ToString("yyyy-MM-dd 23:59:59.998"), "' ");

        //        if (vigenciaDe != null && vigenciaAte != null)
        //            condVencto = String.Concat(" arcage_vigenciaDe >= '", vigenciaDe.Value.ToString("yyyy-MM-dd 00:00:00.000"), "' AND arcage_vigenciaAte <= '", vigenciaAte.Value.ToString("yyyy-MM-dd 23:59:59.998"), "' ");

        //        String cond = "", top = "";
        //        if (condSomenteProcessado != "" || condProcessadoEm != "" || condVencto != "" || condVigencia != "")
        //        {
        //            String and = " and ";
        //            cond = " where arcage_id > 0 "; //" WHERE (arcage_arquivoNomeInstancia IS NOT NULL or arcage_arquivoNomeInstancia IS NULL) ";

        //            if (condSomenteProcessado != "") { cond += and + condSomenteProcessado; and = " and "; }
        //            if (condProcessadoEm != "") { cond += and + condProcessadoEm; and = " and "; }
        //            if (condVencto != "") { cond += and + condVencto; and = " and "; }
        //            if (condVigencia != "") { cond += and + condVigencia; }
        //        }

        //        if (condProcessadoEm == "" && condVencto == "" && condVigencia == "") top = " top 30 ";

        //        //String qry = " arquivoRemessaAgendamento.*, arcrit_descricao,arcrit_arquivoNome FROM arquivoRemessaAgendamento INNER JOIN arquivoRemessaCriterio ON arcage_criterioId=arcrit_id " + cond + " ORDER BY arcage_processamentoEm DESC";
        //        String qry = String.Concat("SELECT ", top, " arcage_arquivoNomeInstancia,arcage_qtdBoletos,arcage_vigenciade,arcage_vigenciaAte,arcage_vencimentoDe,arcage_vencimentoAte,arquivocobranca_id, arcage_processamentoEm,arcage_legado FROM ",
        //            "   arquivoRemessaAgendamento ",
        //            "       left JOIN arquivoRemessaCriterio ON arcage_criterioId=arcrit_id ",
        //            "       INNER JOIN arquivoCobrancaUnibanco ON arcage_id=arquivocobranca_agendamentoId ",
        //            cond,
        //            "   GROUP BY arcage_arquivoNomeInstancia,arcage_qtdBoletos, arcage_vigenciade,arcage_vigenciaAte,arcage_vencimentoDe,arcage_vencimentoAte,arquivocobranca_id,arcage_processamentoEm,arcage_legado ",
        //            "   ORDER BY arquivocobranca_id DESC");

        //        return LocatorHelper.Instance.ExecuteQuery<ArquivoRemessaAgendamento>(qry, typeof(ArquivoRemessaAgendamento));
        //    }

        //    public static IList<ArquivoRemessaAgendamento> CarregarUltimos20Legado()
        //    {
        //        //String condSomenteProcessado = "";
        //        //String condProcessadoEm = "";
        //        //String condVencto = "";
        //        //String condVigencia = "";

        //        String cond = " where arcage_legado=1 ";
        //        //if (condSomenteProcessado != "" || condProcessadoEm != "" || condVencto != "" || condVigencia != "")
        //        //{
        //        //    String and = " and ";
        //        //    cond = " WHERE (arcage_arquivoNomeInstancia IS NOT NULL AND arcage_arquivoNomeInstancia <> '') ";

        //        //    if (condSomenteProcessado != "") { cond += and + condSomenteProcessado; and = " and "; }
        //        //    if (condProcessadoEm != "") { cond += and + condProcessadoEm; and = " and "; }
        //        //    if (condVencto != "") { cond += and + condVencto; and = " and "; }
        //        //    if (condVigencia != "") { cond += and + condVigencia; }
        //        //}

        //        String qry = String.Concat("SELECT top 20 arcage_arquivoNomeInstancia,arcage_qtdBoletos,arcage_vigenciade,arcage_vigenciaAte,arcage_vencimentoDe,arcage_vencimentoAte FROM ",
        //            "   arquivoRemessaAgendamento ",
        //            "       LEFT JOIN arquivoRemessaCriterio ON arcage_criterioId=arcrit_id ",
        //            cond,
        //            "   GROUP BY arcage_arquivoNomeInstancia,arcage_qtdBoletos, arcage_vigenciade,arcage_vigenciaAte,arcage_vencimentoDe,arcage_vencimentoAte ",
        //            "   ORDER BY arcage_arquivoNomeInstancia DESC");

        //        return LocatorHelper.Instance.ExecuteQuery<ArquivoRemessaAgendamento>(qry, typeof(ArquivoRemessaAgendamento));
        //    }

        //    public static String NovoGrupo()
        //    {
        //        String qry = "SELECT TOP 1 arcage_grupo FROM arquivoRemessaAgendamento WHERE arcage_processado=0 ORDER BY arcage_id DESC";

        //        Object ret = LocatorHelper.Instance.ExecuteScalar(qry, null, null);

        //        if (ret == null || ret == DBNull.Value)
        //            return "1";
        //        else
        //            return Convert.ToString(Convert.ToInt32(ret) + 1);
        //    }
        //}

        //internal sealed class CobrancaFalha
        //{
        //    CobrancaFalha() { }

        //    public static void LogFalha(Object propostaId, DateTime? vencimento, String descricao, PersistenceManager pm)
        //    {
        //        try
        //        {
        //            if (descricao == null) { descricao = ""; }
        //            String vencto = " NULL ";
        //            if (vencimento != null && vencimento.HasValue && vencimento.Value != DateTime.MinValue)
        //            {
        //                vencto = String.Concat("'", vencimento.Value.ToString("yyyy-MM-dd"), "'");
        //            }

        //            String cmd = String.Concat("insert into cobranca_falha (cobrancafalha_propostaId,cobrancafalha_vencimento,cobrancafalha_motivo) values (", propostaId, ",", vencto, ", '", descricao.Replace("'", ""), "')");
        //            NonQueryHelper.Instance.ExecuteNonQuery(cmd, pm);
        //        }
        //        catch { }
        //    }

        //    public static void LogFalhaTabelaValor(Object propostaId, DateTime? venvimento, PersistenceManager pm)
        //    {
        //        LogFalha(propostaId, venvimento, "Tabela de valor não encontrada", pm);
        //    }
        //}

        //[DBTable("cobranca_venctoLog")]
        //internal sealed class CobrancaVencimentoLog : IPersisteableEntity
        //{
        //    Object _cobrancaId;
        //    DateTime _venctoOriginal;
        //    DateTime _venctoNovo;
        //    Object _usuarioId;
        //    DateTime _data;

        //    public CobrancaVencimentoLog() { _data = DateTime.Now; }

        //    public Object ID
        //    {
        //        get { return null; }
        //        set { }
        //    }

        //    [DBFieldInfo("cobrancavectolog_cobrancaId", FieldType.Single)]
        //    public Object CobrancaID
        //    {
        //        get { return _cobrancaId; }
        //        set { _cobrancaId = value; }
        //    }

        //    [DBFieldInfo("cobrancavectolog_venctoOriginal", FieldType.Single)]
        //    public DateTime VenctoOriginal
        //    {
        //        get { return _venctoOriginal; }
        //        set { _venctoOriginal = value; }
        //    }

        //    [DBFieldInfo("cobrancavectolog_venctoNovo", FieldType.Single)]
        //    public DateTime VenctoNovo
        //    {
        //        get { return _venctoNovo; }
        //        set { _venctoNovo = value; }
        //    }

        //    [DBFieldInfo("cobrancavectolog_usuarioId", FieldType.Single)]
        //    public Object UsuarioID
        //    {
        //        get { return _usuarioId; }
        //        set { _usuarioId = value; }
        //    }

        //    [DBFieldInfo("cobrancavectolog_data", FieldType.Single)]
        //    public DateTime Data
        //    {
        //        get { return _data; }
        //        set { _data = value; }
        //    }
        //}

        ///// <summary>
        ///// Representa o cabeçalho do parcelamento de dívida.
        ///// </summary>
        //[DBTable("cobranca_parcelamentoHeader")]
        //public class ParcelamentoHeader : EntityBase, IPersisteableEntity
        //{
        //    Object _id;
        //    Object _contratoId;
        //    Object _empresaId;
        //    Object _usuarioId;
        //    DateTime _venctoInicial;
        //    String _desconto;
        //    String _multa;
        //    String _email;
        //    Boolean _isentajuros;
        //    Int32 _parcelas;
        //    String _obs;
        //    Decimal _valorTotal;
        //    DateTime _data;

        //    #region properties

        //    [DBFieldInfo("parcheader_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("parcheader_contratoId", FieldType.Single)]
        //    public Object ContratoID
        //    {
        //        get { return _contratoId; }
        //        set { _contratoId = value; }
        //    }

        //    [DBFieldInfo("parcheader_usuarioId", FieldType.Single)]
        //    public Object UsuarioID
        //    {
        //        get { return _usuarioId; }
        //        set { _usuarioId = value; }
        //    }

        //    [DBFieldInfo("parcheader_empresaId", FieldType.Single)]
        //    public Object EmpresaID
        //    {
        //        get { return _empresaId; }
        //        set { _empresaId = value; }
        //    }

        //    [DBFieldInfo("parcheader_venctoInicial", FieldType.Single)]
        //    public DateTime VenctoInicial
        //    {
        //        get { return _venctoInicial; }
        //        set { _venctoInicial = value; }
        //    }

        //    [DBFieldInfo("parcheader_desconto", FieldType.Single)]
        //    public String Desconto
        //    {
        //        get { return _desconto; }
        //        set { _desconto = value; }
        //    }

        //    [DBFieldInfo("parcheader_parcelas", FieldType.Single)]
        //    public Int32 Parcelas
        //    {
        //        get { return _parcelas; }
        //        set { _parcelas = value; }
        //    }

        //    [DBFieldInfo("parcheader_multa", FieldType.Single)]
        //    public String Multa
        //    {
        //        get { return _multa; }
        //        set { _multa = value; }
        //    }


        //    [DBFieldInfo("parcheader_email", FieldType.Single)]
        //    public String Email
        //    {
        //        get { return _email; }
        //        set { _email = value; }
        //    }

        //    [DBFieldInfo("parcheader_isentaJuros", FieldType.Single)]
        //    public Boolean IsentaJuros
        //    {
        //        get { return _isentajuros; }
        //        set { _isentajuros = value; }
        //    }

        //    [DBFieldInfo("parcheader_obs", FieldType.Single)]
        //    public String OBS
        //    {
        //        get { return _obs; }
        //        set { _obs = value; }
        //    }

        //    [DBFieldInfo("parcheader_valorTotal", FieldType.Single)]
        //    public Decimal ValorTotal
        //    {
        //        get { return _valorTotal; }
        //        set { _valorTotal = value; }
        //    }

        //    [DBFieldInfo("parcheader_data", FieldType.Single)]
        //    public DateTime Data
        //    {
        //        get { return _data; }
        //        set { _data = value; }
        //    }

        //    #endregion

        //    public ParcelamentoHeader() { _data = DateTime.Now; }
        //    public ParcelamentoHeader(Object id) : this() { _id = id; }

        //    public static String GetEmpresaNome(Object empresaId)
        //    {
        //        String qry = "select empresa_nome from cobranca_empresa where empresa_id=" + empresaId;

        //        Object ret = LocatorHelper.Instance.ExecuteScalar(qry, null, null);
        //        if (ret != null && ret != DBNull.Value)
        //            return Convert.ToString(ret);
        //        else
        //            return String.Empty;
        //    }

        //    #region EntityBase methods

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }

        //    #endregion
        //}

        ///// <summary>
        ///// Mantém o relacionamento entre as novas cobranças geradas e o cabeçalho do parcelamento.
        ///// </summary>
        //[DBTable("cobranca_parcelamentoItem")]
        //public class ParcelamentoItem : EntityBase, IPersisteableEntity
        //{
        //    Object _id;
        //    Object _headerId;
        //    Object _cobrancaId;
        //    DateTime _competencia;
        //    String _obs;

        //    #region properties

        //    [DBFieldInfo("parcitem_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("parcitem_headerId", FieldType.Single)]
        //    public Object HeaderID
        //    {
        //        get { return _headerId; }
        //        set { _headerId = value; }
        //    }

        //    [DBFieldInfo("parcitem_cobrancaId", FieldType.Single)]
        //    public Object CobrancaID
        //    {
        //        get { return _cobrancaId; }
        //        set { _cobrancaId = value; }
        //    }

        //    [DBFieldInfo("parcitem_competencia", FieldType.Single)]
        //    public DateTime Competencia
        //    {
        //        get { return _competencia; }
        //        set { _competencia = value; }
        //    }

        //    [DBFieldInfo("parcitem_obs", FieldType.Single)]
        //    public String Observacoes
        //    {
        //        get { return _obs; }
        //        set { _obs = value; }
        //    }

        //    #endregion

        //    public static ParcelamentoItem CarregarPorCobrancaId(Object cobrancaId)
        //    {
        //        String qry = "select * from cobranca_parcelamentoItem where parcitem_cobrancaId=" + cobrancaId;

        //        IList<ParcelamentoItem> itens = LocatorHelper.Instance.ExecuteQuery<ParcelamentoItem>(qry, typeof(ParcelamentoItem));
        //        if (itens == null)
        //            return null;
        //        else
        //            return itens[0];
        //    }

        //    public static IList<ParcelamentoItem> CarregarPorHeaderId(Object headerId, PersistenceManager pm)
        //    {
        //        String qry = "select * from cobranca_parcelamentoItem where parcitem_headerId=" + headerId;

        //        return LocatorHelper.Instance.ExecuteQuery<ParcelamentoItem>(qry, typeof(ParcelamentoItem), pm);
        //    }

        //    public static IList<Cobranca> CarregarParcelasGeradas(Object headerId)
        //    {
        //        String qry = String.Concat("* from cobranca ",
        //            "       inner join cobranca_parcelamentoItem on parcitem_cobrancaId=cobranca_id ",
        //            "       inner join cobranca_parcelamentoHeader on parcitem_headerId = parcheader_id ",
        //            "   where parcheader_id=", headerId,
        //            "   order by cobranca_parcela");

        //        return LocatorHelper.Instance.ExecuteQuery<Cobranca>(qry, typeof(Cobranca));
        //    }
        //}

        ///// <summary>
        ///// Mantém o relacionamento entre as cobranças originais parceladas e o cabeçalho do parcelamento.
        ///// </summary>
        //[DBTable("cobranca_parcelamentoCobrancaOriginal")]
        //public class ParcelamentoCobrancaOriginal : EntityBase, IPersisteableEntity
        //{
        //    Object _id;
        //    Object _headerId;
        //    Object _cobrancaId;

        //    #region properties

        //    [DBFieldInfo("parccob_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("parccob_headerId", FieldType.Single)]
        //    public Object HeaderID
        //    {
        //        get { return _headerId; }
        //        set { _headerId = value; }
        //    }

        //    [DBFieldInfo("parccob_cobrancaId", FieldType.Single)]
        //    public Object CobrancaID
        //    {
        //        get { return _cobrancaId; }
        //        set { _cobrancaId = value; }
        //    }

        //    #endregion

        //    public static ParcelamentoCobrancaOriginal CarregarPorCobrancaId(Object cobrancaId)
        //    {
        //        String qry = "select * from cobranca_parcelamentoCobrancaOriginal where parccob_cobrancaId=" + cobrancaId;

        //        IList<ParcelamentoCobrancaOriginal> itens = LocatorHelper.Instance.ExecuteQuery<ParcelamentoCobrancaOriginal>(qry, typeof(ParcelamentoCobrancaOriginal));
        //        if (itens == null)
        //            return null;
        //        else
        //            return itens[0];
        //    }

        //    public static IList<ParcelamentoCobrancaOriginal> CarregarPorHeaderId(Object headerId, PersistenceManager pm)
        //    {
        //        String qry = "select * from cobranca_parcelamentoCobrancaOriginal where parccob_headerId=" + headerId;

        //        return LocatorHelper.Instance.ExecuteQuery<ParcelamentoCobrancaOriginal>(qry, typeof(ParcelamentoCobrancaOriginal), pm);
        //    }

        //    public static IList<Cobranca> CarregarParcelasNegociadas(Object headerId)
        //    {
        //        String qry = String.Concat("* from cobranca ",
        //            "       inner join cobranca_parcelamentoCobrancaOriginal on parccob_cobrancaId=cobranca_id ",
        //            "       inner join cobranca_parcelamentoHeader on parccob_headerId = parcheader_id ",
        //            "   where parcheader_id=", headerId,
        //            "   order by cobranca_parcela");

        //        return LocatorHelper.Instance.ExecuteQuery<Cobranca>(qry, typeof(Cobranca));
        //    }
        //}

        //public class CobrancaLog
        //{
        //    public enum Fonte : int
        //    {
        //        Sistema,
        //        Site,
        //        URA
        //    }

        //    public void CobrancaEnviada(Object cobrancaId, Object usuarioId, Fonte fonte)
        //    {
        //        try
        //        {
        //            String strUsuarioId = " NULL ";
        //            if (usuarioId != null) { strUsuarioId = Convert.ToString(usuarioId); }

        //            String cmd = String.Concat("insert into log_cobrancaEnviada (logenvcob_boletoId,logenvcob_usuarioId,logenvcob_fonte,logenvcob_data) values (",
        //                cobrancaId, ",", strUsuarioId, ",", Convert.ToInt32(fonte), ", getdate())");

        //            NonQueryHelper.Instance.ExecuteNonQuery(cmd, null);
        //        }
        //        catch
        //        {
        //        }
        //    }
        //}

        //#endregion

        //[Serializable]
        //[DBTable("contrato_beneficiario")]
        //public class ContratoBeneficiario : EntityBase, IPersisteableEntity
        //{
        //    public class UI
        //    {
        //        //public static void FillDropdownWithStatus(System.Web.UI.WebControls.DropDownList cbo)
        //        //{
        //        //    cbo.Items.Clear();
        //        //    cbo.Items.Add(new System.Web.UI.WebControls.ListItem("Novo", "0"));
        //        //    cbo.Items.Add(new System.Web.UI.WebControls.ListItem("Pendente na operadora", "1"));
        //        //    cbo.Items.Add(new System.Web.UI.WebControls.ListItem("Incluído", "2"));
        //        //    cbo.Items.Add(new System.Web.UI.WebControls.ListItem("Devolvido", "3"));
        //        //    cbo.Items.Add(new System.Web.UI.WebControls.ListItem("Alteração de cadastro pendente no sistema", "4"));
        //        //    cbo.Items.Add(new System.Web.UI.WebControls.ListItem("Exclusão pendente no sistema", "5"));
        //        //    cbo.Items.Add(new System.Web.UI.WebControls.ListItem("Segunda via de cartão pendente no sistema", "6"));
        //        //    cbo.Items.Add(new System.Web.UI.WebControls.ListItem("Alteração de cadastro pendente na operadora", "7"));
        //        //    cbo.Items.Add(new System.Web.UI.WebControls.ListItem("Exclusão pendente na operadora", "8"));
        //        //    cbo.Items.Add(new System.Web.UI.WebControls.ListItem("Segunda via de cartão pendente na operadora", "9"));
        //        //    cbo.Items.Add(new System.Web.UI.WebControls.ListItem("Excluído", "10"));
        //        //    cbo.Items.Add(new System.Web.UI.WebControls.ListItem("Mudança de plano pendente no sistema", "11"));
        //        //    cbo.Items.Add(new System.Web.UI.WebControls.ListItem("Mudança de plano pendente na operadora", "12"));
        //        //    cbo.Items.Add(new System.Web.UI.WebControls.ListItem("Cancelamento de contrato pendente no sistema", "13"));
        //        //    cbo.Items.Add(new System.Web.UI.WebControls.ListItem("Cancelamento de contrato pendente na operadora", "14"));
        //        //    //cbo.Items.Add(new System.Web.UI.WebControls.ListItem("", "15"));
        //        //    cbo.Items.Add(new System.Web.UI.WebControls.ListItem("Alteração cadastral devolvida pela operadora", "16"));
        //        //    cbo.Items.Add(new System.Web.UI.WebControls.ListItem("Exclusão de beneficiário devolvida pela operadora", "17"));
        //        //    cbo.Items.Add(new System.Web.UI.WebControls.ListItem("Segunda via de cartão devolvida pela operadora", "18"));
        //        //    cbo.Items.Add(new System.Web.UI.WebControls.ListItem("Mudança de plano devolvida pela operadora", "19"));
        //        //    cbo.Items.Add(new System.Web.UI.WebControls.ListItem("Cancelamento de contrato devolvido pela operadora", "20"));
        //        //    //cbo.Items.Add(new System.Web.UI.WebControls.ListItem("Contrato cancelado", "21"));
        //        //}
        //    }

        //    public enum TipoRelacao : int
        //    {
        //        Titular = 0,
        //        Dependente,
        //        Agregado
        //    }

        //    public enum eStatus : int
        //    {
        //        /// <summary>
        //        /// Novo beneficiário cadastrado. A operadora ainda NÃO foi notificada.
        //        /// </summary>
        //        Novo = 0,
        //        PendenteNaOperadora,
        //        Incluido, //acatado pela operadora
        //        /// <summary>
        //        /// Inclusão de contrato ou beneficiário devolvida pela Operadora.
        //        /// </summary>
        //        Devolvido,  //3
        //        /// <summary>
        //        /// Alteração de Dados Cadastrais pendente no Sistema (Fica disponivel na geração de arquivos transacionais).
        //        /// </summary>
        //        AlteracaoCadastroPendente, //4
        //        /// <summary>
        //        /// Exclusão de Beneficiário pendente no Sistema (Fica disponivel na geração de arquivos transacionais).
        //        /// </summary>
        //        ExclusaoPendente, //5
        //        /// <summary>
        //        /// Segunda Via de Cartão pendente no Sistema (Fica disponivel na geração de arquivos transacionais).
        //        /// </summary>
        //        SegundaViaCartaoPendente, //6
        //        /// <summary>
        //        /// Alteração de Dados Cadastrais pendente na Operadora (Necessita de processamento da Operadora).
        //        /// </summary>
        //        AlteracaoCadastroPendenteNaOperadora, //7
        //        /// <summary>
        //        /// Exclusão de Beneficiário pendente na Operadora (Necessita de processamento da Operadora).
        //        /// </summary>
        //        ExclusaoPendenteNaOperadora, //8
        //        /// <summary>
        //        /// Segunda Via de Cartão pendente na Operadora (Necessita de processamento da Operadora).
        //        /// </summary>
        //        SegundaViaCartaoPendenteNaOperadora, //9
        //        /// <summary>
        //        /// O beneficiário está cancelado na operadora e no sistema.
        //        /// </summary>
        //        Excluido, //10
        //        /// <summary>
        //        /// Mudança de Plano pendente no Sistema (Fica disponivel na geração de arquivos transacionais).
        //        /// </summary>
        //        MudancaPlanoPendente, //11
        //        /// <summary>
        //        /// Mudança de Plano pendente na Operadora (Necessita de processamento da Operadora).
        //        /// </summary>
        //        MudancaPlanoPendenteNaOperadora,
        //        /// <summary>
        //        /// Cancelamento de Contrato pendente no Sistema (Fica disponivel na geração de arquivos transacionais).
        //        /// </summary>
        //        CancelamentoPendente,
        //        /// <summary>
        //        /// Cancelamento de Contrato pendente na Operadora (Necessita de processamento da Operadora).
        //        /// </summary>
        //        CancelamentoPendenteNaOperadora, //14
        //        /// <summary>
        //        /// Desconhecido.
        //        /// </summary>
        //        Desconhecido,
        //        /// <summary>
        //        /// Alteração de dados cadastrais devolvida pela Operadora.
        //        /// </summary>
        //        AlteracaoCadastroDevolvido,
        //        /// <summary>
        //        /// Exclusao de beneficiario devolvida pela Operadora.
        //        /// </summary>
        //        ExclusaoDevolvido, //17
        //        /// <summary>
        //        /// Segunda via de cartão devolvida pela Operadora.
        //        /// </summary>
        //        SegundaViaCartaoDevolvido,
        //        /// <summary>
        //        /// Mudança de plano devolvida pela Operadora.
        //        /// </summary>
        //        MudancaDePlanoDevolvido,
        //        /// <summary>
        //        /// Cancelamento de contrato devolvido pela Operadora. 20
        //        /// </summary>
        //        CancelamentoDevolvido, //20
        //        /// <summary>
        //        /// Contrato Cancelado. 21
        //        /// </summary>
        //        Cancelado
        //    }

        //    #region fields

        //    Object _id;
        //    Object _contratoId;
        //    Object _beneficiarioId;
        //    Object _parentescoId;
        //    Object _estadoCivilId;
        //    int _tipo;
        //    DateTime _data;
        //    DateTime _vigencia;
        //    DateTime _dataInativacao;
        //    Boolean _ativo;
        //    Int32 _status;
        //    Int32 _numeroSequencial;

        //    //Object      _estadoCivil;
        //    DateTime _dataCasamento;
        //    Decimal _peso;
        //    Decimal _altura;

        //    String _carenciaOperadora;
        //    Object _carenciaOperadoraId;
        //    String _carenciaOperadoraDescricao;
        //    String _carenciaMatriculaNumero;
        //    DateTime _carenciaContratoDe;
        //    DateTime _carenciaContratoAte;
        //    Int32 _carenciaContratoTempo; //em meses.
        //    String _carenciaCodigo;
        //    bool _dmed;

        //    Decimal _valor;
        //    String _portabilidade;

        //    String _numeroMatriculaSaude;
        //    String _numeroMatriculaDental;

        //    String _beneficiarioNome;
        //    String _beneficiarioNomeMae;
        //    String _beneficiarioCpf;
        //    String _beneficiarioSexo;
        //    DateTime _beneficiarioNascimento;
        //    String _parentescoDescricao;
        //    String _parentescoCodigo;
        //    String _estadoCivilDescricao;
        //    String _estadoCivilCodigo;

        //    DateTime _beneficiarioDataNascimento;

        //    #endregion

        //    #region propriedades

        //    [DBFieldInfo("contratobeneficiario_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("contratobeneficiario_contratoId", FieldType.Single)]
        //    public Object ContratoID
        //    {
        //        get { return _contratoId; }
        //        set { _contratoId = value; }
        //    }

        //    [DBFieldInfo("contratobeneficiario_beneficiarioId", FieldType.Single)]
        //    public Object BeneficiarioID
        //    {
        //        get { return _beneficiarioId; }
        //        set { _beneficiarioId = value; }
        //    }

        //    [DBFieldInfo("contratobeneficiario_parentescoId", FieldType.Single)]
        //    public Object ParentescoID
        //    {
        //        get { return _parentescoId; }
        //        set { _parentescoId = value; }
        //    }

        //    [DBFieldInfo("contratobeneficiario_tipo", FieldType.Single)]
        //    public int Tipo
        //    {
        //        get { return _tipo; }
        //        set { _tipo = value; }
        //    }

        //    /// <summary>
        //    /// Data de admissão do beneficiário.
        //    /// </summary>
        //    [DBFieldInfo("contratobeneficiario_data", FieldType.Single)]
        //    public DateTime Data
        //    {
        //        get { return _data; }
        //        set { _data = value; }
        //    }

        //    [DBFieldInfo("contratobeneficiario_vigencia", FieldType.Single)]
        //    public DateTime Vigencia
        //    {
        //        get { return _vigencia; }
        //        set { _vigencia = value; }
        //    }

        //    [DBFieldInfo("contratobeneficiario_ativo", FieldType.Single)]
        //    public Boolean Ativo
        //    {
        //        get { return _ativo; }
        //        set { _ativo = value; }
        //    }

        //    [DBFieldInfo("contratobeneficiario_carenciaOperadoraOrigemId", FieldType.Single)]
        //    public Object CarenciaOperadoraID
        //    {
        //        get { return _carenciaOperadoraId; }
        //        set { _carenciaOperadoraId = value; }
        //    }

        //    [DBFieldInfo("contratobeneficiario_carenciaOperadoraId", FieldType.Single)]
        //    public String CarenciaOperadora
        //    {
        //        get { return _carenciaOperadora; }
        //        set { _carenciaOperadora = value; }
        //    }

        //    [DBFieldInfo("contratobeneficiario_carenciaOperadoraDescricao", FieldType.Single)]
        //    public String CarenciaOperadoraDescricao
        //    {
        //        get { return _carenciaOperadoraDescricao; }
        //        set { _carenciaOperadoraDescricao = value; }
        //    }

        //    [DBFieldInfo("contratobeneficiario_carenciaMatriculaNumero", FieldType.Single)]
        //    public String CarenciaMatriculaNumero
        //    {
        //        get { return _carenciaMatriculaNumero; }
        //        set { _carenciaMatriculaNumero = value; }
        //    }

        //    [DBFieldInfo("contratobeneficiario_carenciaContratoDataDe", FieldType.Single)]
        //    public DateTime CarenciaContratoDe
        //    {
        //        get { return _carenciaContratoDe; }
        //        set { _carenciaContratoDe = value; }
        //    }

        //    [DBFieldInfo("contratobeneficiario_carenciaContratoDataAte", FieldType.Single)]
        //    public DateTime CarenciaContratoAte
        //    {
        //        get { return _carenciaContratoAte; }
        //        set { _carenciaContratoAte = value; }
        //    }

        //    /// <summary>
        //    /// Tempo de contrato anterior (em meses)
        //    /// </summary>
        //    [DBFieldInfo("contratobeneficiario_carenciaContratoTempo", FieldType.Single)]
        //    public Int32 CarenciaContratoTempo
        //    {
        //        get { return _carenciaContratoTempo; }
        //        set { _carenciaContratoTempo = value; }
        //    }

        //    [DBFieldInfo("contratobeneficiario_carenciaCodigo", FieldType.Single)]
        //    public String CarenciaCodigo
        //    {
        //        get { return _carenciaCodigo; }
        //        set { _carenciaCodigo = value; }
        //    }

        //    [DBFieldInfo("contratobeneficiario_status", FieldType.Single)]
        //    public Int32 Status
        //    {
        //        get { return _status; }
        //        set { _status = value; }
        //    }

        //    [DBFieldInfo("contratobeneficiario_numeroSequencia", FieldType.Single)]
        //    public Int32 NumeroSequencial
        //    {
        //        get { return _numeroSequencial; }
        //        set { _numeroSequencial = value; }
        //    }

        //    [DBFieldInfo("contratobeneficiario_estadoCivilId", FieldType.Single)]
        //    public Object EstadoCivilID
        //    {
        //        get { return _estadoCivilId; }
        //        set { _estadoCivilId = value; }
        //    }

        //    /////////////////////////////////////////////////////////////////////////////////////

        //    [DBFieldInfo("contratobeneficiario_dataCasamento", FieldType.Single)]
        //    public DateTime DataCasamento
        //    {
        //        get { return _dataCasamento; }
        //        set { _dataCasamento = value; }
        //    }

        //    [DBFieldInfo("contratobeneficiario_peso", FieldType.Single)]
        //    public Decimal Peso
        //    {
        //        get { return _peso; }
        //        set { _peso = value; }
        //    }

        //    [DBFieldInfo("contratobeneficiario_altura", FieldType.Single)]
        //    public Decimal Altura
        //    {
        //        get { return _altura; }
        //        set { _altura = value; }
        //    }

        //    /////////////////////////////////////////////////////////////////////////////////////

        //    [DBFieldInfo("contratobeneficiario_valor", FieldType.Single)]
        //    public Decimal Valor
        //    {
        //        get { return _valor; }
        //        set { _valor = value; }
        //    }

        //    [DBFieldInfo("contratobeneficiario_portabilidade", FieldType.Single)]
        //    public String Portabilidade
        //    {
        //        get { return _portabilidade; }
        //        set { _portabilidade = value; }
        //    }

        //    [DBFieldInfo("contratobeneficiario_numMatriculaSaude", FieldType.Single)]
        //    public String NumeroMatriculaSaude
        //    {
        //        get { return _numeroMatriculaSaude; }
        //        set { _numeroMatriculaSaude = value; }
        //    }

        //    [DBFieldInfo("contratobeneficiario_numMatriculaDental", FieldType.Single)]
        //    public String NumeroMatriculaDental
        //    {
        //        get { return _numeroMatriculaDental; }
        //        set { _numeroMatriculaDental = value; }
        //    }

        //    [DBFieldInfo("contratobeneficiario_dataInativo", FieldType.Single)]
        //    public DateTime DataInativacao
        //    {
        //        get { return _dataInativacao; }
        //        set { _dataInativacao = value; }
        //    }

        //    /// <summary>
        //    /// Aprovado na DMED?
        //    /// </summary>
        //    [Joinned("beneficiario_dmed")]
        //    public bool DMED
        //    {
        //        get { return _dmed; }
        //        set { _dmed = value; }
        //    }

        //    [Joinned("beneficiario_nome")]
        //    public String BeneficiarioNome
        //    {
        //        get { return _beneficiarioNome; }
        //        set { _beneficiarioNome = value; }
        //    }

        //    /// <summary>
        //    /// Joinned
        //    /// </summary>
        //    [Joinned("beneficiario_email")]
        //    public String BeneficiarioEmail
        //    {
        //        get;
        //        set;
        //    }

        //    [Joinned("beneficiario_nomeMae")]
        //    public String BeneficiarioNomeMae
        //    {
        //        get { return _beneficiarioNomeMae; }
        //        set { _beneficiarioNomeMae = value; }
        //    }

        //    [Joinned("beneficiario_cpf")]
        //    public String BeneficiarioCPF
        //    {
        //        get { return _beneficiarioCpf; }
        //        set { _beneficiarioCpf = value; }
        //    }

        //    [Joinned("beneficiario_sexo")]
        //    public String BeneficiarioSexo
        //    {
        //        get { return _beneficiarioSexo; }
        //        set { _beneficiarioSexo = value; }
        //    }

        //    [Joinned("beneficiario_dataNascimento")]
        //    public DateTime BeneficiarioNascimento
        //    {
        //        get { return _beneficiarioNascimento; }
        //        set { _beneficiarioNascimento = value; }
        //    }

        //    [Joinned("contratoAdmparentescoagregado_parentescoDescricao")]
        //    public String ParentescoDescricao
        //    {
        //        get { return _parentescoDescricao; }
        //        set { _parentescoDescricao = value; }
        //    }

        //    [Joinned("contratoAdmparentescoagregado_parentescoCodigo")]
        //    public String ParentescoCodigo
        //    {
        //        get { return _parentescoCodigo; }
        //        set { _parentescoCodigo = value; }
        //    }

        //    [Joinned("estadocivil_descricao")]
        //    public String EstadoCivilDescricao
        //    {
        //        get { return _estadoCivilDescricao; }
        //        set { _estadoCivilDescricao = value; }
        //    }

        //    [Joinned("estadocivil_codigo")]
        //    public String EstadoCivilCodigo
        //    {
        //        get { return _estadoCivilCodigo; }
        //        set { _estadoCivilCodigo = value; }
        //    }

        //    [Joinned("beneficiario_dataNascimento")]
        //    public DateTime BeneficiarioDataNascimento
        //    {
        //        get { return _beneficiarioDataNascimento; }
        //        set { _beneficiarioDataNascimento = value; }
        //    }

        //    #endregion

        //    //public ItemDeclaracaoSaudeINSTANCIA ItemDeclaracaoSaudeINSTANCIA
        //    //{
        //    //    get
        //    //    {
        //    //        throw new System.NotImplementedException();
        //    //    }
        //    //    set
        //    //    {
        //    //    }
        //    //}

        //    public ContratoBeneficiario() { _status = 0; _data = DateTime.Now; _ativo = true; _numeroSequencial = -1; _dmed = true; }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static ContratoBeneficiario CarregarPorContratoEBeneficiario(Object contratoId, Object beneficiarioId, PersistenceManager pm)
        //    {
        //        String query = String.Concat("contrato_beneficiario.*, beneficiario_nome, contratoAdmparentescoagregado_parentescoDescricao,beneficiario_dmed",
        //            " FROM contrato_beneficiario",
        //            " INNER JOIN beneficiario ON contratobeneficiario_beneficiarioId=beneficiario_id",
        //            " LEFT JOIN contratoADM_parentesco_agregado ON contratoAdmparentescoagregado_id=contratobeneficiario_parentescoId",
        //            " WHERE contratobeneficiario_contratoId=", contratoId, " AND contratobeneficiario_beneficiarioId=", beneficiarioId);

        //        IList<ContratoBeneficiario> ret = LocatorHelper.Instance.ExecuteQuery<ContratoBeneficiario>(query, typeof(ContratoBeneficiario), pm);
        //        if (ret == null)
        //            return null;
        //        else
        //            return ret[0];
        //    }

        //    public static IList<ContratoBeneficiario> CarregarPorContratoID(Object contratoId, Boolean semTitular)
        //    {
        //        return CarregarPorContratoID(contratoId, true, semTitular);
        //    }

        //    public static IList<ContratoBeneficiario> CarregarPorContratoID(Object contratoId, Boolean apenasAtivos, Boolean semTitular)
        //    {
        //        return CarregarPorContratoID(contratoId, apenasAtivos, semTitular, null);
        //    }

        //    public static IList<ContratoBeneficiario> CarregarPorContratoID(Object contratoId, Boolean apenasAtivos, Boolean semTitular, PersistenceManager pm)
        //    {
        //        String semTitularCondition = "";

        //        if (semTitular)
        //        {
        //            semTitularCondition = " AND contratobeneficiario_tipo <> " + Convert.ToInt32(ContratoBeneficiario.TipoRelacao.Titular);
        //        }

        //        String apenasAtivosCondition = "";
        //        if (apenasAtivos) { apenasAtivosCondition = "contratobeneficiario_ativo=1 AND "; }

        //        String query = String.Concat("contrato_beneficiario.*, beneficiario_nome, beneficiario_nomeMae, beneficiario_cpf, beneficiario_sexo, beneficiario_dataNascimento, contratoAdmparentescoagregado_parentescoDescricao, contratoAdmparentescoagregado_parentescoCodigo, estadocivil_descricao,estadocivil_codigo,beneficiario_dmed ",
        //            " FROM contrato_beneficiario",
        //            " INNER JOIN beneficiario ON contratobeneficiario_beneficiarioId=beneficiario_id",
        //            " LEFT JOIN contratoADM_parentesco_agregado ON contratoAdmparentescoagregado_id=contratobeneficiario_parentescoId",
        //            " LEFT JOIN estado_civil ON estadocivil_id=contratobeneficiario_estadoCivilId ",
        //            " WHERE ", apenasAtivosCondition, " contratobeneficiario_contratoId=", contratoId, semTitularCondition,
        //            " ORDER BY contratobeneficiario_numeroSequencia");

        //        //query = String.Concat("SELECT contrato_beneficiario.*, beneficiario_nome, beneficiario_cpf, estadocivil_id,estadocivil_descricao,estadocivil_codigo ",
        //        //    " FROM contrato_beneficiario",
        //        //    "   INNER JOIN beneficiario ON beneficiario_id=contratobeneficiario_beneficiarioId ",
        //        //    "   LEFT JOIN estado_civil ON estadocivil_id=contratobeneficiario_estadoCivilId ",
        //        //    " WHERE ",
        //        //    "   contratobeneficiario_ativo=1 AND contratobeneficiario_tipo=", Convert.ToInt32(ContratoBeneficiario.TipoRelacao.Titular), " AND contratobeneficiario_contratoId=", contratoId);

        //        return LocatorHelper.Instance.ExecuteQuery<ContratoBeneficiario>(query, typeof(ContratoBeneficiario), pm);
        //    }

        //    public static IList<ContratoBeneficiario> Carregar(string[] ids, PersistenceManager pm)
        //    {
        //        String query = String.Concat("contrato_beneficiario.*, beneficiario_nome, beneficiario_nomeMae, beneficiario_cpf, beneficiario_sexo, beneficiario_dataNascimento, contratoAdmparentescoagregado_parentescoDescricao, contratoAdmparentescoagregado_parentescoCodigo, estadocivil_descricao,estadocivil_codigo,beneficiario_dmed ",
        //            " FROM contrato_beneficiario",
        //            " INNER JOIN beneficiario ON contratobeneficiario_beneficiarioId=beneficiario_id",
        //            " LEFT JOIN contratoADM_parentesco_agregado ON contratoAdmparentescoagregado_id=contratobeneficiario_parentescoId",
        //            " LEFT JOIN estado_civil ON estadocivil_id=contratobeneficiario_estadoCivilId ",
        //            " WHERE contratobeneficiario_id in (", string.Join(",", ids), ") ",
        //            " ORDER BY contratobeneficiario_numeroSequencia");

        //        return LocatorHelper.Instance.ExecuteQuery<ContratoBeneficiario>(query, typeof(ContratoBeneficiario), pm);
        //    }

        //    public static IList<ContratoBeneficiario> CarregarPorContratoID_Parcial(Object contratoId, Boolean apenasAtivos, Boolean semTitular, PersistenceManager pm)
        //    {
        //        String semTitularCondition = "";

        //        if (semTitular)
        //        {
        //            semTitularCondition = " AND contratobeneficiario_tipo <> " + Convert.ToInt32(ContratoBeneficiario.TipoRelacao.Titular);
        //        }

        //        String apenasAtivosCondition = "";
        //        if (apenasAtivos) { apenasAtivosCondition = "contratobeneficiario_ativo=1 AND "; }

        //        String query = String.Concat("contratobeneficiario_id,contratobeneficiario_beneficiarioId, contratobeneficiario_contratoId, contratobeneficiario_tipo, beneficiario_dataNascimento,contratobeneficiario_ativo,contratobeneficiario_dataInativo,contratobeneficiario_data,contratobeneficiario_vigencia,beneficiario_dmed ",
        //            " FROM contrato_beneficiario",
        //            " INNER JOIN beneficiario ON contratobeneficiario_beneficiarioId=beneficiario_id",
        //            " LEFT JOIN contratoADM_parentesco_agregado ON contratoAdmparentescoagregado_id=contratobeneficiario_parentescoId",
        //            " WHERE ", apenasAtivosCondition, " contratobeneficiario_contratoId=", contratoId, semTitularCondition,
        //            " ORDER BY contratobeneficiario_numeroSequencia");

        //        return LocatorHelper.Instance.ExecuteQuery<ContratoBeneficiario>(query, typeof(ContratoBeneficiario), pm);
        //    }

        //    /// <summary>
        //    /// ID do beneficiario titular
        //    /// </summary>
        //    public static Object CarregaTitularID(Object contratoId, PersistenceManager pm)
        //    {
        //        String[] paramNm = new String[] { "@contratoId" };
        //        String[] paramVl = new String[] { Convert.ToString(contratoId) };
        //        return LocatorHelper.Instance.ExecuteScalar("SELECT contratobeneficiario_beneficiarioid FROM contrato_beneficiario WHERE contratobeneficiario_contratoid=@contratoId AND contratobeneficiario_tipo=" + Convert.ToInt32(ContratoBeneficiario.TipoRelacao.Titular).ToString(), paramNm, paramVl, pm);
        //    }
        //    /// <summary>
        //    /// ID do beneficiario titular
        //    /// </summary>
        //    public static Object CarregaTitularID(String contratoNumero, Object operadoraId, PersistenceManager pm)
        //    {
        //        Object contratoId = Contrato.CarregaContratoID(operadoraId, contratoNumero, pm);
        //        if (contratoId == null) { return null; }
        //        return CarregaTitularID(contratoId, pm);
        //    }

        //    public static Object CarregaID(Object contratoId, Object beneficiarioId, PersistenceManager pm)
        //    {
        //        String[] paramNm = new String[] { "@contratoId", "@beneficiarioId" };
        //        String[] paramVl = new String[] { Convert.ToString(contratoId), Convert.ToString(beneficiarioId) };
        //        return LocatorHelper.Instance.ExecuteScalar("SELECT contratobeneficiario_id FROM contrato_beneficiario WHERE contratobeneficiario_contratoid=@contratoId AND contratobeneficiario_beneficiarioid=@beneficiarioId", paramNm, paramVl, pm);
        //    }

        //    /// <summary>
        //    /// ID do ContratoBeneficiario para o titular
        //    /// </summary>
        //    public static Object CarregaID_ParaTitular(Object contratoId, PersistenceManager pm)
        //    {
        //        String[] paramNm = new String[] { "@contratoId" };
        //        String[] paramVl = new String[] { Convert.ToString(contratoId) };
        //        return LocatorHelper.Instance.ExecuteScalar("SELECT contratobeneficiario_id FROM contrato_beneficiario WHERE contratobeneficiario_ativo=1 AND contratobeneficiario_contratoid=@contratoId AND contratobeneficiario_tipo=" + Convert.ToInt32(ContratoBeneficiario.TipoRelacao.Titular).ToString(), paramNm, paramVl, pm);
        //    }

        //    /// <summary>
        //    /// 
        //    /// </summary>
        //    public static IList<ContratoBeneficiario> CarregarPorContratoNumero(String contratoNumero, Object operadoraId, Boolean somenteAtivos)
        //    {
        //        String[] paramNm = new String[] { "@Numero" };
        //        String[] paramVl = new String[] { contratoNumero };

        //        String ativoCond = "";
        //        if (somenteAtivos)
        //        {
        //            ativoCond = " AND contratobeneficiario_ativo=1 ";
        //        }

        //        String query = String.Concat("contrato_beneficiario.*, beneficiario_nome, beneficiario_cpf, contratoAdmparentescoagregado_parentescoDescricao",
        //            " FROM contrato_beneficiario",
        //            " INNER JOIN contrato ON contrato_id=contratobeneficiario_contratoId ", ativoCond,
        //            " INNER JOIN beneficiario ON contratobeneficiario_beneficiarioId=beneficiario_id", ativoCond,
        //            " LEFT JOIN contratoADM_parentesco_agregado ON contratoAdmparentescoagregado_id=contratobeneficiario_parentescoId",
        //            " WHERE contrato_numero=@Numero AND contrato_operadoraId=", operadoraId,
        //            " ORDER BY contrato_id, contratobeneficiario_numeroSequencia");

        //        return LocatorHelper.Instance.ExecuteParametrizedQuery<ContratoBeneficiario>(query, paramNm, paramVl, typeof(ContratoBeneficiario));
        //    }

        //    public static ContratoBeneficiario CarregarTitularPorContratoNumero(String contratoNumero, String operadoraNome, PersistenceManager pm)
        //    {
        //        String[] paramNm = new String[] { "@Numero", "@OperadoraNome" };
        //        String[] paramVl = new String[] { contratoNumero, operadoraNome };

        //        String query = String.Concat("top 1 beneficiario_id,beneficiario_nome, beneficiario_cpf ",
        //            " FROM contrato_beneficiario",
        //            " INNER JOIN contrato ON contrato_id=contratobeneficiario_contratoId and contratobeneficiario_tipo=0 and contratobeneficiario_ativo=1 ",
        //            " INNER JOIN beneficiario ON contratobeneficiario_beneficiarioId=beneficiario_id and contratobeneficiario_tipo=0 and contratobeneficiario_ativo=1 ",
        //            " LEFT JOIN contratoADM_parentesco_agregado ON contratoAdmparentescoagregado_id=contratobeneficiario_parentescoId",
        //            " WHERE contrato_numero=@Numero AND contrato_operadoraNome=@operadoraNome",
        //            " ORDER BY contratobeneficiario_numeroSequencia");

        //        IList<ContratoBeneficiario> ret = LocatorHelper.Instance.ExecuteParametrizedQuery<ContratoBeneficiario>(query, paramNm, paramVl, typeof(ContratoBeneficiario), pm);

        //        if (ret == null || ret.Count == 0)
        //            return null;
        //        else
        //            return ret[0];
        //    }

        //    public static ContratoBeneficiario CarregarTitular(Object contratoId, PersistenceManager pm)
        //    {
        //        String query = String.Concat("SELECT contrato_beneficiario.*, beneficiario_nome, beneficiario_cpf, beneficiario_dataNascimento, estadocivil_id,estadocivil_descricao,estadocivil_codigo,beneficiario_dmed,beneficiario_email ",
        //            " FROM contrato_beneficiario",
        //            "   INNER JOIN beneficiario ON beneficiario_id=contratobeneficiario_beneficiarioId ",
        //            "   LEFT JOIN estado_civil ON estadocivil_id=contratobeneficiario_estadoCivilId ",
        //            " WHERE ",
        //            "   contratobeneficiario_ativo=1 AND contratobeneficiario_tipo=", Convert.ToInt32(ContratoBeneficiario.TipoRelacao.Titular), " AND contratobeneficiario_contratoId=", contratoId);

        //        IList<ContratoBeneficiario> lista = LocatorHelper.Instance.ExecuteQuery<ContratoBeneficiario>(query, typeof(ContratoBeneficiario), pm);
        //        if (lista == null || lista.Count == 0)
        //            return null;
        //        else
        //            return lista[0];
        //    }

        //    public static ContratoBeneficiario CarregarPorIDContratoBeneficiario(Object id, PersistenceManager pm)
        //    {
        //        String query = String.Concat("SELECT contrato_beneficiario.*, beneficiario_nome, beneficiario_cpf, estadocivil_id,estadocivil_descricao,estadocivil_codigo,beneficiario_dmed ",
        //            " FROM contrato_beneficiario",
        //            "   INNER JOIN beneficiario ON beneficiario_id=contratobeneficiario_beneficiarioId ",
        //            "   LEFT JOIN estado_civil ON estadocivil_id=contratobeneficiario_estadoCivilId ",
        //            " WHERE ",
        //            "   contratobeneficiario_id=", id);

        //        IList<ContratoBeneficiario> lista = LocatorHelper.Instance.ExecuteQuery<ContratoBeneficiario>(query, typeof(ContratoBeneficiario), pm);
        //        if (lista == null || lista.Count == 0)
        //            return null;
        //        else
        //            return lista[0];
        //    }

        //    /// <summary>
        //    /// Método para pegar o CPF do Titular de contrato (proposta para cliente final).
        //    /// </summary>
        //    /// <param name="contratoId">ID do Contrato.</param>
        //    /// <returns>Retorna o CPF do Titular do Contrato.</returns>
        //    public static String GetCPFTitular(Object contratoId)
        //    {
        //        return GetCPFTitular(contratoId, null);
        //    }

        //    /// <summary>
        //    /// Método para pegar o CPF do Titular de contrato (proposta para cliente final).
        //    /// </summary>
        //    /// <param name="contratoId">ID do Contrato.</param>
        //    /// <returns>Retorna o CPF do Titular do Contrato.</returns>
        //    public static String GetCPFTitular(Object contratoId, PersistenceManager PM)
        //    {
        //        if (contratoId != null)
        //        {
        //            String[] strParam = new String[1];
        //            String[] strValue = new String[1];

        //            strParam[0] = "@contrato_id";
        //            strValue[0] = contratoId.ToString();

        //            String strSQL = String.Concat("SELECT ",
        //                                          "      Ben.beneficiario_cpf ",
        //                                          "  FROM contrato_beneficiario cBen ",
        //                                          "  INNER JOIN beneficiario Ben ON cBen.contratobeneficiario_beneficiarioId = Ben.beneficiario_id ",
        //                                          "  WHERE contratobeneficiario_tipo = 0 AND contratobeneficiario_contratoId = @contrato_id");

        //            Object retVal = null;

        //            if (PM == null) PM = new PersistenceManager();

        //            try
        //            {
        //                retVal = LocatorHelper.Instance.ExecuteScalar(strSQL, strParam, strValue, PM);
        //            }
        //            catch (Exception) { throw; }

        //            if (retVal != null && !(retVal is DBNull))
        //                return retVal.ToString().Trim();
        //            else
        //                return null;
        //        }
        //        else
        //            throw new ArgumentNullException("O ID do contrato está nulo.");
        //    }

        //    public static String GetNomeTitular(Object contratoId, PersistenceManager PM)
        //    {
        //        if (contratoId != null)
        //        {
        //            String[] strParam = new String[1];
        //            String[] strValue = new String[1];

        //            strParam[0] = "@contrato_id";
        //            strValue[0] = contratoId.ToString();

        //            String strSQL = String.Concat("SELECT ",
        //                                          "      Ben.beneficiario_nome ",
        //                                          "  FROM contrato_beneficiario cBen ",
        //                                          "  INNER JOIN beneficiario Ben ON cBen.contratobeneficiario_beneficiarioId = Ben.beneficiario_id ",
        //                                          "  WHERE contratobeneficiario_tipo = 0 AND contratobeneficiario_contratoId = @contrato_id");
        //            Object retVal = null;

        //            try
        //            {
        //                retVal = LocatorHelper.Instance.ExecuteScalar(strSQL, strParam, strValue, PM);
        //            }
        //            catch (Exception) { throw; }

        //            if (retVal != null && !(retVal is DBNull))
        //                return retVal.ToString().Trim();
        //            else
        //                return null;
        //        }
        //        else
        //            throw new ArgumentNullException("O ID do contrato está nulo.");
        //    }

        //    /// <summary>
        //    /// Retorna o próximo número sequencial para beneficiário de um contrato.
        //    /// </summary>
        //    /// <param name="contratoId">ID do contrato (proposta)</param>
        //    /// <returns>Próximo número sequencial para beneficiário de um contrato</returns>
        //    public static Int32 ProximoNumeroSequencial(Object contratoId, Object beneficiarioId, PersistenceManager pm)
        //    {
        //        Object ret = null;
        //        if (beneficiarioId != null)
        //        {
        //            ret = LocatorHelper.Instance.ExecuteScalar("SELECT contratobeneficiario_numeroSequencia FROM contrato_beneficiario WHERE contratobeneficiario_contratoId=" + contratoId + " AND contratobeneficiario_beneficiarioId=" + beneficiarioId, null, null, pm);
        //            if (ret != null)
        //                return Convert.ToInt32(ret);
        //        }

        //        ret = LocatorHelper.Instance.ExecuteScalar("SELECT MAX(contratobeneficiario_numeroSequencia) FROM contrato_beneficiario WHERE contratobeneficiario_contratoId=" + contratoId, null, null, pm);

        //        if (ret == null)
        //            return 1;
        //        else
        //            return (Convert.ToInt32(ret) + 1);
        //    }

        //    /// <summary>
        //    /// Retorna o próximo Status de acordo com a Movimentação.
        //    /// </summary>
        //    /// <param name="Movimentacao">Inclusão de Beneficiário, Alteração de Dados Cadastrais, Mudança de Plano, etc.</param>
        //    /// <returns>Retorna o próximo Status do Workflow.</returns>
        //    public static eStatus ProximoStatusPorMovimentacao(String Movimentacao)
        //    {
        //        //switch (Movimentacao)
        //        //{
        //            //case ArqTransacionalUnimed.Movimentacao.InclusaoBeneficiario:
        //            //    return eStatus.PendenteNaOperadora;
        //            //case ArqTransacionalUnimed.Movimentacao.AlteracaoBeneficiario:
        //            //    return eStatus.AlteracaoCadastroPendenteNaOperadora;
        //            //case ArqTransacionalUnimed.Movimentacao.ExclusaoBeneficiario:
        //            //    return eStatus.ExclusaoPendenteNaOperadora;
        //            //case ArqTransacionalUnimed.Movimentacao.SegundaViaCartaoBeneficiario:
        //            //    return eStatus.SegundaViaCartaoPendenteNaOperadora;
        //            //case ArqTransacionalUnimed.Movimentacao.MudancaDePlano:
        //            //    return eStatus.MudancaPlanoPendenteNaOperadora;
        //            //case ArqTransacionalUnimed.Movimentacao.CancelamentoContrato:
        //            //    return eStatus.CancelamentoPendenteNaOperadora;
        //            //default:
        //                return eStatus.Desconhecido;
        //        //}
        //    }

        //    /// <summary>
        //    /// Ao desfazer o envio de um lote da operadora, o beneficiário precisa reassumir seu status de pendência no sistema.
        //    /// Este método calcula esse status com base no status assumido quando enviado à operadora.
        //    /// </summary>
        //    internal static ContratoBeneficiario.eStatus StatusAntesDeDesfazerEnvio(ContratoBeneficiario.eStatus statusAtual)
        //    {
        //        switch (statusAtual)
        //        {
        //            case ContratoBeneficiario.eStatus.PendenteNaOperadora:
        //                {
        //                    return ContratoBeneficiario.eStatus.Novo;
        //                }
        //            case ContratoBeneficiario.eStatus.AlteracaoCadastroPendenteNaOperadora:
        //                {
        //                    return ContratoBeneficiario.eStatus.AlteracaoCadastroPendente;
        //                }
        //            case ContratoBeneficiario.eStatus.ExclusaoPendenteNaOperadora:
        //                {
        //                    return ContratoBeneficiario.eStatus.ExclusaoPendente;
        //                }
        //            case ContratoBeneficiario.eStatus.SegundaViaCartaoPendenteNaOperadora:
        //                {
        //                    return ContratoBeneficiario.eStatus.SegundaViaCartaoPendente;
        //                }
        //            case ContratoBeneficiario.eStatus.MudancaPlanoPendenteNaOperadora:
        //                {
        //                    return ContratoBeneficiario.eStatus.MudancaPlanoPendente;
        //                }
        //            case ContratoBeneficiario.eStatus.CancelamentoPendenteNaOperadora:
        //                {
        //                    return ContratoBeneficiario.eStatus.CancelamentoPendente;
        //                }
        //        }

        //        return ContratoBeneficiario.eStatus.Desconhecido;
        //    }

        //    internal static void SetaStatusDevolvidoParaContratoBeneficiario(ContratoBeneficiario.eStatus statusAtual, Object contratoId, Object beneficiarioId, PersistenceManager pm)
        //    {
        //        ContratoBeneficiario.eStatus novoStatus = ContratoBeneficiario.eStatus.Desconhecido;

        //        #region obtém próximo status

        //        switch (statusAtual)
        //        {
        //            case ContratoBeneficiario.eStatus.AlteracaoCadastroPendenteNaOperadora:
        //                {
        //                    novoStatus = ContratoBeneficiario.eStatus.AlteracaoCadastroDevolvido;
        //                    break;
        //                }
        //            case ContratoBeneficiario.eStatus.CancelamentoPendenteNaOperadora:
        //                {
        //                    novoStatus = ContratoBeneficiario.eStatus.CancelamentoDevolvido;
        //                    break;
        //                }
        //            case ContratoBeneficiario.eStatus.ExclusaoPendenteNaOperadora:
        //                {
        //                    novoStatus = ContratoBeneficiario.eStatus.ExclusaoDevolvido;
        //                    break;
        //                }
        //            case ContratoBeneficiario.eStatus.MudancaPlanoPendenteNaOperadora:
        //                {
        //                    novoStatus = ContratoBeneficiario.eStatus.MudancaDePlanoDevolvido;
        //                    break;
        //                }
        //            case ContratoBeneficiario.eStatus.PendenteNaOperadora:
        //                {
        //                    novoStatus = ContratoBeneficiario.eStatus.Devolvido;
        //                    break;
        //                }
        //            case ContratoBeneficiario.eStatus.SegundaViaCartaoPendenteNaOperadora:
        //                {
        //                    novoStatus = ContratoBeneficiario.eStatus.SegundaViaCartaoDevolvido;
        //                    break;
        //                }
        //        }
        //        #endregion

        //        if (novoStatus != ContratoBeneficiario.eStatus.Desconhecido)
        //        {
        //            ContratoBeneficiario.AlteraStatusBeneficiario(contratoId, beneficiarioId, novoStatus, pm);
        //            //ContratoStatusHistorico csh = new ContratoStatusHistorico();
        //            //csh.Data = DateTime.Now;
        //            //csh.OperadoraID = null;
        //            //csh.PropostaNumero = "";
        //            //csh.Status = ContratoStatusHistorico.eStatus.
        //        }
        //    }


        //    /// <summary>
        //    /// Método par aAlterar o Status de um Beneficiário dentro de um Contrato.
        //    /// </summary>
        //    /// <param name="ContratoID">ID do Contrato.</param>
        //    /// <param name="BeneficiarioID">ID do Beneficiário.</param>
        //    /// <param name="Status">Status do Beneficiário.</param>
        //    public static void AlteraStatusBeneficiario(Object ContratoID, Object BeneficiarioID, eStatus Status)
        //    {
        //        AlteraStatusBeneficiario(ContratoID, BeneficiarioID, Status, new PersistenceManager());
        //    }

        //    /// <summary>
        //    /// Método par aAlterar o Status de um Beneficiário dentro de um Contrato.
        //    /// </summary>
        //    /// <param name="ContratoID">ID do Contrato.</param>
        //    /// <param name="BeneficiarioID">ID do Beneficiário.</param>
        //    /// <param name="Status">Status do Beneficiário.</param>
        //    public static void AlteraStatusBeneficiario(Object ContratoID, Object BeneficiarioID, eStatus Status, PersistenceManager PM)
        //    {
        //        if (BeneficiarioID != null && ContratoID != null)
        //        {
        //            String[] strParam = new String[3];
        //            String[] strVaule = new String[3];

        //            strParam[0] = "@status";
        //            strParam[1] = "@contrato_id";
        //            strParam[2] = "@beneficiario_id";

        //            strVaule[0] = ((Int32)Status).ToString();
        //            strVaule[1] = ContratoID.ToString();
        //            strVaule[2] = BeneficiarioID.ToString();

        //            String strSQL = "UPDATE contrato_beneficiario SET contratobeneficiario_status = @status WHERE contratobeneficiario_contratoId = @contrato_id AND contratobeneficiario_beneficiarioId = @beneficiario_id";

        //            try
        //            {
        //                if (PM == null) PM = new PersistenceManager();

        //                LocatorHelper.Instance.ExecuteScalar(strSQL, strParam, strVaule, PM);
        //            }
        //            catch (Exception) { throw; }
        //        }
        //        else
        //            throw new ArgumentNullException("O ID do beneficiario ou do contrato não foi informado.");
        //    }

        //    public static void AlteraStatusBeneficiario(Object ContratoBeneficiarioID, eStatus Status, PersistenceManager PM)
        //    {
        //        String[] strParam = new String[2];
        //        String[] strVaule = new String[2];

        //        strParam[0] = "@status";
        //        strParam[1] = "@contratobeneficiario_id";

        //        strVaule[0] = ((Int32)Status).ToString();
        //        strVaule[1] = ContratoBeneficiarioID.ToString();

        //        String strSQL = "UPDATE contrato_beneficiario SET contratobeneficiario_status = @status WHERE contratobeneficiario_id = @contratobeneficiario_id";

        //        try
        //        {
        //            if (PM == null) PM = new PersistenceManager();

        //            NonQueryHelper.Instance.ExecuteNonQuery(strSQL, strParam, strVaule, PM);
        //        }
        //        catch (Exception) { throw; }
        //    }

        //    /// <summary>
        //    /// Inativa o Beneficiário no contrato
        //    /// </summary>
        //    /// <param name="ContratoID">Id do contrato</param>
        //    /// <param name="BeneficiarioId">Id do beneficiário</param>
        //    public static void InativaBeneficiario(Object ContratoID, Object BeneficiarioId, PersistenceManager PM)
        //    {
        //        if (BeneficiarioId != null && ContratoID != null)
        //        {
        //            String[] strParam = new String[2];
        //            String[] strVaule = new String[2];

        //            strParam[0] = "@contrato_id";
        //            strParam[1] = "@beneficiario_id";

        //            strVaule[0] = ContratoID.ToString();
        //            strVaule[1] = BeneficiarioId.ToString();

        //            String strSQL = "UPDATE contrato_beneficiario SET contratobeneficiario_ativo = 0, contratobeneficiario_dataInativo = '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' WHERE contratobeneficiario_contratoId = @contrato_id AND contratobeneficiario_beneficiarioId = @beneficiario_id ";

        //            try
        //            {
        //                if (PM == null) PM = new PersistenceManager();

        //                LocatorHelper.Instance.ExecuteScalar(strSQL, strParam, strVaule, PM);
        //            }
        //            catch (Exception) { throw; }
        //        }
        //        else
        //            throw new ArgumentNullException("O ID do beneficiario ou do contrato não foi informado.");
        //    }

        //}

        //[DBTable("operadora")]
        //public class Operadora : EntityBase, IPersisteableEntity
        //{
        //    public enum StatusOperadora : int
        //    {
        //        Ativa,
        //        Inativa
        //    }

        //    #region fields

        //    Object _id;
        //    Object _tabelaReajusteAtualId;
        //    String _nome;
        //    String _cnpj;
        //    String _email;
        //    String _ddd;
        //    String _fone;
        //    String _ramal;
        //    String _contato;
        //    Boolean _inativa;
        //    int _tamanhoMaximoLogradouroBeneficiario;
        //    int _diaPagamento;
        //    int _diaRecebimento;
        //    Boolean _permiteReativacao;
        //    Boolean _enviaCartaAviso;
        //    String _mensagemRemessa;

        //    Endereco _endereco;

        //    #endregion

        //    #region propriedades

        //    [DBFieldInfo("operadora_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("operadora_tabelaReajusterAtualId", FieldType.Single)]
        //    public Object TabelaReajusteAtualID
        //    {
        //        get { return _tabelaReajusteAtualId; }
        //        set { _tabelaReajusteAtualId = value; }
        //    }

        //    [DBFieldInfo("operadora_cnpj", FieldType.Single)]
        //    public String CNPJ
        //    {
        //        get { return _cnpj; }
        //        set { _cnpj = value; }
        //    }

        //    [DBFieldInfo("operadora_nome", FieldType.Single)]
        //    public String Nome
        //    {
        //        get { return _nome; }
        //        set { _nome = value; }
        //    }

        //    [DBFieldInfo("operadora_email", FieldType.Single)]
        //    public String Email
        //    {
        //        get { return ToLower(_email); }
        //        set { _email = value; }
        //    }

        //    [DBFieldInfo("operadora_ddd", FieldType.Single)]
        //    public String DDD
        //    {
        //        get { return _ddd; }
        //        set { _ddd = value; }
        //    }

        //    [DBFieldInfo("operadora_fone", FieldType.Single)]
        //    public String Fone
        //    {
        //        get { return _fone; }
        //        set { _fone = value; }
        //    }

        //    public String FFone
        //    {
        //        get
        //        {
        //            return base.FormataTelefone(_fone);
        //        }
        //    }

        //    [DBFieldInfo("operadora_ramal", FieldType.Single)]
        //    public String Ramal
        //    {
        //        get { return _ramal; }
        //        set { _ramal = value; }
        //    }

        //    [DBFieldInfo("operadora_contato", FieldType.Single)]
        //    public String Contato
        //    {
        //        get { return _contato; }
        //        set { _contato = value; }
        //    }

        //    [DBFieldInfo("operadora_inativa", FieldType.Single)]
        //    public Boolean Inativa
        //    {
        //        get { return _inativa; }
        //        set { _inativa = value; }
        //    }

        //    [DBFieldInfo("operadora_diaPagamento", FieldType.Single)]
        //    public int DiaPagamento
        //    {
        //        get { return _diaPagamento; }
        //        set { _diaPagamento = value; }
        //    }

        //    [DBFieldInfo("operadora_diaRecebimento", FieldType.Single)]
        //    public int DiaRecebimento
        //    {
        //        get { return _diaRecebimento; }
        //        set { _diaRecebimento = value; }
        //    }

        //    [DBFieldInfo("operadora_tamanhoMaximoLogradouroBeneficiario", FieldType.Single)]
        //    public int TamanhoMaximoLogradouroBeneficiario
        //    {
        //        get { return _tamanhoMaximoLogradouroBeneficiario; }
        //        set { _tamanhoMaximoLogradouroBeneficiario = value; }
        //    }

        //    [DBFieldInfo("operadora_permiteReativacao", FieldType.Single)]
        //    public Boolean PermiteReativacao
        //    {
        //        get { return _permiteReativacao; }
        //        set { _permiteReativacao = value; }
        //    }

        //    [DBFieldInfo("operadora_enviaCartaAviso", FieldType.Single)]
        //    public Boolean EnviaCartaDeAviso
        //    {
        //        get { return _enviaCartaAviso; }
        //        set { _enviaCartaAviso = value; }
        //    }

        //    public Endereco Endereco
        //    {
        //        get { return _endereco; }
        //        set { _endereco = value; }
        //    }

        //    [DBFieldInfo("operadora_mensagemRemessa", FieldType.Single)]
        //    public String MensagemRemessa
        //    {
        //        get { return _mensagemRemessa; }
        //        set { _mensagemRemessa = value; }
        //    }

        //    #endregion


        //    /// <summary>
        //    /// ID da Unimed.
        //    /// </summary>
        //    public static Object UnimedID
        //    {
        //        get
        //        {
        //            return System.Configuration.ConfigurationManager.AppSettings["OperadoraUnimedID"];
        //        }
        //    }

        //    /// <summary>
        //    /// ID da Unimed Fortaleza.
        //    /// </summary>
        //    public static Object UnimedFortalezaID
        //    {
        //        get
        //        {
        //            return System.Configuration.ConfigurationManager.AppSettings["OperadoraUnimedFortalezaID"];
        //        }
        //    }

        //    /// <summary>
        //    /// IDs de operadoras Salutar.
        //    /// </summary>
        //    public static String[] SalutarIDs
        //    {
        //        get
        //        {
        //            return System.Configuration.ConfigurationManager.AppSettings["OperadoraSalutarID"].Split(';');
        //        }
        //    }

        //    public static String[] AmilIDsSemCodPrcJR
        //    {
        //        get
        //        {
        //            return System.Configuration.ConfigurationManager.AppSettings["OperadoraAmilID_SemCodJR"].Split(';');
        //        }
        //    }

        //    /// <summary>
        //    /// Array de prcs válidos para propostas Salutar.
        //    /// </summary>
        //    public static String[] SalutarPRCs
        //    {
        //        get
        //        {
        //            return System.Configuration.ConfigurationManager.AppSettings["OperadoraSalutarPRCs"].Split(';');
        //        }
        //    }

        //    /// <summary>
        //    /// Checa se um PRC é válido para o domínio Salutar.
        //    /// </summary>
        //    public static Boolean ValidaPRCSalutar(String prc)
        //    {
        //        if (String.IsNullOrEmpty(prc)) { return false; }

        //        String[] prcsValidos = SalutarPRCs;
        //        if (prcsValidos != null && prcsValidos.Length > 0)
        //        {
        //            foreach (String prcValido in prcsValidos)
        //            {
        //                if (prcValido.ToUpper().Equals(prc.ToUpper())) { return true; }
        //            }
        //        }

        //        return false;
        //    }

        //    /// <summary>
        //    /// Verifica se o ID da Operadora é o da Unimed.
        //    /// </summary>
        //    /// <param name="OperadoraID">ID da Operadora.</param>
        //    /// <returns>True se for Unimed e False se for outra Operadora.</returns>
        //    public static Boolean IsUnimed(Object OperadoraID)
        //    {
        //        if (OperadoraID != null)
        //        {
        //            Int32 intOperadoraID = -1;

        //            if (Int32.TryParse(OperadoraID.ToString(), out intOperadoraID))
        //                return (Convert.ToInt32(UnimedID) == intOperadoraID);
        //            else
        //                throw new ArgumentException("ID da Operadora é inválido");
        //        }
        //        else
        //            throw new ArgumentNullException("ID da Operadora não pode ser nulo.");
        //    }

        //    /// <summary>
        //    /// Verifica se a operadora é Salutar através do seu ID.
        //    /// </summary>
        //    /// <param name="OperadoraID">ID da operadora.</param>
        //    /// <returns>True se Salutar, do contrário False.</returns>
        //    public static Boolean IsSalutar(Object OperadoraID)
        //    {
        //        if (OperadoraID != null)
        //        {
        //            String[] ids = SalutarIDs;
        //            if (ids == null || ids.Length == 0) { return false; }

        //            foreach (String id in ids)
        //            {
        //                if (Convert.ToString(OperadoraID) == id) { return true; }
        //            }

        //            return false;
        //        }
        //        else
        //            throw new ArgumentNullException("ID da Operadora não pode ser nulo.");
        //    }

        //    /// <summary>
        //    /// Dado um id de operadora, checa se para essa operadora, durante a exportacao, deve-se remover o
        //    /// prefixo JR do código PRC.
        //    /// </summary>
        //    public static Boolean IsAmil_SemCodPrcJR_NaExportacao(Object OperadoraID)
        //    {
        //        if (OperadoraID != null)
        //        {
        //            String[] ids = AmilIDsSemCodPrcJR;
        //            if (ids == null || ids.Length == 0) { return false; }

        //            foreach (String id in ids)
        //            {
        //                if (Convert.ToString(OperadoraID) == id) { return true; }
        //            }

        //            return false;
        //        }
        //        else
        //            return false;
        //    }

        //    /// <summary>
        //    /// Verifica se o ID da Operadora é o da Unimed Fortaleza.
        //    /// </summary>
        //    /// <param name="OperadoraID">ID da Operadora.</param>
        //    /// <returns>True se for Unimed Fortaleza e False se for outra Operadora.</returns>
        //    public static Boolean IsUnimedFortaleza(Object OperadoraID)
        //    {
        //        if (OperadoraID != null)
        //        {
        //            Int32 intOperadoraID = -1;

        //            if (Int32.TryParse(OperadoraID.ToString(), out intOperadoraID))
        //                return (Convert.ToInt32(UnimedFortalezaID) == intOperadoraID);
        //            else
        //                throw new ArgumentException("ID da Operadora é inválido");
        //        }
        //        else
        //            throw new ArgumentNullException("ID da Operadora não pode ser nulo.");
        //    }

        //    public Operadora(Object id) : this() { _id = id; }
        //    public Operadora() { _inativa = false; _endereco = new Endereco(); }

        //    #region persistence methods

        //    public void Salvar()
        //    {
        //        PersistenceManager pm = new PersistenceManager();
        //        pm.TransactionContext();

        //        try
        //        {
        //            pm.Save(this);

        //            this._endereco.DonoId = this.ID;
        //            this._endereco.DonoTipo = Convert.ToInt32(Endereco.TipoDono.Operadora);
        //            pm.Save(this._endereco);

        //            pm.Commit();
        //        }
        //        catch (Exception ex)
        //        {
        //            pm.Rollback();
        //            pm = null;
        //            throw ex;
        //        }
        //    }

        //    public void Remover()
        //    {
        //        this.Carregar();
        //        PersistenceManager pm = new PersistenceManager();
        //        pm.TransactionContext();

        //        IList<Adicional> adicionais = LocatorHelper.Instance.ExecuteQuery<Adicional>("adicional_id FROM adicional WHERE adicional_operadoraId=" + this.ID, typeof(Adicional), pm);

        //        try
        //        {
        //            //Carrega os contratos administrativos para poder deletar todas as dependencias
        //            IList<ContratoADM> contratos = LocatorHelper.Instance.ExecuteQuery<ContratoADM>(
        //                "contratoadm_id FROM contratoAdm WHERE contratoadm_operadoraId=" + this.ID, typeof(ContratoADM), pm);
        //            if (contratos != null && contratos.Count > 0)
        //            {
        //                foreach (ContratoADM contrato in contratos)
        //                {
        //                    #region deleta tabelas de valores

        //                    IList<TabelaValor> tabelas = LocatorHelper.Instance.ExecuteQuery<TabelaValor>(
        //                        "tabelavalor_id FROM tabela_valor WHERE tabelavalor_contratoId=" + contrato.ID, typeof(TabelaValor), pm);

        //                    if (tabelas != null && tabelas.Count > 0)
        //                    {
        //                        foreach (TabelaValor tabela in tabelas)
        //                        {
        //                            NonQueryHelper.Instance.ExecuteNonQuery("DELETE FROM tabela_valor_item WHERE tabelavaloritem_tabelaid=" + tabela.ID, pm);
        //                            pm.Remove(tabela);
        //                        }
        //                    }
        //                    #endregion

        //                    #region deleta comissionamentos da operadora x contrato adm

        //                    IList<ComissionamentoOperadora> comissionamentos = LocatorHelper.Instance.ExecuteQuery
        //                        <ComissionamentoOperadora>("comissaooperadora_id FROM comissao_operadora WHERE comissaooperadora_contratoAdmId=" + contrato.ID, typeof(ComissionamentoOperadora), pm);
        //                    if (comissionamentos != null)
        //                    {
        //                        foreach (ComissionamentoOperadora comissionamento in comissionamentos)
        //                        {
        //                            NonQueryHelper.Instance.ExecuteNonQuery("DELETE FROM comissao_operadora_item WHERE comissaooperadoraitem_comissaoid=" + comissionamento.ID, pm);
        //                            NonQueryHelper.Instance.ExecuteNonQuery("DELETE FROM comissao_operadora_vitaliciedade WHERE cov_comissaoId=" + comissionamento.ID, pm);
        //                            pm.Remove(comissionamento);
        //                        }
        //                    }
        //                    #endregion

        //                    #region deleta planos e planos X produtos adicionais X contratos

        //                    IList<Plano> planos = LocatorHelper.Instance.ExecuteQuery<Plano>("plano_id FROM plano WHERE plano_contratoId=" + contrato.ID, typeof(Plano), pm);

        //                    if (adicionais != null && planos != null)
        //                    {
        //                        foreach (Plano plano in planos)
        //                        {
        //                            foreach (Adicional adicional in adicionais)
        //                            {
        //                                NonQueryHelper.Instance.ExecuteNonQuery(String.Concat("DELETE FROM contratoADM_plano_adicional WHERE contratoplanoadicional_contratoid=", contrato.ID, " AND contratoplanoadicional_planoid=", plano.ID, " AND contratoplanoadicional_adicionalid=", adicional.ID), pm);
        //                            }
        //                        }
        //                    }

        //                    //deleta planos
        //                    NonQueryHelper.Instance.ExecuteNonQuery("DELETE FROM plano WHERE plano_contratoId=" + contrato.ID, pm);
        //                    #endregion

        //                    //deleta calendarios de admissao, vencimento e recebimento
        //                    NonQueryHelper.Instance.ExecuteNonQuery("DELETE FROM calendario_recebimento WHERE calendariorecebimento_calendarioVenctoId IN (SELECT calendariovencto_id FROM calendarioVencimento WHERE calendariovencto_calendarioAdmissaoId IN (SELECT calendario_id FROM calendario WHERE calendario_contratoId=" + contrato.ID + "))", pm);

        //                    NonQueryHelper.Instance.ExecuteNonQuery("DELETE FROM calendario_vencimento WHERE calendariovencto_calendarioAdmissaoId IN (SELECT calendario_id FROM calendario WHERE calendario_contratoId=" + contrato.ID + ")", pm);
        //                    NonQueryHelper.Instance.ExecuteNonQuery("DELETE FROM calendario WHERE calendario_contratoId=" + contrato.ID, pm);

        //                    //deleta contrato adm
        //                    pm.Remove(contrato);
        //                }
        //            }

        //            #region remove adicionais

        //            if (adicionais != null)
        //            {
        //                foreach (Adicional adicional in adicionais)
        //                {
        //                    //deleta regras
        //                    NonQueryHelper.Instance.ExecuteNonQuery(String.Concat("DELETE FROM adicional_regra WHERE adicionalregra_operadoraId=", this.ID, " AND adicionalregra_adicionalId=", adicional.ID), pm);
        //                    //deleta faixas
        //                    NonQueryHelper.Instance.ExecuteNonQuery("DELETE FROM adicional_faixa WHERE adicionalfaixa_adicionalid=" + adicional.ID, pm);
        //                    pm.Remove(adicional);
        //                }
        //            }
        //            #endregion

        //            //deleta os contatos
        //            NonQueryHelper.Instance.ExecuteNonQuery("DELETE FROM contato WHERE contato_operadoraId=" + this.ID, pm);

        //            pm.Remove(this);
        //            if (this._endereco != null) { pm.Remove(this._endereco); }

        //            pm.Commit();
        //        }
        //        catch (Exception ex)
        //        {
        //            pm.Rollback();
        //            pm = null;
        //            throw ex;
        //        }
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);

        //        IList<Endereco> lista = Endereco.CarregarPorDono(this.ID, Endereco.TipoDono.Operadora);
        //        if (lista != null)
        //            this._endereco = lista[0];
        //    }
        //    #endregion

        //    public static IList<Operadora> CarregarTodas()
        //    {
        //        return CarregarTodas(false);
        //    }

        //    public static IList<Operadora> CarregarTodas(Boolean apenasAtivas)
        //    {
        //        String condicaoApenasAtivas = "";
        //        if (apenasAtivas)
        //        {
        //            condicaoApenasAtivas = " WHERE operadora_inativa=0";
        //        }

        //        String query = "* FROM operadora" + condicaoApenasAtivas + " ORDER BY operadora_nome";

        //        IList<Operadora> lista = LocatorHelper.
        //            Instance.ExecuteQuery<Operadora>(query, typeof(Operadora));

        //        return lista;
        //    }

        //    public static IList<Operadora> CarregarTodasQueEnviamCartaCobranca()
        //    {
        //        String query = "* FROM operadora WHERE operadora_inativa=0 AND operadora_enviaCartaAviso=1 ORDER BY operadora_nome";

        //        IList<Operadora> lista = LocatorHelper.
        //            Instance.ExecuteQuery<Operadora>(query, typeof(Operadora));

        //        return lista;
        //    }

        //    public static String CarregarNome(Object operadoraId, PersistenceManager pm)
        //    {
        //        String qry = "SELECT operadora_nome FROM operadora WHERE operadora_id=" + operadoraId;
        //        Object ret = LocatorHelper.Instance.ExecuteScalar(qry, null, null, pm);
        //        if (ret == null || ret == DBNull.Value)
        //        {
        //            return String.Empty;
        //        }
        //        else
        //        {
        //            return Convert.ToString(ret);
        //        }
        //    }

        //    public static Object CarregarIDPorCNPJ(String cnpj, PersistenceManager pm)
        //    {
        //        String[] paramNm = new String[] { "@cnpj" };
        //        String[] paramVl = new String[] { cnpj };
        //        return LocatorHelper.Instance.ExecuteScalar("SELECT operadora_id FROM operadora WHERE operadora_cnpj=@cnpj", paramNm, paramVl, pm);
        //    }

        //    public static Object CarregarID(String contratoAdmNumero, PersistenceManager pm)
        //    {
        //        String[] paramNm = new String[] { "@numero" };
        //        String[] paramVl = new String[] { contratoAdmNumero };
        //        return LocatorHelper.Instance.ExecuteScalar("SELECT contratoadm_operadoraId FROM contratoADM WHERE contratoadm_numero=@numero", paramNm, paramVl, pm);
        //    }

        //    public static IList<Operadora> CarregarPorPlanoID(Object planoID)
        //    {
        //        String query = "operadora.* FROM operadora INNER JOIN contratoADM ON operadora_id=contratoadm_operadoraid INNER JOIN plano ON plano_contratoId=contratoadm_id  WHERE plano_id=" + planoID;

        //        IList<Operadora> lista = LocatorHelper.Instance.ExecuteQuery<Operadora>(query, typeof(Operadora));

        //        return lista;
        //    }

        //    public static IList<Operadora> CarregarPorContratoADM_ID(Object contratoId)
        //    {
        //        String query = "TOP 1 contratoadm_descricao, operadora.* FROM operadora INNER JOIN contratoADM ON operadora_id=contratoadm_operadoraid WHERE contratoadm_id=" + contratoId + " ORDER BY contratoadm_descricao";

        //        return LocatorHelper.Instance.ExecuteQuery<Operadora>(query, typeof(Operadora));
        //    }

        //    public static Boolean CnpjEmUso(String cnpj, Object operadoraId)
        //    {
        //        String qry = "SELECT operadora_id FROM operadora WHERE operadora_cnpj=@CNPJ";

        //        if (operadoraId != null) { qry += " AND operadora_id <> " + operadoraId; }

        //        String[] names = new String[] { "@CNPJ" };
        //        String[] value = new String[] { cnpj };

        //        Object ret = LocatorHelper.Instance.ExecuteScalar(qry, names, value);

        //        return ret != null && ret != DBNull.Value;
        //    }

        //    public static Boolean NomeEmUso(String nome, Object operadoraId)
        //    {
        //        String qry = "SELECT operadora_id FROM operadora WHERE operadora_nome=@NOME";

        //        if (operadoraId != null) { qry += " AND operadora_id <> " + operadoraId; }

        //        String[] names = new String[] { "@NOME" };
        //        String[] value = new String[] { nome };

        //        Object ret = LocatorHelper.Instance.ExecuteScalar(qry, names, value);

        //        return ret != null && ret != DBNull.Value;
        //    }

        //    public static void AlterarStatus(Object OperadoraID, StatusOperadora status)
        //    {
        //        String command = "UPDATE operadora SET operadora_inativa=" + Convert.ToInt32(status) + " WHERE operadora_id=" + OperadoraID;
        //        NonQueryHelper.Instance.ExecuteNonQuery(command, null);
        //    }

        //    //public static void SetaTabelaReajusteAutal(Object operadoraId, Object tabelaReajusteId, PersistenceManager pm)
        //    //{
        //    //    String command = "UPDATE operadora SET operadora_tabelaReajusterAtualId=" + tabelaReajusteId + " WHERE operadora_id=" + operadoraId;
        //    //    NonQueryHelper.Instance.ExecuteNonQuery(command, pm);
        //    //}

        //    //public void SetaTabelaReajusteAutal(Object tabelaReajusteId, PersistenceManager pm)
        //    //{
        //    //    Operadora.SetaTabelaReajusteAutal(this._id, tabelaReajusteId, pm);
        //    //}

        //    public static DataTable CarregarOperadorasOrigem(String nome)
        //    {
        //        String qry = "select operadoraorigem_id as ID, operadoraorigem_codigo as Codigo, operadoraorigem_nome as Nome, operadoraorigem_codigoAns as CodigoANS FROM operadoraOrigem where operadoraorigem_nome like @nome";
        //        String[] name = new String[] { "@nome" };
        //        String[] value = new String[] { "%" + nome + "%" };

        //        DataTable dt = LocatorHelper.Instance.ExecuteParametrizedQuery(qry, name, value).Tables[0];

        //        return dt;
        //    }
        //}

        //[DBTable("feriado")]
        //public class DiaFeriado : EntityBase, IPersisteableEntity
        //{
        //    Object _id;
        //    Object _operadoraId;
        //    Object _usuarioId;
        //    String _descricao;
        //    DateTime _data;
        //    String _obs;

        //    public DiaFeriado() { }
        //    public DiaFeriado(Object id) { _id = id; }

        //    #region properties

        //    [DBFieldInfo("feriado_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("feriado_operadoraId", FieldType.Single)]
        //    public Object OperadoraID
        //    {
        //        get { return _operadoraId; }
        //        set { _operadoraId = value; }
        //    }

        //    [DBFieldInfo("feriado_usuarioId", FieldType.Single)]
        //    public Object UsuarioID
        //    {
        //        get { return _usuarioId; }
        //        set { _usuarioId = value; }
        //    }

        //    [DBFieldInfo("feriado_descricao", FieldType.Single)]
        //    public String Descricao
        //    {
        //        get { return _descricao; }
        //        set { _descricao = value; }
        //    }

        //    [DBFieldInfo("feriado_data", FieldType.Single)]
        //    public DateTime Data
        //    {
        //        get { return _data; }
        //        set { _data = value; }
        //    }

        //    [DBFieldInfo("feriado_obs", FieldType.Single)]
        //    public String OBS
        //    {
        //        get { return _obs; }
        //        set { _obs = value; }
        //    }

        //    #endregion

        //    #region persistence methods

        //    public void Salvar()
        //    {
        //        try
        //        {
        //            base.Salvar(this);
        //        }
        //        catch
        //        {
        //            throw;
        //        }
        //    }

        //    public void Remover()
        //    {
        //        try
        //        {
        //            base.Remover(this);
        //        }
        //        catch
        //        {
        //            throw;
        //        }
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }

        //    #endregion

        //    public static IList<DiaFeriado> CarregarTodos()
        //    {
        //        String qry = "select feriado_id,feriado_operadoraId,feriado_usuarioId,feriado_descricao,feriado_data from feriado order by feriado_data";

        //        return LocatorHelper.Instance.ExecuteQuery<DiaFeriado>(qry, typeof(DiaFeriado));
        //    }
        //}

        //[Serializable()]
        //public abstract class EntityBase
        //{
        //    protected EntityBase() { }

        //    protected static readonly String DateFormat = "yyyy-MM-dd";
        //    protected static readonly String DateTimeFormat = "yyyy-MM-dd HH:mm:ss";

        //    protected static string _connString = System.Configuration.ConfigurationManager.ConnectionStrings["ConnString"].ConnectionString;

        //    protected void Salvar(IPersisteableEntity entity)
        //    {
        //        PersistenceManager pm = new PersistenceManager();
        //        pm.Save(entity);
        //        pm = null;
        //    }

        //    public static DateTime ToDateTime(Object param)
        //    {
        //        if (param == null || param == DBNull.Value || Convert.ToString(param).Trim() == "")
        //        {
        //            return DateTime.MinValue;
        //        }
        //        else
        //        {
        //            return Convert.ToDateTime(param, new System.Globalization.CultureInfo("pt-Br"));
        //        }
        //    }

        //    public static String CToString(Object param)
        //    {
        //        if (param == null || param == DBNull.Value)
        //            return String.Empty;
        //        else
        //            return Convert.ToString(param);
        //    }

        //    public static Decimal CToDecimal(Object param)
        //    {
        //        if (param == null || param == DBNull.Value)
        //            return Decimal.Zero;
        //        else
        //            return Convert.ToDecimal(param, new System.Globalization.CultureInfo("pt-Br"));
        //    }

        //    protected void Remover(IPersisteableEntity entity)
        //    {
        //        PersistenceManager pm = new PersistenceManager();
        //        pm.Remove(entity);
        //        pm = null;
        //    }

        //    protected void Carregar(IPersisteableEntity entity)
        //    {
        //        PersistenceManager pm = new PersistenceManager();
        //        pm.Load(entity);
        //        pm = null;
        //    }

        //    protected String FormataTelefone(String fone)
        //    {
        //        if (String.IsNullOrEmpty(fone)) { return fone; }

        //        fone = fone.Replace("(", "").Replace(")", "").Replace(" ", ""); ;

        //        try
        //        {
        //            if (fone.Length == 10)
        //            {
        //                return String.Format("{0:(##) ####-####}", Convert.ToDouble(fone));
        //            }
        //            else if (fone.Length == 8)
        //            {
        //                return String.Format("{0: ####-####}", Convert.ToDouble(fone));
        //            }
        //            else
        //                return fone;
        //        }
        //        catch
        //        {
        //            return String.Empty;
        //        }
        //    }

        //    protected String ToLower(String param)
        //    {
        //        if (param == null)
        //            return null;
        //        else
        //            return param.ToLower();
        //    }

        //    public static String GeraNumeroDeContrato(Int32 numero, Int32 qtdZerosEsquerda, String letra)
        //    {
        //        String _numero = Convert.ToString(numero);

        //        if (qtdZerosEsquerda > 0)
        //        {
        //            String mascara = new String('0', qtdZerosEsquerda);
        //            _numero = String.Format("{0:" + mascara + "}", numero);
        //        }

        //        if (!String.IsNullOrEmpty(letra))
        //            _numero = letra + _numero;

        //        return _numero;
        //    }

        //    public static String PrimeiraPosicaoELetra(String param)
        //    {
        //        if (String.IsNullOrEmpty(param)) { return ""; }

        //        String pos1 = param.Substring(0, 1);

        //        if (pos1 != "0" && pos1 != "1" && pos1 != "2" && pos1 != "3" && pos1 != "4" &&
        //            pos1 != "5" && pos1 != "6" && pos1 != "7" && pos1 != "8" && pos1 != "9")
        //        {
        //            return param.Substring(0, 1);
        //        }
        //        else
        //        {
        //            return "";
        //        }
        //    }

        //    /// <summary>
        //    /// Método para Retirar a acentuação de um texto.
        //    /// </summary>
        //    /// <param name="Texto">Texto a ser modificado.</param>
        //    /// <returns>Texto sem acentuação.</returns>
        //    public static String RetiraAcentos(String Texto)
        //    {
        //        if (String.IsNullOrEmpty(Texto)) { return Texto; }
        //        String comAcentos = "ÄÅÁÂÀÃäáâàãÉÊËÈéêëèÍÎÏÌíîïìÖÓÔÒÕöóôòõÜÚÛüúûùÇç";
        //        String semAcentos = "AAAAAAaaaaaEEEEeeeeIIIIiiiiOOOOOoooooUUUuuuuCc";

        //        for (int i = 0; i < comAcentos.Length; i++)
        //            Texto = Texto.Replace(comAcentos[i].ToString(), semAcentos[i].ToString());

        //        return Texto.Replace("'", "");
        //    }

        //    #region AppendPreparedField

        //    /// <summary>
        //    /// Inclui o Valor de um Campo de acordo com o seu tamanho. 
        //    /// </summary>
        //    /// <param name="SB">StringBuilder com as informações.</param>
        //    /// <param name="Value">Valor a ser Incluído.</param>
        //    /// <param name="ValueLength">Tamanho máximo do Valor a ser Incluído.</param>
        //    /// <returns>True se conseguiu incluir e False se não conseguir incluir.</returns>
        //    internal static Boolean AppendPreparedField(ref StringBuilder SB, Object Value, Int32 ValueLength)
        //    {
        //        if (SB != null && Value != null)
        //        {
        //            Value = EntityBase.RetiraAcentos(Value.ToString());

        //            if (Value.ToString().Length > ValueLength)
        //                SB.Append(Value.ToString().Substring(0, ValueLength));
        //            else
        //                SB.Append(Value.ToString().PadRight(ValueLength, ' '));

        //            return true;
        //        }

        //        return false;
        //    }

        //    #endregion

        //    internal static String Join(IList<String> list, String separator)
        //    {
        //        if (list == null) { return null; }

        //        StringBuilder sb = new StringBuilder();
        //        foreach (String item in list)
        //        {
        //            if (sb.Length > 0) { sb.Append(separator); }
        //            sb.Append(item);
        //        }
        //        return sb.ToString();
        //    }
        //}

        //[DBTable("plano")]
        //public class Plano : EntityBase, IPersisteableEntity
        //{
        //    public Plano() { _ativo = true; }
        //    public Plano(Object id) : this() { _id = id; }

        //    #region Campos

        //    Object _id;
        //    Object _contratoId;
        //    Object _tabelaValorAtualId;
        //    String _descricao;
        //    String _codigo;
        //    String _subplano;
        //    DateTime _inicioColetivo;
        //    String _codigoParticular;
        //    String _subplanoParticular;
        //    DateTime _inicioParticular;
        //    String _caracteristicas;
        //    Boolean _ativo;
        //    Boolean _quartoParticular;
        //    Boolean _quartoComum;
        //    String _ansComum;
        //    String _ansParticular;

        //    #endregion

        //    #region Propriedades

        //    [DBFieldInfo("plano_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("plano_contratoId", FieldType.Single)]
        //    public Object ContratoID
        //    {
        //        get { return _contratoId; }
        //        set { _contratoId = value; }
        //    }

        //    [DBFieldInfo("plano_tabelaValorAtualId", FieldType.Single)]
        //    public Object TabelaValoreAtualID
        //    {
        //        get { return _tabelaValorAtualId; }
        //        set { _tabelaValorAtualId = value; }
        //    }

        //    [DBFieldInfo("plano_descricao", FieldType.Single)]
        //    public String Descricao
        //    {
        //        get { return _descricao; }
        //        set { _descricao = value; }
        //    }

        //    public String DescricaoPlanoSubPlano
        //    {
        //        get
        //        {
        //            String ret = "";

        //            if (!String.IsNullOrEmpty(_codigo)) { ret += "Cod " + _codigo; }
        //            if (!String.IsNullOrEmpty(_subplano))
        //            {
        //                if (ret.Length > 0) { ret += " "; }
        //                ret += "Sub " + _subplano;
        //            }

        //            if (!String.IsNullOrEmpty(_codigoParticular))
        //            {
        //                if (ret.Length > 0) { ret += " - "; }
        //                ret += "Cod " + _codigoParticular;
        //            }

        //            if (!String.IsNullOrEmpty(_subplanoParticular))
        //            {
        //                if (ret.Length > 0) { ret += " "; }
        //                ret += "Sub " + _subplanoParticular;
        //            }

        //            return String.Concat(_descricao, " (", ret, ")");
        //        }
        //    }

        //    [DBFieldInfo("plano_codigo", FieldType.Single)]
        //    public String Codigo
        //    {
        //        get { return _codigo; }
        //        set { _codigo = value; }
        //    }

        //    [DBFieldInfo("plano_subplano", FieldType.Single)]
        //    public String SubPlano
        //    {
        //        get { return _subplano; }
        //        set { _subplano = value; }
        //    }

        //    [DBFieldInfo("plano_inicioColetivo", FieldType.Single)]
        //    public DateTime InicioColetivo
        //    {
        //        get { return _inicioColetivo; }
        //        set { _inicioColetivo = value; }
        //    }

        //    [DBFieldInfo("plano_codigoParticular", FieldType.Single)]
        //    public String CodigoParticular
        //    {
        //        get { return _codigoParticular; }
        //        set { _codigoParticular = value; }
        //    }

        //    [DBFieldInfo("plano_subplanoParticular", FieldType.Single)]
        //    public String SubPlanoParticular
        //    {
        //        get { return _subplanoParticular; }
        //        set { _subplanoParticular = value; }
        //    }

        //    [DBFieldInfo("plano_inicioParticular", FieldType.Single)]
        //    public DateTime InicioParticular
        //    {
        //        get { return _inicioParticular; }
        //        set { _inicioParticular = value; }
        //    }

        //    [DBFieldInfo("plano_caracteristica", FieldType.Single)]
        //    public String Caracteristicas
        //    {
        //        get { return _caracteristicas; }
        //        set { _caracteristicas = value; }
        //    }

        //    [DBFieldInfo("plano_ativo", FieldType.Single)]
        //    public Boolean Ativo
        //    {
        //        get { return _ativo; }
        //        set { _ativo = value; }
        //    }

        //    [DBFieldInfo("plano_quartoComum", FieldType.Single)]
        //    public Boolean QuartoComum
        //    {
        //        get { return _quartoComum; }
        //        set { _quartoComum = value; }
        //    }

        //    [DBFieldInfo("plano_quartoParticular", FieldType.Single)]
        //    public Boolean QuartoParticular
        //    {
        //        get { return _quartoParticular; }
        //        set { _quartoParticular = value; }
        //    }

        //    [DBFieldInfo("plano_quartoComunAns", FieldType.Single)]
        //    public String AnsQuartoComum
        //    {
        //        get { return _ansComum; }
        //        set { _ansComum = value; }
        //    }

        //    [DBFieldInfo("plano_quartoParticularAns", FieldType.Single)]
        //    public String AnsQuartoParticular
        //    {
        //        get { return _ansParticular; }
        //        set { _ansParticular = value; }
        //    }

        //    public String strDatasInicio
        //    {
        //        get
        //        {
        //            String ret = "";

        //            if (_inicioColetivo != DateTime.MinValue)
        //                ret += "coletivo: " + _inicioColetivo.ToString("dd/MM/yyyy");

        //            if (_inicioParticular != DateTime.MinValue)
        //            {
        //                if (ret.Length > 0) { ret += " e "; }

        //                ret += "particular: " + _inicioParticular.ToString("dd/MM/yyyy");
        //            }

        //            return ret;
        //        }
        //    }
        //    #endregion

        //    public TabelaValor TabelaValor
        //    {
        //        get
        //        {
        //            throw new System.NotImplementedException();
        //        }
        //        set
        //        {
        //        }
        //    }

        //    #region persistence methods

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }
        //    #endregion

        //    public static IList<Plano> CarregarPorContratoID(Object contratoID)
        //    {
        //        return Plano.CarregarPorContratoID(contratoID, false);
        //    }

        //    public static IList<Plano> CarregarPorContratoID(Object contratoID, Boolean apenasAtivos)
        //    {
        //        String query = "* FROM plano WHERE plano_contratoId=" + contratoID;
        //        if (apenasAtivos) { query += " AND plano_ativo=1"; }
        //        query += " ORDER BY plano_descricao";

        //        return LocatorHelper.Instance.ExecuteQuery<Plano>(query, typeof(Plano));
        //    }

        //    public static Object CarregarID(Object contratoAdmID, String codigo, String subPlano, PersistenceManager pm)
        //    {
        //        String qry = "SELECT plano_id FROM plano WHERE plano_contratoId=" + contratoAdmID + " AND (plano_codigo='" + codigo + "' OR plano_codigoParticular='" + codigo + "') AND (plano_subplano='" + subPlano + "' OR plano_subplanoParticular='" + subPlano + "')";

        //        return LocatorHelper.Instance.ExecuteScalar(qry, null, null, pm);
        //    }

        //    public static Plano Carregar(Object contratoAdmID, String codigo, String subPlano, PersistenceManager pm)
        //    {
        //        String qry = "SELECT * FROM plano WHERE plano_contratoId=" + contratoAdmID + " AND (plano_codigo='" + codigo + "' OR plano_codigoParticular='" + codigo + "') AND (plano_subplano='" + subPlano + "' OR plano_subplanoParticular='" + subPlano + "')";

        //        IList<Plano> list = LocatorHelper.Instance.ExecuteQuery<Plano>(qry, typeof(Plano), pm);
        //        if (list == null || list.Count == 0)
        //            return null;
        //        else
        //            return list[0];
        //    }

        //    public static IList<Plano> CarregarPorOperadoraID(Object operadoraId)
        //    {
        //        String query = "plano.* FROM plano INNER JOIN contratoadm ON plano_contratoId= contratoadm_id INNER JOIN operadora on operadora_id = contratoadm_operadoraId WHERE operadora_inativa=0 AND contratoadm_ativo=1 AND plano_ativo=1 AND operadora_id=" + operadoraId + " ORDER BY plano_descricao";

        //        return LocatorHelper.Instance.ExecuteQuery<Plano>(query, typeof(Plano));
        //    }

        //    public static IList<Plano> CarregaPlanosDaTabelaDeValor(Object tabelaDeValorId)
        //    {
        //        String qry = "DISTINCT(tabelavaloritem_planoId) as plano_id FROM tabela_valor_item WHERE tabelavaloritem_tabelaid=" + tabelaDeValorId;
        //        return LocatorHelper.Instance.ExecuteQuery<Plano>(qry, typeof(Plano));
        //    }

        //    public static Boolean Existe(Object contratoId, Object planoId, String planoDescricao, String qcCodigo, String qcSubPlano, String qpCodigo, String qpSubPlano)
        //    {
        //        String qry = "SELECT COUNT(*) FROM plano WHERE plano_descricao='" + planoDescricao + "' AND plano_contratoId=" + contratoId;

        //        #region TODO: parametrizar a frase sql

        //        if (!String.IsNullOrEmpty(qcCodigo))
        //        {
        //            qry += " AND plano_codigo='" + qcCodigo + "'";
        //        }
        //        if (!String.IsNullOrEmpty(qpSubPlano))
        //        {
        //            qry += " AND plano_subplano='" + qcSubPlano + "'";
        //        }
        //        if (!String.IsNullOrEmpty(qpCodigo))
        //        {
        //            qry += " AND plano_codigoParticular='" + qpCodigo + "'";
        //        }
        //        if (!String.IsNullOrEmpty(qpSubPlano))
        //        {
        //            qry += " AND plano_subplanoParticular='" + qpSubPlano + "'";
        //        }
        //        #endregion

        //        if (planoId != null)
        //        {
        //            qry += " AND plano_id <> " + planoId;
        //        }

        //        Object ret = LocatorHelper.Instance.ExecuteScalar(qry, null, null);
        //        if (ret == null || ret == DBNull.Value || Convert.ToInt32(ret) == 0)
        //            return false;
        //        else
        //            return true;
        //    }

        //    public static void AlterarStatus(Object PlanoID, Boolean ativo)
        //    {
        //        String command = "UPDATE plano SET plano_ativo=" + Convert.ToInt32(ativo) + " WHERE plano_id=" + PlanoID;
        //        NonQueryHelper.Instance.ExecuteNonQuery(command, null);
        //    }

        //    public static void SetaTabelaValorAutal(Object planoId, Object tabelaValorId, PersistenceManager pm)
        //    {
        //        String command = "UPDATE plano SET plano_tabelaValorAtualId=" + tabelaValorId + " WHERE plano_id=" + planoId;
        //        NonQueryHelper.Instance.ExecuteNonQuery(command, pm);
        //    }

        //    public void SetaTabelaValorAutal(Object tabelaValorId, PersistenceManager pm)
        //    {
        //        Plano.SetaTabelaValorAutal(this._id, tabelaValorId, pm);
        //    }
        //}

        //[DBTable("estipulante")]
        //public class Estipulante : EntityBase, IPersisteableEntity
        //{
        //    public enum eTipoTaxa : int
        //    {
        //        PorVida = 0,
        //        PorProposta
        //    }

        //    Object _id;
        //    String _descricao;
        //    String _textoBoleto;
        //    Boolean _ativo;

        //    #region propriedades

        //    [DBFieldInfo("estipulante_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("estipulante_descricao", FieldType.Single)]
        //    public String Descricao
        //    {
        //        get { return _descricao; }
        //        set { _descricao = value; }
        //    }

        //    [DBFieldInfo("estipulante_ativo", FieldType.Single)]
        //    public Boolean Ativo
        //    {
        //        get { return _ativo; }
        //        set { _ativo = value; }
        //    }

        //    [DBFieldInfo("estipulante_textoBoleto", FieldType.Single)]
        //    public String TextoBoleto
        //    {
        //        get { return _textoBoleto; }
        //        set { _textoBoleto = value; }
        //    }

        //    #endregion

        //    public Estipulante() { _ativo = true; }
        //    public Estipulante(Object id) : this() { _id = id; }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        String comm = "DELETE FROM estipulante_taxa WHERE estipulantetaxa_estipulanteId=" + this.ID;
        //        NonQueryHelper.Instance.ExecuteNonQuery(comm, null);
        //        base.Remover(this);

        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static IList<Estipulante> Carregar(Boolean apenasAtivos)
        //    {
        //        String query = "* FROM estipulante";
        //        if (apenasAtivos) { query += " WHERE estipulante_ativo=1"; }
        //        query += " ORDER BY estipulante_descricao";

        //        return LocatorHelper.Instance.ExecuteQuery<Estipulante>(query, typeof(Estipulante));
        //    }

        //    public static Boolean Duplicado(Object estipulanteId, String descricao)
        //    {
        //        String qry = "SELECT DISTINCT(estipulante_id) FROM estipulante WHERE estipulante_descricao=@descricao";

        //        String[] pNames = new String[] { "@descricao" };
        //        String[] pValues = new String[] { descricao };

        //        if (estipulanteId != null)
        //        {
        //            qry += " AND estipulante_id <> " + estipulanteId;
        //        }

        //        Object returned = LocatorHelper.Instance.ExecuteScalar(qry, pNames, pValues);

        //        if (returned == null || returned == DBNull.Value)
        //            return false;
        //        else
        //            return true;
        //    }

        //    public static Object CarregaID(String descricao, PersistenceManager pm)
        //    {
        //        String[] paramNm = new String[] { "@descricao" };
        //        String[] paramVl = new String[] { descricao };
        //        return LocatorHelper.Instance.ExecuteScalar("SELECT estipulante_id FROM estipulante WHERE estipulante_descricao=@descricao", paramNm, paramVl, pm);
        //    }
        //}

        //[DBTable("estipulante_taxa")]
        //public class EstipulanteTaxa : EntityBase, IPersisteableEntity
        //{
        //    public enum eTipoTaxa : int
        //    {
        //        PorVida = 0,
        //        PorProposta
        //    }

        //    Object _id;
        //    Object _estipulanteId;
        //    Decimal _valor;
        //    Int32 _tipoTaxa;
        //    DateTime _vigencia;

        //    #region propriedades

        //    [DBFieldInfo("estipulantetaxa_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("estipulantetaxa_estipulanteId", FieldType.Single)]
        //    public Object EstipulanteID
        //    {
        //        get { return _estipulanteId; }
        //        set { _estipulanteId = value; }
        //    }

        //    [DBFieldInfo("estipulantetaxa_valor", FieldType.Single)]
        //    public Decimal Valor
        //    {
        //        get { return _valor; }
        //        set { _valor = value; }
        //    }

        //    [DBFieldInfo("estipulantetaxa_tipo", FieldType.Single)]
        //    public Int32 TipoTaxa
        //    {
        //        get { return _tipoTaxa; }
        //        set { _tipoTaxa = value; }
        //    }

        //    public String strTipoTaxa
        //    {
        //        get
        //        {
        //            if (_tipoTaxa == (Int32)eTipoTaxa.PorProposta)
        //                return "POR PROPOSTA";
        //            else
        //                return "POR VIDA";
        //        }
        //    }

        //    [DBFieldInfo("estipulantetaxa_vigencia", FieldType.Single)]
        //    public DateTime Vigencia
        //    {
        //        get { return _vigencia; }
        //        set { _vigencia = value; }
        //    }

        //    #endregion

        //    public EstipulanteTaxa() { _valor = 0; TipoTaxa = (Int32)eTipoTaxa.PorProposta; }
        //    public EstipulanteTaxa(Object id) : this() { _id = id; }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static IList<EstipulanteTaxa> CarregarTodas(Object estipulanteId)
        //    {
        //        String query = "* FROM estipulante_taxa WHERE estipulantetaxa_estipulanteId=" + estipulanteId + " ORDER BY estipulantetaxa_vigencia DESC";

        //        return LocatorHelper.Instance.ExecuteQuery<EstipulanteTaxa>(query, typeof(EstipulanteTaxa));
        //    }

        //    public static EstipulanteTaxa CarregarVigente(Object estipulanteId)
        //    {
        //        return CarregarVigente(estipulanteId, null);
        //    }
        //    public static EstipulanteTaxa CarregarVigente(Object estipulanteId, PersistenceManager pm)
        //    {
        //        String query = "TOP 1 * FROM estipulante_taxa WHERE estipulantetaxa_estipulanteId=" + estipulanteId + " ORDER BY estipulantetaxa_vigencia DESC";
        //        IList<EstipulanteTaxa> lista = LocatorHelper.Instance.ExecuteQuery<EstipulanteTaxa>(query, typeof(EstipulanteTaxa), pm);

        //        if (lista == null)
        //            return null;
        //        else
        //            return lista[0];
        //    }

        //    public static EstipulanteTaxa CarregarVigente(Object estipulanteId, DateTime dataRef)
        //    {
        //        return CarregarVigente(estipulanteId, dataRef, null);
        //    }
        //    public static EstipulanteTaxa CarregarVigente(Object estipulanteId, DateTime dataRef, PersistenceManager pm)
        //    {
        //        String query = String.Concat(
        //            "TOP 1 * FROM estipulante_taxa WHERE estipulantetaxa_estipulanteId=",
        //            estipulanteId,
        //            " and estipulantetaxa_vigencia <= '", dataRef.ToString("yyyy-MM-dd 23:59:59.995"), "'",
        //            " ORDER BY estipulantetaxa_vigencia DESC");

        //        IList<EstipulanteTaxa> lista = LocatorHelper.Instance.ExecuteQuery<EstipulanteTaxa>(query, typeof(EstipulanteTaxa), pm);

        //        if (lista == null)
        //            return null;
        //        else
        //            return lista[0];
        //    }
        //}

        //[Serializable()]
        //[DBTable("endereco")]
        //public class Endereco : EntityBase, IPersisteableEntity
        //{
        //    public enum TipoDono : int
        //    {
        //        Beneficiario,
        //        CorretorOuSupervisor,
        //        Operadora,
        //        Filial,
        //        Produtor
        //    }

        //    public enum TipoEndereco : int
        //    {
        //        Residencial,
        //        Comercial
        //    }

        //    Object _id;
        //    Object _donoId;
        //    Int32 _donoTipo;
        //    String _logradouro;
        //    String _numero;
        //    String _complemento;
        //    String _bairro;
        //    String _cidade;
        //    String _uf;
        //    String _cep;
        //    Int32 _tipo;

        //    #region Propriedades

        //    [DBFieldInfo("endereco_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("endereco_donoId", FieldType.Single)]
        //    public Object DonoId
        //    {
        //        get { return _donoId; }
        //        set { _donoId = value; }
        //    }

        //    [DBFieldInfo("endereco_donoTipo", FieldType.Single)]
        //    public Int32 DonoTipo
        //    {
        //        get { return _donoTipo; }
        //        set { _donoTipo = value; }
        //    }

        //    [DBFieldInfo("endereco_logradouro", FieldType.Single)]
        //    public String Logradouro
        //    {
        //        get { return _logradouro; }
        //        set { _logradouro = value; }
        //    }

        //    [DBFieldInfo("endereco_numero", FieldType.Single)]
        //    public String Numero
        //    {
        //        get { return _numero; }
        //        set { _numero = value; }
        //    }

        //    [DBFieldInfo("endereco_complemento", FieldType.Single)]
        //    public String Complemento
        //    {
        //        get { return _complemento; }
        //        set { _complemento = value; }
        //    }

        //    [DBFieldInfo("endereco_bairro", FieldType.Single)]
        //    public String Bairro
        //    {
        //        get { return _bairro; }
        //        set { _bairro = value; }
        //    }

        //    [DBFieldInfo("endereco_cidade", FieldType.Single)]
        //    public String Cidade
        //    {
        //        get { return _cidade; }
        //        set { _cidade = value; }
        //    }

        //    [DBFieldInfo("endereco_uf", FieldType.Single)]
        //    public String UF
        //    {
        //        get { return _uf; }
        //        set { _uf = value; }
        //    }

        //    [DBFieldInfo("endereco_cep", FieldType.Single)]
        //    public String CEP
        //    {
        //        get { return _cep; }
        //        set { _cep = value; }
        //    }

        //    [DBFieldInfo("endereco_tipo", FieldType.Single)]
        //    public Int32 Tipo
        //    {
        //        get { return _tipo; }
        //        set { _tipo = value; }
        //    }

        //    #endregion

        //    public Endereco(Object id) : this() { _id = id; }
        //    public Endereco() { _tipo = (Int32)TipoEndereco.Residencial; }

        //    public void Salvar()
        //    {
        //        if (_cep != null) { _cep = _cep.Replace("-", ""); }
        //        base.Salvar(this);
        //    }

        //    /// <summary>
        //    /// Importar Endereço.
        //    /// </summary>
        //    public void Importar()
        //    {
        //        this.Importar(null);
        //    }

        //    /// <summary>
        //    /// Importar Endereço. Se duplicado por Completo não Importa.
        //    /// </summary>
        //    /// <param name="PM">Instância do Persistence Manager.</param>
        //    public void Importar(PersistenceManager PM)
        //    {
        //        if (PM == null) PM = new PersistenceManager();

        //        #region Parameters

        //        String[] Params = new String[10];
        //        String[] Values = new String[10];

        //        Params[0] = "@donoId";
        //        Params[1] = "@donoTipo";
        //        Params[2] = "@logradouro";
        //        Params[3] = "@numero";
        //        Params[4] = "@complemento";
        //        Params[5] = "@bairro";
        //        Params[6] = "@cidade";
        //        Params[7] = "@uf";
        //        Params[8] = "@cep";
        //        Params[9] = "@tipo";

        //        Values[0] = (this._donoId != null && this._donoId.ToString().Length > 0) ? this._donoId.ToString() : String.Empty;
        //        Values[1] = (this._donoTipo > -1) ? this._donoTipo.ToString() : "0";
        //        Values[2] = (!String.IsNullOrEmpty(this._logradouro)) ? this._logradouro : String.Empty;
        //        Values[3] = (!String.IsNullOrEmpty(this._numero)) ? this._numero : String.Empty;
        //        Values[4] = (!String.IsNullOrEmpty(this._complemento)) ? this._complemento : String.Empty;
        //        Values[5] = (!String.IsNullOrEmpty(this._bairro)) ? this._bairro : String.Empty;
        //        Values[6] = (!String.IsNullOrEmpty(this._cidade)) ? this._cidade : String.Empty;
        //        Values[7] = (!String.IsNullOrEmpty(this._uf)) ? this._uf : String.Empty;
        //        Values[8] = (!String.IsNullOrEmpty(this._cep)) ? this._cep : String.Empty;
        //        Values[9] = (this._tipo > -1) ? this._tipo.ToString() : "0";

        //        #endregion

        //        String strSQL = String.Concat("SELECT ",
        //                                      "      endereco_id ",
        //                                      "FROM endereco ",
        //                                      "WHERE endereco_donoId = @donoId AND endereco_donoTipo = @donoTipo AND endereco_logradouro = @logradouro AND endereco_numero = @numero AND ",
        //                                      "      endereco_complemento = @complemento AND endereco_bairro = @bairro AND endereco_cidade = @cidade AND ",
        //                                      "      endereco_uf = @uf AND endereco_cep = @cep AND endereco_tipo = @tipo");
        //        try
        //        {
        //            IList<Endereco> lstEndereco = LocatorHelper.Instance.ExecuteParametrizedQuery<Endereco>(strSQL, Params, Values, typeof(Endereco), PM);

        //            if (lstEndereco == null || lstEndereco.Count == 0)
        //                PM.Save(this);
        //        }
        //        catch (Exception) { throw; }
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }

        //    public void Carregar(PersistenceManager pm)
        //    {
        //        pm.Load(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public static IList<Endereco> CarregarPorDono(Object donoID, Endereco.TipoDono tipoDono)
        //    {
        //        return CarregarPorDono(donoID, tipoDono, null);
        //    }

        //    public static IList<Endereco> CarregarPorDono(Object donoID, Endereco.TipoDono tipoDono, PersistenceManager pm)
        //    {
        //        String query = "* FROM endereco WHERE endereco_donoid=" + donoID + " AND endereco_donotipo=" + Convert.ToInt32(tipoDono);

        //        IList<Endereco> lista = LocatorHelper.Instance.ExecuteQuery<Endereco>(query, typeof(Endereco), pm);

        //        return lista;
        //    }

        //    public static IList<Endereco> Carregar(ArrayList donoIDs)
        //    {
        //        String query = "* FROM endereco WHERE endereco_id IN (";

        //        String inClausule = "";

        //        foreach (Object id in donoIDs)
        //        {
        //            if (inClausule.Length > 0) { inClausule += ","; }
        //            inClausule += id;
        //        }

        //        query += inClausule + ")";

        //        IList<Endereco> lista = LocatorHelper.Instance.ExecuteQuery<Endereco>(query, typeof(Endereco));

        //        return lista;
        //    }
        //}

        //[DBTableAttribute("agente")]
        //public class Agente : EntityBase, IPersisteableEntity
        //{
        //    Object _id;

        //    [DBFieldInfo("usuario_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }


        //    public Endereco Endereco
        //    {
        //        get
        //        {
        //            throw new System.NotImplementedException();
        //        }
        //        set
        //        {
        //        }
        //    }

        //    #region métodos EntityBase

        //    /// <summary>
        //    /// Persiste a entidade
        //    /// </summary>
        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    /// <summary>
        //    /// Remove a entidade
        //    /// </summary>
        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    /// <summary>
        //    /// Carrega a entidade
        //    /// </summary>
        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion
        //}

        //[DBTable("tabela_reajuste")]
        //public class TabelaReajuste : EntityBase, IPersisteableEntity
        //{
        //    Object _id;
        //    Object _contratoAdmId;
        //    String _descricao;
        //    DateTime _data;
        //    Object _corrente;

        //    #region propriedades

        //    [DBFieldInfo("tabelareajuste_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("tabelareajuste_contratoid", FieldType.Single)]
        //    public Object ContratoID
        //    {
        //        get { return _contratoAdmId; }
        //        set { _contratoAdmId = value; }
        //    }

        //    [DBFieldInfo("tabelareajuste_descricao", FieldType.Single)]
        //    public String Descricao
        //    {
        //        get { return _descricao; }
        //        set { _descricao = value; }
        //    }

        //    [DBFieldInfo("tabelareajuste_data", FieldType.Single)]
        //    public DateTime Data
        //    {
        //        get { return _data; }
        //        set { _data = value; }
        //    }

        //    /// <summary>
        //    /// ID da tabela de reajuste atualmente ativa no contrato administrativo
        //    /// </summary>
        //    [Joinned("contratoadm_tabelaReajusteAtualId")]
        //    public Object Corrente
        //    {
        //        get { return _corrente; }
        //        set { _corrente = value; }
        //    }

        //    #endregion

        //    public TabelaReajusteItem TabelaReajusteItem
        //    {
        //        get
        //        {
        //            throw new System.NotImplementedException();
        //        }
        //        set
        //        {
        //        }
        //    }

        //    public TabelaReajuste() { }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static IList<TabelaReajuste> CarregarTodas(Object contratoId)
        //    {
        //        String query = "tabela_reajuste.*, contratoadm_tabelaReajusteAtualId FROM tabela_reajuste LEFT JOIN contratoADM ON tabelareajuste_id=contratoadm_tabelaReajusteAtualId WHERE tabelaReajuste_contratoId=" + contratoId + " ORDER BY contratoadm_tabelaReajusteAtualId DESC, tabelareajuste_data DESC";
        //        return LocatorHelper.Instance.ExecuteQuery<TabelaReajuste>(query, typeof(TabelaReajuste));
        //    }
        //}

        //[Serializable()]
        //[DBTable("tabela_reajuste_item")]
        //public class TabelaReajusteItem : EntityBase, IPersisteableEntity
        //{
        //    Object _id;
        //    Object _tabelaId;
        //    int _idadeInicio;
        //    Decimal _percentualReajuste;

        //    #region propriedades

        //    [DBFieldInfo("tabelareajusteitem_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("tabelareajusteitem_tabelaid", FieldType.Single)]
        //    public Object TabelaID
        //    {
        //        get { return _tabelaId; }
        //        set { _tabelaId = value; }
        //    }

        //    [DBFieldInfo("tabelareajusteitem_idadeInicio", FieldType.Single)]
        //    public int IdadeInicio
        //    {
        //        get { return _idadeInicio; }
        //        set { _idadeInicio = value; }
        //    }

        //    //[DBFieldInfo("tabelareajusteitem_tipoAcomodacao", FieldType.Single)]
        //    //public int TipoAcomodacao
        //    //{
        //    //    get { return _tipoAcomodacao; }
        //    //    set { _tipoAcomodacao= value; }
        //    //}

        //    [DBFieldInfo("tabelareajusteitem_reajuste", FieldType.Single)]
        //    public Decimal PercentualReajuste
        //    {
        //        get { return _percentualReajuste; }
        //        set { _percentualReajuste = value; }
        //    }

        //    #endregion

        //    public TabelaReajusteItem() { }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static IList<TabelaReajusteItem> CarregarPorTabela(Object TabelaID)
        //    {
        //        String query = "* FROM tabela_reajuste_item WHERE tabelareajusteitem_tabelaid=" + TabelaID + " ORDER BY tabelareajusteitem_idadeInicio";
        //        return LocatorHelper.Instance.ExecuteQuery<TabelaReajusteItem>(query, typeof(TabelaReajusteItem));
        //    }
        //}

        //[Serializable()]
        //[DBTable("declaracao_saude_item")]
        //public class ItemDeclaracaoSaude : EntityBase, IPersisteableEntity
        //{
        //    #region fields

        //    Object _id;
        //    Object _operadoraid;
        //    String _codigo;
        //    int _ordem;
        //    String _texto;
        //    Boolean _ativo;

        //    #endregion

        //    #region propriedades

        //    [DBFieldInfo("itemdeclaracaosaude_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("itemdeclaracaosaude_operadoraid", FieldType.Single)]
        //    public Object OperadoraID
        //    {
        //        get { return _operadoraid; }
        //        set { _operadoraid = value; }
        //    }

        //    [DBFieldInfo("itemdeclaracaosaude_ordem", FieldType.Single)]
        //    public int Ordem
        //    {
        //        get { return _ordem; }
        //        set { _ordem = value; }
        //    }

        //    [DBFieldInfo("itemdeclaracaosaude_codigo", FieldType.Single)]
        //    public String Codigo
        //    {
        //        get { return _codigo; }
        //        set { _codigo = value; }
        //    }

        //    [DBFieldInfo("itemdeclaracaosaude_texto", FieldType.Single)]
        //    public String Texto
        //    {
        //        get { return _texto; }
        //        set { _texto = value; }
        //    }

        //    [DBFieldInfo("itemdeclaracaosaude_ativo", FieldType.Single)]
        //    public Boolean Ativo
        //    {
        //        get { return _ativo; }
        //        set { _ativo = value; }
        //    }

        //    public String Resumo
        //    {
        //        get
        //        {
        //            String retorno = "";

        //            retorno = this._ordem.ToString() + " - ";

        //            if (this._texto.Length > 88)
        //                retorno += this._texto.Substring(0, 85) + "...";
        //            else
        //                retorno += this._texto;

        //            return retorno;
        //        }
        //    }

        //    #endregion

        //    public ItemDeclaracaoSaude() { _ativo = true; }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static IList<ItemDeclaracaoSaude> Carregar(Object operadoraID)
        //    {
        //        String query = "* FROM declaracao_saude_item WHERE itemdeclaracaosaude_operadoraid=" + operadoraID + " ORDER BY itemdeclaracaosaude_ordem";

        //        return LocatorHelper.Instance.ExecuteQuery
        //            <ItemDeclaracaoSaude>(query, typeof(ItemDeclaracaoSaude));
        //    }

        //    public static ItemDeclaracaoSaude Carregar(Object operadoraId, String codigo, PersistenceManager pm)
        //    {
        //        String query = String.Concat(
        //            "TOP 1 itemdeclaracaosaude_id ",
        //            " FROM declaracao_saude_item ",
        //            " WHERE itemdeclaracaosaude_operadoraid=", operadoraId,
        //            " AND itemdeclaracaosaude_codigo='", codigo, "'");

        //        IList<ItemDeclaracaoSaude> list = LocatorHelper.Instance.ExecuteQuery
        //            <ItemDeclaracaoSaude>(query, typeof(ItemDeclaracaoSaude), pm);

        //        if (list == null || list.Count == 0)
        //            return null;
        //        else
        //            return list[0];
        //    }

        //    public static Boolean Duplicado(ItemDeclaracaoSaude item)
        //    {
        //        String qry = String.Concat("SELECT DISTINCT(itemdeclaracaosaude_id) ",
        //            "   FROM declaracao_saude_item ",
        //            "   WHERE ",
        //            "       itemdeclaracaosaude_operadoraid=", item.OperadoraID, " AND (",
        //            "       (itemdeclaracaosaude_codigo=@codigo AND itemdeclaracaosaude_ordem=@ordem) OR (itemdeclaracaosaude_texto=@texto))");

        //        if (item.ID != null)
        //        {
        //            qry += " AND itemdeclaracaosaude_id <> " + item.ID;
        //        }

        //        String[] pNames = new String[] { "@codigo", "@ordem", "@texto" };
        //        String[] pValues = new String[] { item.Codigo, item.Ordem.ToString(), item.Texto };

        //        Object returned = LocatorHelper.Instance.ExecuteScalar(qry, pNames, pValues);

        //        if (returned == null || returned == DBNull.Value)
        //            return false;
        //        else
        //            return true;
        //    }
        //}

        ///// <summary>
        ///// Cabeçalho da regra de declaração de saúde.
        ///// </summary>
        //[Serializable()]
        //[DBTable("declaracao_saude_regra")]
        //public class RegraDeclaracaoSaude : EntityBase, IPersisteableEntity
        //{
        //    #region fields

        //    Object _id;
        //    Object _operadoraId;
        //    String _descricao;
        //    String _operadorIdade;
        //    int _idade;
        //    int _sexoId;

        //    #endregion

        //    #region propriedades

        //    [DBFieldInfo("declaracaosauderegra_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("declaracaosauderegra_operadoraId", FieldType.Single)]
        //    public Object OperadoraID
        //    {
        //        get { return _operadoraId; }
        //        set { _operadoraId = value; }
        //    }

        //    [DBFieldInfo("declaracaosauderegra_descricao", FieldType.Single)]
        //    public String Descricao
        //    {
        //        get { return _descricao; }
        //        set { _descricao = value; }
        //    }

        //    [DBFieldInfo("declaracaosauderegra_operadorIdade", FieldType.Single)]
        //    public String OperadorIdade
        //    {
        //        get { return _operadorIdade; }
        //        set { _operadorIdade = value; }
        //    }

        //    [DBFieldInfo("declaracaosauderegra_idade", FieldType.Single)]
        //    public int Idade
        //    {
        //        get { return _idade; }
        //        set { _idade = value; }
        //    }

        //    [DBFieldInfo("declaracaosauderegra_sexoId", FieldType.Single)]
        //    public int SexoID
        //    {
        //        get { return _sexoId; }
        //        set { _sexoId = value; }
        //    }

        //    #endregion

        //    public ItemRegraDeclaracaoSaude ItemRegraDeclaracaoSaude
        //    {
        //        get
        //        {
        //            throw new System.NotImplementedException();
        //        }
        //        set
        //        {
        //        }
        //    }

        //    public RegraDeclaracaoSaude() { _idade = -1; _sexoId = -1; }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        PersistenceManager pm = new PersistenceManager();
        //        pm.TransactionContext();

        //        try
        //        {
        //            NonQueryHelper.Instance.ExecuteNonQuery("DELETE FROM declaracao_saude_regra_item WHERE itemdeclaracaoregra_regraDeclaracaoId=" + this._id, pm);
        //            pm.Remove(this);
        //            pm.Commit();
        //        }
        //        catch (Exception ex)
        //        {
        //            pm.Rollback();
        //            throw ex;
        //        }
        //        finally
        //        {
        //            pm = null;
        //        }
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static IList<RegraDeclaracaoSaude> Carregar(Object operadoraID)
        //    {
        //        String query = "* FROM declaracao_saude_regra WHERE declaracaosauderegra_operadoraId=" + operadoraID + " ORDER BY declaracaosauderegra_descricao";

        //        return LocatorHelper.Instance.ExecuteQuery
        //            <RegraDeclaracaoSaude>(query, typeof(RegraDeclaracaoSaude));
        //    }

        //    public Boolean ValidaIdade(int idade)
        //    {
        //        if (String.IsNullOrEmpty(this._operadorIdade) || _idade == -1) { return true; }

        //        switch (_operadorIdade)
        //        {
        //            case "+":
        //                {
        //                    return !(idade > this._idade);
        //                }
        //            case "+=":
        //                {
        //                    return !(idade >= this._idade);
        //                }
        //            case "=":
        //                {
        //                    return !(idade == this._idade);
        //                }
        //            case "-=":
        //                {
        //                    return !(idade <= this._idade);
        //                }
        //            case "-":
        //                {
        //                    return !(idade < this._idade);
        //                }
        //        }

        //        return true;
        //    }

        //    public Boolean ValidaSexo(int sexo)
        //    {
        //        if (_sexoId == -1) { return true; }

        //        return sexo != _sexoId;
        //    }

        //    public Boolean Valida(int idade, int sexo)
        //    {
        //        Boolean idadeOK = true;
        //        Boolean sexoOK = true;
        //        sexoOK = this.ValidaSexo(sexo);
        //        idadeOK = this.ValidaIdade(idade);

        //        if (this._idade != -1 && this._sexoId != -1) //deve validar os dois
        //            return idadeOK || sexoOK;
        //        else if (this._sexoId != -1)                 //deve validar apenas o sexo
        //            return sexoOK;
        //        else                                         //deva validar apenas a idade
        //            return idadeOK;
        //    }
        //}

        ///// <summary>
        ///// Itens da REGRA da declaração de saúde
        ///// </summary>
        //[Serializable()]
        //[DBTable("declaracao_saude_regra_item")]
        //public class ItemRegraDeclaracaoSaude : EntityBase, IPersisteableEntity
        //{
        //    #region fields

        //    Object _id;
        //    Object _itemDeclaracaoId;
        //    Object _regraDeclaracaoId;

        //    #endregion

        //    #region propriedades

        //    [DBFieldInfo("itemdeclaracaoregra_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    /// <summary>
        //    /// ID da regra à qual pertence este item de regra.
        //    /// </summary>
        //    [DBFieldInfo("itemdeclaracaoregra_regraDeclaracaoId", FieldType.Single)]
        //    public Object RegraDeclaracaoID
        //    {
        //        get { return _regraDeclaracaoId; }
        //        set { _regraDeclaracaoId = value; }
        //    }

        //    /// <summary>
        //    /// ID do item da ficha de declaração de saúde.
        //    /// </summary>
        //    [DBFieldInfo("itemdeclaracaoregra_itemDeclaracaoId", FieldType.Single)]
        //    public Object ItemDeclaracaoID
        //    {
        //        get { return _itemDeclaracaoId; }
        //        set { _itemDeclaracaoId = value; }
        //    }

        //    #endregion

        //    public ItemRegraDeclaracaoSaude() { }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static IList<ItemRegraDeclaracaoSaude> Carregar(Object regraId)
        //    {
        //        String query = "* FROM declaracao_saude_regra_item WHERE itemdeclaracaoregra_regraDeclaracaoId=" + regraId;

        //        return LocatorHelper.Instance.ExecuteQuery
        //            <ItemRegraDeclaracaoSaude>(query, typeof(ItemRegraDeclaracaoSaude));
        //    }

        //    public static ItemRegraDeclaracaoSaude Carregar(Object regraId, Object itemFichaId)
        //    {
        //        String query = "* FROM declaracao_saude_regra_item WHERE itemdeclaracaoregra_regraDeclaracaoId=" + regraId + " AND itemdeclaracaoregra_itemDeclaracaoId=" + itemFichaId;

        //        IList<ItemRegraDeclaracaoSaude> lista = LocatorHelper.Instance.ExecuteQuery
        //            <ItemRegraDeclaracaoSaude>(query, typeof(ItemRegraDeclaracaoSaude));

        //        if (lista == null)
        //            return null;
        //        else
        //            return lista[0];
        //    }
        //}

        ///// <summary>
        ///// Itens da declaração de saúde PREENCHIDA.
        ///// </summary>
        //[Serializable()]
        //[DBTable("declaracao_saude_item_instancia")]
        //public class ItemDeclaracaoSaudeINSTANCIA : EntityBase, IPersisteableEntity
        //{
        //    #region fields

        //    Object _id;
        //    Object _beneficiarioId;
        //    Boolean _sim;
        //    Object _itemDeclaracaoId; //ID do item da declaração de saúde.
        //    DateTime _data;
        //    String _descricao;

        //    String _cidInicial;
        //    String _cidFinal;
        //    Boolean _aprovadoPeloMedico;
        //    String _obsMedico;
        //    DateTime _dataAprovadoMedico;

        //    Boolean _aprovadoPeloDeptoTecnico;
        //    DateTime _dataAprovadoPeloDeptoTecnico;
        //    String _obsDeptoTecnico;

        //    String _itemDeclaracaoTexto; //Texto do item da declaração de saúde.
        //    String _itemDeclaracaoCodigo;

        //    #endregion

        //    #region propriedades

        //    [DBFieldInfo("itemdeclaracaosaudeinstancia_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("itemdeclaracaosaudeinstancia_beneficiarioId", FieldType.Single)]
        //    public Object BeneficiarioID
        //    {
        //        get { return _beneficiarioId; }
        //        set { _beneficiarioId = value; }
        //    }

        //    [DBFieldInfo("itemdeclaracaosaudeinstancia_sim", FieldType.Single)]
        //    public Boolean Sim
        //    {
        //        get { return _sim; }
        //        set { _sim = value; }
        //    }

        //    [DBFieldInfo("itemDeclaracaoSaudeInstancia_data", FieldType.Single)]
        //    public DateTime Data
        //    {
        //        get { return _data; }
        //        set { _data = value; }
        //    }

        //    public String strData
        //    {
        //        get
        //        {
        //            if (_data == DateTime.MinValue)
        //                return "";
        //            else
        //                return _data.ToString("dd/MM/yyyy");
        //        }
        //    }

        //    [DBFieldInfo("itemDeclaracaoSaudeInstancia_descricao", FieldType.Single)]
        //    public String Descricao
        //    {
        //        get { return _descricao; }
        //        set { _descricao = value; }
        //    }

        //    [DBFieldInfo("itemDeclaracaoSaudeInstancia_cidInicial", FieldType.Single)]
        //    public String CIDInicial
        //    {
        //        get { return _cidInicial; }
        //        set { _cidInicial = value; }
        //    }

        //    [DBFieldInfo("itemDeclaracaoSaudeInstancia_cidFinal", FieldType.Single)]
        //    public String CIDFinal
        //    {
        //        get { return _cidFinal; }
        //        set { _cidFinal = value; }
        //    }

        //    [DBFieldInfo("itemDeclaracaoSaudeInstancia_obs", FieldType.Single)]
        //    public String ObsMedico
        //    {
        //        get { return _obsMedico; }
        //        set { _obsMedico = value; }
        //    }

        //    [DBFieldInfo("itemDeclaracaoSaudeInstancia_aprovadoMedico", FieldType.Single)]
        //    public Boolean AprovadoPeloMedico
        //    {
        //        get { return _aprovadoPeloMedico; }
        //        set { _aprovadoPeloMedico = value; }
        //    }

        //    [DBFieldInfo("itemDeclaracaoSaudeInstancia_dataAprovadoMedico", FieldType.Single)]
        //    public DateTime DataAprovadoPeloMedico
        //    {
        //        get { return _dataAprovadoMedico; }
        //        set { _dataAprovadoMedico = value; }
        //    }

        //    [DBFieldInfo("itemDeclaracaoSaudeInstancia_obsDeptoTecnico", FieldType.Single)]
        //    public String ObsDeptoTecnico
        //    {
        //        get { return _obsDeptoTecnico; }
        //        set { _obsDeptoTecnico = value; }
        //    }

        //    [DBFieldInfo("itemDeclaracaoSaudeInstancia_parecerDeptoTecnico", FieldType.Single)]
        //    public Boolean AprovadoPeloDeptoTecnico
        //    {
        //        get { return _aprovadoPeloDeptoTecnico; }
        //        set { _aprovadoPeloDeptoTecnico = value; }
        //    }

        //    [DBFieldInfo("itemDeclaracaoSaudeInstancia_dataParecerDeptoTecnico", FieldType.Single)]
        //    public DateTime DataAprovadoPeloDeptoTecnico
        //    {
        //        get { return _dataAprovadoPeloDeptoTecnico; }
        //        set { _dataAprovadoPeloDeptoTecnico = value; }
        //    }

        //    [Joinned("itemdeclaracaosaude_id")]
        //    [DBFieldInfo("itemdeclaracaosaudeinstancia_itemdeclaracaoid", FieldType.Single)]
        //    public Object ItemDeclaracaoID
        //    {
        //        get { return _itemDeclaracaoId; }
        //        set { _itemDeclaracaoId = value; }
        //    }

        //    [Joinned("itemdeclaracaosaude_texto")]
        //    public String ItemDeclaracaoTexto
        //    {
        //        get { return _itemDeclaracaoTexto; }
        //        set { _itemDeclaracaoTexto = value; }
        //    }

        //    [Joinned("itemdeclaracaosaude_codigo")]
        //    public String ItemDeclaracaoCodigo
        //    {
        //        get { return _itemDeclaracaoCodigo; }
        //        set { _itemDeclaracaoCodigo = value; }
        //    }

        //    #endregion

        //    public ItemDeclaracaoSaudeINSTANCIA() { _sim = false; _data = DateTime.Now; _aprovadoPeloDeptoTecnico = false; _aprovadoPeloMedico = false; }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static IList<ItemDeclaracaoSaudeINSTANCIA> Carregar(Object operadoraId)
        //    {
        //        String query = String.Concat(
        //            "itemdeclaracaosaude_id, itemdeclaracaosaude_texto ",
        //            " FROM declaracao_saude_item ",
        //            " WHERE itemdeclaracaosaude_operadoraid=", operadoraId,
        //            " ORDER BY itemdeclaracaosaude_ordem");

        //        return LocatorHelper.Instance.ExecuteQuery
        //            <ItemDeclaracaoSaudeINSTANCIA>(query, typeof(ItemDeclaracaoSaudeINSTANCIA));
        //    }

        //    public static Object CarregarID(Object beneficiarioId, Object itemDeclaracaoSaudeId, PersistenceManager pm)
        //    {
        //        String qry = String.Concat("itemdeclaracaosaudeinstancia_id FROM declaracao_saude_item_instancia WHERE itemDeclaracaoSaudeInstancia_itemdeclaracaoid=", itemDeclaracaoSaudeId, " AND itemdeclaracaosaudeinstancia_beneficiarioId=", beneficiarioId);

        //        IList<ItemDeclaracaoSaudeINSTANCIA> list = LocatorHelper.Instance.ExecuteQuery<ItemDeclaracaoSaudeINSTANCIA>(qry, typeof(ItemDeclaracaoSaudeINSTANCIA), pm);

        //        if (list == null || list.Count == 0)
        //            return null;
        //        else
        //            return list[0].ID;
        //    }

        //    public static IList<ItemDeclaracaoSaudeINSTANCIA> Carregar(Object beneficiarioId, Object operadoraId)
        //    {
        //        return Carregar(beneficiarioId, operadoraId, null);
        //    }

        //    public static IList<ItemDeclaracaoSaudeINSTANCIA> Carregar(Object beneficiarioId, Object operadoraId, PersistenceManager pm)
        //    {
        //        String query = String.Concat(
        //            "itemdeclaracaosaude_id, itemdeclaracaosaude_texto,itemdeclaracaosaude_codigo,declaracao_saude_item_instancia.*",
        //            " FROM declaracao_saude_item ",
        //            "   LEFT JOIN declaracao_saude_item_instancia ON (itemDeclaracaoSaude_id=itemDeclaracaoSaudeInstancia_itemdeclaracaoid AND itemDeclaracaoSaudeInstancia_beneficiarioId=", beneficiarioId, ") ",
        //            " WHERE itemdeclaracaosaude_operadoraid=", operadoraId,
        //            " ORDER BY itemdeclaracaosaude_ordem asc,itemdeclaracaosaudeinstancia_sim desc");

        //        return LocatorHelper.Instance.ExecuteQuery
        //            <ItemDeclaracaoSaudeINSTANCIA>(query, typeof(ItemDeclaracaoSaudeINSTANCIA), pm);
        //    }
        //}

        //[DBTable("calendario_recebimento")]
        //public class CalendarioRecebimento : EntityBase, IPersisteableEntity
        //{
        //    #region fields

        //    Object _id;
        //    Object _calendarioAdmissaoId;
        //    Int32 _faturaDia;
        //    Int32 _faturaTipo;
        //    Int32 _comissaoDia;
        //    Int32 _comissaoTipo;
        //    Int32 _percentualComissao;
        //    DateTime _data;

        //    #endregion

        //    #region properties

        //    [DBFieldInfo("calendariorecebimento_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("calendariorecebimento_calendarioVenctoId", FieldType.Single)]
        //    public Object CalendarioVencimentoID
        //    {
        //        get { return _calendarioAdmissaoId; }
        //        set { _calendarioAdmissaoId = value; }
        //    }

        //    [DBFieldInfo("calendariorecebimento_faturaDia", FieldType.Single)]
        //    public Int32 FaturaDia
        //    {
        //        get { return _faturaDia; }
        //        set { _faturaDia = value; }
        //    }

        //    [DBFieldInfo("calendariorecebimento_admissaoDeTipo", FieldType.Single)]
        //    public Int32 FaturaTipo
        //    {
        //        get { return _faturaTipo; }
        //        set { _faturaTipo = value; }
        //    }

        //    [DBFieldInfo("calendariorecebimento_comissaoDia", FieldType.Single)]
        //    public Int32 ComissaoDia
        //    {
        //        get { return _comissaoDia; }
        //        set { _comissaoDia = value; }
        //    }

        //    [DBFieldInfo("calendariorecebimento_comissaoTipo", FieldType.Single)]
        //    public Int32 ComissaoTipo
        //    {
        //        get { return _comissaoTipo; }
        //        set { _comissaoTipo = value; }
        //    }

        //    [DBFieldInfo("calendariorecebimento_percentualComissao", FieldType.Single)]
        //    public Int32 ComissaoPercentual
        //    {
        //        get { return _percentualComissao; }
        //        set { _percentualComissao = value; }
        //    }

        //    [DBFieldInfo("calendariorecebimento_data", FieldType.Single)]
        //    public DateTime Data
        //    {
        //        get { return _data; }
        //        set { _data = value; }
        //    }

        //    public String StrFaturaTipo
        //    {
        //        get { return CalendarioHelper.TraduzTipo(_faturaTipo, false); }
        //    }

        //    public String StrComissaoTipo
        //    {
        //        get { return CalendarioHelper.TraduzTipo(_comissaoTipo, false); }
        //    }

        //    #endregion

        //    public CalendarioRecebimento() { _data = DateTime.Now; }
        //    public CalendarioRecebimento(Object id) : this() { _id = id; }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    //public static IList<CalendarioRecebimento> CarregarPorCalendarioDeAdmissao(Object calendarioAdmissaoId)
        //    //{
        //    //    String sql = "* FROM calendario_recebimento WHERE calendariorecebimento_calendarioAdmissId=" + calendarioAdmissaoId;

        //    //    return LocatorHelper.Instance.ExecuteQuery<CalendarioRecebimento>(sql, typeof(CalendarioRecebimento));
        //    //}

        //    public static IList<CalendarioRecebimento> CarregarPorCalendarioDeVencimento(Object calendarioVenctoId)
        //    {
        //        String sql = "* FROM calendario_recebimento WHERE calendariorecebimento_calendarioVenctoId=" + calendarioVenctoId;

        //        return LocatorHelper.Instance.ExecuteQuery<CalendarioRecebimento>(sql, typeof(CalendarioRecebimento));
        //    }
        //}

        //internal class CalendarioHelper
        //{
        //    public static String TraduzTipo(Int32 tipo, Boolean prefixo)
        //    {
        //        switch (tipo)
        //        {
        //            case -1:
        //                {
        //                    return "mês anterior";
        //                }
        //            case 0:
        //                {
        //                    return "mês atual";
        //                }
        //            case 1:
        //                {
        //                    return "mês próximo";
        //                }
        //            case 2:
        //                {
        //                    return "mês seguinte ao mês próximo";
        //                }
        //            default:
        //                {
        //                    return "?";
        //                }
        //        }
        //    }
        //}

        //[DBTable("calendario")]
        //public class CalendarioAdmissaoVigencia : EntityBase, IPersisteableEntity
        //{
        //    public enum eDataLimiteTipo : int
        //    {
        //        TodoDia = 1,
        //        TextoPersonalizado
        //    }

        //    #region fields

        //    Object _id;
        //    Object _contratoId;
        //    Int32 _admissaoDe_Dia;
        //    Int32 _admissaoDe_Tipo;
        //    Int32 _admissaoAte_Dia;
        //    Int32 _admissaoAte_Tipo;
        //    Int32 _vigenciaDia;
        //    Int32 _vigenciaTipo;
        //    ///////////////////////////////////////////////////////////////////////////////////////////////
        //    //Int32  _vencimentoDia;
        //    //Int32  _vencimentoTipo;
        //    //Int32  _dataSemJuros_Dia;
        //    //Int32  _dataLimite_Tipo;
        //    //Object _dataLimite_Valor;

        //    DateTime _data;

        //    //const Int32 _mesAtual             = 8;
        //    //const Int32 _mesAnterior          = 7;
        //    //const Int32 _mesProximo           = 9;
        //    //const Int32 _mesSeguinteAoProximo = 10;

        //    #endregion

        //    #region properties

        //    [DBFieldInfo("calendario_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("calendario_contratoId", FieldType.Single)]
        //    public Object ContratoID
        //    {
        //        get { return _contratoId; }
        //        set { _contratoId = value; }
        //    }

        //    [DBFieldInfo("calendario_admissaoDeDia", FieldType.Single)]
        //    public Int32 AdmissaoDe_Dia
        //    {
        //        get { return _admissaoDe_Dia; }
        //        set { _admissaoDe_Dia = value; }
        //    }

        //    [DBFieldInfo("calendario_admissaoDeTipo", FieldType.Single)]
        //    public Int32 AdmissaoDe_Tipo
        //    {
        //        get { return _admissaoDe_Tipo; }
        //        set { _admissaoDe_Tipo = value; }
        //    }

        //    [DBFieldInfo("calendario_admissaoAteDia", FieldType.Single)]
        //    public Int32 AdmissaoAte_Dia
        //    {
        //        get { return _admissaoAte_Dia; }
        //        set { _admissaoAte_Dia = value; }
        //    }

        //    [DBFieldInfo("calendario_admissaoAteTipo", FieldType.Single)]
        //    public Int32 AdmissaoAte_Tipo
        //    {
        //        get { return _admissaoAte_Tipo; }
        //        set { _admissaoAte_Tipo = value; }
        //    }

        //    [DBFieldInfo("calendario_vigenciaDia", FieldType.Single)]
        //    public Int32 VigenciaDia
        //    {
        //        get { return _vigenciaDia; }
        //        set { _vigenciaDia = value; }
        //    }

        //    [DBFieldInfo("calendario_vigenciaTipo", FieldType.Single)]
        //    public Int32 VigenciaTipo
        //    {
        //        get { return _vigenciaTipo; }
        //        set { _vigenciaTipo = value; }
        //    }

        //    //[DBFieldInfo("calendario_vencimentoDia", FieldType.Single)]
        //    //public Int32 VencimentoDia
        //    //{
        //    //    get { return _vencimentoDia; }
        //    //    set { _vencimentoDia= value; }
        //    //}

        //    //[DBFieldInfo("calendario_vencimentoTipo", FieldType.Single)]
        //    //public Int32 VencimentoTipo
        //    //{
        //    //    get { return _vencimentoTipo; }
        //    //    set { _vencimentoTipo= value; }
        //    //}

        //    //[DBFieldInfo("calendario_dataSemJurosDia", FieldType.Single)]
        //    //public Int32 DataSemJuros_Dia
        //    //{
        //    //    get { return _dataSemJuros_Dia; }
        //    //    set { _dataSemJuros_Dia= value; }
        //    //}

        //    //[DBFieldInfo("calendario_dataLimiteTipo", FieldType.Single)]
        //    //public Int32 DataLimite_Tipo
        //    //{
        //    //    get { return _dataLimite_Tipo; }
        //    //    set { _dataLimite_Tipo= value; }
        //    //}

        //    //[DBFieldInfo("calendario_dataLimiteValor", FieldType.Single)]
        //    //public Object DataLimite_Valor
        //    //{
        //    //    get { return _dataLimite_Valor; }
        //    //    set { _dataLimite_Valor= value; }
        //    //}

        //    //public String strDataLimite
        //    //{
        //    //    get
        //    //    {
        //    //        if (_dataLimite_Valor == null) { return "&nbsp;"; }
        //    //        if (_dataLimite_Tipo == (Int32)eDataLimiteTipo.TextoPersonalizado)
        //    //            return Convert.ToString(_dataLimite_Valor);
        //    //        else
        //    //            return "Todo dia " + Convert.ToString(_dataLimite_Valor);
        //    //    }
        //    //}

        //    [DBFieldInfo("calendario_data", FieldType.Single)]
        //    public DateTime Data
        //    {
        //        get { return _data; }
        //        set { _data = value; }
        //    }

        //    public String strData
        //    {
        //        get { return _data.ToString("dd/MM/yyyy"); }
        //    }

        //    public String StrAdmissaoDe_Tipo
        //    {
        //        get { return CalendarioHelper.TraduzTipo(_admissaoDe_Tipo, false); }
        //    }

        //    public String StrAdmissaoAte_Tipo
        //    {
        //        get { return CalendarioHelper.TraduzTipo(_admissaoAte_Tipo, false); }
        //    }

        //    public String StrVigenciaTipo
        //    {
        //        get { return CalendarioHelper.TraduzTipo(_vigenciaTipo, false); }
        //    }

        //    //public String StrVencimentoTipo
        //    //{
        //    //    get { return CalendarioHelper.TraduzTipo(_vencimentoTipo, false); }
        //    //}

        //    #endregion

        //    public CalendarioRecebimento CalendarioRecebimento
        //    {
        //        get
        //        {
        //            throw new System.NotImplementedException();
        //        }
        //        set
        //        {
        //        }
        //    }

        //    public CalendarioAdmissaoVigencia() { this._data = DateTime.Now; }
        //    public CalendarioAdmissaoVigencia(Object id) : this() { this._id = id; }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static IList<CalendarioAdmissaoVigencia> CarregarPorContrato(Object contratoId)
        //    {
        //        return CarregarPorContrato(contratoId, null);
        //    }
        //    public static IList<CalendarioAdmissaoVigencia> CarregarPorContrato(Object contratoId, PersistenceManager pm)
        //    {
        //        String sql = "* FROM calendario WHERE calendario_contratoId=" + contratoId;

        //        return LocatorHelper.Instance.ExecuteQuery
        //            <CalendarioAdmissaoVigencia>(sql, typeof(CalendarioAdmissaoVigencia), pm);
        //    }

        //    public static IList<CalendarioAdmissaoVigencia> CarregarPorContrato(Object contratoId, DateTime admissao, PersistenceManager pm)
        //    {
        //        String sql = "* FROM calendario WHERE calendario_contratoId=" + contratoId + " AND calendario_data <= '" + admissao.ToString("yyyy-MM-dd 23:59:59") + "' ORDER BY calendario_data DESC";

        //        return LocatorHelper.Instance.ExecuteQuery
        //            <CalendarioAdmissaoVigencia>(sql, typeof(CalendarioAdmissaoVigencia), pm);
        //    }

        //    static Int32 ultimoDiaDoMes(Int32 mes, Int32 ano)
        //    {
        //        DateTime data = new DateTime(ano, mes, 1);
        //        return data.AddMonths(1).AddDays(-1).Day;
        //    }

        //    public static void CalculaDatasDeVigenciaEVencimento(Object contratoAdmID, DateTime dataAdmissao, out DateTime vigencia, out DateTime vencimento, out Int32 diaDataSemJuros, out Object valorDataLimite, out CalendarioVencimento rcv)
        //    {
        //        CalculaDatasDeVigenciaEVencimento(contratoAdmID, dataAdmissao, out vigencia, out vencimento, out diaDataSemJuros, out valorDataLimite, out rcv, null);
        //    }
        //    public static void CalculaDatasDeVigenciaEVencimento(Object contratoAdmID, DateTime dataAdmissao, out DateTime vigencia, out DateTime vencimento, out Int32 diaDataSemJuros, out Object valorDataLimite, out CalendarioVencimento rcv, PersistenceManager pm)
        //    {
        //        IList<CalendarioAdmissaoVigencia> lista = CarregarPorContrato(contratoAdmID, dataAdmissao, pm);

        //        vigencia = DateTime.MinValue;
        //        vencimento = DateTime.MinValue;
        //        diaDataSemJuros = -1;
        //        valorDataLimite = null;
        //        rcv = null;

        //        if (lista == null) { return; }

        //        DateTime dtAdmissaoDe_Cadastrada = DateTime.MinValue;
        //        DateTime dtAdmissaoAte_Cadastrada = DateTime.MinValue;

        //        Int32 fatorSomaMes = 0;
        //        foreach (CalendarioAdmissaoVigencia cal in lista)
        //        {
        //            if (cal.AdmissaoDe_Tipo == 0 && cal.AdmissaoAte_Tipo == 0) //mes atual
        //            {
        //                if (dataAdmissao.Day >= cal.AdmissaoDe_Dia && dataAdmissao.Day <= cal.AdmissaoAte_Dia)
        //                {
        //                    dtAdmissaoDe_Cadastrada = new DateTime(
        //                        dataAdmissao.Year, dataAdmissao.Month, cal.AdmissaoDe_Dia);

        //                    try
        //                    {
        //                        dtAdmissaoAte_Cadastrada = new DateTime(
        //                            dataAdmissao.Year, dataAdmissao.Month, cal.AdmissaoAte_Dia);
        //                    }
        //                    catch
        //                    {
        //                        dtAdmissaoAte_Cadastrada = new DateTime(
        //                            dataAdmissao.Year, dataAdmissao.Month, ultimoDiaDoMes(dataAdmissao.Month, dataAdmissao.Year));
        //                    }
        //                }
        //                else
        //                    continue;
        //            }
        //            else
        //            {
        //                #region DE

        //                try
        //                {
        //                    if (dataAdmissao.Year == DateTime.Now.Year)
        //                    {
        //                        if (cal.AdmissaoDe_Tipo == -1)
        //                        {
        //                            if (dataAdmissao.Day < cal.AdmissaoDe_Dia)
        //                            {
        //                                dtAdmissaoDe_Cadastrada = new DateTime(
        //                                    dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Year,
        //                                    dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Month, cal.AdmissaoDe_Dia);
        //                            }
        //                            else
        //                            {
        //                                dtAdmissaoDe_Cadastrada = new DateTime(
        //                                    dataAdmissao.Year,
        //                                    dataAdmissao.Month, cal.AdmissaoDe_Dia); //dia 31
        //                            }
        //                        }
        //                        else
        //                        {
        //                            dtAdmissaoDe_Cadastrada = new DateTime(
        //                                dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Year,
        //                                dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Month, cal.AdmissaoDe_Dia); //dia 31
        //                        }
        //                    }
        //                    else
        //                    {
        //                        if (cal.AdmissaoDe_Tipo == -1)
        //                        {
        //                            if (dataAdmissao.Day < cal.AdmissaoDe_Dia)
        //                            {
        //                                dtAdmissaoDe_Cadastrada = new DateTime(
        //                                    dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Year,
        //                                    dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Month, cal.AdmissaoDe_Dia);
        //                            }
        //                            else
        //                            {
        //                                dtAdmissaoDe_Cadastrada = new DateTime(
        //                                    dataAdmissao.Year,
        //                                    dataAdmissao.Month, cal.AdmissaoDe_Dia); //dia 31
        //                            }
        //                        }
        //                        else
        //                        {
        //                            dtAdmissaoDe_Cadastrada = new DateTime(
        //                                dataAdmissao.Year,
        //                                dataAdmissao.Month, cal.AdmissaoDe_Dia); //dia 31
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    #region tratamento de erro.

        //                    #region ano atual

        //                    if (dataAdmissao.Year == DateTime.Now.Year)
        //                    {
        //                        if (cal.AdmissaoDe_Tipo == -1)
        //                        {
        //                            if (dataAdmissao.Day < cal.AdmissaoDe_Dia)
        //                            {
        //                                dtAdmissaoDe_Cadastrada = new DateTime(
        //                                    dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Year,
        //                                    dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Month,
        //                                    ultimoDiaDoMes(dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Month, dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Year));
        //                            }
        //                            else
        //                            {
        //                                dtAdmissaoDe_Cadastrada = new DateTime(
        //                                    dataAdmissao.Year,
        //                                    dataAdmissao.Month,
        //                                    ultimoDiaDoMes(dataAdmissao.Month, dataAdmissao.Year));
        //                            }
        //                        }
        //                        else
        //                        {
        //                            dtAdmissaoDe_Cadastrada = new DateTime(
        //                                dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Year,
        //                                dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Month,
        //                                ultimoDiaDoMes(dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Month, dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Year)); //nao tem dia 31, entao tenta 30. Corrigir isso!
        //                        }
        //                    }
        //                    #endregion

        //                    #region anos anteriores

        //                    else
        //                    {
        //                        if (cal.AdmissaoDe_Tipo == -1)
        //                        {
        //                            if (dataAdmissao.Day < cal.AdmissaoDe_Dia)
        //                            {
        //                                dtAdmissaoDe_Cadastrada = new DateTime(
        //                                    dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Year,
        //                                    dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Month,
        //                                    ultimoDiaDoMes(dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Month, dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Year));
        //                            }
        //                            else
        //                            {
        //                                dtAdmissaoDe_Cadastrada = new DateTime(
        //                                    dataAdmissao.Year,
        //                                    dataAdmissao.Month,
        //                                    ultimoDiaDoMes(dataAdmissao.Month, dataAdmissao.Year));
        //                            }
        //                        }
        //                        else
        //                        {
        //                            dtAdmissaoDe_Cadastrada = new DateTime(
        //                                dataAdmissao.Year,
        //                                dataAdmissao.Month,
        //                                ultimoDiaDoMes(dataAdmissao.Month, dataAdmissao.Year));// cal.AdmissaoDe_Dia); //dia 31
        //                        }
        //                    }
        //                    #endregion

        //                    #endregion
        //                }
        //                #endregion
        //            }

        //            if (cal.AdmissaoAte_Tipo == 0) //mes atual
        //            {
        //            }
        //            else
        //            {
        //                #region ATE

        //                fatorSomaMes = cal.AdmissaoAte_Tipo;
        //                if (fatorSomaMes == 0) { fatorSomaMes++; }
        //                try
        //                {
        //                    if (dataAdmissao.Year == DateTime.Now.Year)
        //                    {
        //                        if (cal.AdmissaoDe_Tipo == -1)
        //                            fatorSomaMes = 1;
        //                        else
        //                            fatorSomaMes = 0;

        //                        dtAdmissaoAte_Cadastrada = new DateTime(
        //                            dataAdmissao.AddMonths(cal.AdmissaoAte_Tipo + fatorSomaMes).Year,
        //                            dataAdmissao.AddMonths(cal.AdmissaoAte_Tipo + fatorSomaMes).Month, cal.AdmissaoAte_Dia);
        //                    }
        //                    else
        //                    {
        //                        if (cal.AdmissaoDe_Tipo == -1)
        //                            fatorSomaMes = 0;

        //                        dtAdmissaoAte_Cadastrada = new DateTime(
        //                            dtAdmissaoDe_Cadastrada.AddMonths(fatorSomaMes).Year,
        //                            dtAdmissaoDe_Cadastrada.AddMonths(fatorSomaMes).Month, cal.AdmissaoAte_Dia); //dtAdmissaoDe_Cadastrada.AddMonths(cal.AdmissaoAte_Tipo + 1).Month, cal.AdmissaoAte_Dia);
        //                    }
        //                }
        //                catch
        //                {
        //                    if (dataAdmissao.Year == DateTime.Now.Year)
        //                    {
        //                        //if (cal.AdmissaoDe_Tipo == -1)
        //                        //    fatorSomaMes = 1;
        //                        //else
        //                        //    fatorSomaMes = 0;
        //                        fatorSomaMes = cal.AdmissaoDe_Tipo;

        //                        //dtAdmissaoAte_Cadastrada = new DateTime(
        //                        //    dataAdmissao.AddMonths(cal.AdmissaoAte_Tipo + fatorSomaMes).Year,
        //                        //    dataAdmissao.AddMonths(cal.AdmissaoAte_Tipo + fatorSomaMes).Month,
        //                        //    ultimoDiaDoMes(dataAdmissao.AddMonths(cal.AdmissaoAte_Tipo).Month, dataAdmissao.AddMonths(cal.AdmissaoAte_Tipo).Year)); //cal.AdmissaoAte_Dia - 1

        //                        dtAdmissaoAte_Cadastrada = new DateTime(
        //                            dataAdmissao.AddMonths(fatorSomaMes).Year,
        //                            dataAdmissao.AddMonths(fatorSomaMes).Month,
        //                            ultimoDiaDoMes(dataAdmissao.AddMonths(cal.AdmissaoAte_Tipo).Month, dataAdmissao.AddMonths(cal.AdmissaoAte_Tipo).Year)); //cal.AdmissaoAte_Dia - 1
        //                    }
        //                    #region
        //                    else
        //                    {
        //                        if (cal.AdmissaoDe_Tipo == -1)
        //                            fatorSomaMes = 0;

        //                        dtAdmissaoAte_Cadastrada = new DateTime(
        //                            dtAdmissaoDe_Cadastrada.AddMonths(fatorSomaMes).Year,
        //                            dtAdmissaoDe_Cadastrada.AddMonths(fatorSomaMes).Month, 1);

        //                        dtAdmissaoAte_Cadastrada = new DateTime(
        //                            dtAdmissaoDe_Cadastrada.AddMonths(fatorSomaMes).Year,
        //                            dtAdmissaoDe_Cadastrada.AddMonths(fatorSomaMes).Month, ultimoDiaDoMes(dtAdmissaoAte_Cadastrada.Month, dtAdmissaoAte_Cadastrada.Year));
        //                    }
        //                    #endregion
        //                }
        //                #endregion

        //            }

        //            IList<CalendarioVencimento> listaVencto = CalendarioVencimento.CarregarTodos(cal.ID);
        //            if (listaVencto == null || listaVencto.Count == 0) { continue; }


        //            if (listaVencto.Count == 1)
        //            {
        //                #region arrumar...

        //                try
        //                {
        //                    vigencia = new DateTime(
        //                        dataAdmissao.AddMonths(cal.VigenciaTipo).Year,
        //                        dataAdmissao.AddMonths(cal.VigenciaTipo).Month, cal.VigenciaDia);

        //                    if (cal.AdmissaoDe_Tipo == -1)
        //                    {
        //                        if (dataAdmissao.Day >= cal.AdmissaoDe_Dia && lista.Count == 1)
        //                        {
        //                            vigencia = vigencia.AddMonths(1); //
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    vigencia = new DateTime(
        //                        dataAdmissao.AddMonths(cal.VigenciaTipo).Year,
        //                        dataAdmissao.AddMonths(cal.VigenciaTipo).Month,
        //                        ultimoDiaDoMes(dataAdmissao.AddMonths(cal.VigenciaTipo).Month, dataAdmissao.AddMonths(cal.VigenciaTipo).Year));

        //                    if (cal.AdmissaoDe_Tipo == -1)
        //                    {
        //                        if (dataAdmissao.Day >= cal.AdmissaoDe_Dia && lista.Count == 1)
        //                        {
        //                            vigencia = vigencia.AddMonths(1); //
        //                        }
        //                    }
        //                }

        //                CalendarioVencimento cv = listaVencto[0];
        //                try
        //                {
        //                    vencimento = new DateTime(
        //                        dataAdmissao.AddMonths(cv.VencimentoTipo).Year,
        //                        dataAdmissao.AddMonths(cv.VencimentoTipo).Month, cv.VencimentoDia);

        //                    if (cal.AdmissaoDe_Tipo == -1)
        //                    {
        //                        if (dataAdmissao.Day >= cal.AdmissaoDe_Dia && lista.Count == 1)
        //                        {
        //                            vencimento = vencimento.AddMonths(1); //
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    vencimento = new DateTime(
        //                        dataAdmissao.AddMonths(cv.VencimentoTipo).Year,
        //                        dataAdmissao.AddMonths(cv.VencimentoTipo).Month,
        //                        ultimoDiaDoMes(dataAdmissao.AddMonths(cv.VencimentoTipo).Month, dataAdmissao.AddMonths(cv.VencimentoTipo).Year));

        //                    if (cal.AdmissaoDe_Tipo == -1)
        //                    {
        //                        if (dataAdmissao.Day >= cal.AdmissaoDe_Dia && lista.Count == 1)
        //                        {
        //                            vencimento = vencimento.AddMonths(1); //
        //                        }
        //                    }
        //                }

        //                diaDataSemJuros = cv.DataSemJuros_Dia;
        //                valorDataLimite = cv.DataLimite_Valor;

        //                return;

        //                #endregion
        //            }
        //            else if (dtAdmissaoDe_Cadastrada <= dataAdmissao &&
        //                dtAdmissaoAte_Cadastrada >= dataAdmissao)
        //            {
        //                try
        //                {
        //                    vigencia = new DateTime(
        //                        dataAdmissao.AddMonths(cal.VigenciaTipo).Year,
        //                        dataAdmissao.AddMonths(cal.VigenciaTipo).Month, cal.VigenciaDia);

        //                    if (cal.AdmissaoDe_Tipo == -1)
        //                    {
        //                        if (dataAdmissao.Day >= cal.AdmissaoDe_Dia && lista.Count == 1)
        //                        {
        //                            vigencia = vigencia.AddMonths(1); //
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    vigencia = new DateTime(
        //                        dataAdmissao.AddMonths(cal.VigenciaTipo).Year,
        //                        dataAdmissao.AddMonths(cal.VigenciaTipo).Month,
        //                        ultimoDiaDoMes(dataAdmissao.AddMonths(cal.VigenciaTipo).Month, dataAdmissao.AddMonths(cal.VigenciaTipo).Year));

        //                    if (cal.AdmissaoDe_Tipo == -1)
        //                    {
        //                        if (dataAdmissao.Day >= cal.AdmissaoDe_Dia && lista.Count == 1)
        //                        {
        //                            vigencia = vigencia.AddMonths(1); //
        //                        }
        //                    }
        //                }

        //                CalendarioVencimento cv = listaVencto[0];
        //                try
        //                {
        //                    vencimento = new DateTime(
        //                        dataAdmissao.AddMonths(cv.VencimentoTipo).Year,
        //                        dataAdmissao.AddMonths(cv.VencimentoTipo).Month, cv.VencimentoDia);

        //                    if (cal.AdmissaoDe_Tipo == -1)
        //                    {
        //                        if (dataAdmissao.Day >= cal.AdmissaoDe_Dia && lista.Count == 1)
        //                        {
        //                            vencimento = vencimento.AddMonths(1); //
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    vencimento = new DateTime(
        //                        dataAdmissao.AddMonths(cv.VencimentoTipo).Year,
        //                        dataAdmissao.AddMonths(cv.VencimentoTipo).Month,
        //                        ultimoDiaDoMes(dataAdmissao.AddMonths(cv.VencimentoTipo).Month, dataAdmissao.AddMonths(cv.VencimentoTipo).Year));

        //                    if (cal.AdmissaoDe_Tipo == -1)
        //                    {
        //                        if (dataAdmissao.Day >= cal.AdmissaoDe_Dia && lista.Count == 1)
        //                        {
        //                            vencimento = vencimento.AddMonths(1); //
        //                        }
        //                    }
        //                }

        //                diaDataSemJuros = cv.DataSemJuros_Dia;
        //                valorDataLimite = cv.DataLimite_Valor;

        //                return;
        //            }
        //            else// if(dataAdmissao.Day >= dtAdmissaoDe_Cadastrada.Day && dataAdmissao.Day <= dtAdmissaoAte_Cadastrada.Day)
        //            {
        //                //Int32 fatorSoma = 1; //deve ser a diferenca entre o mes admissao e o mes cadastrado ate
        //                //DateTime paramDE  = new DateTime(dataAdmissao.Year, dataAdmissao.Month, dtAdmissaoDe_Cadastrada.Day);
        //                //DateTime paramATE = new DateTime(dataAdmissao.AddMonths(cal.AdmissaoAte_Tipo+1).Year, paramDE.AddMonths(cal.AdmissaoAte_Tipo+fatorSoma).Month, dtAdmissaoAte_Cadastrada.Day);

        //                //if (paramDE <= dataAdmissao && paramATE >= dataAdmissao)
        //                //{
        //                //    try 
        //                //    {
        //                //        vigencia = new DateTime(
        //                //            paramATE.AddMonths(cal.VigenciaTipo).Year,
        //                //            paramATE.AddMonths(cal.VigenciaTipo).Month, cal.VigenciaDia);
        //                //    }
        //                //    catch
        //                //    {
        //                //        vigencia = new DateTime(
        //                //            paramATE.AddMonths(cal.VigenciaTipo).Year,
        //                //            paramATE.AddMonths(cal.VigenciaTipo).Month,
        //                //            ultimoDiaDoMes(paramATE.AddMonths(cal.VigenciaTipo).Month, paramATE.AddMonths(cal.VigenciaTipo).Year));
        //                //    }

        //                //    CalendarioVencimento cv = listaVencto[0];
        //                //    try 
        //                //    {
        //                //        vencimento = new DateTime(
        //                //            paramATE.AddMonths(cv.VencimentoTipo).Year,
        //                //            paramATE.AddMonths(cv.VencimentoTipo).Month, cv.VencimentoDia);
        //                //    }
        //                //    catch
        //                //    {
        //                //        vencimento = new DateTime(
        //                //            paramATE.AddMonths(cv.VencimentoTipo).Year,
        //                //            paramATE.AddMonths(cv.VencimentoTipo).Month,
        //                //            ultimoDiaDoMes(paramATE.AddMonths(cv.VencimentoTipo).Month, paramATE.AddMonths(cv.VencimentoTipo).Year));
        //                //    }

        //                //    diaDataSemJuros = cv.DataSemJuros_Dia;
        //                //    valorDataLimite = cv.DataLimite_Valor;

        //                continue;//return;
        //                //}
        //            }
        //        }
        //    }

        //    public static void CalculaDatasDeVigenciaEVencimento(Object contratoAdmID, DateTime dataAdmissao, out DateTime vigencia, out DateTime vencimento, out Int32 diaDataSemJuros, out Object valorDataLimite, out CalendarioVencimento rcv, out Int32 limiteAposVencimento, PersistenceManager pm)
        //    {
        //        IList<CalendarioAdmissaoVigencia> lista = CarregarPorContrato(contratoAdmID, dataAdmissao, pm);

        //        vigencia = DateTime.MinValue;
        //        vencimento = DateTime.MinValue;
        //        diaDataSemJuros = -1;
        //        valorDataLimite = null;
        //        rcv = null;
        //        limiteAposVencimento = 0;

        //        if (lista == null) { return; }

        //        DateTime dtAdmissaoDe_Cadastrada = DateTime.MinValue;
        //        DateTime dtAdmissaoAte_Cadastrada = DateTime.MinValue;

        //        Int32 fatorSomaMes = 0;
        //        foreach (CalendarioAdmissaoVigencia cal in lista)
        //        {
        //            if (cal.AdmissaoDe_Tipo == 0 && cal.AdmissaoAte_Tipo == 0) //mes atual
        //            {
        //                if (dataAdmissao.Day >= cal.AdmissaoDe_Dia && dataAdmissao.Day <= cal.AdmissaoAte_Dia)
        //                {
        //                    dtAdmissaoDe_Cadastrada = new DateTime(
        //                        dataAdmissao.Year, dataAdmissao.Month, cal.AdmissaoDe_Dia);

        //                    try
        //                    {
        //                        dtAdmissaoAte_Cadastrada = new DateTime(
        //                            dataAdmissao.Year, dataAdmissao.Month, cal.AdmissaoAte_Dia);
        //                    }
        //                    catch
        //                    {
        //                        dtAdmissaoAte_Cadastrada = new DateTime(
        //                            dataAdmissao.Year, dataAdmissao.Month, ultimoDiaDoMes(dataAdmissao.Month, dataAdmissao.Year));
        //                    }
        //                }
        //                else
        //                    continue;
        //            }
        //            else
        //            {
        //                #region DE

        //                try
        //                {
        //                    if (dataAdmissao.Year == DateTime.Now.Year)
        //                    {
        //                        if (cal.AdmissaoDe_Tipo == -1)
        //                        {
        //                            if (dataAdmissao.Day < cal.AdmissaoDe_Dia)
        //                            {
        //                                dtAdmissaoDe_Cadastrada = new DateTime(
        //                                    dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Year,
        //                                    dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Month, cal.AdmissaoDe_Dia);
        //                            }
        //                            else
        //                            {
        //                                dtAdmissaoDe_Cadastrada = new DateTime(
        //                                    dataAdmissao.Year,
        //                                    dataAdmissao.Month, cal.AdmissaoDe_Dia); //dia 31
        //                            }
        //                        }
        //                        else
        //                        {
        //                            dtAdmissaoDe_Cadastrada = new DateTime(
        //                                dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Year,
        //                                dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Month, cal.AdmissaoDe_Dia); //dia 31
        //                        }
        //                    }
        //                    else
        //                    {
        //                        if (cal.AdmissaoDe_Tipo == -1)
        //                        {
        //                            if (dataAdmissao.Day < cal.AdmissaoDe_Dia)
        //                            {
        //                                dtAdmissaoDe_Cadastrada = new DateTime(
        //                                    dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Year,
        //                                    dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Month, cal.AdmissaoDe_Dia);
        //                            }
        //                            else
        //                            {
        //                                dtAdmissaoDe_Cadastrada = new DateTime(
        //                                    dataAdmissao.Year,
        //                                    dataAdmissao.Month, cal.AdmissaoDe_Dia); //dia 31
        //                            }
        //                        }
        //                        else
        //                        {
        //                            dtAdmissaoDe_Cadastrada = new DateTime(
        //                                dataAdmissao.Year,
        //                                dataAdmissao.Month, cal.AdmissaoDe_Dia); //dia 31
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    #region tratamento de erro.

        //                    #region ano atual

        //                    if (dataAdmissao.Year == DateTime.Now.Year)
        //                    {
        //                        if (cal.AdmissaoDe_Tipo == -1)
        //                        {
        //                            if (dataAdmissao.Day < cal.AdmissaoDe_Dia)
        //                            {
        //                                dtAdmissaoDe_Cadastrada = new DateTime(
        //                                    dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Year,
        //                                    dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Month,
        //                                    ultimoDiaDoMes(dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Month, dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Year));
        //                            }
        //                            else
        //                            {
        //                                dtAdmissaoDe_Cadastrada = new DateTime(
        //                                    dataAdmissao.Year,
        //                                    dataAdmissao.Month,
        //                                    ultimoDiaDoMes(dataAdmissao.Month, dataAdmissao.Year));
        //                            }
        //                        }
        //                        else
        //                        {
        //                            dtAdmissaoDe_Cadastrada = new DateTime(
        //                                dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Year,
        //                                dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Month,
        //                                ultimoDiaDoMes(dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Month, dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Year)); //nao tem dia 31, entao tenta 30. Corrigir isso!
        //                        }
        //                    }
        //                    #endregion

        //                    #region anos anteriores

        //                    else
        //                    {
        //                        if (cal.AdmissaoDe_Tipo == -1)
        //                        {
        //                            if (dataAdmissao.Day < cal.AdmissaoDe_Dia)
        //                            {
        //                                dtAdmissaoDe_Cadastrada = new DateTime(
        //                                    dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Year,
        //                                    dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Month,
        //                                    ultimoDiaDoMes(dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Month, dataAdmissao.AddMonths(cal.AdmissaoDe_Tipo).Year));
        //                            }
        //                            else
        //                            {
        //                                dtAdmissaoDe_Cadastrada = new DateTime(
        //                                    dataAdmissao.Year,
        //                                    dataAdmissao.Month,
        //                                    ultimoDiaDoMes(dataAdmissao.Month, dataAdmissao.Year));
        //                            }
        //                        }
        //                        else
        //                        {
        //                            dtAdmissaoDe_Cadastrada = new DateTime(
        //                                dataAdmissao.Year,
        //                                dataAdmissao.Month,
        //                                ultimoDiaDoMes(dataAdmissao.Month, dataAdmissao.Year));// cal.AdmissaoDe_Dia); //dia 31
        //                        }
        //                    }
        //                    #endregion

        //                    #endregion
        //                }
        //                #endregion
        //            }

        //            if (cal.AdmissaoAte_Tipo == 0) //mes atual
        //            {
        //            }
        //            else
        //            {
        //                #region ATE

        //                fatorSomaMes = cal.AdmissaoAte_Tipo;
        //                if (fatorSomaMes == 0) { fatorSomaMes++; }
        //                try
        //                {
        //                    if (dataAdmissao.Year == DateTime.Now.Year)
        //                    {
        //                        if (cal.AdmissaoDe_Tipo == -1)
        //                            fatorSomaMes = 1;
        //                        else
        //                            fatorSomaMes = 0;

        //                        dtAdmissaoAte_Cadastrada = new DateTime(
        //                            dataAdmissao.AddMonths(cal.AdmissaoAte_Tipo + fatorSomaMes).Year,
        //                            dataAdmissao.AddMonths(cal.AdmissaoAte_Tipo + fatorSomaMes).Month, cal.AdmissaoAte_Dia);
        //                    }
        //                    else
        //                    {
        //                        if (cal.AdmissaoDe_Tipo == -1)
        //                            fatorSomaMes = 0;

        //                        dtAdmissaoAte_Cadastrada = new DateTime(
        //                            dtAdmissaoDe_Cadastrada.AddMonths(fatorSomaMes).Year,
        //                            dtAdmissaoDe_Cadastrada.AddMonths(fatorSomaMes).Month, cal.AdmissaoAte_Dia); //dtAdmissaoDe_Cadastrada.AddMonths(cal.AdmissaoAte_Tipo + 1).Month, cal.AdmissaoAte_Dia);
        //                    }
        //                }
        //                catch
        //                {
        //                    if (dataAdmissao.Year == DateTime.Now.Year)
        //                    {
        //                        //if (cal.AdmissaoDe_Tipo == -1)
        //                        //    fatorSomaMes = 1;
        //                        //else
        //                        //    fatorSomaMes = 0;
        //                        fatorSomaMes = cal.AdmissaoDe_Tipo;

        //                        //dtAdmissaoAte_Cadastrada = new DateTime(
        //                        //    dataAdmissao.AddMonths(cal.AdmissaoAte_Tipo + fatorSomaMes).Year,
        //                        //    dataAdmissao.AddMonths(cal.AdmissaoAte_Tipo + fatorSomaMes).Month,
        //                        //    ultimoDiaDoMes(dataAdmissao.AddMonths(cal.AdmissaoAte_Tipo).Month, dataAdmissao.AddMonths(cal.AdmissaoAte_Tipo).Year)); //cal.AdmissaoAte_Dia - 1

        //                        dtAdmissaoAte_Cadastrada = new DateTime(
        //                            dataAdmissao.AddMonths(fatorSomaMes).Year,
        //                            dataAdmissao.AddMonths(fatorSomaMes).Month,
        //                            ultimoDiaDoMes(dataAdmissao.AddMonths(cal.AdmissaoAte_Tipo).Month, dataAdmissao.AddMonths(cal.AdmissaoAte_Tipo).Year)); //cal.AdmissaoAte_Dia - 1
        //                    }
        //                    #region
        //                    else
        //                    {
        //                        if (cal.AdmissaoDe_Tipo == -1)
        //                            fatorSomaMes = 0;

        //                        dtAdmissaoAte_Cadastrada = new DateTime(
        //                            dtAdmissaoDe_Cadastrada.AddMonths(fatorSomaMes).Year,
        //                            dtAdmissaoDe_Cadastrada.AddMonths(fatorSomaMes).Month, 1);

        //                        dtAdmissaoAte_Cadastrada = new DateTime(
        //                            dtAdmissaoDe_Cadastrada.AddMonths(fatorSomaMes).Year,
        //                            dtAdmissaoDe_Cadastrada.AddMonths(fatorSomaMes).Month, ultimoDiaDoMes(dtAdmissaoAte_Cadastrada.Month, dtAdmissaoAte_Cadastrada.Year));
        //                    }
        //                    #endregion
        //                }
        //                #endregion

        //            }

        //            IList<CalendarioVencimento> listaVencto = CalendarioVencimento.CarregarTodos(cal.ID);
        //            if (listaVencto == null || listaVencto.Count == 0) { continue; }


        //            if (listaVencto.Count == 1)
        //            {
        //                #region arrumar...

        //                try
        //                {
        //                    vigencia = new DateTime(
        //                        dataAdmissao.AddMonths(cal.VigenciaTipo).Year,
        //                        dataAdmissao.AddMonths(cal.VigenciaTipo).Month, cal.VigenciaDia);

        //                    if (cal.AdmissaoDe_Tipo == -1)
        //                    {
        //                        if (dataAdmissao.Day >= cal.AdmissaoDe_Dia && lista.Count == 1)
        //                        {
        //                            vigencia = vigencia.AddMonths(1); //
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    vigencia = new DateTime(
        //                        dataAdmissao.AddMonths(cal.VigenciaTipo).Year,
        //                        dataAdmissao.AddMonths(cal.VigenciaTipo).Month,
        //                        ultimoDiaDoMes(dataAdmissao.AddMonths(cal.VigenciaTipo).Month, dataAdmissao.AddMonths(cal.VigenciaTipo).Year));

        //                    if (cal.AdmissaoDe_Tipo == -1)
        //                    {
        //                        if (dataAdmissao.Day >= cal.AdmissaoDe_Dia && lista.Count == 1)
        //                        {
        //                            vigencia = vigencia.AddMonths(1); //
        //                        }
        //                    }
        //                }

        //                CalendarioVencimento cv = listaVencto[0];
        //                try
        //                {
        //                    vencimento = new DateTime(
        //                        dataAdmissao.AddMonths(cv.VencimentoTipo).Year,
        //                        dataAdmissao.AddMonths(cv.VencimentoTipo).Month, cv.VencimentoDia);

        //                    if (cal.AdmissaoDe_Tipo == -1)
        //                    {
        //                        if (dataAdmissao.Day >= cal.AdmissaoDe_Dia && lista.Count == 1)
        //                        {
        //                            vencimento = vencimento.AddMonths(1); //
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    vencimento = new DateTime(
        //                        dataAdmissao.AddMonths(cv.VencimentoTipo).Year,
        //                        dataAdmissao.AddMonths(cv.VencimentoTipo).Month,
        //                        ultimoDiaDoMes(dataAdmissao.AddMonths(cv.VencimentoTipo).Month, dataAdmissao.AddMonths(cv.VencimentoTipo).Year));

        //                    if (cal.AdmissaoDe_Tipo == -1)
        //                    {
        //                        if (dataAdmissao.Day >= cal.AdmissaoDe_Dia && lista.Count == 1)
        //                        {
        //                            vencimento = vencimento.AddMonths(1); //
        //                        }
        //                    }
        //                }

        //                diaDataSemJuros = cv.DataSemJuros_Dia;
        //                valorDataLimite = cv.DataLimite_Valor;
        //                limiteAposVencimento = cv.LimiteAposVencimento;

        //                return;

        //                #endregion
        //            }
        //            else if (dtAdmissaoDe_Cadastrada <= dataAdmissao &&
        //                dtAdmissaoAte_Cadastrada >= dataAdmissao)
        //            {
        //                try
        //                {
        //                    vigencia = new DateTime(
        //                        dataAdmissao.AddMonths(cal.VigenciaTipo).Year,
        //                        dataAdmissao.AddMonths(cal.VigenciaTipo).Month, cal.VigenciaDia);

        //                    if (cal.AdmissaoDe_Tipo == -1)
        //                    {
        //                        if (dataAdmissao.Day >= cal.AdmissaoDe_Dia && lista.Count == 1)
        //                        {
        //                            vigencia = vigencia.AddMonths(1); //
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    vigencia = new DateTime(
        //                        dataAdmissao.AddMonths(cal.VigenciaTipo).Year,
        //                        dataAdmissao.AddMonths(cal.VigenciaTipo).Month,
        //                        ultimoDiaDoMes(dataAdmissao.AddMonths(cal.VigenciaTipo).Month, dataAdmissao.AddMonths(cal.VigenciaTipo).Year));

        //                    if (cal.AdmissaoDe_Tipo == -1)
        //                    {
        //                        if (dataAdmissao.Day >= cal.AdmissaoDe_Dia && lista.Count == 1)
        //                        {
        //                            vigencia = vigencia.AddMonths(1); //
        //                        }
        //                    }
        //                }

        //                CalendarioVencimento cv = listaVencto[0];
        //                try
        //                {
        //                    vencimento = new DateTime(
        //                        dataAdmissao.AddMonths(cv.VencimentoTipo).Year,
        //                        dataAdmissao.AddMonths(cv.VencimentoTipo).Month, cv.VencimentoDia);

        //                    if (cal.AdmissaoDe_Tipo == -1)
        //                    {
        //                        if (dataAdmissao.Day >= cal.AdmissaoDe_Dia && lista.Count == 1)
        //                        {
        //                            vencimento = vencimento.AddMonths(1); //
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    vencimento = new DateTime(
        //                        dataAdmissao.AddMonths(cv.VencimentoTipo).Year,
        //                        dataAdmissao.AddMonths(cv.VencimentoTipo).Month,
        //                        ultimoDiaDoMes(dataAdmissao.AddMonths(cv.VencimentoTipo).Month, dataAdmissao.AddMonths(cv.VencimentoTipo).Year));

        //                    if (cal.AdmissaoDe_Tipo == -1)
        //                    {
        //                        if (dataAdmissao.Day >= cal.AdmissaoDe_Dia && lista.Count == 1)
        //                        {
        //                            vencimento = vencimento.AddMonths(1); //
        //                        }
        //                    }
        //                }

        //                diaDataSemJuros = cv.DataSemJuros_Dia;
        //                valorDataLimite = cv.DataLimite_Valor;
        //                limiteAposVencimento = cv.LimiteAposVencimento;

        //                return;
        //            }
        //            else// if(dataAdmissao.Day >= dtAdmissaoDe_Cadastrada.Day && dataAdmissao.Day <= dtAdmissaoAte_Cadastrada.Day)
        //            {
        //                //Int32 fatorSoma = 1; //deve ser a diferenca entre o mes admissao e o mes cadastrado ate
        //                //DateTime paramDE  = new DateTime(dataAdmissao.Year, dataAdmissao.Month, dtAdmissaoDe_Cadastrada.Day);
        //                //DateTime paramATE = new DateTime(dataAdmissao.AddMonths(cal.AdmissaoAte_Tipo+1).Year, paramDE.AddMonths(cal.AdmissaoAte_Tipo+fatorSoma).Month, dtAdmissaoAte_Cadastrada.Day);

        //                //if (paramDE <= dataAdmissao && paramATE >= dataAdmissao)
        //                //{
        //                //    try 
        //                //    {
        //                //        vigencia = new DateTime(
        //                //            paramATE.AddMonths(cal.VigenciaTipo).Year,
        //                //            paramATE.AddMonths(cal.VigenciaTipo).Month, cal.VigenciaDia);
        //                //    }
        //                //    catch
        //                //    {
        //                //        vigencia = new DateTime(
        //                //            paramATE.AddMonths(cal.VigenciaTipo).Year,
        //                //            paramATE.AddMonths(cal.VigenciaTipo).Month,
        //                //            ultimoDiaDoMes(paramATE.AddMonths(cal.VigenciaTipo).Month, paramATE.AddMonths(cal.VigenciaTipo).Year));
        //                //    }

        //                //    CalendarioVencimento cv = listaVencto[0];
        //                //    try 
        //                //    {
        //                //        vencimento = new DateTime(
        //                //            paramATE.AddMonths(cv.VencimentoTipo).Year,
        //                //            paramATE.AddMonths(cv.VencimentoTipo).Month, cv.VencimentoDia);
        //                //    }
        //                //    catch
        //                //    {
        //                //        vencimento = new DateTime(
        //                //            paramATE.AddMonths(cv.VencimentoTipo).Year,
        //                //            paramATE.AddMonths(cv.VencimentoTipo).Month,
        //                //            ultimoDiaDoMes(paramATE.AddMonths(cv.VencimentoTipo).Month, paramATE.AddMonths(cv.VencimentoTipo).Year));
        //                //    }

        //                //    diaDataSemJuros = cv.DataSemJuros_Dia;
        //                //    valorDataLimite = cv.DataLimite_Valor;

        //                continue;//return;
        //                //}
        //            }
        //        }
        //    }
        //}

        //[DBTable("calendarioVencimento")]
        //public class CalendarioVencimento : EntityBase, IPersisteableEntity
        //{
        //    public enum eDataLimiteTipo : int
        //    {
        //        TodoDia = 1,
        //        TextoPersonalizado
        //    }

        //    #region campos

        //    Object _id;
        //    Object _calendarioAdmissaoId;
        //    Int32 _vencimentoDia;
        //    Int32 _vencimentoTipo;
        //    Int32 _dataSemJuros_Dia;
        //    Int32 _dataLimite_Tipo;
        //    Object _dataLimite_Valor;
        //    DateTime _data;
        //    Int32 _limiteAposVencimento;
        //    #endregion

        //    #region propriedades

        //    [DBFieldInfo("calendariovencto_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("calendariovencto_calendarioAdmissaoId", FieldType.Single)]
        //    public Object CalendarioAdmissaoID
        //    {
        //        get { return _calendarioAdmissaoId; }
        //        set { _calendarioAdmissaoId = value; }
        //    }

        //    [DBFieldInfo("calendario_vencimentoDia", FieldType.Single)]
        //    public Int32 VencimentoDia
        //    {
        //        get { return _vencimentoDia; }
        //        set { _vencimentoDia = value; }
        //    }

        //    [DBFieldInfo("calendariovencto_vencimentoTipo", FieldType.Single)]
        //    public Int32 VencimentoTipo
        //    {
        //        get { return _vencimentoTipo; }
        //        set { _vencimentoTipo = value; }
        //    }

        //    public String StrVencimentoTipo
        //    {
        //        get { return CalendarioHelper.TraduzTipo(_vencimentoTipo, false); }
        //    }

        //    [DBFieldInfo("calendariovencto_dataSemJurosDia", FieldType.Single)]
        //    public Int32 DataSemJuros_Dia
        //    {
        //        get { return _dataSemJuros_Dia; }
        //        set { _dataSemJuros_Dia = value; }
        //    }

        //    [DBFieldInfo("calendariovencto_dataLimiteTipo", FieldType.Single)]
        //    public Int32 DataLimite_Tipo
        //    {
        //        get { return _dataLimite_Tipo; }
        //        set { _dataLimite_Tipo = value; }
        //    }

        //    [DBFieldInfo("calendariovencto_dataLimiteValor", FieldType.Single)]
        //    public Object DataLimite_Valor
        //    {
        //        get { return _dataLimite_Valor; }
        //        set { _dataLimite_Valor = value; }
        //    }

        //    public String strDataLimite
        //    {
        //        get
        //        {
        //            if (_dataLimite_Valor == null) { return "&nbsp;"; }
        //            if (_dataLimite_Tipo == (Int32)eDataLimiteTipo.TextoPersonalizado)
        //                return Convert.ToString(_dataLimite_Valor);
        //            else
        //                return "Todo dia " + Convert.ToString(_dataLimite_Valor);
        //        }
        //    }

        //    [DBFieldInfo("calendariovencto_data", FieldType.Single)]
        //    public DateTime Data
        //    {
        //        get { return _data; }
        //        set { _data = value; }
        //    }

        //    public String strData
        //    {
        //        get
        //        {
        //            if (_data == DateTime.MinValue) { return "&nbsp;"; }
        //            else { return _data.ToString("dd/MM/yyyy"); }
        //        }
        //    }

        //    [DBFieldInfo("calendariovencto_limiteAposVencimento", FieldType.Single)]
        //    public Int32 LimiteAposVencimento
        //    {
        //        get { return _limiteAposVencimento; }
        //        set { _limiteAposVencimento = value; }
        //    }

        //    public String strLimiteAposVencimento
        //    {
        //        get
        //        {
        //            if (_limiteAposVencimento <= 0) return "nenhum";

        //            return _limiteAposVencimento.ToString() + " após o vencimento";
        //        }
        //    }

        //    #endregion

        //    public CalendarioVencimento() { _data = DateTime.Now; }
        //    public CalendarioVencimento(Object id) : this() { _id = id; }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static IList<CalendarioVencimento> CarregarTodos(Object calendarioAdmissaoId)
        //    {
        //        String qry = "* FROM calendarioVencimento WHERE calendariovencto_calendarioAdmissaoId=" + calendarioAdmissaoId + " ORDER BY calendariovencto_data DESC";

        //        return LocatorHelper.Instance.ExecuteQuery<CalendarioVencimento>(qry, typeof(CalendarioVencimento));
        //    }

        //    public static IList<CalendarioVencimento> CarregarTodos(Object calendarioAdmissaoId, PersistenceManager pm)
        //    {
        //        String qry = "* FROM calendarioVencimento WHERE calendariovencto_calendarioAdmissaoId=" + calendarioAdmissaoId + " ORDER BY calendariovencto_data DESC";

        //        return LocatorHelper.Instance.ExecuteQuery<CalendarioVencimento>(qry, typeof(CalendarioVencimento), pm);
        //    }
        //}

        //[DBTable("comissao_modelo")]
        //public class Comissionamento : EntityBase, IPersisteableEntity
        //{
        //    public enum eTipo : int
        //    {
        //        RecebidoDaOperadora = 0,
        //        PagoAoOperador
        //    }

        //    Object _id;
        //    //Object _contratoAdmId;
        //    Object _grupoId;
        //    Object _categoriaId;
        //    String _descricao;
        //    DateTime _data;
        //    Int32 _idadeEspecial;
        //    Int32 _tipo;

        //    //Boolean _vitalicia;
        //    //Int32 _vitaliciaNumeroParcela;
        //    //Decimal _vitaliciaPercentual;

        //    Object _atualId;
        //    String _categoriaNome;
        //    String _categoriaPerfilDescricao;

        //    #region propriedades

        //    [DBFieldInfo("comissaomodelo_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("comissaomodelo_grupoId", FieldType.Single)]
        //    public Object GrupoID
        //    {
        //        get { return _grupoId; }
        //        set { _grupoId = value; }
        //    }

        //    //[DBFieldInfo("comissaomodelo_descricao", FieldType.Single)]
        //    public String Descricao
        //    {
        //        get { return _categoriaNome + " - " + _data.ToString("dd/MM/yyyy"); }
        //        set { _descricao = value; }
        //    }

        //    //[DBFieldInfo("comissaomodelo_vitalicia", FieldType.Single)]
        //    //public Boolean Vitalicia
        //    //{
        //    //    get { return _vitalicia; }
        //    //    set { _vitalicia= value; }
        //    //}

        //    //[DBFieldInfo("comissaomodelo_vitaliciaNumParcela", FieldType.Single)]
        //    //public int VitaliciaNumeroParcela
        //    //{
        //    //    get { return _vitaliciaNumeroParcela; }
        //    //    set { _vitaliciaNumeroParcela= value; }
        //    //}

        //    //[DBFieldInfo("comissaomodelo_vitaliciaPercentual", FieldType.Single)]
        //    //public Decimal VitaliciaPercentual
        //    //{
        //    //    get { return _vitaliciaPercentual; }
        //    //    set { _vitaliciaPercentual= value; }
        //    //}

        //    [DBFieldInfo("comissaomodelo_categoriaId", FieldType.Single)]
        //    public Object CategoriaID
        //    {
        //        get { return _categoriaId; }
        //        set { _categoriaId = value; }
        //    }

        //    //[DBFieldInfo("comissaomodelo_contratoAdmId", FieldType.Single)]
        //    [Obsolete("Em desuso.", false)]
        //    public Object ContratoAdmID
        //    {
        //        get { return null;/*_contratoAdmId;*/ }
        //        set { /*_contratoAdmId = value;*/ }
        //    }

        //    [DBFieldInfo("comissaomodelo_data", FieldType.Single)]
        //    public DateTime Data
        //    {
        //        get { return _data; }
        //        set { _data = value; }
        //    }

        //    [DBFieldInfo("comissaomodelo_idadeEspecial", FieldType.Single)]
        //    public Int32 IdadeEspecial
        //    {
        //        get { return _idadeEspecial; }
        //        set { _idadeEspecial = value; }
        //    }

        //    [DBFieldInfo("comissaomodelo_tipo", FieldType.Single)]
        //    public Int32 Tipo
        //    {
        //        get { return _tipo; }
        //        set { _tipo = value; }
        //    }

        //    [Joinned("contratoadm_tabelaComissionamentoAtivaId")]
        //    public Object AtualID
        //    {
        //        get { return _atualId; }
        //        set { _atualId = value; }
        //    }

        //    [Joinned("categoria_descricao")]
        //    public String CategoriaNome
        //    {
        //        get { return _categoriaNome; }
        //        set { _categoriaNome = value; }
        //    }

        //    [Joinned("perfil_descricao")]
        //    public String Categoria_PerfilDescricao
        //    {
        //        get { return _categoriaPerfilDescricao; }
        //        set { _categoriaPerfilDescricao = value; }
        //    }
        //    #endregion

        //    public ComissionamentoItem ComissionamentoItem
        //    {
        //        get
        //        {
        //            throw new System.NotImplementedException();
        //        }
        //        set
        //        {
        //        }
        //    }
        //    public ComissionamentoItem ComissionamentoItem1
        //    {
        //        get
        //        {
        //            throw new System.NotImplementedException();
        //        }
        //        set
        //        {
        //        }
        //    }

        //    public Comissionamento() { _tipo = (int)eTipo.RecebidoDaOperadora; }
        //    public Comissionamento(Object id) : this() { _id = id; }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        PersistenceManager pm = new PersistenceManager();
        //        pm.BeginTransactionContext();
        //        //String query = "DELETE FROM comissao_modelo_item WHERE comissaomodeloitem_grupoId=" + this._id;

        //        try
        //        {
        //            //NonQueryHelper.Instance.ExecuteNonQuery(query, pm);
        //            //query = "DELETE FROM comissao_modelo_vitaliciedade WHERE comissaovitalicia_comissaoId=" + this.ID;
        //            //NonQueryHelper.Instance.ExecuteNonQuery(query, pm);
        //            pm.Remove(this);
        //            pm.Commit();
        //        }
        //        catch (Exception ex)
        //        {
        //            pm.Rollback();
        //            throw ex;
        //        }
        //        finally
        //        {
        //            pm = null;
        //        }
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static IList<Comissionamento> CarregarTodos(eTipo tipo)
        //    {
        //        String query = "comissao_modelo.*, contratoadm_tabelaComissionamentoAtivaId, categoria_descricao, perfil_descricao FROM comissao_modelo LEFT JOIN categoria ON comissaomodelo_categoriaId = categoria_id LEFT JOIN perfil ON categoria_perfilId=perfil_id LEFT JOIN contratoADM ON comissaomodelo_id=contratoadm_tabelaComissionamentoAtivaId WHERE comissaomodelo_tipo=" + Convert.ToInt32(tipo) + " ORDER BY comissaomodelo_descricao";
        //        return LocatorHelper.Instance.ExecuteQuery<Comissionamento>(query, typeof(Comissionamento));
        //    }

        //    public static IList<Comissionamento> CarregarTodos(eTipo tipo, Object perfilId)
        //    {
        //        String query = "comissao_modelo.*, contratoadm_tabelaComissionamentoAtivaId, categoria_descricao, perfil_descricao FROM comissao_modelo LEFT JOIN categoria ON comissaomodelo_categoriaId = categoria_id LEFT JOIN perfil ON categoria_perfilId=perfil_id LEFT JOIN contratoADM ON comissaomodelo_id=contratoadm_tabelaComissionamentoAtivaId WHERE comissaomodelo_tipo=" + Convert.ToInt32(tipo) + " AND categoria_perfilId=" + perfilId + " ORDER BY comissaomodelo_descricao";
        //        return LocatorHelper.Instance.ExecuteQuery<Comissionamento>(query, typeof(Comissionamento));
        //    }

        //    public static IList<Comissionamento> CarregarPorContratoId(Object contratoAdmId, eTipo tipo)
        //    {
        //        String query = String.Concat("comissao_modelo.*, contratoadm_tabelaComissionamentoAtivaId, categoria_descricao FROM comissao_modelo LEFT JOIN categoria ON comissaomodelo_categoriaId = categoria_id LEFT JOIN contratoADM ON comissaomodelo_id=contratoadm_tabelaComissionamentoAtivaId WHERE comissaomodelo_tipo=", Convert.ToInt32(tipo), " AND comissaomodelo_contratoAdmId=", contratoAdmId, " ORDER BY comissaomodelo_descricao");
        //        return LocatorHelper.Instance.ExecuteQuery<Comissionamento>(query, typeof(Comissionamento));
        //    }

        //    public static Boolean ExisteTabelaComVigenciaInformada(Object categoriaId, DateTime vigencia, Object tabelaId)
        //    {
        //        String query = "SELECT COUNT(*) FROM comissao_modelo WHERE comissaomodelo_categoriaId=@CategID AND CONVERT(VARCHAR(20), comissaomodelo_data, 103)=@Data";
        //        if (tabelaId != null)
        //        {
        //            query += " AND comissaomodelo_id <> " + tabelaId;
        //        }

        //        Int32 result = Convert.ToInt32(LocatorHelper.Instance.ExecuteScalar(query, new String[] { "@CategID", "@Data" }, new String[] { Convert.ToString(categoriaId), vigencia.ToString("dd/MM/yyyy") }));

        //        return result > 0;
        //    }
        //}

        //[Serializable]
        //[DBTable("comissao_modelo_item")]
        //public class ComissionamentoItem : EntityBase, IPersisteableEntity, IComissionamentoItem
        //{
        //    Object _id;
        //    Object _comissionamentoId;
        //    //Object _contratoId;
        //    Int32 _parcela;
        //    Decimal _percentual;
        //    Decimal _percentualCompraCarencia;
        //    Decimal _percentualMigracao;
        //    Decimal _percentualADM;
        //    Decimal _percentualEspecial;
        //    Decimal _percentualIdade;

        //    #region propriedades

        //    [DBFieldInfo("comissaomodeloitem_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    /// <summary>
        //    /// ID do grupo de comissionamento à qual pertence este item.
        //    /// </summary>
        //    [DBFieldInfo("comissaomodeloitem_grupoId", FieldType.Single)]
        //    public Object OwnerID
        //    {
        //        get { return _comissionamentoId; }
        //        set { _comissionamentoId = value; }
        //    }

        //    //[DBFieldInfo("comissaomodeloitem_contratoid", FieldType.Single)]
        //    //public Object ContratoID
        //    //{
        //    //    get { return _contratoId; }
        //    //    set { _contratoId= value; }
        //    //}

        //    [DBFieldInfo("comissaomodeloitem_parcela", FieldType.Single)]
        //    public Int32 Parcela
        //    {
        //        get { return _parcela; }
        //        set { _parcela = value; }
        //    }

        //    [DBFieldInfo("comissaomodeloitem_percentual", FieldType.Single)]
        //    public Decimal Percentual
        //    {
        //        get { return _percentual; }
        //        set { _percentual = value; }
        //    }

        //    [DBFieldInfo("comissaomodeloitem_percentualCompraCarencia", FieldType.Single)]
        //    public Decimal PercentualCompraCarencia
        //    {
        //        get { return _percentualCompraCarencia; }
        //        set { _percentualCompraCarencia = value; }
        //    }

        //    [DBFieldInfo("comissaomodeloitem_percentualMigracao", FieldType.Single)]
        //    public Decimal PercentualMigracao
        //    {
        //        get { return _percentualMigracao; }
        //        set { _percentualMigracao = value; }
        //    }

        //    [DBFieldInfo("comissaomodeloitem_percentualADM", FieldType.Single)]
        //    public Decimal PercentualADM
        //    {
        //        get { return _percentualADM; }
        //        set { _percentualADM = value; }
        //    }

        //    [DBFieldInfo("comissaomodeloitem_percentualEspecial", FieldType.Single)]
        //    public Decimal PercentualEspecial
        //    {
        //        get { return _percentualEspecial; }
        //        set { _percentualEspecial = value; }
        //    }

        //    [DBFieldInfo("comissaomodeloitem_idade", FieldType.Single)]
        //    public Decimal Idade
        //    {
        //        get { return _percentualIdade; }
        //        set { _percentualIdade = value; }
        //    }

        //    #endregion

        //    public ComissionamentoItem() { }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static IList<ComissionamentoItem> CarregarPorGrupoID(Object grupoId)
        //    {
        //        String query = "* FROM comissao_modelo_item WHERE comissaomodeloitem_grupoId=" + grupoId + " ORDER BY comissaomodeloitem_parcela";
        //        return LocatorHelper.Instance.ExecuteQuery<ComissionamentoItem>(query, typeof(ComissionamentoItem));
        //    }

        //    public static IList<ComissionamentoItem> Carregar(Object grupoId)
        //    {
        //        return Carregar(grupoId, null);
        //    }
        //    public static IList<ComissionamentoItem> Carregar(Object grupoId, PersistenceManager pm)
        //    {
        //        String query = "* FROM comissao_modelo_item WHERE comissaomodeloitem_grupoId=" + grupoId + " ORDER BY comissaomodeloitem_parcela";
        //        return LocatorHelper.Instance.ExecuteQuery<ComissionamentoItem>(query, typeof(ComissionamentoItem), pm);
        //    }
        //}

        //[DBTable("comissao_modelo_vitaliciedade")]
        //public class ComissionamentoVitaliciedade : EntityBase, IPersisteableEntity
        //{
        //    Object _id;
        //    Object _grupoId;
        //    Int32 _tipoColunaComissao;
        //    Boolean _vitalicia;
        //    Int32 _vitaliciaNumeroParcela;
        //    Decimal _vitaliciaPercentual;

        //    #region propeties

        //    [DBFieldInfo("comissaovitalicia_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("comissaovitalicia_grupoId", FieldType.Single)]
        //    public Object GrupoID
        //    {
        //        get { return _grupoId; }
        //        set { _grupoId = value; }
        //    }

        //    //[DBFieldInfo("comissaovitalicia_contratoId", FieldType.Single)]
        //    //public Object ContratoID
        //    //{
        //    //    get { return _contratoId; }
        //    //    set { _contratoId= value; }
        //    //}

        //    [DBFieldInfo("comissaovitalicia_tipoColunaComissao", FieldType.Single)]
        //    public Int32 TipoColunaComissao
        //    {
        //        get { return _tipoColunaComissao; }
        //        set { _tipoColunaComissao = value; }
        //    }

        //    [DBFieldInfo("comissaovitalicia_vitalicia", FieldType.Single)]
        //    public Boolean Vitalicia
        //    {
        //        get { return _vitalicia; }
        //        set { _vitalicia = value; }
        //    }

        //    [DBFieldInfo("comissaovitalicia_parcelaInicio", FieldType.Single)]
        //    public Int32 ParcelaInicio
        //    {
        //        get { return _vitaliciaNumeroParcela; }
        //        set { _vitaliciaNumeroParcela = value; }
        //    }

        //    [DBFieldInfo("comissaovitalicia_percentual", FieldType.Single)]
        //    public Decimal Percentual
        //    {
        //        get { return _vitaliciaPercentual; }
        //        set { _vitaliciaPercentual = value; }
        //    }

        //    #endregion

        //    public ComissionamentoVitaliciedade() { _vitaliciaNumeroParcela = 0; _vitalicia = false; _vitaliciaPercentual = 0; }
        //    public ComissionamentoVitaliciedade(Object id) : this() { this._id = id; }

        //    #region base methods

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    #endregion

        //    public static ComissionamentoVitaliciedade Carregar(Object grupoId, TipoContrato.TipoComissionamentoProdutorOuOperadora tipo)
        //    {
        //        return Carregar(grupoId, tipo, null);
        //    }
        //    public static ComissionamentoVitaliciedade Carregar(Object grupoId, TipoContrato.TipoComissionamentoProdutorOuOperadora tipo, PersistenceManager pm)
        //    {
        //        String sql = "* FROM comissao_modelo_vitaliciedade WHERE comissaovitalicia_grupoId=" + grupoId + " AND comissaovitalicia_tipoColunaComissao=" + Convert.ToInt32(tipo);
        //        IList<ComissionamentoVitaliciedade> lista = LocatorHelper.Instance.ExecuteQuery<ComissionamentoVitaliciedade>(sql, typeof(ComissionamentoVitaliciedade), pm);
        //        if (lista == null || lista.Count == 0)
        //            return null;
        //        else
        //            return lista[0];
        //    }
        //}

        //[DBTable("comissao_modelo_idade")]
        //public class ComissionamentoIdade : EntityBase, IPersisteableEntity
        //{
        //    Object _id;
        //    Object _comissionamentoId;
        //    Int32 _idade;

        //    #region propriedades

        //    [DBFieldInfo("comissaoidade_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("comissaoidade_comissaoid", FieldType.Single)]
        //    public Object ComissionamentoID
        //    {
        //        get { return _comissionamentoId; }
        //        set { _comissionamentoId = value; }
        //    }

        //    [DBFieldInfo("comissaoidade_idade", FieldType.Single)]
        //    public int Idade
        //    {
        //        get { return _idade; }
        //        set { _idade = value; }
        //    }

        //    public String Resumo
        //    {
        //        get
        //        {
        //            return String.Concat("Condição para idade acima de ", _idade, " anos");
        //        }
        //    }

        //    #endregion

        //    public ComissionamentoIdade() { }
        //    public ComissionamentoIdade(Object id) { _id = id; }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        PersistenceManager pm = new PersistenceManager();
        //        pm.BeginTransactionContext();
        //        String query = "DELETE FROM comissao_modelo_idade_item WHERE comissaoidadeitem_comissaoidadeid=" + this.ID;

        //        try
        //        {
        //            NonQueryHelper.Instance.ExecuteNonQuery(query, pm);
        //            pm.Remove(this);
        //            pm.Commit();
        //        }
        //        catch (Exception ex)
        //        {
        //            pm.Rollback();
        //            throw ex;
        //        }
        //        finally
        //        {
        //            pm = null;
        //        }
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static IList<ComissionamentoIdade> Carregar(Object comissaoModeloId)
        //    {
        //        String query = "* FROM comissao_modelo_idade WHERE comissaoidade_comissaoid=" + comissaoModeloId;
        //        return LocatorHelper.Instance.ExecuteQuery<ComissionamentoIdade>(query, typeof(ComissionamentoIdade));
        //    }
        //}

        //[Serializable()]
        //[DBTable("comissao_modelo_idade_item")]
        //public class ComissionamentoIdadeItem : EntityBase, IPersisteableEntity
        //{
        //    Object _id;
        //    Object _comissionamentoIdadeId;
        //    Int32 _parcela;
        //    Decimal _percentual;

        //    #region propriedades

        //    [DBFieldInfo("comissaoidadeitem_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("comissaoidadeitem_comissaoidadeid", FieldType.Single)]
        //    public Object ComissionamentoIdadeID
        //    {
        //        get { return _comissionamentoIdadeId; }
        //        set { _comissionamentoIdadeId = value; }
        //    }

        //    [DBFieldInfo("comissaoidadeitem_parcela", FieldType.Single)]
        //    public int Parcela
        //    {
        //        get { return _parcela; }
        //        set { _parcela = value; }
        //    }

        //    [DBFieldInfo("comissaoidadeitem_percentual", FieldType.Single)]
        //    public Decimal Percentual
        //    {
        //        get { return _percentual; }
        //        set { _percentual = value; }
        //    }

        //    #endregion

        //    public ComissionamentoIdadeItem() { }
        //    public ComissionamentoIdadeItem(Object id) { _id = id; }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static IList<ComissionamentoIdadeItem> Carregar(Object comissaoModeloIdadeId)
        //    {
        //        String query = "* FROM comissao_modelo_idade_item WHERE comissaoidadeitem_comissaoidadeid=" + comissaoModeloIdadeId;
        //        return LocatorHelper.Instance.ExecuteQuery<ComissionamentoIdadeItem>(query, typeof(ComissionamentoIdadeItem));
        //    }
        //}

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //[DBTable("comissaoGrupo")]
        //public class ComissionamentoGrupo : EntityBase, IPersisteableEntity
        //{
        //    Object _id;
        //    Object _tabelaId;
        //    String _descricao;

        //    Decimal _totalNormal;

        //    #region propriedades

        //    [DBFieldInfo("comissaogrupo_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("comissaogrupo_tabelaComissaoId", FieldType.Single)]
        //    public Object TabelaComissionamentoID
        //    {
        //        get { return _tabelaId; }
        //        set { _tabelaId = value; }
        //    }

        //    [DBFieldInfo("comissaogrupo_descricao", FieldType.Single)]
        //    public String Descricao
        //    {
        //        get { return _descricao; }
        //        set { _descricao = value; }
        //    }

        //    [Joinned("TotalNormal")]
        //    public Decimal TotalNormal
        //    {
        //        get { return _totalNormal; }
        //        set { _totalNormal = value; }
        //    }

        //    #endregion

        //    public ComissionamentoGrupo() { }
        //    public ComissionamentoGrupo(Object id) { _id = id; }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        PersistenceManager pm = new PersistenceManager();
        //        pm.BeginTransactionContext();

        //        try
        //        {
        //            String cmd = "DELETE FROM comissao_modelo_item WHERE comissaomodeloitem_grupoId=" + this._id;
        //            NonQueryHelper.Instance.ExecuteNonQuery(cmd, pm);
        //            cmd = "DELETE FROM comissaoGrupo_contratoExcluido WHERE grupoId=" + this._id;
        //            NonQueryHelper.Instance.ExecuteNonQuery(cmd, pm);
        //            cmd = "DELETE FROM comissao_modelo_vitaliciedade WHERE comissaovitalicia_grupoId=" + this._id;
        //            NonQueryHelper.Instance.ExecuteNonQuery(cmd, pm);

        //            pm.Remove(this);

        //            pm.Commit();
        //        }
        //        catch (Exception ex)
        //        {
        //            pm.Rollback();
        //            throw ex;
        //        }
        //        finally
        //        {
        //            pm = null;
        //        }
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static IList<ComissionamentoGrupo> CarregarTodos(Object tabelaId)
        //    {
        //        return CarregarTodos(tabelaId, null);
        //    }
        //    public static IList<ComissionamentoGrupo> CarregarTodos(Object tabelaId, PersistenceManager pm)
        //    {
        //        String query = "comissaoGrupo.*, SUM(comissaomodeloitem_percentual) as TotalNormal FROM comissaoGrupo LEFT JOIN comissao_modelo_item ON comissaogrupo_id=comissaomodeloitem_grupoId WHERE comissaogrupo_tabelaComissaoId=" + tabelaId + " GROUP BY comissaogrupo_id,comissaogrupo_tabelaComissaoId,comissaogrupo_descricao ORDER BY comissaogrupo_descricao";
        //        return LocatorHelper.Instance.ExecuteQuery<ComissionamentoGrupo>(query, typeof(ComissionamentoGrupo), pm);
        //    }

        //    public static Object ObterID(Object tabelaId, Object contratoAdmId, PersistenceManager pm)
        //    {
        //        String query = "SELECT contratoadmgrupo_grupoId FROM contratoAdmGrupo WHERE contratoadmgrupo_tabelaId=" + tabelaId + " AND contratoadmgrupo_contratoAdmId=" + contratoAdmId;
        //        return LocatorHelper.Instance.ExecuteScalar(query, null, null, pm);
        //    }
        //}

        //#region ComissionamentoGrupoItem - comentado
        ////[Serializable]
        ////[DBTable("comissaoGrupo_item")]
        ////public class ComissionamentoGrupoItem : EntityBase, IPersisteableEntity, IComissionamentoItem
        ////{
        ////    Object _id;
        ////    Object _grupoId;
        ////    Object _contratoId;
        ////    Int32 _parcela;
        ////    Decimal _percentual;
        ////    Decimal _percentualCompraCarencia;
        ////    Decimal _percentualMigracao;
        ////    Decimal _percentualADM;
        ////    Decimal _percentualEspecial;
        ////    Decimal _percentualIdade;

        ////    #region propriedades 

        ////    [DBFieldInfo("comissaogrupoitem_id", FieldType.PrimaryKeyAndIdentity)]
        ////    public Object ID
        ////    {
        ////        get { return _id; }
        ////        set { _id= value; }
        ////    }

        ////    /// <summary>
        ////    /// ID do grupo ao qual pertence este item.
        ////    /// </summary>
        ////    [DBFieldInfo("comissaogrupoitem_grupoid", FieldType.Single)]
        ////    public Object OwnerID
        ////    {
        ////        get { return _grupoId; }
        ////        set { _grupoId= value; }
        ////    }

        ////    [DBFieldInfo("comissaogrupoitem_parcela", FieldType.Single)]
        ////    public Int32 Parcela
        ////    {
        ////        get { return _parcela; }
        ////        set { _parcela= value; }
        ////    }

        ////    [DBFieldInfo("comissaogrupoitem_percentual", FieldType.Single)]
        ////    public Decimal Percentual
        ////    {
        ////        get { return _percentual; }
        ////        set { _percentual= value; }
        ////    }

        ////    [DBFieldInfo("comissaogrupoitem_percentualCompraCarencia", FieldType.Single)]
        ////    public Decimal PercentualCompraCarencia
        ////    {
        ////        get { return _percentualCompraCarencia; }
        ////        set { _percentualCompraCarencia= value; }
        ////    }

        ////    [DBFieldInfo("comissaogrupoitem_percentualMigracao", FieldType.Single)]
        ////    public Decimal PercentualMigracao
        ////    {
        ////        get { return _percentualMigracao; }
        ////        set { _percentualMigracao= value; }
        ////    }

        ////    [DBFieldInfo("comissaogrupoitem_percentualADM", FieldType.Single)]
        ////    public Decimal PercentualADM
        ////    {
        ////        get { return _percentualADM; }
        ////        set { _percentualADM= value; }
        ////    }

        ////    [DBFieldInfo("comissaogrupoitem_percentualEspecial", FieldType.Single)]
        ////    public Decimal PercentualEspecial
        ////    {
        ////        get { return _percentualEspecial; }
        ////        set { _percentualEspecial= value; }
        ////    }

        ////    [DBFieldInfo("comissaogrupoitem_idade", FieldType.Single)]
        ////    public Decimal Idade
        ////    {
        ////        get { return _percentualIdade; }
        ////        set { _percentualIdade= value; }
        ////    }

        ////    #endregion

        ////    public ComissionamentoGrupoItem() {}

        ////    #region métodos EntityBase 

        ////    public void Salvar()
        ////    {
        ////        base.Salvar(this);
        ////    }

        ////    public void Remover()
        ////    {
        ////        base.Remover(this);
        ////    }

        ////    public void Carregar()
        ////    {
        ////        base.Carregar(this);
        ////    }
        ////    #endregion

        ////    public static IList<ComissionamentoGrupoItem> CarregarPorGrupoID(Object grupoId)
        ////    {
        ////        String query = "* FROM comissaoGrupo_item WHERE comissaogrupoitem_grupoid=" + grupoId + " ORDER BY comissaogrupoitem_parcela";
        ////        return LocatorHelper.Instance.ExecuteQuery<ComissionamentoGrupoItem>(query, typeof(ComissionamentoGrupoItem));
        ////    }

        ////    public static IList<ComissionamentoGrupo> CarregarPorTabelaComissionamento(Object comissionamentoId, Object contratoId, PersistenceManager pm)
        ////    {
        ////        String query = String.Concat("comissaoGrupo_item.* ",
        ////            "   FROM comissaoGrupo_item ",
        ////            "       INNER JOIN comissao_modelo ON comissaomodelo_grupoId = comissaogrupoitem_grupoid ",
        ////            "   WHERE ",
        ////            "       comissaomodeloitem_comissaomodeloid=", comissionamentoId, " AND ",
        ////            "       comissaomodeloitem_contratoid=", contratoId,
        ////            "   ORDER BY comissaomodeloitem_parcela");

        ////        return LocatorHelper.Instance.ExecuteQuery<ComissionamentoGrupo>(query, typeof(ComissionamentoGrupo), pm);
        ////    }

        ////    public static IList<ComissionamentoGrupo> CarregarPorTabelaComissionamento(Object comissionamentoId, PersistenceManager pm)
        ////    {
        ////        String query = String.Concat("comissaoGrupo_item.* ",
        ////            "   FROM comissaoGrupo_item ",
        ////            "       INNER JOIN comissao_modelo ON comissaomodelo_grupoId = comissaogrupoitem_grupoid ",
        ////            "   WHERE ",
        ////            "       comissaomodeloitem_comissaomodeloid=", comissionamentoId,
        ////            "   ORDER BY comissaomodeloitem_parcela");

        ////        return LocatorHelper.Instance.ExecuteQuery<ComissionamentoGrupo>(query, typeof(ComissionamentoGrupo), pm);
        ////    }
        ////}
        //#endregion


        /////////////////////////////////////////////////////////////////////////////////////////

        //[DBTable("tabela_excecao")]
        //public class TabelaExcecao : EntityBase, IPersisteableEntity
        //{
        //    Object _id;
        //    Object _contratoAdmId;
        //    Object _produtorId;
        //    Object _tabelaComissionamentoId;
        //    DateTime _vigencia;

        //    Object _operadoraId;
        //    String _operadoraNome;
        //    String _contratoAdmDescricao;

        //    #region propriedades

        //    [DBFieldInfo("tabelaexcecao_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("tabelaexcecao_tabelaComissaoId", FieldType.Single)]
        //    public Object TabelaComissionamentoID
        //    {
        //        get { return _tabelaComissionamentoId; }
        //        set { _tabelaComissionamentoId = value; }
        //    }

        //    [DBFieldInfo("tabelaexcecao_contratoAdmId", FieldType.Single)]
        //    public Object ContratoAdmID
        //    {
        //        get { return _contratoAdmId; }
        //        set { _contratoAdmId = value; }
        //    }

        //    [DBFieldInfo("tabelaexcecao_produtorId", FieldType.Single)]
        //    public Object ProdutorID
        //    {
        //        get { return _produtorId; }
        //        set { _produtorId = value; }
        //    }

        //    [DBFieldInfo("tabelaexcecao_vigencia", FieldType.Single)]
        //    public DateTime Vigencia
        //    {
        //        get { return _vigencia; }
        //        set { _vigencia = value; }
        //    }

        //    [Joinned("operadora_id")]
        //    public Object OperadoraID
        //    {
        //        get { return _operadoraId; }
        //        set { _operadoraId = value; }
        //    }

        //    [Joinned("operadora_nome")]
        //    public String OperadoraNome
        //    {
        //        get { return _operadoraNome; }
        //        set { _operadoraNome = value; }
        //    }

        //    [Joinned("contratoadm_descricao")]
        //    public String ContratoAdmDescricao
        //    {
        //        get { return _contratoAdmDescricao; }
        //        set { _contratoAdmDescricao = value; }
        //    }

        //    #endregion

        //    public TabelaExcecao() { }
        //    public TabelaExcecao(Object id) { _id = id; }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        PersistenceManager pm = new PersistenceManager();
        //        pm.TransactionContext();
        //        String query = "DELETE FROM tabela_excecao_item WHERE excecaoitem_tabelaid=" + this.ID;

        //        try
        //        {
        //            NonQueryHelper.Instance.ExecuteNonQuery(query, pm);
        //            query = "DELETE FROM tabela_excecao_vitaliciedade WHERE tabelaexcecaovitalicia_tabelaExcecaoId=" + this.ID;
        //            NonQueryHelper.Instance.ExecuteNonQuery(query, pm);
        //            pm.Remove(this);
        //            pm.Commit();
        //        }
        //        catch (Exception ex)
        //        {
        //            pm.Rollback();
        //            throw ex;
        //        }
        //        finally
        //        {
        //            pm = null;
        //        }
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static IList<TabelaExcecao> Carregar(Object tabelaComissionamentoId, Object produtorId, DateTime vigencia)
        //    {
        //        return Carregar(tabelaComissionamentoId, produtorId, null, vigencia, null);
        //    }

        //    public static IList<TabelaExcecao> Carregar(Object tabelaComissionamentoId, Object produtorId, Object contratoAdmId, DateTime vigencia, PersistenceManager pm)
        //    {
        //        String contratoAdmCond = "";
        //        if (contratoAdmId != null)
        //        {
        //            contratoAdmCond = " AND tabelaexcecao_contratoadmid=" + contratoAdmId;
        //        }

        //        String query = String.Concat("TOP 1 tabelaexcecao_id FROM tabela_excecao ",
        //            "WHERE tabelaexcecao_vigencia <= '", vigencia.ToString("yyyy-MM-dd"), "' AND tabelaexcecao_produtorId=", produtorId, " AND tabelaexcecao_tabelaComissaoId=", tabelaComissionamentoId, contratoAdmCond,
        //            " ORDER BY tabelaexcecao_vigencia DESC");

        //        return LocatorHelper.Instance.ExecuteQuery<TabelaExcecao>(query, typeof(TabelaExcecao), pm);
        //    }

        //    public static IList<TabelaExcecao> Carregar(Object tabelaComissionamentoId, Object produtorId)
        //    {
        //        return Carregar(tabelaComissionamentoId, produtorId, null);
        //    }

        //    public static IList<TabelaExcecao> Carregar(Object tabelaComissionamentoId, Object produtorId, PersistenceManager pm)
        //    {
        //        String query = String.Concat("tabela_excecao.*, operadora_id, operadora_nome, contratoadm_descricao ",
        //            "   FROM operadora ",
        //            "       INNER JOIN contratoAdm ON operadora_id=contratoadm_operadoraid ",
        //            "       INNER JOIN tabela_excecao ON tabelaexcecao_contratoAdmId=contratoadm_id ",
        //            "   WHERE tabelaexcecao_produtorId=", produtorId, " AND tabelaexcecao_tabelaComissaoId=", tabelaComissionamentoId);

        //        return LocatorHelper.Instance.ExecuteQuery<TabelaExcecao>(query, typeof(TabelaExcecao), pm);
        //    }

        //    public static IList<TabelaExcecao> Carregar(Object produtorId)
        //    {
        //        String query = String.Concat("tabela_excecao.*, operadora_id, operadora_nome, contratoadm_descricao ",
        //            "   FROM operadora ",
        //            "       INNER JOIN contratoAdm ON operadora_id=contratoadm_operadoraid ",
        //            "       INNER JOIN tabela_excecao ON tabelaexcecao_contratoAdmId=contratoadm_id ",
        //            "   WHERE tabelaexcecao_produtorId=", produtorId);

        //        return LocatorHelper.Instance.ExecuteQuery<TabelaExcecao>(query, typeof(TabelaExcecao));
        //    }
        //}

        //[Serializable]
        //[DBTable("tabela_excecao_item")]
        //public class ExcecaoItem : EntityBase, IPersisteableEntity
        //{
        //    Object _id;
        //    Object _tabelaExcecaoId;
        //    Int32 _parcela;
        //    Decimal _percentual;
        //    Decimal _percentualCompraCarencia;
        //    Decimal _percentualMigracao;
        //    Decimal _percentualADM;
        //    Decimal _percentualEspecial;
        //    Decimal _percentualIdade;

        //    #region propriedades

        //    [DBFieldInfo("excecaoitem_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("excecaoitem_tabelaid", FieldType.Single)]
        //    public Object TabelaExcecaoID
        //    {
        //        get { return _tabelaExcecaoId; }
        //        set { _tabelaExcecaoId = value; }
        //    }

        //    [DBFieldInfo("excecaoitem_parcela", FieldType.Single)]
        //    public Int32 Parcela
        //    {
        //        get { return _parcela; }
        //        set { _parcela = value; }
        //    }

        //    [DBFieldInfo("excecaoitem_percentual", FieldType.Single)]
        //    public Decimal Percentual
        //    {
        //        get { return _percentual; }
        //        set { _percentual = value; }
        //    }

        //    [DBFieldInfo("excecaoitem_percentualCompraCarencia", FieldType.Single)]
        //    public Decimal PercentualCompraCarencia
        //    {
        //        get { return _percentualCompraCarencia; }
        //        set { _percentualCompraCarencia = value; }
        //    }

        //    [DBFieldInfo("excecaoitem_percentualMigracao", FieldType.Single)]
        //    public Decimal PercentualMigracao
        //    {
        //        get { return _percentualMigracao; }
        //        set { _percentualMigracao = value; }
        //    }

        //    [DBFieldInfo("excecaoitem_percentualADM", FieldType.Single)]
        //    public Decimal PercentualADM
        //    {
        //        get { return _percentualADM; }
        //        set { _percentualADM = value; }
        //    }

        //    [DBFieldInfo("excecaoitem_percentualEspecial", FieldType.Single)]
        //    public Decimal PercentualEspecial
        //    {
        //        get { return _percentualEspecial; }
        //        set { _percentualEspecial = value; }
        //    }

        //    [DBFieldInfo("excecaoitem_idade", FieldType.Single)]
        //    public Decimal Idade
        //    {
        //        get { return _percentualIdade; }
        //        set { _percentualIdade = value; }
        //    }

        //    #endregion

        //    public ExcecaoItem() { }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static IList<ExcecaoItem> CarregarPorTabelaExcecaoID(Object tabelaExcecaoId)
        //    {
        //        return CarregarPorTabelaExcecaoID(tabelaExcecaoId, null);
        //    }

        //    public static IList<ExcecaoItem> CarregarPorTabelaExcecaoID(Object tabelaExcecaoId, PersistenceManager pm)
        //    {
        //        String query = "* FROM tabela_excecao_item WHERE excecaoitem_tabelaid=" + tabelaExcecaoId + " ORDER BY excecaoitem_parcela";
        //        return LocatorHelper.Instance.ExecuteQuery<ExcecaoItem>(query, typeof(ExcecaoItem), pm);
        //    }

        //    public static IList<ExcecaoItem> Carregar(Object produtorId, Object contratoId)
        //    {
        //        String query = "* FROM tabela_excecao_item WHERE excecaoitem_produtorId=" + produtorId + " AND excecaoitem_contratoid=" + contratoId + " ORDER BY excecaoitem_parcela";
        //        return LocatorHelper.Instance.ExecuteQuery<ExcecaoItem>(query, typeof(ExcecaoItem));
        //    }
        //}

        //[Serializable]
        //[DBTable("tabela_excecao_vitaliciedade")]
        //public class TabelaExcecaoVitaliciedade : EntityBase, IPersisteableEntity
        //{
        //    Object _id;
        //    Object _tabelaExcecaoId;
        //    Int32 _tipoColunaComissao;
        //    Boolean _vitalicia;
        //    Int32 _vitaliciaNumeroParcela;
        //    Decimal _vitaliciaPercentual;

        //    #region properties

        //    [DBFieldInfo("tabelaexcecaovitalicia_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("tabelaexcecaovitalicia_tabelaExcecaoId", FieldType.Single)]
        //    public Object TabelaExcecaoID
        //    {
        //        get { return _tabelaExcecaoId; }
        //        set { _tabelaExcecaoId = value; }
        //    }

        //    [DBFieldInfo("tabelaexcecaovitalicia_tipoColunaComissao", FieldType.Single)]
        //    public Int32 TipoColunaComissao
        //    {
        //        get { return _tipoColunaComissao; }
        //        set { _tipoColunaComissao = value; }
        //    }

        //    [DBFieldInfo("tabelaexcecaovitalicia_vitalicia", FieldType.Single)]
        //    public Boolean Vitalicia
        //    {
        //        get { return _vitalicia; }
        //        set { _vitalicia = value; }
        //    }

        //    [DBFieldInfo("tabelaexcecaovitalicia_parcelaInicio", FieldType.Single)]
        //    public Int32 ParcelaInicio
        //    {
        //        get { return _vitaliciaNumeroParcela; }
        //        set { _vitaliciaNumeroParcela = value; }
        //    }

        //    [DBFieldInfo("tabelaexcecaovitalicia_percentual", FieldType.Single)]
        //    public Decimal Percentual
        //    {
        //        get { return _vitaliciaPercentual; }
        //        set { _vitaliciaPercentual = value; }
        //    }

        //    #endregion

        //    public TabelaExcecaoVitaliciedade() { _vitaliciaNumeroParcela = 0; _vitalicia = false; _vitaliciaPercentual = 0; }
        //    public TabelaExcecaoVitaliciedade(Object id) : this() { this._id = id; }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static TabelaExcecaoVitaliciedade Carregar(Object tabelaId, TipoContrato.TipoComissionamentoProdutorOuOperadora tipo)
        //    {
        //        return Carregar(tabelaId, tipo, null);
        //    }

        //    public static TabelaExcecaoVitaliciedade Carregar(Object tabelaId, TipoContrato.TipoComissionamentoProdutorOuOperadora tipo, PersistenceManager pm)
        //    {
        //        String sql = "* FROM tabela_excecao_vitaliciedade WHERE tabelaexcecaovitalicia_tabelaExcecaoId=" + tabelaId + " AND tabelaexcecaovitalicia_tipoColunaComissao=" + Convert.ToInt32(tipo);
        //        IList<TabelaExcecaoVitaliciedade> lista = LocatorHelper.Instance.ExecuteQuery<TabelaExcecaoVitaliciedade>(sql, typeof(TabelaExcecaoVitaliciedade), pm);
        //        if (lista == null || lista.Count == 0)
        //            return null;
        //        else
        //            return lista[0];
        //    }
        //}

        /////////////////////////////////////////////////////////////////////////////////////////

        //[DBTable("listagem")]
        //public class Listagem : EntityBase, IPersisteableEntity
        //{
        //    Object _id;
        //    String _nome;
        //    String _mensagem;
        //    DateTime _dataCorte;
        //    DateTime _data;

        //    #region properties

        //    [DBFieldInfo("listagem_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("listagem_nome", FieldType.Single)]
        //    public String Nome
        //    {
        //        get { return _nome; }
        //        set { _nome = value; }
        //    }

        //    [DBFieldInfo("listagem_mensagem", FieldType.Single)]
        //    public String Mensagem
        //    {
        //        get { return _mensagem; }
        //        set { _mensagem = value; }
        //    }

        //    [DBFieldInfo("listagem_dataCorte", FieldType.Single)]
        //    public DateTime DataCorte
        //    {
        //        get { return _dataCorte; }
        //        set { _dataCorte = value; }
        //    }

        //    [DBFieldInfo("listagem_data", FieldType.Single)]
        //    public DateTime Data
        //    {
        //        get { return _data; }
        //        set { _data = value; }
        //    }
        //    #endregion

        //    public Listagem() { _data = DateTime.Now; }
        //    public Listagem(Object id) : this() { _id = id; }

        //    #region EntityBase methods

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static IList<Listagem> CarregaPorParametros(String nome, String[] filiais, String[] operadoras, String[] perfis, DateTime? dataDe, DateTime? dataAte, DateTime? dataCorte, Object produtorId)
        //    {
        //        String strWhere = "";
        //        String[] values = null;
        //        String[] pnames = null;
        //        List<String> paramNames = new List<String>();
        //        List<String> paramValue = new List<String>();
        //        String dtDe = "", dtAte = "", dtCorte = "";
        //        DateTime periodoDe = DateTime.MinValue, periodoAte = DateTime.MinValue, dataDeCorte = DateTime.MinValue;

        //        if (nome.ToString().Trim() != "")
        //        {
        //            strWhere += " AND listagem_nome LIKE @listagem_nome";
        //            paramNames.Add("@listagem_nome");
        //            paramValue.Add("%" + nome + "%");

        //            pnames = paramNames.ToArray();
        //            values = paramValue.ToArray();
        //        }

        //        if (filiais != null)
        //        {
        //            strWhere += " AND listagemfilial_filialId IN (" + String.Join(",", filiais) + ")";
        //        }

        //        if (operadoras != null)
        //        {
        //            strWhere += " AND listagemoperadora_operadoraId IN (" + String.Join(",", operadoras) + ")";
        //        }

        //        if (perfis != null)
        //        {
        //            strWhere += " AND listagemperfil_perfilId IN (" + String.Join(",", perfis) + ")";
        //        }

        //        if (dataDe != null && dataAte != null)
        //        {
        //            dtDe = dataDe.ToString();
        //            periodoDe = Convert.ToDateTime(dtDe);
        //            dtDe = periodoDe.ToString("yyyy-MM-dd");

        //            dtAte = dataAte.ToString();
        //            periodoAte = Convert.ToDateTime(dtAte);
        //            dtAte = periodoAte.ToString("yyyy-MM-dd");

        //            strWhere += " AND listagem_data >= '" + dtDe + " 00:00:00' ";
        //            strWhere += " AND listagem_data <= '" + dtAte + " 23:59:59' ";
        //        }

        //        if (dataCorte != null)
        //        {
        //            dtCorte = dataCorte.ToString();
        //            dataDeCorte = Convert.ToDateTime(dtCorte);
        //            dtCorte = dataDeCorte.ToString("yyyy-MM-dd");

        //            strWhere += " AND listagem_dataCorte = '" + dtCorte + "' ";
        //        }

        //        //if (produtorId != null)
        //        //{
        //        //    strWhere += " AND listagemrelacao_produtorId = " + produtorId;
        //        //}

        //        String query = String.Concat("",
        //            "SELECT DISTINCT(listagem_id), listagem.* ",
        //            "   FROM listagem ",
        //            "   INNER JOIN listagem_filial ON listagem_id = listagemfilial_listagemId ",
        //            "   INNER JOIN listagem_operadora ON listagem_id = listagemoperadora_listagemId ",
        //            "   INNER JOIN listagem_perfil ON listagem_id = listagemperfil_listagemId ",
        //            "   WHERE listagem_id > 0 ",
        //                strWhere,
        //            "   ORDER BY listagem_data DESC");

        //        return LocatorHelper.Instance.ExecuteParametrizedQuery<Listagem>
        //            (query, pnames, values, typeof(Listagem));
        //    }

        //    public static IList<Listagem> CarregaListagemAtual()
        //    {
        //        String query = String.Concat("",
        //            "SELECT TOP 1 * ",
        //            "   FROM listagem ",
        //            "   ORDER BY listagem_data DESC");

        //        return LocatorHelper.Instance.ExecuteParametrizedQuery<Listagem>
        //            (query, null, null, typeof(Listagem));
        //    }

        //    [DBTable("listagem_filial")]
        //    public class Filial : EntityBase, IPersisteableEntity
        //    {
        //        Object _id;
        //        Object _listagemId;
        //        Object _filialId;

        //        #region properties

        //        [DBFieldInfo("listagemfilial_id", FieldType.PrimaryKeyAndIdentity)]
        //        public Object ID
        //        {
        //            get { return _id; }
        //            set { _id = value; }
        //        }

        //        [DBFieldInfo("listagemfilial_listagemId", FieldType.Single)]
        //        public Object ListagemID
        //        {
        //            get { return _listagemId; }
        //            set { _listagemId = value; }
        //        }

        //        [DBFieldInfo("listagemfilial_filialId", FieldType.Single)]
        //        public Object FilialID
        //        {
        //            get { return _filialId; }
        //            set { _filialId = value; }
        //        }

        //        #endregion

        //        public Filial() { }
        //        public Filial(Object id) { _id = id; }

        //        #region EntityBase methods

        //        public void Salvar()
        //        {
        //            base.Salvar(this);
        //        }

        //        public void Remover()
        //        {
        //            base.Remover(this);
        //        }

        //        public void Carregar()
        //        {
        //            base.Carregar(this);
        //        }
        //        #endregion
        //    }

        //    [DBTable("listagem_operadora")]
        //    public class Operadora : EntityBase, IPersisteableEntity
        //    {
        //        Object _id;
        //        Object _listagemId;
        //        Object _operadoraId;

        //        #region properties

        //        [DBFieldInfo("listagemoperadora_id", FieldType.PrimaryKeyAndIdentity)]
        //        public Object ID
        //        {
        //            get { return _id; }
        //            set { _id = value; }
        //        }

        //        [DBFieldInfo("listagemoperadora_listagemId", FieldType.Single)]
        //        public Object ListagemID
        //        {
        //            get { return _listagemId; }
        //            set { _listagemId = value; }
        //        }

        //        [DBFieldInfo("listagemoperadora_operadoraId", FieldType.Single)]
        //        public Object OperadoraID
        //        {
        //            get { return _operadoraId; }
        //            set { _operadoraId = value; }
        //        }

        //        #endregion

        //        public Operadora() { }
        //        public Operadora(Object id) { _id = id; }

        //        #region EntityBase methods

        //        public void Salvar()
        //        {
        //            base.Salvar(this);
        //        }

        //        public void Remover()
        //        {
        //            base.Remover(this);
        //        }

        //        public void Carregar()
        //        {
        //            base.Carregar(this);
        //        }
        //        #endregion
        //    }

        //    [DBTable("listagem_perfil")]
        //    public class Perfil : EntityBase, IPersisteableEntity
        //    {
        //        Object _id;
        //        Object _listagemId;
        //        Object _perfilId;

        //        #region properties

        //        [DBFieldInfo("listagemperfil_id", FieldType.PrimaryKeyAndIdentity)]
        //        public Object ID
        //        {
        //            get { return _id; }
        //            set { _id = value; }
        //        }

        //        [DBFieldInfo("listagemperfil_listagemId", FieldType.Single)]
        //        public Object ListagemID
        //        {
        //            get { return _listagemId; }
        //            set { _listagemId = value; }
        //        }

        //        [DBFieldInfo("listagemperfil_perfilId", FieldType.Single)]
        //        public Object PerfilID
        //        {
        //            get { return _perfilId; }
        //            set { _perfilId = value; }
        //        }

        //        #endregion

        //        public Perfil() { }
        //        public Perfil(Object id) { _id = id; }

        //        #region EntityBase methods

        //        public void Salvar()
        //        {
        //            base.Salvar(this);
        //        }

        //        public void Remover()
        //        {
        //            base.Remover(this);
        //        }

        //        public void Carregar()
        //        {
        //            base.Carregar(this);
        //        }
        //        #endregion
        //    }
        //}

        //public interface IComissionamentoItem
        //{
        //    Object OwnerID
        //    {
        //        get;
        //        set;
        //    }

        //    //Object ContratoID
        //    //{
        //    //    get;
        //    //    set;
        //    //}

        //    Int32 Parcela
        //    {
        //        get;
        //        set;
        //    }

        //    Decimal Percentual
        //    {
        //        get;
        //        set;
        //    }

        //    Decimal PercentualCompraCarencia
        //    {
        //        get;
        //        set;
        //    }

        //    Decimal PercentualMigracao
        //    {
        //        get;
        //        set;
        //    }

        //    Decimal PercentualADM
        //    {
        //        get;
        //        set;
        //    }

        //    Decimal PercentualEspecial
        //    {
        //        get;
        //        set;
        //    }

        //    Decimal Idade
        //    {
        //        get;
        //        set;
        //    }
        //}

        /////////////////////////////////////////////////////////////////////////////////////////

        //[DBTable("listagem_agendamento")]
        //public class ListagemAgendamento : EntityBase, IPersisteableEntity
        //{
        //    public enum eStatusBusca : int
        //    {
        //        Todos,
        //        Pendentes,
        //        Processados
        //    }

        //    Object _id;
        //    String _descricao;
        //    Object _filialId;
        //    String _operadoraIds;
        //    DateTime _dataCorte;
        //    DateTime _processarEm;
        //    Boolean _processado;
        //    DateTime _processadoData;
        //    String _competencia;

        //    #region properties

        //    [DBFieldInfo("listagemagenda_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("listagemagenda_descricao", FieldType.Single)]
        //    public String Descricao
        //    {
        //        get { return _descricao; }
        //        set { _descricao = value; }
        //    }

        //    [DBFieldInfo("listagemagenda_filialId", FieldType.Single)]
        //    public Object FilialID
        //    {
        //        get { return _filialId; }
        //        set { _filialId = value; }
        //    }

        //    [DBFieldInfo("listagemagenda_operadoraIds", FieldType.Single)]
        //    public String OperadoraIDs
        //    {
        //        get { return _operadoraIds; }
        //        set { _operadoraIds = value; }
        //    }

        //    [DBFieldInfo("listagemagenda_dataCorte", FieldType.Single)]
        //    public DateTime DataCorte
        //    {
        //        get { return _dataCorte; }
        //        set { _dataCorte = value; }
        //    }

        //    [DBFieldInfo("listagemagenda_processarEm", FieldType.Single)]
        //    public DateTime ProcessarEm
        //    {
        //        get { return _processarEm; }
        //        set { _processarEm = value; }
        //    }

        //    [DBFieldInfo("listagemagenda_processado", FieldType.Single)]
        //    public Boolean Processado
        //    {
        //        get { return _processado; }
        //        set { _processado = value; }
        //    }

        //    [DBFieldInfo("listagemagenda_processadoData", FieldType.Single)]
        //    public DateTime ProcessadoData
        //    {
        //        get { return _processadoData; }
        //        set { _processadoData = value; }
        //    }

        //    [DBFieldInfo("listagemagenda_competencia", FieldType.Single)]
        //    public String Competencia
        //    {
        //        get { return _competencia; }
        //        set { _competencia = value; }
        //    }

        //    public String strProcessadoData
        //    {
        //        get
        //        {
        //            if (_processadoData == DateTime.MinValue)
        //                return String.Empty;
        //            else
        //                return _processadoData.ToString("dd/MM/yyyy HH:mm");
        //        }
        //    }

        //    #endregion

        //    public ListagemAgendamento() { _processado = false; }
        //    public ListagemAgendamento(Object id) : this() { _id = id; }

        //    #region EntityBase methods

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static IList<ListagemAgendamento> Carregar(DateTime? periodoDe, DateTime? periodoAte, DateTime? dataCorte, eStatusBusca status)
        //    {
        //        String qry = "* from listagem_agendamento where listagemagenda_id is not null ";

        //        if (dataCorte != null)
        //        {
        //            qry += String.Concat(" and day(listagemagenda_dataCorte)=", dataCorte.Value.Day, " and month(listagemagenda_dataCorte)=", dataCorte.Value.Month, " and year(listagemagenda_dataCorte)=", dataCorte.Value.Year);
        //        }

        //        if (periodoDe != null && periodoAte != null)
        //        {
        //            qry += String.Concat(" and listagemagenda_processarEm between '", periodoDe.Value.ToString("yyyy-MM-dd"), "' and '", periodoAte.Value.ToString("yyyy-MM-dd 23:59:59:997"), "'");
        //        }

        //        return LocatorHelper.Instance.ExecuteQuery<ListagemAgendamento>(qry, typeof(ListagemAgendamento));
        //    }

        //    public static ListagemAgendamento CarregarPendente()
        //    {
        //        String qry = "select top 1 * from listagem_agendamento where listagemagenda_processado=0 and listagemagenda_processarEm <= getdate()";

        //        IList<ListagemAgendamento> ret = LocatorHelper.Instance.ExecuteQuery<ListagemAgendamento>(qry, typeof(ListagemAgendamento));

        //        if (ret == null)
        //            return null;
        //        else
        //            return ret[0];
        //    }
        //}

        //[Serializable]
        //[DBTable("contratoADM")]
        //public class ContratoADM : EntityBase, IPersisteableEntity
        //{
        //    #region fields

        //    Object _id;
        //    Object _operadoraId;
        //    Object _estipulanteId;
        //    Object _tabelaComissionamentoAtivaId;
        //    String _descricao;
        //    String _contratoSaude;
        //    String _contratoDental;
        //    String _numero;
        //    DateTime _data;
        //    Boolean _ativo;
        //    String _codFilial;
        //    String _codUnidade;
        //    String _codAdministradora;

        //    String _operadoraDescricao;
        //    String _estipulanteDescricao;
        //    Decimal _totalNormal;

        //    Object _contratoGrupoId;

        //    #endregion

        //    #region propriedades

        //    [DBFieldInfo("contratoadm_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("contratoadm_tabelaComissionamentoAtivaId", FieldType.Single)]
        //    public Object TabelaComissionamentoAtivaID
        //    {
        //        get { return _tabelaComissionamentoAtivaId; }
        //        set { _tabelaComissionamentoAtivaId = value; }
        //    }

        //    [DBFieldInfo("contratoadm_descricao", FieldType.Single)]
        //    public String Descricao
        //    {
        //        get { return _descricao; }
        //        set { _descricao = value; }
        //    }

        //    [DBFieldInfo("contratoadm_contratoSaude", FieldType.Single)]
        //    public String ContratoSaude
        //    {
        //        get { return _contratoSaude; }
        //        set { _contratoSaude = value; }
        //    }

        //    [DBFieldInfo("contratoadm_contratoDental", FieldType.Single)]
        //    public String ContratoDental
        //    {
        //        get { return _contratoDental; }
        //        set { _contratoDental = value; }
        //    }

        //    [DBFieldInfo("contratoadm_numero", FieldType.Single)]
        //    public String Numero
        //    {
        //        get { return _numero; }
        //        set { _numero = value; }
        //    }

        //    [DBFieldInfo("contratoadm_operadoraId", FieldType.Single)]
        //    public Object OperadoraID
        //    {
        //        get { return _operadoraId; }
        //        set { _operadoraId = value; }
        //    }

        //    [DBFieldInfo("contratoadm_estipulanteId", FieldType.Single)]
        //    public Object EstipulanteID
        //    {
        //        get { return _estipulanteId; }
        //        set { _estipulanteId = value; }
        //    }

        //    [DBFieldInfo("contratoadm_ativo", FieldType.Single)]
        //    public Boolean Ativo
        //    {
        //        get { return _ativo; }
        //        set { _ativo = value; }
        //    }

        //    [DBFieldInfo("contratoadm_data", FieldType.Single)]
        //    public DateTime Data
        //    {
        //        get { return _data; }
        //        set { _data = value; }
        //    }

        //    [DBFieldInfo("contratoadm_codFilial", FieldType.Single)]
        //    public String CodFilial
        //    {
        //        get { return _codFilial; }
        //        set { _codFilial = value; }
        //    }

        //    [DBFieldInfo("contratoadm_codUnidade", FieldType.Single)]
        //    public String CodUnidade
        //    {
        //        get { return _codUnidade; }
        //        set { _codUnidade = value; }
        //    }

        //    [DBFieldInfo("contratoadm_codAdministradora", FieldType.Single)]
        //    public String CodAdministradora
        //    {
        //        get { return _codAdministradora; }
        //        set { _codAdministradora = value; }
        //    }

        //    [Joinned("operadora_nome")]
        //    public String OperadoraDescricao
        //    {
        //        get { return _operadoraDescricao; }
        //        set { _operadoraDescricao = value; }
        //    }

        //    [Joinned("estipulante_descricao")]
        //    public String EstipulanteDescricao
        //    {
        //        get { return _estipulanteDescricao; }
        //        set { _estipulanteDescricao = value; }
        //    }

        //    [Joinned("TotalNormal")]
        //    public Decimal TotalNormal
        //    {
        //        get { return _totalNormal; }
        //        set { _totalNormal = value; }
        //    }

        //    /// <summary>
        //    /// ID do grupo de comissionamento ao qual este contrato adm pertence.
        //    /// </summary>
        //    [Joinned("contratoadmgrupo_id")]
        //    public Object ContratoGrupoID
        //    {
        //        get { return _contratoGrupoId; }
        //        set { _contratoGrupoId = value; }
        //    }

        //    [Joinned("contratoadmgrupo_grupoId")]
        //    public Object ContratoGrupo_GrupoID
        //    {
        //        get { return _contratoGrupoId; }
        //        set { _contratoGrupoId = value; }
        //    }

        //    public String DescricaoCodigoSaudeDental
        //    {
        //        get
        //        {
        //            String value = _descricao;

        //            if (!String.IsNullOrEmpty(_contratoDental) || !String.IsNullOrEmpty(_contratoSaude))
        //            {
        //                value = String.Concat(value, " (");

        //                if (!String.IsNullOrEmpty(_contratoDental))
        //                    value = String.Concat(value, "Dental: ", _contratoDental);

        //                if (!String.IsNullOrEmpty(_contratoSaude))
        //                {
        //                    if (!String.IsNullOrEmpty(_contratoDental))
        //                        value = String.Concat(value, " - ");

        //                    value = String.Concat(value, "Saúde: ", _contratoSaude);
        //                }

        //                value = String.Concat(value, ")");
        //            }

        //            return value;
        //        }
        //    }

        //    #endregion

        //    public Estipulante Estipulante
        //    {
        //        get
        //        {
        //            throw new System.NotImplementedException();
        //        }
        //        set
        //        {
        //        }
        //    }

        //    public ContratoADM() { _ativo = true; _data = DateTime.Now; _totalNormal = Decimal.Zero; }
        //    public ContratoADM(Object id) : this() { this._id = id; }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }
        //    #endregion

        //    public static IList<ContratoADM> CarregarTodos()
        //    {
        //        String query = String.Concat("contratoADM.*, operadora_nome ",
        //            "FROM contratoADM ",
        //            "INNER JOIN operadora ON operadora_id=contratoadm_operadoraId ",
        //            //"INNER JOIN estipulante ON estipulante_id=contratoadm_estipulanteId ",
        //            "where contratoadm_excluido=0 ORDER BY operadora_nome, contratoadm_descricao");

        //        return LocatorHelper.Instance.ExecuteQuery<ContratoADM>(query, typeof(ContratoADM));
        //    }

        //    public static IList<ContratoADM> CarregarTodos(Object estipulanteId, Object operadoraId, Boolean somenteAtivos)
        //    {
        //        String _ativoCond = " and contratoadm_ativo=1 ";
        //        if (!somenteAtivos) { _ativoCond = ""; }

        //        String query = String.Concat("contratoADM.*, operadora_nome,  estipulante_descricao ",
        //            "FROM contratoADM ",
        //            "INNER JOIN operadora ON operadora_id=contratoadm_operadoraId ",
        //            "INNER JOIN estipulante ON estipulante_id=contratoadm_estipulanteId ",
        //            "WHERE contratoadm_excluido=0 and contratoadm_operadoraId=",
        //            operadoraId, " AND contratoadm_estipulanteId=", estipulanteId, _ativoCond);

        //        return LocatorHelper.Instance.ExecuteQuery<ContratoADM>(query, typeof(ContratoADM));
        //    }

        //    public static IList<ContratoADM> CarregarTodos(Object operadoraId, Boolean somenteAtivos)
        //    {
        //        String _ativoCond = " and contratoadm_ativo=1 ";
        //        if (!somenteAtivos) { _ativoCond = ""; }

        //        String query = String.Concat("contratoADM.*, operadora_nome,  estipulante_descricao ",
        //            "FROM contratoADM ",
        //            "INNER JOIN operadora ON operadora_id=contratoadm_operadoraId ",
        //            "INNER JOIN estipulante ON estipulante_id=contratoadm_estipulanteId ",
        //            "WHERE contratoadm_excluido=0 and contratoadm_operadoraId=",
        //            operadoraId, _ativoCond, " order by contratoadm_descricao");

        //        return LocatorHelper.Instance.ExecuteQuery<ContratoADM>(query, typeof(ContratoADM));
        //    }

        //    public static IList<ContratoADM> CarregarPorTabelaComissionamento(Object tabelaComissionamentoModeloId)
        //    {
        //        String query = String.Concat("contratoADM.*, operadora_nome,contratoadmgrupo_grupoId ",
        //            "   FROM contratoADM ",
        //            "       INNER JOIN operadora ON operadora_id=contratoadm_operadoraId ",
        //            "       INNER JOIN contratoAdmGrupo ON contratoadmgrupo_contratoAdmId = contratoadm_id ",
        //            "   WHERE contratoadm_excluido=0 and contratoadmgrupo_tabelaId=", tabelaComissionamentoModeloId,
        //            "   ORDER BY operadora_nome, contratoadm_descricao");

        //        return LocatorHelper.Instance.ExecuteQuery<ContratoADM>(query, typeof(ContratoADM));
        //    }

        //    [Obsolete("Em desuso", true)]
        //    public static IList<ContratoADM> _CarregarTodos(Object grupoId)
        //    {
        //        String query = String.Concat("SUM(comissaomodeloitem_percentual) as TotalNormal, operadora_nome, contratoadm_id, contratoadm_tabelaComissionamentoAtivaId, contratoadm_tabelaReajusteAtualId, contratoadm_descricao,contratoadm_numero, contratoadm_operadoraId, contratoadm_estipulanteId, contratoadm_ativo, contratoadm_data ",
        //            "   FROM contratoADM ",
        //            "       INNER JOIN operadora ON operadora_id=contratoadm_operadoraId ",
        //            "       LEFT JOIN comissao_modelo_item ON contratoadm_id=comissaomodeloitem_contratoid AND comissaomodeloitem_comissaomodeloid=", grupoId,
        //            "   GROUP BY operadora_nome, contratoadm_id, contratoadm_tabelaComissionamentoAtivaId, contratoadm_tabelaReajusteAtualId, contratoadm_descricao,contratoadm_numero, contratoadm_operadoraId, contratoadm_estipulanteId, contratoadm_ativo, contratoadm_data ",
        //            "   ORDER BY operadora_nome, contratoadm_descricao");

        //        return LocatorHelper.Instance.ExecuteQuery<ContratoADM>(query, typeof(ContratoADM));
        //    }

        //    public static Object CarregarID(String numero, Object operadoraId, PersistenceManager pm)
        //    {
        //        String[] paramNm = new String[] { "@numero" };
        //        String[] paramVl = new String[] { numero };
        //        return LocatorHelper.Instance.ExecuteScalar("SELECT contratoadm_id FROM contratoADM WHERE contratoadm_numero=@numero AND contratoadm_operadoraId=" + operadoraId, paramNm, paramVl, pm);
        //    }

        //    public static Object CarregarID(String numero, PersistenceManager pm)
        //    {
        //        String[] paramNm = new String[] { "@numero" };
        //        String[] paramVl = new String[] { numero };
        //        return LocatorHelper.Instance.ExecuteScalar("SELECT contratoadm_id FROM contratoADM WHERE contratoadm_numero=@numero", paramNm, paramVl, pm);
        //    }

        //    public static ContratoADM Carregar(String numero, PersistenceManager pm)
        //    {
        //        String[] paramNm = new String[] { "@numero" };
        //        String[] paramVl = new String[] { numero };
        //        IList<ContratoADM> lista = LocatorHelper.Instance.ExecuteParametrizedQuery<ContratoADM>("SELECT TOP 1 * FROM contratoADM WHERE contratoadm_numero=@numero", paramNm, paramVl, typeof(ContratoADM));

        //        if (lista == null || lista.Count == 0)
        //            return null;
        //        else
        //            return lista[0];
        //    }

        //    public static IList<ContratoADM> Carregar(Object operadoraId)
        //    {
        //        String query = String.Concat("contratoADM.*, operadora_nome,  estipulante_descricao ",
        //            "FROM contratoADM ",
        //            "INNER JOIN operadora ON operadora_id=contratoadm_operadoraId ",
        //            "INNER JOIN estipulante ON estipulante_id=contratoadm_estipulanteId ",
        //            "WHERE contratoadm_excluido=0 and contratoadm_operadoraId=",
        //            operadoraId, " ORDER BY contratoadm_descricao");

        //        return LocatorHelper.Instance.ExecuteQuery<ContratoADM>(query, typeof(ContratoADM));
        //    }

        //    public static IList<ContratoADM> Carregar(String[] operadoraIDs, String[] estipulantesIDs)
        //    {
        //        String estipulanteCond = "";
        //        if (estipulantesIDs != null && estipulantesIDs.Length > 0)
        //            estipulanteCond = String.Concat(" AND contratoadm_estipulanteId IN (", String.Join(",", estipulantesIDs), ") ");

        //        String query = String.Concat("contratoADM.*, operadora_nome,  estipulante_descricao ",
        //            "FROM contratoADM ",
        //            "   INNER JOIN operadora ON operadora_id=contratoadm_operadoraId ",
        //            "   INNER JOIN estipulante ON estipulante_id=contratoadm_estipulanteId ",
        //            " WHERE contratoadm_excluido=0 and ",
        //            //"   contratoadm_ativo=1 AND ",
        //            "   contratoadm_operadoraId IN(", String.Join(",", operadoraIDs), ") ", estipulanteCond,
        //            " ORDER BY contratoadm_descricao");

        //        return LocatorHelper.Instance.ExecuteQuery<ContratoADM>(query, typeof(ContratoADM));
        //    }

        //    public static IList<ContratoADM> Carregar(Object operadoraId, Boolean ativo)
        //    {
        //        String _ativo = "1";
        //        if (!ativo) { _ativo = "0"; }

        //        String query = String.Concat("contratoADM.*, operadora_nome,  estipulante_descricao ",
        //            "FROM contratoADM ",
        //            "INNER JOIN operadora ON operadora_id=contratoadm_operadoraId ",
        //            "INNER JOIN estipulante ON estipulante_id=contratoadm_estipulanteId ",
        //            "WHERE contratoadm_excluido=0 and contratoadm_operadoraId=",
        //            operadoraId, " AND contratoadm_ativo=", _ativo, " ORDER BY contratoadm_descricao");

        //        return LocatorHelper.Instance.ExecuteQuery<ContratoADM>(query, typeof(ContratoADM));
        //    }

        //    public static IList<ContratoADM> Carregar(Object operadoraId, String param1, String param2, String param3, Boolean ativo)
        //    {
        //        String _ativo = "1";
        //        if (!ativo) { _ativo = "0"; }

        //        String query = String.Concat("contratoADM.*, operadora_nome,  estipulante_descricao ",
        //            "FROM contratoADM ",
        //            "INNER JOIN operadora ON operadora_id=contratoadm_operadoraId ",
        //            "INNER JOIN estipulante ON estipulante_id=contratoadm_estipulanteId ",
        //            "WHERE contratoadm_excluido=0 and contratoadm_operadoraId=",
        //            operadoraId,
        //            " and contratoadm_descricao like '%", param1,
        //            "%' and contratoadm_descricao like '%", param2,
        //            "%' and contratoadm_descricao like '%", param3, "%' AND contratoadm_ativo=", _ativo, " ORDER BY contratoadm_descricao");

        //        return LocatorHelper.Instance.ExecuteQuery<ContratoADM>(query, typeof(ContratoADM));
        //    }

        //    public static IList<ContratoADM> Carregar(Object estipulanteId, Object operadoraId)
        //    {
        //        String query = String.Concat("contratoADM.*, operadora_nome,  estipulante_descricao ",
        //            "FROM contratoADM ",
        //            "INNER JOIN operadora ON operadora_id=contratoadm_operadoraId ",
        //            "INNER JOIN estipulante ON estipulante_id=contratoadm_estipulanteId ",
        //            "WHERE contratoadm_excluido=0 and contratoadm_operadoraId=",
        //            operadoraId, " AND contratoadm_estipulanteId=", estipulanteId);

        //        return LocatorHelper.Instance.ExecuteQuery<ContratoADM>(query, typeof(ContratoADM));
        //    }

        //    public static IList<ContratoADM> Carregar(Object estipulanteId, Object operadoraId, Boolean ativo)
        //    {
        //        String _ativo = "1";
        //        if (!ativo) { _ativo = "0"; }

        //        String query = String.Concat("contratoADM.*, operadora_nome,  estipulante_descricao ",
        //            "FROM contratoADM ",
        //            "INNER JOIN operadora ON operadora_id=contratoadm_operadoraId ",
        //            "INNER JOIN estipulante ON estipulante_id=contratoadm_estipulanteId ",
        //            "WHERE contratoadm_excluido=0 and contratoadm_operadoraId=",
        //            operadoraId, " AND contratoadm_estipulanteId=", estipulanteId, " AND contratoadm_ativo=", _ativo);

        //        return LocatorHelper.Instance.ExecuteQuery<ContratoADM>(query, typeof(ContratoADM));
        //    }

        //    public static void SetaTabelaComissionamentoAutal(Object contratoId, Object tabelaComissaoId, PersistenceManager pm)
        //    {
        //        String command = "UPDATE contratoadm SET contratoadm_tabelaComissionamentoAtivaId=" + tabelaComissaoId + " WHERE contratoadm_id=" + contratoId;
        //        NonQueryHelper.Instance.ExecuteNonQuery(command, pm);
        //    }

        //    public static Boolean ExisteNumero(Object contratoId, String numero, Object estipulanteId, Object operadoraId)
        //    {
        //        String qry = "SELECT COUNT(*) FROM contratoADM WHERE contratoadm_numero='" + numero + "' AND contratoadm_estipulanteId=" + estipulanteId + " AND contratoadm_operadoraId=" + operadoraId;

        //        if (contratoId != null)
        //        {
        //            qry += " AND contratoadm_id <> " + contratoId;
        //        }

        //        Object ret = LocatorHelper.Instance.ExecuteScalar(qry, null, null);
        //        if (ret == null || ret == DBNull.Value || Convert.ToInt32(ret) == 0)
        //            return false;
        //        else
        //            return true;
        //    }

        //    public static Boolean ExisteDescricao(Object contratoId, String descricao, Object operadoraId)
        //    {
        //        String qry = "SELECT COUNT(*) FROM contratoADM WHERE contratoadm_operadoraId=" + operadoraId + " AND contratoadm_descricao=@Descricao";

        //        if (contratoId != null)
        //        {
        //            qry += " AND contratoadm_id <> " + contratoId;
        //        }

        //        String[] paramnames = new String[] { "@Descricao" };
        //        String[] paramvalue = new String[] { descricao };

        //        Object ret = LocatorHelper.Instance.ExecuteScalar(qry, paramnames, paramvalue);
        //        if (ret == null || ret == DBNull.Value || Convert.ToInt32(ret) == 0)
        //            return false;
        //        else
        //            return true;
        //    }

        //    public void SetaTabelaComissionamentoAutal(Object contratoId, PersistenceManager pm)
        //    {
        //        ContratoADM.SetaTabelaReajusteAutal(this._id, contratoId, pm);
        //    }

        //    public static void SetaTabelaReajusteAutal(Object contratoId, Object tabelaReajusteId, PersistenceManager pm)
        //    {
        //        String command = "UPDATE contratoadm SET contratoadm_tabelaReajusteAtualId=" + tabelaReajusteId + " WHERE contratoadm_id=" + contratoId;
        //        NonQueryHelper.Instance.ExecuteNonQuery(command, pm);
        //    }

        //    public void SetaTabelaReajusteAutal(Object contratoId, PersistenceManager pm)
        //    {
        //        ContratoADM.SetaTabelaReajusteAutal(this._id, contratoId, pm);
        //    }
        //}

        //[DBTable("contratoAdmGrupo")]
        //public class ContratoAdmGrupoComissionamento : EntityBase, IPersisteableEntity
        //{
        //    Object _id;
        //    Object _contratoAdmId;
        //    Object _grupoId;
        //    Object _tabelaId;

        //    #region propriedades

        //    [DBFieldInfo("contratoadmgrupo_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }
        //    [DBFieldInfo("contratoadmgrupo_contratoAdmId", FieldType.Single)]
        //    public Object ContratoAdmID
        //    {
        //        get { return _contratoAdmId; }
        //        set { _contratoAdmId = value; }
        //    }
        //    [DBFieldInfo("contratoadmgrupo_grupoId", FieldType.Single)]
        //    public Object GrupoID
        //    {
        //        get { return _grupoId; }
        //        set { _grupoId = value; }
        //    }
        //    [DBFieldInfo("contratoadmgrupo_tabelaId", FieldType.Single)]
        //    public Object TabelaID
        //    {
        //        get { return _tabelaId; }
        //        set { _tabelaId = value; }
        //    }
        //    #endregion

        //    public ContratoAdmGrupoComissionamento() { }
        //    public ContratoAdmGrupoComissionamento(Object id) { _id = id; }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public static void Remover(Object contratoAdmId, Object grupoId)
        //    {
        //        String cmd = String.Concat("DELETE FROM contratoAdmGrupo WHERE contratoadmgrupo_contratoAdmId=", contratoAdmId, " AND contratoadmgrupo_grupoId=", grupoId);
        //        NonQueryHelper.Instance.ExecuteNonQuery(cmd, null);
        //    }

        //    public static void Remover(List<String> contratoAdmIds, Object grupoId)
        //    {
        //        String cmd = String.Concat("DELETE FROM contratoAdmGrupo WHERE contratoadmgrupo_contratoAdmId IN (", String.Join(",", contratoAdmIds.ToArray()), ") AND contratoadmgrupo_grupoId=", grupoId);

        //        PersistenceManager pm = new PersistenceManager();
        //        pm.BeginTransactionContext();

        //        try
        //        {
        //            NonQueryHelper.Instance.ExecuteNonQuery(cmd, pm);

        //            StringBuilder sb = new StringBuilder();
        //            foreach (String contratoId in contratoAdmIds)
        //            {
        //                sb.Append("DELETE FROM comissaoGrupo_contratoExcluido WHERE grupoId=");
        //                sb.Append(grupoId); sb.Append(" AND contratoAdmId="); sb.Append(contratoId);
        //                sb.Append("; INSERT INTO comissaoGrupo_contratoExcluido(grupoId,contratoAdmId) VALUES (");
        //                sb.Append(grupoId); sb.Append(","); sb.Append(contratoId); sb.Append("); ");
        //            }

        //            NonQueryHelper.Instance.ExecuteNonQuery(sb.ToString(), pm);
        //            pm.Commit();
        //        }
        //        catch (Exception ex)
        //        {
        //            pm.Rollback();
        //            throw ex;
        //        }
        //        finally
        //        {
        //            pm = null;
        //        }
        //    }

        //    #endregion

        //    [Obsolete("Em desuso devido falha lógica.", false)]
        //    public static IList<ContratoADM> CarregarDisponiveis(Object grupoId, Object tabelaId)
        //    {
        //        String query = String.Concat("contratoADM.*, contratoadmgrupo_id, operadora_nome ",
        //            "FROM contratoADM ",
        //            "   INNER JOIN operadora ON operadora_id = contratoadm_operadoraId ",
        //            "   LEFT JOIN contratoAdmGrupo ON contratoadmgrupo_contratoAdmId = contratoadm_id AND contratoadmgrupo_tabelaId=", tabelaId, " ",
        //            "WHERE contratoadm_ativo=1 AND (contratoadmgrupo_grupoId IS NULL OR contratoadmgrupo_grupoId=", grupoId, ") AND contratoadm_id NOT IN (SELECT contratoAdmId FROM comissaoGrupo_contratoExcluido WHERE grupoId=", grupoId, ") ",
        //            "ORDER BY operadora_nome, contratoadm_descricao");

        //        return LocatorHelper.Instance.ExecuteQuery<ContratoADM>(query, typeof(ContratoADM));
        //    }

        //    public static IList<ContratoADM> Carregar(Object grupoId, Object tabelaId)
        //    {
        //        String query = String.Concat("contratoADM.*, contratoadmgrupo_id, operadora_nome ",
        //            "FROM contratoADM ",
        //            "   INNER JOIN operadora ON operadora_id = contratoadm_operadoraId ",
        //            "   INNER JOIN contratoAdmGrupo ON contratoadmgrupo_contratoAdmId = contratoadm_id ", //AND contratoadmgrupo_tabelaId=", tabelaId, " ",
        //            "WHERE contratoadm_ativo=1 AND contratoadmgrupo_grupoId=", grupoId, " AND contratoadmgrupo_tabelaId=", tabelaId,
        //            " ORDER BY operadora_nome, contratoadm_descricao");

        //        return LocatorHelper.Instance.ExecuteQuery<ContratoADM>(query, typeof(ContratoADM));
        //    }
        //}

        //[DBTable("comissao_operadora")]
        //public class ComissionamentoOperadora : EntityBase, IPersisteableEntity
        //{
        //    Object _id;
        //    Object _contratoAdmId;
        //    //String   _descricao;
        //    DateTime _data;
        //    Boolean _ativa;

        //    Boolean _vitalicia;
        //    Int32 _vitaliciaNumeroParcela;
        //    Decimal _vitaliciaPercentual;

        //    String _estipulanteDescricao;
        //    String _contratoAdmNumero;
        //    String _contratoAdmDescricao;

        //    #region properties

        //    [DBFieldInfo("comissaooperadora_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("comissaooperadora_contratoAdmId", FieldType.Single)]
        //    public Object ContratoAdmID
        //    {
        //        get { return _contratoAdmId; }
        //        set { _contratoAdmId = value; }
        //    }

        //    //[DBFieldInfo("comissaooperadora_descricao", FieldType.Single)]
        //    public String Descricao
        //    {
        //        get { return _contratoAdmDescricao; }
        //        //set { _descricao= value; }
        //    }

        //    [DBFieldInfo("comissaooperadora_data", FieldType.Single)]
        //    public DateTime Data
        //    {
        //        get { return _data; }
        //        set { _data = value; }
        //    }

        //    [DBFieldInfo("comissaooperadora_ativa", FieldType.Single)]
        //    public Boolean Ativa
        //    {
        //        get { return _ativa; }
        //        set { _ativa = value; }
        //    }

        //    //[DBFieldInfo("comissaooperadora_vitalicia", FieldType.Single)]
        //    //public Boolean Vitalicia
        //    //{
        //    //    get { return _vitalicia; }
        //    //    set { _vitalicia = value; }
        //    //}

        //    //[DBFieldInfo("comissaooperadora_vitaliciaNumParcela", FieldType.Single)]
        //    //public int VitaliciaNumeroParcela
        //    //{
        //    //    get { return _vitaliciaNumeroParcela; }
        //    //    set { _vitaliciaNumeroParcela = value; }
        //    //}

        //    //[DBFieldInfo("comissaooperadora_vitaliciaPercentual", FieldType.Single)]
        //    //public Decimal VitaliciaPercentual
        //    //{
        //    //    get { return _vitaliciaPercentual; }
        //    //    set { _vitaliciaPercentual = value; }
        //    //}

        //    [Joinned("estipulante_descricao")]
        //    public String EstipulanteDescricao
        //    {
        //        get { return _estipulanteDescricao; }
        //        set { _estipulanteDescricao = value; }
        //    }

        //    [Joinned("contratoadm_descricao")]
        //    public String ContratoAdmDescricao
        //    {
        //        get { return _contratoAdmDescricao; }
        //        set { _contratoAdmDescricao = value; }
        //    }

        //    [Joinned("contratoadm_numero")]
        //    public String ContratoAdmNumero
        //    {
        //        get { return _contratoAdmNumero; }
        //        set { _contratoAdmNumero = value; }
        //    }

        //    #endregion

        //    public ComissionamentoOperadoraVitaliciedade ComissionamentoOperadoraVitaliciedade
        //    {
        //        get
        //        {
        //            throw new System.NotImplementedException();
        //        }
        //        set
        //        {
        //        }
        //    }

        //    public ComissionamentoOperadoraItem ComissionamentoOperadoraItem
        //    {
        //        get
        //        {
        //            throw new System.NotImplementedException();
        //        }
        //        set
        //        {
        //        }
        //    }

        //    public ComissionamentoOperadora() { }
        //    public ComissionamentoOperadora(Object id) { this._id = id; }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        PersistenceManager pm = new PersistenceManager();
        //        pm.TransactionContext();
        //        String query = "DELETE FROM comissao_operadora_item WHERE comissaooperadoraitem_comissaoid=" + this._id;

        //        try
        //        {
        //            NonQueryHelper.Instance.ExecuteNonQuery(query, pm);

        //            query = "DELETE FROM comissao_operadora_vitaliciedade WHERE cov_comissaoId=" + this._id;
        //            NonQueryHelper.Instance.ExecuteNonQuery(query, pm);

        //            pm.Remove(this);
        //            pm.Commit();
        //        }
        //        catch (Exception ex)
        //        {
        //            pm.Rollback();
        //            throw ex;
        //        }
        //        finally
        //        {
        //            pm = null;
        //        }
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static IList<ComissionamentoOperadora> CarregarTodos()
        //    {
        //        String sql = "comissao_operadora.*, contratoadm_descricao FROM comissao_operadora INNER JOIN contratoADM ON comissaooperadora_contratoAdmId = contratoadm_id ORDER BY comissaooperadora_descricao, comissaooperadora_data";
        //        return LocatorHelper.Instance.ExecuteQuery
        //            <ComissionamentoOperadora>(sql, typeof(ComissionamentoOperadora));
        //    }

        //    public static IList<ComissionamentoOperadora> CarregarPorContratoId(Object contratoAdmId)
        //    {
        //        return CarregarPorContratoId(contratoAdmId, null);
        //    }

        //    public static IList<ComissionamentoOperadora> CarregarPorContratoId(Object contratoAdmId, PersistenceManager pm)
        //    {
        //        String query = String.Concat("comissao_operadora.*, contratoadm_descricao, contratoadm_numero, estipulante_descricao FROM comissao_operadora INNER JOIN contratoADM ON comissaooperadora_contratoAdmId = contratoadm_id INNER JOIN estipulante ON contratoadm_estipulanteId=estipulante_id WHERE comissaooperadora_contratoAdmId=", contratoAdmId, " ORDER BY comissaooperadora_data DESC");
        //        return LocatorHelper.Instance.ExecuteQuery<ComissionamentoOperadora>(query, typeof(ComissionamentoOperadora), pm);
        //    }

        //    public static ComissionamentoOperadora CarregarAtualPorContratoId(Object contratoAdmId, PersistenceManager pm)
        //    {
        //        String query = String.Concat(" TOP 1 comissao_operadora.*, contratoadm_descricao, contratoadm_numero, estipulante_descricao FROM comissao_operadora INNER JOIN contratoADM ON comissaooperadora_contratoAdmId = contratoadm_id INNER JOIN estipulante ON contratoadm_estipulanteId=estipulante_id WHERE comissaooperadora_contratoAdmId=", contratoAdmId, " ORDER BY comissaooperadora_data DESC");
        //        IList<ComissionamentoOperadora> list = LocatorHelper.Instance.ExecuteQuery<ComissionamentoOperadora>(query, typeof(ComissionamentoOperadora), pm);

        //        if (list == null)
        //            return null;
        //        else
        //            return list[0];
        //    }

        //    public static Boolean ExisteTabela(Object contratoAdmId, Object tabelaId, DateTime data)
        //    {
        //        String query = "SELECT COUNT(*) FROM comissao_operadora WHERE comissaooperadora_contratoAdmId=@ContratoID AND CONVERT(VARCHAR(20), comissaooperadora_data, 103)=@Data";
        //        if (tabelaId != null)
        //        {
        //            query += " AND comissaooperadora_id <> " + tabelaId;
        //        }

        //        Int32 result = Convert.ToInt32(LocatorHelper.Instance.ExecuteScalar(query, new String[] { "@ContratoID", "@Data" }, new String[] { Convert.ToString(contratoAdmId), data.ToString("dd/MM/yyyy") }));

        //        return result > 0;
        //    }
        //}

        //[Serializable]
        //[DBTable("comissao_operadora_item")]
        //public class ComissionamentoOperadoraItem : EntityBase, IPersisteableEntity
        //{
        //    #region campos

        //    Object _id;
        //    Object _comissionamentoId;
        //    Object _contratoId;
        //    Int32 _parcela;
        //    Decimal _percentual;
        //    Decimal _percentualCompraCarencia;
        //    Decimal _percentualMigracao;
        //    Decimal _percentualADM;
        //    Decimal _percentualEspecial;
        //    Decimal _idade;

        //    #endregion

        //    #region propriedades

        //    [DBFieldInfo("comissaooperadoraitem_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("comissaooperadoraitem_comissaoid", FieldType.Single)]
        //    public Object ComissionamentoID
        //    {
        //        get { return _comissionamentoId; }
        //        set { _comissionamentoId = value; }
        //    }

        //    [DBFieldInfo("comissaooperadoraitem_contratoId", FieldType.Single)]
        //    public Object ContratoID
        //    {
        //        get { return _contratoId; }
        //        set { _contratoId = value; }
        //    }

        //    [DBFieldInfo("comissaooperadoraitem_parcela", FieldType.Single)]
        //    public Int32 Parcela
        //    {
        //        get { return _parcela; }
        //        set { _parcela = value; }
        //    }

        //    [DBFieldInfo("comissaooperadoraitem_percentual", FieldType.Single)]
        //    public Decimal Percentual
        //    {
        //        get { return _percentual; }
        //        set { _percentual = value; }
        //    }

        //    [DBFieldInfo("comissaooperadoraitem_percentualCompraCarencia", FieldType.Single)]
        //    public Decimal PercentualCompraCarencia
        //    {
        //        get { return _percentualCompraCarencia; }
        //        set { _percentualCompraCarencia = value; }
        //    }

        //    [DBFieldInfo("comissaooperadoraitem_percentualMigracao", FieldType.Single)]
        //    public Decimal PercentualMigracao
        //    {
        //        get { return _percentualMigracao; }
        //        set { _percentualMigracao = value; }
        //    }

        //    [DBFieldInfo("comissaooperadoraitem_percentualADM", FieldType.Single)]
        //    public Decimal PercentualADM
        //    {
        //        get { return _percentualADM; }
        //        set { _percentualADM = value; }
        //    }

        //    [DBFieldInfo("comissaooperadoraitem_percentualEspecial", FieldType.Single)]
        //    public Decimal PercentualEspecial
        //    {
        //        get { return _percentualEspecial; }
        //        set { _percentualEspecial = value; }
        //    }

        //    [DBFieldInfo("comissaooperadoraitem_idade", FieldType.Single)]
        //    public Decimal PercentualIdade
        //    {
        //        get { return _idade; }
        //        set { _idade = value; }
        //    }

        //    #endregion

        //    public ComissionamentoOperadoraItem() { }
        //    public ComissionamentoOperadoraItem(Object id) { this._id = id; }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static IList<ComissionamentoOperadoraItem> Carregar(Object comissionamentoId)
        //    {
        //        String query = "* FROM comissao_operadora_item WHERE comissaooperadoraitem_comissaoid=" + comissionamentoId + " ORDER BY comissaooperadoraitem_parcela";
        //        return LocatorHelper.Instance.ExecuteQuery<ComissionamentoOperadoraItem>(query, typeof(ComissionamentoOperadoraItem));
        //    }

        //    public static ComissionamentoOperadoraItem Carregar(Object comissionamentoId, Int32 parcela, PersistenceManager pm)
        //    {
        //        String query = "* FROM comissao_operadora_item WHERE comissaooperadoraitem_parcela=" + parcela.ToString() + " AND comissaooperadoraitem_comissaoid=" + comissionamentoId + " ORDER BY comissaooperadoraitem_parcela";
        //        IList<ComissionamentoOperadoraItem> list = LocatorHelper.Instance.ExecuteQuery<ComissionamentoOperadoraItem>(query, typeof(ComissionamentoOperadoraItem), pm);
        //        if (list == null)
        //            return null;
        //        else
        //            return list[0];
        //    }
        //}

        //[Serializable]
        //[DBTable("comissao_operadora_vitaliciedade")]
        //public class ComissionamentoOperadoraVitaliciedade : EntityBase, IPersisteableEntity
        //{
        //    #region campos

        //    Object _id;
        //    Object _tabelaId;
        //    Int32 _tipoColunaComissao;
        //    Boolean _vitalicia;
        //    Int32 _vitaliciaNumeroParcela;
        //    Decimal _vitaliciaPercentual;

        //    #endregion

        //    #region propriedades

        //    [DBFieldInfo("cov_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("cov_comissaoId", FieldType.Single)]
        //    public Object TabelaID
        //    {
        //        get { return _tabelaId; }
        //        set { _tabelaId = value; }
        //    }

        //    [DBFieldInfo("cov_tipoColunaComissao", FieldType.Single)]
        //    public Int32 TipoColunaComissao
        //    {
        //        get { return _tipoColunaComissao; }
        //        set { _tipoColunaComissao = value; }
        //    }

        //    [DBFieldInfo("cov_vitalicia", FieldType.Single)]
        //    public Boolean Vitalicia
        //    {
        //        get { return _vitalicia; }
        //        set { _vitalicia = value; }
        //    }

        //    [DBFieldInfo("cov_parcelaInicio", FieldType.Single)]
        //    public Int32 ParcelaInicio
        //    {
        //        get { return _vitaliciaNumeroParcela; }
        //        set { _vitaliciaNumeroParcela = value; }
        //    }

        //    [DBFieldInfo("cov_percentual", FieldType.Single)]
        //    public Decimal Percentual
        //    {
        //        get { return _vitaliciaPercentual; }
        //        set { _vitaliciaPercentual = value; }
        //    }

        //    #endregion

        //    public ComissionamentoOperadoraVitaliciedade() { }
        //    public ComissionamentoOperadoraVitaliciedade(Object id) { this._id = id; }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static ComissionamentoOperadoraVitaliciedade Carregar(Object comissionamentoId, TipoContrato.TipoComissionamentoProdutorOuOperadora tipo)
        //    {
        //        String sql = "* FROM comissao_operadora_vitaliciedade WHERE cov_comissaoId=" + comissionamentoId + " AND cov_tipoColunaComissao=" + Convert.ToInt32(tipo);
        //        IList<ComissionamentoOperadoraVitaliciedade> lista = LocatorHelper.Instance.ExecuteQuery<ComissionamentoOperadoraVitaliciedade>(sql, typeof(ComissionamentoOperadoraVitaliciedade));
        //        if (lista == null || lista.Count == 0)
        //            return null;
        //        else
        //            return lista[0];
        //    }

        //    public static ComissionamentoOperadoraVitaliciedade Carregar(Object comissionamentoId, TipoContrato.TipoComissionamentoProdutorOuOperadora tipo, Int32 parcelaInicio, PersistenceManager pm)
        //    {
        //        String sql = "* FROM comissao_operadora_vitaliciedade WHERE cov_parcelaInicio > 0 AND cov_comissaoId=" + comissionamentoId + " AND cov_tipoColunaComissao=" + Convert.ToInt32(tipo) + " AND cov_parcelaInicio <= " + parcelaInicio.ToString();
        //        IList<ComissionamentoOperadoraVitaliciedade> lista = LocatorHelper.Instance.ExecuteQuery<ComissionamentoOperadoraVitaliciedade>(sql, typeof(ComissionamentoOperadoraVitaliciedade), pm);
        //        if (lista == null || lista.Count == 0)
        //            return null;
        //        else
        //            return lista[0];
        //    }
        //}

        //[DBTable("tabela_valor")]
        //public class TabelaValor : EntityBase, IPersisteableEntity
        //{
        //    Object _id;
        //    Object _contratoId;
        //    String _descricao;
        //    DateTime _data;
        //    Object _corrente;

        //    DateTime _inicio;
        //    DateTime _fim;

        //    DateTime _inicioVencimento;
        //    DateTime _fimVencimento;

        //    String _contratoDescricao;

        //    #region propriedades

        //    [DBFieldInfo("TabelaValor_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("TabelaValor_contratoid", FieldType.Single)]
        //    public Object ContratoID
        //    {
        //        get { return _contratoId; }
        //        set { _contratoId = value; }
        //    }

        //    //[DBFieldInfo("TabelaValor_descricao", FieldType.Single)]
        //    public String Descricao
        //    {
        //        get { return _contratoDescricao; }
        //        set { _descricao = value; }
        //    }

        //    [DBFieldInfo("tabelavalor_inicio", FieldType.Single)]
        //    public DateTime Inicio
        //    {
        //        get { return _inicio; }
        //        set { _inicio = value; }
        //    }

        //    [DBFieldInfo("tabelavalor_fim", FieldType.Single)]
        //    public DateTime Fim
        //    {
        //        get { return _fim; }
        //        set { _fim = value; }
        //    }

        //    [DBFieldInfo("tabelavalor_vencimentoInicio", FieldType.Single)]
        //    public DateTime VencimentoInicio
        //    {
        //        get { return _inicioVencimento; }
        //        set { _inicioVencimento = value; }
        //    }

        //    [DBFieldInfo("tabelavalor_vencimentoFim", FieldType.Single)]
        //    public DateTime VencimentoFim
        //    {
        //        get { return _fimVencimento; }
        //        set { _fimVencimento = value; }
        //    }

        //    public String VencimentoInicioStr
        //    {
        //        get { if (_inicioVencimento == DateTime.MinValue) return ""; else return _inicioVencimento.ToString("dd/MM/yyyy"); }
        //    }

        //    public String VencimentoFimStr
        //    {
        //        get { if (_fimVencimento == DateTime.MinValue) return ""; else return _fimVencimento.ToString("dd/MM/yyyy"); }
        //    }

        //    [Obsolete("Em desuso.", true)]
        //    [DBFieldInfo("TabelaValor_data", FieldType.Single)]
        //    public DateTime Data
        //    {
        //        get { return _data; }
        //        set { _data = value; }
        //    }

        //    /// <summary>
        //    /// Estará na entidade plano o id da tabela corrente
        //    /// </summary>
        //    [Joinned("plano_tabelaValorAtualId")]
        //    public Object Corrente
        //    {
        //        get
        //        {
        //            return _corrente;
        //        }
        //        set { _corrente = value; }
        //    }

        //    [Joinned("contratoadm_descricao")]
        //    public String ContratoDescricao
        //    {
        //        get { return _contratoDescricao; }
        //        set { _contratoDescricao = value; }
        //    }

        //    #endregion

        //    public TabelaValorItem TabelaValorItem
        //    {
        //        get
        //        {
        //            throw new System.NotImplementedException();
        //        }
        //        set
        //        {
        //        }
        //    }

        //    public TabelaValor() { _data = DateTime.Now; }
        //    public TabelaValor(Object id) : this() { _id = id; }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        PersistenceManager pm = new PersistenceManager();
        //        pm.TransactionContext();

        //        try
        //        {
        //            String query = "DELETE FROM tabela_valor_item WHERE tabelavaloritem_tabelaid=" + this._id;
        //            NonQueryHelper.Instance.ExecuteNonQuery(query, pm);

        //            query = "DELETE FROM tabela_valor_data WHERE tvdata_tabelaId=" + this._id;
        //            NonQueryHelper.Instance.ExecuteNonQuery(query, pm);

        //            query = "DELETE FROM taxa WHERE taxa_tabelaValorId=" + this._id;
        //            NonQueryHelper.Instance.ExecuteNonQuery(query, pm);

        //            pm.Remove(this);
        //            pm.Commit();
        //        }
        //        catch (Exception ex)
        //        {
        //            pm.Rollback();
        //            throw ex;
        //        }
        //        finally
        //        {
        //            pm = null;
        //        }
        //        //base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static IList<TabelaValor> CarregarPorContratoID(Object contratoAdmId)
        //    {
        //        return CarregarPorContratoID(contratoAdmId, null);
        //    }

        //    public static IList<TabelaValor> CarregarPorContratoID(Object contratoAdmId, PersistenceManager pm)
        //    {
        //        String query = "tabela_valor.*, contratoadm_descricao FROM tabela_valor LEFT JOIN contratoAdm ON tabelavalor_contratoid=contratoAdm_id WHERE tabelavalor_contratoid=" + contratoAdmId + " ORDER BY tabelavalor_inicio DESC, tabelavalor_id DESC";
        //        return LocatorHelper.Instance.ExecuteQuery<TabelaValor>(query, typeof(TabelaValor), pm);
        //    }

        //    public static IList<TabelaValor> CarregarPorContratoID_Parcial(Object contratoAdmId, PersistenceManager pm)
        //    {
        //        String query = "tabelavalor_id FROM tabela_valor WHERE tabelavalor_contratoid=" + contratoAdmId + " ORDER BY tabelavalor_inicio DESC, tabelavalor_id DESC";
        //        return LocatorHelper.Instance.ExecuteQuery<TabelaValor>(query, typeof(TabelaValor), pm);
        //    }

        //    public static IList<TabelaValor> CarregarTabelaAtual(Object contratoAdmId)
        //    {
        //        return CarregarTabelaAtual(contratoAdmId, null);
        //    }
        //    public static IList<TabelaValor> CarregarTabelaAtual(Object contratoAdmId, PersistenceManager pm)
        //    {
        //        String query = "TOP 1 tabela_valor.*, contratoadm_descricao FROM tabela_valor INNER JOIN contratoAdm ON tabelavalor_contratoid=contratoAdm_id WHERE tabelavalor_contratoid=" + contratoAdmId + " ORDER BY tabelavalor_inicio DESC, tabelavalor_id DESC";
        //        return LocatorHelper.Instance.ExecuteQuery<TabelaValor>(query, typeof(TabelaValor), pm);
        //    }

        //    public static IList<TabelaValor> CarregarTabelaVigente(Object contratoAdmId, DateTime admissaoProposta, DateTime? vencimentoCobranca, PersistenceManager pm)
        //    {
        //        return CarregarTabelaVigente(contratoAdmId, admissaoProposta, vencimentoCobranca, pm, false); ;
        //    }
        //    public static IList<TabelaValor> CarregarTabelaVigente(Object contratoAdmId, DateTime admissaoProposta, DateTime? vencimentoCobranca, PersistenceManager pm, Boolean forcaTabelaVigente)
        //    {
        //        String vencimentoCond = "";
        //        if (vencimentoCobranca != null)
        //        {
        //            vencimentoCond = String.Concat(" OR '", vencimentoCobranca.Value.ToString("yyyy-MM-dd"), "'  BETWEEN tabelavalor_vencimentoInicio AND tabelavalor_vencimentoFim");
        //        }

        //        String query = String.Concat("TOP 1 tabela_valor.*, contratoadm_descricao ",
        //            "   FROM tabela_valor ",
        //            "       INNER JOIN contratoAdm ON tabelavalor_contratoid=contratoAdm_id",
        //            "   WHERE ",
        //            "       tabelavalor_contratoid=", contratoAdmId,
        //            "       AND ('", admissaoProposta.ToString("yyyy-MM-dd"), "' BETWEEN tabelavalor_inicio AND tabelavalor_fim ", vencimentoCond, ")",
        //            "   ORDER BY tabelavalor_inicio DESC, tabelavalor_id DESC");

        //        IList<TabelaValor> ret = LocatorHelper.Instance.ExecuteQuery<TabelaValor>(query, typeof(TabelaValor), pm);

        //        if (ret == null) { return null; }

        //        if (vencimentoCobranca != null && forcaTabelaVigente)
        //        {
        //            //se foi informado um vencimento de cobrança
        //            //se esse vencimento for maior que o limite de vencimento da tabela, retorna null.
        //            //nesses casos, nao basta estar de acordo com a admissao do contrato:
        //            ret[0].VencimentoFim = new DateTime(ret[0].VencimentoFim.Year, ret[0].VencimentoFim.Month, ret[0].VencimentoFim.Day, 23, 59, 59, 998);
        //            vencimentoCobranca = new DateTime(vencimentoCobranca.Value.Year, vencimentoCobranca.Value.Month, vencimentoCobranca.Value.Day, 23, 59, 59, 997);
        //            if (vencimentoCobranca > ret[0].VencimentoFim) { return null; }
        //        }

        //        return ret;
        //    }

        //    public static Decimal CalculaValor(Object beneficiarioId, int beneficiarioIdade, Object contratoId, Object planoId, Contrato.eTipoAcomodacao tipoAcomodacao, DateTime admissaoProposta, DateTime? vencimentoCobranca)
        //    {
        //        return CalculaValor(beneficiarioId, beneficiarioIdade, contratoId, planoId, tipoAcomodacao, null, admissaoProposta, vencimentoCobranca, false);
        //    }
        //    public static Decimal CalculaValor(Object beneficiarioId, int beneficiarioIdade, Object contratoAdmId, Object planoId, Contrato.eTipoAcomodacao tipoAcomodacao, PersistenceManager pm, DateTime admissaoProposta, DateTime? vencimentoCobranca)
        //    {
        //        return CalculaValor(beneficiarioId, beneficiarioIdade, contratoAdmId, planoId, tipoAcomodacao, pm, admissaoProposta, vencimentoCobranca, false);
        //    }
        //    public static Decimal CalculaValor(Object beneficiarioId, int beneficiarioIdade, Object contratoAdmId, Object planoId, Contrato.eTipoAcomodacao tipoAcomodacao, PersistenceManager pm, DateTime admissaoProposta, DateTime? vencimentoCobranca, Boolean forcaTabelaVigente)
        //    {
        //        IList<TabelaValor> lista = TabelaValor.CarregarTabelaVigente(contratoAdmId, admissaoProposta, vencimentoCobranca, pm, forcaTabelaVigente); //TabelaValor.CarregarTabelaAtual(contratoAdmId, pm);
        //        if (lista == null || lista.Count == 0) { return 0; }

        //        IList<TabelaValorItem> itens = TabelaValorItem.CarregarPorTabela(lista[0].ID, planoId, pm);
        //        if (itens == null || itens.Count == 0) { return 0; }

        //        if (beneficiarioIdade == 0)
        //        {
        //            Beneficiario beneficiario = new Beneficiario();
        //            beneficiario.ID = beneficiarioId;

        //            if (beneficiario.ID != null)
        //            {
        //                if (pm == null)
        //                    beneficiario.Carregar();
        //                else
        //                    pm.Load(beneficiario);

        //                if (beneficiario.ID == null) { return 0; }

        //                beneficiarioIdade = Beneficiario.CalculaIdade(beneficiario.DataNascimento);
        //            }
        //        }

        //        foreach (TabelaValorItem _item in itens)
        //        {
        //            if (beneficiarioIdade >= _item.IdadeInicio && _item.IdadeFim == 0)
        //            {
        //                if (tipoAcomodacao == Contrato.eTipoAcomodacao.quartoComun)
        //                    return _item.QCValor;
        //                else
        //                    return _item.QPValor;
        //            }
        //            else if (beneficiarioIdade >= _item.IdadeInicio && beneficiarioIdade <= _item.IdadeFim)
        //            {
        //                if (tipoAcomodacao == Contrato.eTipoAcomodacao.quartoComun)
        //                    return _item.QCValor;
        //                else
        //                    return _item.QPValor;
        //            }
        //        }

        //        return 0;
        //    }

        //    public static Decimal CalculaValorNET(Contrato contrato, PersistenceManager pm)
        //    {
        //        return CalculaValorNET(contrato, pm, null, null, null);
        //    }

        //    public static Decimal CalculaValorNET(Object contratoId, Object contratoAdmId, Object planoId, Object beneficiarioId, Int32 contratoTipoAcomodacao, DateTime? admissao, DateTime beneficiarioDataNascimento, DateTime? vencimento, DateTime? dataReferencia, out Int32 beneficiarioIdade, PersistenceManager pm)
        //    {
        //        Contrato.eTipoAcomodacao tipoAcomodacao = (Contrato.eTipoAcomodacao)contratoTipoAcomodacao;
        //        IList<TabelaValor> lista = null;
        //        beneficiarioIdade = -1;

        //        if (admissao == null || vencimento == null)
        //            lista = TabelaValor.CarregarTabelaAtual(contratoAdmId, pm);
        //        else
        //            lista = TabelaValor.CarregarTabelaVigente(contratoAdmId, admissao.Value, vencimento.Value, pm);

        //        if (lista == null || lista.Count == 0) { return 0; }

        //        IList<TabelaValorItem> itens = TabelaValorItem.CarregarPorTabela(lista[0].ID, planoId, pm);
        //        if (itens == null || itens.Count == 0) { return 0; }

        //        if (dataReferencia == null)
        //            beneficiarioIdade = Beneficiario.CalculaIdade(beneficiarioDataNascimento);
        //        else
        //            beneficiarioIdade = Beneficiario.CalculaIdade(beneficiarioDataNascimento, dataReferencia.Value);

        //        Decimal valorTotal = 0;
        //        foreach (TabelaValorItem _item in itens)
        //        {
        //            if (beneficiarioIdade >= _item.IdadeInicio && _item.IdadeFim == 0)
        //            {
        //                if (tipoAcomodacao == Contrato.eTipoAcomodacao.quartoComun)
        //                    valorTotal += _item.QCValorPagamento;
        //                else
        //                    valorTotal += _item.QPValorPagamento;
        //                break;
        //            }
        //            else if (beneficiarioIdade >= _item.IdadeInicio && beneficiarioIdade <= _item.IdadeFim)
        //            {
        //                if (tipoAcomodacao == Contrato.eTipoAcomodacao.quartoComun)
        //                    valorTotal += _item.QCValorPagamento;
        //                else
        //                    valorTotal += _item.QPValorPagamento;
        //                break;
        //            }
        //        }

        //        return valorTotal;
        //    }

        //    public static Decimal CalculaValorNET(Contrato contrato, PersistenceManager pm, DateTime? admissao, DateTime? vencimento, DateTime? dataReferencia)
        //    {
        //        Contrato.eTipoAcomodacao tipoAcomodacao = (Contrato.eTipoAcomodacao)contrato.TipoAcomodacao;

        //        IList<TabelaValor> lista = null;

        //        if (admissao == null || vencimento == null)
        //            lista = TabelaValor.CarregarTabelaAtual(contrato.ContratoADMID, pm);
        //        else
        //            lista = TabelaValor.CarregarTabelaVigente(contrato.ContratoADMID, admissao.Value, vencimento.Value, pm);

        //        if (lista == null || lista.Count == 0) { return 0; }

        //        IList<TabelaValorItem> itens = TabelaValorItem.CarregarPorTabela(lista[0].ID, contrato.PlanoID, pm);
        //        if (itens == null || itens.Count == 0) { return 0; }

        //        IList<ContratoBeneficiario> beneficiarios = ContratoBeneficiario.CarregarPorContratoID_Parcial(contrato.ID, true, false, pm);

        //        int beneficiarioIdade = 0;
        //        Decimal valorTotal = 0;
        //        foreach (ContratoBeneficiario beneficiario in beneficiarios)
        //        {
        //            if (beneficiario.ID == null) { return 0; }

        //            if (dataReferencia == null)
        //                beneficiarioIdade = Beneficiario.CalculaIdade(beneficiario.BeneficiarioDataNascimento);
        //            else
        //                beneficiarioIdade = Beneficiario.CalculaIdade(beneficiario.BeneficiarioDataNascimento, dataReferencia.Value);

        //            foreach (TabelaValorItem _item in itens)
        //            {
        //                if (beneficiarioIdade >= _item.IdadeInicio && _item.IdadeFim == 0)
        //                {
        //                    if (tipoAcomodacao == Contrato.eTipoAcomodacao.quartoComun)
        //                        valorTotal += _item.QCValorPagamento;
        //                    else
        //                        valorTotal += _item.QPValorPagamento;
        //                    break;
        //                }
        //                else if (beneficiarioIdade >= _item.IdadeInicio && beneficiarioIdade <= _item.IdadeFim)
        //                {
        //                    if (tipoAcomodacao == Contrato.eTipoAcomodacao.quartoComun)
        //                        valorTotal += _item.QCValorPagamento;
        //                    else
        //                        valorTotal += _item.QPValorPagamento;
        //                    break;
        //                }
        //            }
        //        }

        //        beneficiarios = null;
        //        return valorTotal;
        //    }

        //    public static Boolean ExisteTabelaComVigencia(DateTime inicio, DateTime fim, Object contratoAdmId, Object tabelaId)
        //    {
        //        String query = "SELECT COUNT(*) FROM tabela_valor WHERE ((tabelavalor_inicio <= '" + inicio.ToString("yyyy-MM-dd 00:00:00") + "' AND tabelavalor_fim >='" + inicio.ToString("yyyy-MM-dd 23:59:59") + "') OR (tabelavalor_inicio <= '" + fim.ToString("yyyy-MM-dd 00:00:00") + "' AND tabelavalor_fim >='" + fim.ToString("yyyy-MM-dd 23:59:59") + "')) AND tabelavalor_contratoId=" + contratoAdmId;

        //        if (tabelaId != null)
        //        {
        //            query += " AND tabelavalor_id <> " + tabelaId;
        //        }

        //        Object ret = LocatorHelper.Instance.ExecuteScalar(query, null, null);

        //        if (ret == null || ret == DBNull.Value || Convert.ToInt32(ret) == 0)
        //            return false;
        //        else
        //            return true;
        //    }
        //}

        ////[DBTable("tabela_valor_data")]
        ////public class TabelaValorData : EntityBase, IPersisteableEntity
        ////{
        ////    Object _id;
        ////    Object _tabelaId;
        ////    Object _planoId;
        ////    DateTime _data;

        ////    #region propriedades 

        ////    [DBFieldInfo("tvdata_id", FieldType.PrimaryKeyAndIdentity)]
        ////    public Object ID
        ////    {
        ////        get { return _id; }
        ////        set { _id= value; }
        ////    }

        ////    [DBFieldInfo("tvdata_tabelaId", FieldType.Single)]
        ////    public Object TabelaID
        ////    {
        ////        get { return _tabelaId; }
        ////        set { _tabelaId= value; }
        ////    }

        ////    [DBFieldInfo("tvdata_planoId", FieldType.Single)]
        ////    public Object PlanoID
        ////    {
        ////        get { return _planoId; }
        ////        set { _planoId= value; }
        ////    }

        ////    [DBFieldInfo("tvdata_data", FieldType.Single)]
        ////    public DateTime Data
        ////    {
        ////        get { return _data; }
        ////        set { _data= value; }
        ////    }

        ////    public String strData
        ////    {
        ////        get 
        ////        {
        ////            if (_data == DateTime.MinValue)
        ////                return String.Empty;
        ////            else
        ////                return _data.ToString("dd/MM/yyyy");
        ////        }
        ////    }

        ////    #endregion

        ////    public TabelaValorData() { }
        ////    public TabelaValorData(Object id) { _id = id; }

        ////    #region métodos EntityBase 

        ////    public void Salvar()
        ////    {
        ////        base.Salvar(this);
        ////    }

        ////    public void Remover()
        ////    {
        ////        base.Remover(this);
        ////    }

        ////    public void Carregar()
        ////    {
        ////        base.Carregar(this);
        ////    }
        ////    #endregion

        ////    public static IList<TabelaValorData> Carregar(Object tabelaId, Object planoId)
        ////    {
        ////        String query = "* FROM tabela_valor_data WHERE tvdata_tabelaId=" + tabelaId + " AND tvdata_planoId=" + planoId + " ORDER BY tvdata_data DESC, tvdata_id DESC";
        ////        return LocatorHelper.Instance.ExecuteQuery<TabelaValorData>(query, typeof(TabelaValorData));
        ////    }
        ////}

        //[Serializable()]
        //[DBTable("tabela_valor_item")]
        //public class TabelaValorItem : EntityBase, IPersisteableEntity
        //{
        //    #region campos

        //    Object _id;
        //    Object _tabelaId;
        //    Object _planoId;
        //    int _idadeInicio;
        //    int _idadeFim;
        //    Boolean _calculoAutomatico;
        //    Decimal _qcValor;
        //    Decimal _qpValor;
        //    Decimal _qcValorPagamento;
        //    Decimal _qpValorPagamento;
        //    Decimal _qcValorCompraCarencia;
        //    Decimal _qpValorCompraCarencia;
        //    Decimal _qcValorMigracao;
        //    Decimal _qpValorMigracao;
        //    Decimal _qcValorCondicaoEspecial;
        //    Decimal _qpValorCondicaoEspecial;
        //    //DateTime _data;

        //    #endregion

        //    #region propriedades

        //    [DBFieldInfo("TabelaValoritem_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("TabelaValoritem_tabelaid", FieldType.Single)]
        //    public Object TabelaID
        //    {
        //        get { return _tabelaId; }
        //        set { _tabelaId = value; }
        //    }

        //    [DBFieldInfo("tabelaValorItem_planoId", FieldType.Single)]
        //    public Object PlanoID
        //    {
        //        get { return _planoId; }
        //        set { _planoId = value; }
        //    }

        //    [DBFieldInfo("TabelaValoritem_idadeInicio", FieldType.Single)]
        //    public int IdadeInicio
        //    {
        //        get { return _idadeInicio; }
        //        set { _idadeInicio = value; }
        //    }

        //    [DBFieldInfo("TabelaValoritem_idadeFim", FieldType.Single)]
        //    public int IdadeFim
        //    {
        //        get { return _idadeFim; }
        //        set { _idadeFim = value; }
        //    }

        //    /// <summary>
        //    /// Cliente.
        //    /// </summary>
        //    [DBFieldInfo("tabelavaloritem_qComum", FieldType.Single)]
        //    public Decimal QCValor
        //    {
        //        get { return _qcValor; }
        //        set { _qcValor = value; }
        //    }

        //    [DBFieldInfo("tabelavaloritem_calculoAutomatico", FieldType.Single)]
        //    public Boolean CalculoAutomatico
        //    {
        //        get { return _calculoAutomatico; }
        //        set { _calculoAutomatico = value; }
        //    }

        //    public String QCValorSTR
        //    {
        //        get { return _qcValor.ToString("N2"); }
        //    }

        //    /// <summary>
        //    /// Cliente.
        //    /// </summary>
        //    [DBFieldInfo("tabelavaloritem_qParticular", FieldType.Single)]
        //    public Decimal QPValor
        //    {
        //        get { return _qpValor; }
        //        set { _qpValor = value; }
        //    }

        //    public String QPValorSTR
        //    {
        //        get { return _qpValor.ToString("N2"); }
        //    }

        //    /// <summary>
        //    /// Operadora
        //    /// </summary>
        //    [DBFieldInfo("tabelavaloritem_qComumPagamento", FieldType.Single)]
        //    public Decimal QCValorPagamento
        //    {
        //        get { return _qcValorPagamento; }
        //        set { _qcValorPagamento = value; }
        //    }

        //    public String QCValorPagamentoSTR
        //    {
        //        get { return _qcValorPagamento.ToString("N2"); }
        //    }

        //    /// <summary>
        //    /// Operadora
        //    /// </summary>
        //    [DBFieldInfo("tabelavaloritem_qParticularPagamento", FieldType.Single)]
        //    public Decimal QPValorPagamento
        //    {
        //        get { return _qpValorPagamento; }
        //        set { _qpValorPagamento = value; }
        //    }

        //    public String QPValorPagamentoSTR
        //    {
        //        get { return _qpValorPagamento.ToString("N2"); }
        //    }

        //    [DBFieldInfo("tabelavaloritem_qComumCompraCarencia", FieldType.Single)]
        //    public Decimal QCValorCompraCarencia
        //    {
        //        get { return _qcValorCompraCarencia; }
        //        set { _qcValorCompraCarencia = value; }
        //    }

        //    [DBFieldInfo("tabelavaloritem_qParticularCompraCarencia", FieldType.Single)]
        //    public Decimal QPValorCompraCarencia
        //    {
        //        get { return _qpValorCompraCarencia; }
        //        set { _qpValorCompraCarencia = value; }
        //    }

        //    [DBFieldInfo("tabelavaloritem_qComumMigracao", FieldType.Single)]
        //    public Decimal QCValorMigracao
        //    {
        //        get { return _qcValorMigracao; }
        //        set { _qcValorMigracao = value; }
        //    }

        //    [DBFieldInfo("tabelavaloritem_qParticularMigracao", FieldType.Single)]
        //    public Decimal QPValorMigracao
        //    {
        //        get { return _qpValorMigracao; }
        //        set { _qpValorMigracao = value; }
        //    }

        //    [DBFieldInfo("tabelavaloritem_qComumEspecial", FieldType.Single)]
        //    public Decimal QCValorCondicaoEspecial
        //    {
        //        get { return _qcValorCondicaoEspecial; }
        //        set { _qcValorCondicaoEspecial = value; }
        //    }

        //    [DBFieldInfo("tabelavaloritem_qParticularEspecial", FieldType.Single)]
        //    public Decimal QPValorCondicaoEspecial
        //    {
        //        get { return _qpValorCondicaoEspecial; }
        //        set { _qpValorCondicaoEspecial = value; }
        //    }

        //    //[DBFieldInfo("tabelavaloritem_data", FieldType.Single)]
        //    //public DateTime Data
        //    //{
        //    //    get { return _data; }
        //    //    set { _data= value; }
        //    //}

        //    public String FaixaEtaria
        //    {
        //        get
        //        {
        //            String ret = "";

        //            if (_idadeFim > 0)
        //                ret = String.Concat("de ", _idadeInicio, " a ", _idadeFim);
        //            else
        //                ret = String.Concat("de ", _idadeInicio, " em diante");

        //            return ret;
        //        }
        //    }

        //    #endregion

        //    public TabelaValorItem() { _calculoAutomatico = true; }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public void AplicaTaxa(Taxa taxa, Boolean calculaReajuste)
        //    {
        //        //se o calculo é manual
        //        if (!this._calculoAutomatico)// && calculaReajuste)
        //        {
        //            if (taxa.PercentualReajuste > 0 && this.QCValorPagamento != 0 && calculaReajuste) //usado na duplicação
        //            {
        //                this.QCValor = ((taxa.PercentualReajuste / 100) * this.QCValor) + this.QCValor;
        //                this.QCValorPagamento = ((taxa.PercentualReajuste / 100) * this.QCValorPagamento) + this.QCValorPagamento;
        //            }

        //            if (taxa.PercentualReajuste > 0 && this.QPValorPagamento != 0 && calculaReajuste) //usado na duplicação§Ã£o
        //            {
        //                this.QPValor = ((taxa.PercentualReajuste / 100) * this.QPValor) + this.QPValor;
        //                this.QPValorPagamento = ((taxa.PercentualReajuste / 100) * this.QPValorPagamento) + this.QPValorPagamento;
        //            }

        //            //if (taxa.Over > 0)
        //            //{
        //            //    //this.QCValor = taxa.Fixo + this.QCValorPagamento + ((taxa.Over / 100) * this.QCValorPagamento);
        //            //    this.QCValor = taxa.Fixo + this.QCValor + ((taxa.Over / 100) * this.QCValor);
        //            //    this.QPValor = taxa.Fixo + this.QPValor + ((taxa.Over / 100) * this.QPValor);

        //            //    this.QCValorPagamento = taxa.Fixo + this.QCValorPagamento + ((taxa.Over / 100) * this.QCValorPagamento);
        //            //    this.QPValorPagamento = taxa.Fixo + this.QPValorPagamento + ((taxa.Over / 100) * this.QPValorPagamento);
        //            //}
        //            //else
        //            //{
        //            //    this.QCValor = this.QCValor + taxa.Fixo;
        //            //    this.QPValor = this.QPValor + taxa.Fixo;

        //            //    this.QCValorPagamento = this.QCValorPagamento + taxa.Fixo;
        //            //    this.QPValorPagamento = this.QPValorPagamento + taxa.Fixo;
        //            //}
        //        }
        //        else //if(this._calculoAutomatico)
        //        {
        //            if (taxa.PercentualReajuste > 0 && this.QCValorPagamento != 0 && calculaReajuste) //usado na duplicação
        //            {
        //                this.QCValorPagamento = ((taxa.PercentualReajuste / 100) * this.QCValorPagamento) + this.QCValorPagamento;
        //            }

        //            if (taxa.PercentualReajuste > 0 && this.QPValorPagamento != 0 && calculaReajuste) //usado na duplicação
        //            {
        //                this.QPValorPagamento = ((taxa.PercentualReajuste / 100) * this.QPValorPagamento) + this.QPValorPagamento;
        //            }

        //            if (taxa.Over > 0)
        //            {
        //                this.QCValor = taxa.Fixo + this.QCValorPagamento + ((taxa.Over / 100) * this.QCValorPagamento);
        //            }
        //            else
        //                this.QCValor = this.QCValorPagamento + taxa.Fixo;

        //            if (taxa.Over > 0)
        //                this.QPValor = taxa.Fixo + this.QPValorPagamento + ((taxa.Over / 100) * this.QPValorPagamento);
        //            else
        //                this.QPValor = this.QPValorPagamento + taxa.Fixo;


        //            //if (taxa.PercentualReajuste > 0 && this.QCValorPagamento != 0 && calculaReajuste) //usado na duplicação
        //            //{
        //            //    this.QCValorPagamento = ((taxa.PercentualReajuste / 100) * this.QCValorPagamento) + this.QCValorPagamento;
        //            //    this.QPValorPagamento = ((taxa.PercentualReajuste / 100) * this.QPValorPagamento) + this.QPValorPagamento;
        //            //}
        //        }
        //    }

        //    public static IList<TabelaValorItem> CarregarPorTabela(Object tabelaID, Object planoId)
        //    {
        //        return CarregarPorTabela(tabelaID, planoId, null);
        //    }

        //    public static IList<TabelaValorItem> CarregarPorTabela(Object tabelaID, Object planoId, PersistenceManager pm)
        //    {
        //        String query = "* FROM tabela_valor_item WHERE TabelaValoritem_tabelaid=" + tabelaID + " AND tabelavaloritem_planoId=" + planoId + " ORDER BY TabelaValoritem_idadeInicio";
        //        return LocatorHelper.Instance.ExecuteQuery<TabelaValorItem>(query, typeof(TabelaValorItem), pm);
        //    }

        //    public static IList<TabelaValorItem> CarregarPorTabela(Object tabelaID, PersistenceManager pm)
        //    {
        //        String query = "* FROM tabela_valor_item WHERE TabelaValoritem_tabelaid=" + tabelaID + " ORDER BY tabelaValorItem_planoId, TabelaValoritem_idadeInicio";
        //        return LocatorHelper.Instance.ExecuteQuery<TabelaValorItem>(query, typeof(TabelaValorItem), pm);
        //    }
        //}

        //[DBTable("tipo_contrato")]
        //public class TipoContrato : EntityBase, IPersisteableEntity
        //{
        //    public class UI
        //    {
        //        private UI() { }

        //        //public static void FillComboWithTiposContrato(System.Web.UI.WebControls.ListBox cbo)
        //        //{
        //        //    cbo.Items.Clear();
        //        //    cbo.Items.Add(new System.Web.UI.WebControls.ListItem("Normal", "1"));
        //        //    cbo.Items.Add(new System.Web.UI.WebControls.ListItem("Carência", "4"));
        //        //    cbo.Items.Add(new System.Web.UI.WebControls.ListItem("Migração", "3"));
        //        //    cbo.Items.Add(new System.Web.UI.WebControls.ListItem("Administrativa", "2"));
        //        //    cbo.Items.Add(new System.Web.UI.WebControls.ListItem("Especial", "5"));
        //        //}

        //        //public static TipoComissionamentoProdutorOuOperadora TraduzTipoContratoComissionamento(Int32 tipo)
        //        //{
        //        //    if (tipo == 1) { return TipoComissionamentoProdutorOuOperadora.Normal; }
        //        //    if (tipo == 2) { return TipoComissionamentoProdutorOuOperadora.Administrativa; }
        //        //    if (tipo == 3) { return TipoComissionamentoProdutorOuOperadora.Migracao; }
        //        //    if (tipo == 4) { return TipoComissionamentoProdutorOuOperadora.Carencia; }
        //        //    if (tipo == 2) { return TipoComissionamentoProdutorOuOperadora.Especial; }

        //        //    return TipoComissionamentoProdutorOuOperadora.Normal;
        //        //}
        //    }

        //    public enum TipoComissionamentoProdutorOuOperadora : int
        //    {
        //        /// <summary>
        //        /// 0
        //        /// </summary>
        //        Normal,
        //        /// <summary>
        //        /// 1
        //        /// </summary>
        //        Carencia,
        //        /// <summary>
        //        /// 2
        //        /// </summary>
        //        Migracao,
        //        /// <summary>
        //        /// 3
        //        /// </summary>
        //        Administrativa,
        //        /// <summary>
        //        /// 4
        //        /// </summary>
        //        Especial,
        //        /// <summary>
        //        /// 5
        //        /// </summary>
        //        Idade
        //    }

        //    Object _id;
        //    String _descricao;
        //    Boolean _ativo;
        //    Boolean _solicitarInfoAnterior;
        //    Int32 _tipoComissionamento;

        //    #region propriedades

        //    [DBFieldInfo("tipocontrato_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("tipocontrato_descricao", FieldType.Single)]
        //    public String Descricao
        //    {
        //        get { return _descricao; }
        //        set { _descricao = value; }
        //    }

        //    [DBFieldInfo("tipocontrato_ativo", FieldType.Single)]
        //    public Boolean Ativo
        //    {
        //        get { return _ativo; }
        //        set { _ativo = value; }
        //    }

        //    [DBFieldInfo("tipocontrato_solicitaInfoAnterior", FieldType.Single)]
        //    public Boolean SolicitarInfoAnterior
        //    {
        //        get { return _solicitarInfoAnterior; }
        //        set { _solicitarInfoAnterior = value; }
        //    }

        //    [DBFieldInfo("tipocontrato_tipoComissionamento", FieldType.Single)]
        //    public Int32 TipoComissionamento
        //    {
        //        get { return _tipoComissionamento; }
        //        set { _tipoComissionamento = value; }
        //    }

        //    #endregion

        //    public TipoContrato() { }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static Hashtable CarregaTiposDeComissionamento()
        //    {
        //        Hashtable ht = new Hashtable();

        //        ht.Add(1, "Normal");
        //        ht.Add(4, "Carência");
        //        ht.Add(3, "Migração");
        //        ht.Add(2, "Administrativa");
        //        ht.Add(5, "Especial");

        //        return ht;
        //    }

        //    public static IList<TipoContrato> Carregar(Boolean apenasAtivos)
        //    {
        //        String query = "* FROM tipo_contrato";
        //        if (apenasAtivos) { query += " WHERE tipocontrato_ativo=1"; }
        //        query += " ORDER BY tipocontrato_descricao";

        //        return LocatorHelper.Instance.ExecuteQuery<TipoContrato>(query, typeof(TipoContrato));
        //    }
        //}

        //[DBTable("taxa")]
        //public class Taxa : EntityBase, IPersisteableEntity
        //{
        //    #region campos

        //    Object _id;
        //    Object _tabelaValorId;
        //    Decimal _over;
        //    Decimal _fixo;
        //    Boolean _embutido;
        //    Decimal _valorEmbutido;
        //    Decimal _percentual;
        //    DateTime _data;

        //    #endregion

        //    #region propriedades

        //    [DBFieldInfo("taxa_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("taxa_tabelaValorId", FieldType.Single)]
        //    public Object TabelaValorID
        //    {
        //        get { return _tabelaValorId; }
        //        set { _tabelaValorId = value; }
        //    }

        //    [DBFieldInfo("taxa_over", FieldType.Single)]
        //    public Decimal Over
        //    {
        //        get { return _over; }
        //        set { _over = value; }
        //    }

        //    [DBFieldInfo("taxa_fixo", FieldType.Single)]
        //    public Decimal Fixo
        //    {
        //        get { return _fixo; }
        //        set { _fixo = value; }
        //    }

        //    [DBFieldInfo("taxa_embutido", FieldType.Single)]
        //    public Boolean Embutido
        //    {
        //        get { return _embutido; }
        //        set { _embutido = value; }
        //    }

        //    [DBFieldInfo("taxa_valorEmbutido", FieldType.Single)]
        //    public Decimal ValorEmbutido
        //    {
        //        get { return _valorEmbutido; }
        //        set { _valorEmbutido = value; }
        //    }

        //    [DBFieldInfo("taxa_percentualReajuste", FieldType.Single)]
        //    public Decimal PercentualReajuste
        //    {
        //        get { return _percentual; }
        //        set { _percentual = value; }
        //    }

        //    [DBFieldInfo("taxa_data", FieldType.Single)]
        //    public DateTime Data
        //    {
        //        get { return _data; }
        //        set { _data = value; }
        //    }

        //    #endregion

        //    public Taxa() { _percentual = 0; }
        //    public Taxa(Object id) : this() { _id = id; }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static Taxa CarregarPorTabela(Object tabelaValorId)
        //    {
        //        return CarregarPorTabela(tabelaValorId, null);
        //    }
        //    public static Taxa CarregarPorTabela(Object tabelaValorId, PersistenceManager pm)
        //    {
        //        String query = "* FROM taxa WHERE taxa_tabelaValorId=" + tabelaValorId + " ORDER BY taxa_data DESC, taxa_id DESC";
        //        IList<Taxa> lista = LocatorHelper.Instance.ExecuteQuery<Taxa>(query, typeof(Taxa), pm);
        //        if (lista == null || lista.Count == 0)
        //            return null;
        //        else
        //            return lista[0];
        //    }
        //}

        //[Serializable]
        //[DBTable("adicional")]
        //public class Adicional : EntityBase, IPersisteableEntity
        //{
        //    #region fields

        //    Object _id;
        //    Object _operadoraId;
        //    String _descricao;
        //    String _codTitular;
        //    Boolean _ativo;
        //    Decimal _valorUnico;
        //    Boolean _paraTodaProposta;
        //    DateTime _data;
        //    Boolean _dental;

        //    #endregion

        //    #region propriedades

        //    [DBFieldInfo("adicional_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("adicional_operadoraId", FieldType.Single)]
        //    public Object OperadoraID
        //    {
        //        get { return _operadoraId; }
        //        set { _operadoraId = value; }
        //    }

        //    [DBFieldInfo("adicional_descricao", FieldType.Single)]
        //    public String Descricao
        //    {
        //        get { return _descricao; }
        //        set { _descricao = value; }
        //    }

        //    [DBFieldInfo("adicional_codTitular", FieldType.Single)]
        //    public String CodTitular
        //    {
        //        get { return _codTitular; }
        //        set { _codTitular = value; }
        //    }

        //    [DBFieldInfo("adicional_paraTodaProposta", FieldType.Single)]
        //    public Boolean ParaTodaProposta
        //    {
        //        get { return _paraTodaProposta; }
        //        set { _paraTodaProposta = value; }
        //    }

        //    [DBFieldInfo("adicional_ativo", FieldType.Single)]
        //    public Boolean Ativo
        //    {
        //        get { return _ativo; }
        //        set { _ativo = value; }
        //    }

        //    [DBFieldInfo("adicional_dental", FieldType.Single)]
        //    public Boolean Dental
        //    {
        //        get { return _dental; }
        //        set { _dental = value; }
        //    }

        //    [DBFieldInfo("adicional_codigo", FieldType.Single)]
        //    public String Codigo
        //    {
        //        get;
        //        set;
        //    }
        //    /// <summary>
        //    /// 0 = Taxa, 1 = Seguro, 2 = Previdencia, 3 = Normal
        //    /// </summary>
        //    [DBFieldInfo("adicional_tipo", FieldType.Single)]
        //    public Int32 Tipo
        //    {
        //        get;
        //        set;
        //    }

        //    //[DBFieldInfo("adicional_valorUnico", FieldType.Single)]
        //    //public Decimal ValorUnico
        //    //{
        //    //    get { return _valorUnico; }
        //    //    set { _valorUnico= value; }
        //    //}

        //    //[DBFieldInfo("adicional_data", FieldType.Single)]
        //    //public DateTime Data
        //    //{
        //    //    get { return _data; }
        //    //    set { _data= value; }
        //    //}

        //    #endregion

        //    public Adicional() { _ativo = true; _data = DateTime.Now; Tipo = 3; }
        //    public Adicional(Object id) : this() { _id = id; }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static IList<Adicional> CarregarPorOperadoraID(Object operadoraId)
        //    {
        //        String query = "adicional.*, operadora_nome FROM adicional LEFT JOIN operadora ON operadora_id=adicional_operadoraId WHERE adicional_operadoraId=" + operadoraId + " ORDER BY adicional_descricao";
        //        return LocatorHelper.Instance.ExecuteQuery<Adicional>(query, typeof(Adicional));
        //    }

        //    public static Adicional CarregarPorOperadoraID(Object operadoraId, String adicionalDescricao, PersistenceManager pm)
        //    {
        //        String query = "adicional.*, operadora_nome FROM adicional LEFT JOIN operadora ON operadora_id=adicional_operadoraId WHERE adicional_operadoraId=" + operadoraId + " AND adicional_descricao='" + adicionalDescricao + "'";
        //        IList<Adicional> lista = LocatorHelper.Instance.ExecuteQuery<Adicional>(query, typeof(Adicional), pm);

        //        if (lista == null)
        //            return null;
        //        else
        //            return lista[0];
        //    }

        //    public static IList<Adicional> Carregar(Object[] ids)
        //    {
        //        String inClausule = String.Join(",", (String[])ids);
        //        String query = "adicional.*, operadora_nome FROM adicional LEFT JOIN operadora ON operadora_id=adicional_operadoraId WHERE adicional_id IN (" + inClausule + ") ORDER BY adicional_descricao";
        //        return LocatorHelper.Instance.ExecuteQuery<Adicional>(query, typeof(Adicional));
        //    }

        //    public static IList<Adicional> Carregar(int tipo, bool soAtivos = true)
        //    {
        //        string cond = "";
        //        if (soAtivos) cond = " and adicional_ativo=1 ";
        //        String query = "adicional.*, operadora_nome FROM adicional LEFT JOIN operadora ON operadora_id=adicional_operadoraId WHERE adicional_tipo = " + tipo + cond + " ORDER BY adicional_descricao";
        //        return LocatorHelper.Instance.ExecuteQuery<Adicional>(query, typeof(Adicional));
        //    }

        //    public static Object CarregarIDPorCodigoTitular(String codigoTitular, Object operadoraId, PersistenceManager pm)
        //    {
        //        String query = "SELECT adicional_id FROM adicional WHERE adicional_codTitular='" + codigoTitular + "' AND adicional_operadoraID=" + operadoraId;
        //        return LocatorHelper.Instance.ExecuteScalar(query, null, null, pm);
        //    }

        //    public static Decimal CalculaValor(Object adicionalId, Object beneficiarioId, Int32 beneficiarioIdade)
        //    {
        //        return CalculaValor(adicionalId, beneficiarioId, beneficiarioIdade, null, null);
        //    }
        //    public static Decimal CalculaValor(Object adicionalId, Object beneficiarioId, Int32 beneficiarioIdade, DateTime? dataReferencia, PersistenceManager pm)
        //    {
        //        Adicional adicional = new Adicional();
        //        adicional.ID = adicionalId;
        //        adicional.Carregar();

        //        if (adicional.ID == null) { return -1; }

        //        IList<AdicionalFaixa> faixa = AdicionalFaixa.CarregarPorTabela(adicionalId, dataReferencia, pm);

        //        if (faixa != null && faixa.Count > 0)
        //        {
        //            if (beneficiarioIdade == -1)
        //            {
        //                Beneficiario beneficiario = new Beneficiario();
        //                beneficiario.ID = beneficiarioId;
        //                if (pm == null)
        //                    beneficiario.Carregar();
        //                else
        //                    pm.Load(beneficiario);
        //                if (beneficiario.ID == null) { return -1; }
        //                beneficiarioIdade = Beneficiario.CalculaIdade(beneficiario.DataNascimento);
        //            }

        //            foreach (AdicionalFaixa _item in faixa)
        //            {
        //                if (beneficiarioIdade >= _item.IdadeInicio && _item.IdadeFim == 0)
        //                {
        //                    return _item.Valor;
        //                }
        //                else if (beneficiarioIdade >= _item.IdadeInicio && beneficiarioIdade <= _item.IdadeFim)
        //                {
        //                    return _item.Valor;
        //                }
        //            }

        //            return 0;
        //        }
        //        else
        //            return 0;
        //    }
        //}

        //[Serializable]
        //[DBTable("adicional_faixa")]
        //public class AdicionalFaixa : EntityBase, IPersisteableEntity
        //{
        //    Object _id;
        //    Object _adicionalId;
        //    int _idadeInicio;
        //    int _idadeFim;
        //    Decimal _valor;
        //    DateTime _vigencia;

        //    #region propriedades

        //    [DBFieldInfo("adicionalfaixa_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("adicionalfaixa_adicionalid", FieldType.Single)]
        //    public Object AdicionalId
        //    {
        //        get { return _adicionalId; }
        //        set { _adicionalId = value; }
        //    }

        //    [DBFieldInfo("adicionalfaixa_idadeInicio", FieldType.Single)]
        //    public int IdadeInicio
        //    {
        //        get { return _idadeInicio; }
        //        set { _idadeInicio = value; }
        //    }

        //    [DBFieldInfo("adicionalfaixa_idadeFim", FieldType.Single)]
        //    public int IdadeFim
        //    {
        //        get { return _idadeFim; }
        //        set { _idadeFim = value; }
        //    }

        //    [DBFieldInfo("adicionalfaixa_valor", FieldType.Single)]
        //    public Decimal Valor
        //    {
        //        get { return _valor; }
        //        set { _valor = value; }
        //    }

        //    [DBFieldInfo("adicionalfaixa_vigencia", FieldType.Single)]
        //    public DateTime Vigencia
        //    {
        //        get { return _vigencia; }
        //        set { _vigencia = value; }
        //    }

        //    public String strVigencia
        //    {
        //        get
        //        {
        //            if (_vigencia == DateTime.MinValue)
        //                return "";
        //            else
        //                return _vigencia.ToString("dd/MM/yyyy");
        //        }
        //    }

        //    public String FaixaEtaria
        //    {
        //        get
        //        {
        //            String ret = "";

        //            if (_idadeFim > 0)
        //                ret = String.Concat("de ", _idadeInicio, " a ", _idadeFim);
        //            else
        //                ret = String.Concat("de ", _idadeInicio, " em diante");

        //            return ret;
        //        }
        //    }

        //    #endregion

        //    public AdicionalFaixa() { }

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }
        //    #endregion

        //    public static IList<AdicionalFaixa> CarregarPorTabela(Object adicionalId, DateTime? dataReferencia)
        //    {
        //        return CarregarPorTabela(adicionalId, null, null);
        //    }
        //    public static IList<AdicionalFaixa> CarregarPorTabela(Object adicionalId, DateTime? vigencia, PersistenceManager pm)
        //    {
        //        String query = "* FROM adicional_faixa WHERE adicionalfaixa_adicionalid=" + adicionalId;

        //        if (vigencia != null)
        //        {
        //            query += " and adicionalfaixa_vigencia <= '" + vigencia.Value.ToString("yyyy-MM-dd") + "'";
        //        }

        //        query += " ORDER BY adicionalfaixa_vigencia DESC, adicionalfaixa_idadeInicio"; //and adicionalfaixa_vigencia = (select max(adicionalfaixa_vigencia) FROM adicional_faixa WHERE adicionalfaixa_adicionalid=2)

        //        if (vigencia == null)
        //            return LocatorHelper.Instance.ExecuteQuery<AdicionalFaixa>(query, typeof(AdicionalFaixa), pm);
        //        else
        //        {
        //            IList<AdicionalFaixa> lista = LocatorHelper.Instance.ExecuteQuery<AdicionalFaixa>(query, typeof(AdicionalFaixa), pm);

        //            if (lista == null) { return null; }

        //            DateTime vigenciaRetornada = lista[0]._vigencia;

        //            List<AdicionalFaixa> ret = new List<AdicionalFaixa>();
        //            foreach (AdicionalFaixa af in lista)
        //            {
        //                if (af._vigencia == vigenciaRetornada) { ret.Add(af); }
        //            }

        //            return ret;
        //        }
        //    }
        //}

        //[Serializable]
        //[DBTable("adicional_beneficiario")]
        //public class AdicionalBeneficiario : EntityBase, IPersisteableEntity
        //{
        //    #region fields

        //    Object _id;
        //    Object _propostaid;
        //    Object _adicionalId;
        //    Object _beneficiarioid;

        //    String _adicionalDescricao;
        //    string _adicionalCodigo;
        //    String _adicionalCodTitular;
        //    Object _adicionalOperadoraId;
        //    Boolean _adicionalDental;
        //    Boolean _recorrente;
        //    Boolean _atualizado;

        //    #endregion

        //    /// <summary>
        //    /// 31
        //    /// </summary>
        //    public static readonly int _FormaPagtoBoleto = 31;
        //    /// <summary>
        //    /// 09
        //    /// </summary>
        //    public static readonly int _FormaPagtoCredito = 09;
        //    /// <summary>
        //    /// 10
        //    /// </summary>
        //    public static readonly int _FormaPagtoDebito = 10;
        //    /// <summary>
        //    /// 11
        //    /// </summary>
        //    public static readonly int _FormaPagtoDescFolha = 11;
        //    /// <summary>
        //    /// 81
        //    /// </summary>
        //    public static readonly int _FormaPagtoDescConta = 81;

        //    #region propriedades

        //    [DBFieldInfo("adicionalbeneficiario_id", FieldType.PrimaryKeyAndIdentity)]
        //    public Object ID
        //    {
        //        get { return _id; }
        //        set { _id = value; }
        //    }

        //    [DBFieldInfo("adicionalbeneficiario_propostaId", FieldType.Single)]
        //    public Object PropostaID
        //    {
        //        get { return _propostaid; }
        //        set { _propostaid = value; }
        //    }

        //    [DBFieldInfo("adicionalbeneficiario_atualizado", FieldType.Single)]
        //    public Boolean Atualizado
        //    {
        //        get { return _atualizado; }
        //        set { _atualizado = value; }
        //    }

        //    [Joinned("adicional_id")]
        //    [DBFieldInfo("adicionalbeneficiario_adicionalid", FieldType.Single)]
        //    public Object AdicionalID
        //    {
        //        get { return _adicionalId; }
        //        set { _adicionalId = value; }
        //    }

        //    [DBFieldInfo("adicionalbeneficiario_beneficiarioid", FieldType.Single)]
        //    public Object BeneficiarioID
        //    {
        //        get { return _beneficiarioid; }
        //        set { _beneficiarioid = value; }
        //    }

        //    [DBFieldInfo("adicionalbeneficiario_recorrente", FieldType.Single)]
        //    public Boolean Recorrente
        //    {
        //        get { return _recorrente; }
        //        set { _recorrente = value; }
        //    }

        //    /// <summary>
        //    /// Join
        //    /// </summary>
        //    [Joinned("adicional_descricao")]
        //    public String AdicionalDescricao
        //    {
        //        get { return _adicionalDescricao; }
        //        set { _adicionalDescricao = value; }
        //    }

        //    /// <summary>
        //    /// Joinned
        //    /// </summary>
        //    [Joinned("adicional_codigo")]
        //    public String AdicionalCodigo
        //    {
        //        get { return _adicionalCodigo; }
        //        set { _adicionalCodigo = value; }
        //    }

        //    /// <summary>
        //    /// Join
        //    /// </summary>
        //    [Joinned("adicional_codTitular")]
        //    public String AdicionalCodTitular
        //    {
        //        get { return _adicionalCodTitular; }
        //        set { _adicionalCodTitular = value; }
        //    }
        //    /// <summary>
        //    /// Join
        //    /// </summary>
        //    [Joinned("adicional_operadoraId")]
        //    public Object AdicionalOperadoraID
        //    {
        //        get { return _adicionalOperadoraId; }
        //        set { _adicionalOperadoraId = value; }
        //    }
        //    /// <summary>
        //    /// Join
        //    /// </summary>
        //    [Joinned("adicional_dental")]
        //    public Boolean AdicionalDental
        //    {
        //        get { return _adicionalDental; }
        //        set { _adicionalDental = value; }
        //    }
        //    /// <summary>
        //    /// Joinned - 0 = Taxa ou Plano, 1 = Seguro, 2 = Previdencia, 3 = Normal
        //    /// </summary>
        //    [Joinned("adicional_tipo")]
        //    public Int32 AdicionalTipo
        //    {
        //        get;
        //        set;
        //    }

        //    public Boolean Sim
        //    {
        //        get { return _beneficiarioid != null; }
        //    }

        //    [DBFieldInfo("adicionalbeneficiario_formaPagto", FieldType.Single)]
        //    public int FormaPagto { get; set; }

        //    //TAXA
        //    [DBFieldInfo("adicionalbeneficiario_valor", FieldType.Single)]
        //    public decimal Valor01 { get; set; }
        //    [DBFieldInfo("adicionalbeneficiario_status01", FieldType.Single)]
        //    public string Status01 { get; set; }
        //    [DBFieldInfo("adicionalbeneficiario_status", FieldType.Single)]
        //    public string Status { get; set; }

        //    //SEGURO
        //    [DBFieldInfo("adicionalbeneficiario_codCob1", FieldType.Single)]
        //    public int COD_COB_1 { get; set; }
        //    [DBFieldInfo("adicionalbeneficiario_preCob1", FieldType.Single)]
        //    public decimal PRE_COB_1 { get; set; }
        //    [DBFieldInfo("adicionalbeneficiario_stSgCob1", FieldType.Single)]
        //    public string ST_SG_1 { get; set; }
        //    [DBFieldInfo("adicionalbeneficiario_dtSgCob1", FieldType.Single)]
        //    public DateTime DT_SG_1 { get; set; }

        //    [DBFieldInfo("adicionalbeneficiario_codCob2", FieldType.Single)]
        //    public int COD_COB_2 { get; set; }
        //    [DBFieldInfo("adicionalbeneficiario_preCob2", FieldType.Single)]
        //    public decimal PRE_COB_2 { get; set; }
        //    [DBFieldInfo("adicionalbeneficiario_stSgCob2", FieldType.Single)]
        //    public string ST_SG_2 { get; set; }
        //    [DBFieldInfo("adicionalbeneficiario_dtSgCob2", FieldType.Single)]
        //    public DateTime DT_SG_2 { get; set; }

        //    [DBFieldInfo("adicionalbeneficiario_codCob3", FieldType.Single)]
        //    public int COD_COB_3 { get; set; }
        //    [DBFieldInfo("adicionalbeneficiario_preCob3", FieldType.Single)]
        //    public decimal PRE_COB_3 { get; set; }
        //    [DBFieldInfo("adicionalbeneficiario_stSgCob3", FieldType.Single)]
        //    public string ST_SG_3 { get; set; }
        //    [DBFieldInfo("adicionalbeneficiario_dtSgCob3", FieldType.Single)]
        //    public DateTime DT_SG_3 { get; set; }

        //    [DBFieldInfo("adicionalbeneficiario_codCob4", FieldType.Single)]
        //    public int COD_COB_4 { get; set; }
        //    [DBFieldInfo("adicionalbeneficiario_preCob4", FieldType.Single)]
        //    public decimal PRE_COB_4 { get; set; }
        //    [DBFieldInfo("adicionalbeneficiario_stSgCob4", FieldType.Single)]
        //    public string ST_SG_4 { get; set; }
        //    [DBFieldInfo("adicionalbeneficiario_dtSgCob4", FieldType.Single)]
        //    public DateTime DT_SG_4 { get; set; }

        //    [DBFieldInfo("adicionalbeneficiario_codCob5", FieldType.Single)]
        //    public int COD_COB_5 { get; set; }
        //    [DBFieldInfo("adicionalbeneficiario_preCob5", FieldType.Single)]
        //    public decimal PRE_COB_5 { get; set; }
        //    [DBFieldInfo("adicionalbeneficiario_stSgCob5", FieldType.Single)]
        //    public string ST_SG_5 { get; set; }
        //    [DBFieldInfo("adicionalbeneficiario_dtSgCob5", FieldType.Single)]
        //    public DateTime DT_SG_5 { get; set; }

        //    [DBFieldInfo("adicionalbeneficiario_codCob6", FieldType.Single)]
        //    public int COD_COB_6 { get; set; }
        //    [DBFieldInfo("adicionalbeneficiario_preCob6", FieldType.Single)]
        //    public decimal PRE_COB_6 { get; set; }
        //    [DBFieldInfo("adicionalbeneficiario_stSgCob6", FieldType.Single)]
        //    public string ST_SG_6 { get; set; }
        //    [DBFieldInfo("adicionalbeneficiario_dtSgCob6", FieldType.Single)]
        //    public DateTime DT_SG_6 { get; set; }

        //    #endregion

        //    #region métodos EntityBase

        //    public void Salvar()
        //    {
        //        base.Salvar(this);
        //    }

        //    public void Carregar()
        //    {
        //        base.Carregar(this);
        //    }

        //    public void Remover()
        //    {
        //        base.Remover(this);
        //    }
        //    #endregion

        //    public AdicionalBeneficiario() { _recorrente = true; }

        //    public static IList<AdicionalBeneficiario> Carregar(Object propostaId, int tipo = -1, bool somenteAtivos = false, bool somenteInstanciasAtivas = true)
        //    {
        //        String query = "adicional_beneficiario.*, adicional_descricao, adicional_operadoraId, adicional_codTitular,adicional_dental,adicional_tipo FROM adicional_beneficiario INNER JOIN adicional ON adicionalbeneficiario_adicionalid=adicional_id WHERE adicionalbeneficiario_propostaId=" + propostaId;
        //        if (tipo > -1) query += " and adicional_tipo = " + tipo;
        //        if (somenteAtivos) query += " and adicional_ativo=1 ";
        //        if (somenteInstanciasAtivas)
        //        {
        //            if (tipo > -1)
        //            {
        //                if (tipo == 0 || tipo == 2)
        //                    query += string.Concat("and ( adicionalbeneficiario_status = 'A'  ) "); //or adicionalbeneficiario_status01 = 'A'
        //                else
        //                    query += string.Concat("and ( adicionalbeneficiario_stSgCob1 = 'A' or adicionalbeneficiario_stSgCob2 = 'A' or adicionalbeneficiario_stSgCob3 = 'A' or adicionalbeneficiario_stSgCob4 = 'A' or adicionalbeneficiario_stSgCob5 = 'A' or adicionalbeneficiario_stSgCob6 = 'A' ) ");
        //            }
        //            else
        //            {
        //                query += string.Concat("and ( (adicional_tipo=3) or ((adicional_tipo=0 or adicional_tipo=2) and (adicionalbeneficiario_status = 'A' /*or adicionalbeneficiario_status01 = 'A'*/)) or (adicional_tipo=1 and (adicionalbeneficiario_stSgCob1 = 'A' or adicionalbeneficiario_stSgCob2 = 'A' or adicionalbeneficiario_stSgCob3 = 'A' or adicionalbeneficiario_stSgCob4 = 'A' or adicionalbeneficiario_stSgCob5 = 'A' or adicionalbeneficiario_stSgCob6 = 'A')) ) ");
        //            }
        //        }
        //        query += " ORDER BY adicional_descricao";
        //        return LocatorHelper.Instance.ExecuteQuery<AdicionalBeneficiario>(query, typeof(AdicionalBeneficiario));
        //    }

        //    public static IList<AdicionalBeneficiario> Carregar(Object propostaId, Object beneficiarioId, int tipo = -1)
        //    {
        //        return Carregar(propostaId, beneficiarioId, null, tipo);
        //    }
        //    public static IList<AdicionalBeneficiario> Carregar(Object propostaId, Object beneficiarioId, PersistenceManager pm, int tipo = -1)
        //    {
        //        String query = "adicional_beneficiario.*, adicional_descricao, adicional_tipo, adicional_operadoraId, adicional_codTitular,adicional_dental FROM adicional_beneficiario INNER JOIN adicional ON adicionalbeneficiario_adicionalid=adicional_id WHERE adicionalbeneficiario_propostaId=" + propostaId + " AND adicionalbeneficiario_beneficiarioid=" + beneficiarioId;
        //        if (tipo > -1) query += " and adicional_tipo = " + tipo;
        //        query += " ORDER BY adicional_descricao";
        //        return LocatorHelper.Instance.ExecuteQuery<AdicionalBeneficiario>(query, typeof(AdicionalBeneficiario), pm);
        //    }

        //    public static Boolean TemDental(IList<AdicionalBeneficiario> lista)
        //    {
        //        if (lista == null) { return false; }

        //        foreach (AdicionalBeneficiario ab in lista)
        //        {
        //            if (ab == null) { continue; }
        //            if (ab.AdicionalDental) { return true; }
        //        }

        //        return false;
        //    }

        //    public static Boolean EDental(AdicionalBeneficiario ab)
        //    {
        //        if (ab != null && ab.AdicionalDental)
        //            return true;
        //        else
        //            return false;
        //    }

        //    public static IList<AdicionalBeneficiario> Carregar(Object contratoADMId, Object planoId, Object propostaId, Object beneficiarioId)
        //    {
        //        String query = String.Concat("adicional_beneficiario.*, adicional_id, adicional_descricao ",
        //            "FROM adicional",
        //            "  INNER JOIN contratoADM_plano_adicional ON adicional_id=contratoplanoadicional_adicionalid",
        //            "  LEFT JOIN adicional_beneficiario ON adicionalbeneficiario_adicionalid=adicional_id ");

        //        if (propostaId != null) { query += "AND adicionalbeneficiario_propostaid=" + propostaId; }

        //        query = String.Concat(query, " AND adicionalbeneficiario_beneficiarioid=", beneficiarioId,
        //            " WHERE contratoplanoadicional_contratoid=", contratoADMId, " AND contratoplanoadicional_planoid=", planoId, " ORDER BY adicional_descricao");

        //        return LocatorHelper.Instance.ExecuteQuery<AdicionalBeneficiario>(query, typeof(AdicionalBeneficiario));
        //    }

        //    public static AdicionalBeneficiario CarregarParaBeneficiario(Object contratoId, Object beneficiarioId, Object adicionalId, PersistenceManager pm)
        //    {
        //        String query = String.Concat("* ",
        //            "FROM adicional_beneficiario ",
        //            "  WHERE adicionalbeneficiario_propostaId=", contratoId, " AND adicionalbeneficiario_beneficiarioId=", beneficiarioId, " AND adicionalbeneficiario_adicionalId=", adicionalId);

        //        IList<AdicionalBeneficiario> lista = LocatorHelper.Instance.ExecuteQuery<AdicionalBeneficiario>(query, typeof(AdicionalBeneficiario));

        //        if (lista == null)
        //            return null;
        //        else
        //            return lista[0];
        //    }

        //    public static IList<AdicionalBeneficiario> Carregar(Object contratoADMId, Object planoId, Object propostaId)
        //    {
        //        String query = String.Concat("adicional_beneficiario.*, adicional_id, adicional_descricao ",
        //            "FROM adicional",
        //            "  INNER JOIN contratoADM_plano_adicional ON adicional_id=contratoplanoadicional_adicionalid",
        //            "  LEFT JOIN adicional_beneficiario ON adicionalbeneficiario_adicionalid=adicional_id ");

        //        if (propostaId != null) { query += "AND adicionalbeneficiario_propostaid=" + propostaId; }

        //        query = String.Concat(query, " WHERE contratoplanoadicional_contratoid=", contratoADMId, " AND contratoplanoadicional_planoid=", planoId, " ORDER BY adicional_descricao");

        //        return LocatorHelper.Instance.ExecuteQuery<AdicionalBeneficiario>(query, typeof(AdicionalBeneficiario));
        //    }

        //    public static AdicionalBeneficiario Carregar(Object adicionalBeneficiarioId, PersistenceManager pm)
        //    {
        //        //String query = "adicional_beneficiario.*, adicional_descricao, adicional_codigo, adicional_tipo, adicional_operadoraId, adicional_codTitular,adicional_dental FROM adicional_beneficiario INNER JOIN adicional ON adicionalbeneficiario_adicionalid=adicional_id WHERE adicionalbeneficiario_id=" + adicionalBeneficiarioId;
        //        String query = "adicional_beneficiario.*, adicional_descricao, adicional_codigo, adicional_tipo, adicional_operadoraId, adicional_codTitular,adicional_dental FROM adicional_beneficiario INNER JOIN adicional ON adicionalbeneficiario_adicionalid=adicional_id WHERE adicionalbeneficiario_id=" + adicionalBeneficiarioId;
        //        IList<AdicionalBeneficiario> lista = LocatorHelper.Instance.ExecuteQuery<AdicionalBeneficiario>(query, typeof(AdicionalBeneficiario), pm);

        //        if (lista == null || lista.Count == 0)
        //            return null;
        //        else
        //            return lista[0];
        //    }

        //    public string RetornaNome()
        //    {
        //        if (this.AdicionalTipo == 0) return "Taxa";
        //        else if (this.AdicionalTipo == 3) return "Normal";
        //        else if (this.AdicionalTipo == 1) return "Seguro";
        //        else if (this.AdicionalTipo == 2) return "Previdencia";
        //        else return "";
        //    }

        //    public decimal RetornaValor(int formaPagto, DateTime vigencia, bool naoRecorrente = false)
        //    {
        //        if (this.Recorrente && naoRecorrente) return 0;

        //        if (this.AdicionalTipo != 1) //não é seguro
        //        {
        //            if (this.FormaPagto == formaPagto || formaPagto == -1)
        //            {
        //                if (this.FormaPagto == AdicionalBeneficiario._FormaPagtoBoleto)
        //                {
        //                    if (this.Status == null || this.Status.ToUpper() != "A") return 0;
        //                    else return this.Valor01;
        //                }
        //                else
        //                {
        //                    if (this.Status == null || this.Status.ToUpper() != "A") return 0;
        //                    else return this.Valor01;
        //                }
        //            }
        //            else
        //                return 0;
        //        }
        //        else if (this.AdicionalTipo == 1) //seguro
        //        {
        //            if (this.FormaPagto == formaPagto || formaPagto == -1)
        //            {
        //                //if (this.Status == null || this.Status.ToUpper() != "A") return 0;

        //                decimal total = 0;

        //                if (this.ST_SG_1 != null && this.ST_SG_1.ToUpper() == "A") total += this.PRE_COB_1;
        //                if (this.ST_SG_2 != null && this.ST_SG_2.ToUpper() == "A") total += this.PRE_COB_2;
        //                if (this.ST_SG_3 != null && this.ST_SG_3.ToUpper() == "A") total += this.PRE_COB_3;
        //                if (this.ST_SG_4 != null && this.ST_SG_4.ToUpper() == "A") total += this.PRE_COB_4;
        //                if (this.ST_SG_5 != null && this.ST_SG_5.ToUpper() == "A") total += this.PRE_COB_5;
        //                if (this.ST_SG_6 != null && this.ST_SG_6.ToUpper() == "A") total += this.PRE_COB_6;

        //                return total;
        //            }
        //            else
        //                return 0;
        //        }
        //        else
        //            return 0;
        //    }

        //    public void AplicaRejuste(decimal reajustePlano, decimal reajusteTaxa, decimal reajusteSeguro)
        //    {
        //        if (this.AdicionalTipo != 1) //NAO é SEGURO
        //        {
        //            string status = this.Status;

        //            //if (this.FormaPagto == AdicionalBeneficiario._FormaPagtoBoleto) status = this.Status01;

        //            if (status != null && status.ToUpper() == "A")
        //            {
        //                int plano = Convert.ToInt32(this._adicionalCodigo);

        //                //decimal reajustePlano = 18.49M, reajusteTaxa = 5.91M, reajusteSeguro = 5.91M; <= cola

        //                if (plano == 4425 || plano == 4424)
        //                {
        //                    this.Valor01 = (reajusteTaxa / 100M) * this.Valor01 + this.Valor01;
        //                }
        //                else if (plano >= 4435 && plano <= 4442) //4439
        //                {
        //                    this.Valor01 = (reajustePlano / 100M) * this.Valor01 + this.Valor01;
        //                }
        //                else
        //                    this.Valor01 = (reajusteTaxa / 100M) * this.Valor01 + this.Valor01;
        //            }
        //        }
        //        else if (this.AdicionalTipo == 1) //seguro
        //        {
        //            if (this.ST_SG_1 != null && this.ST_SG_1.ToUpper() == "A") this.PRE_COB_1 = (reajusteSeguro / 100M) * this.PRE_COB_1 + this.PRE_COB_1;
        //            if (this.ST_SG_2 != null && this.ST_SG_2.ToUpper() == "A") this.PRE_COB_2 = (reajusteSeguro / 100M) * this.PRE_COB_2 + this.PRE_COB_2;
        //            if (this.ST_SG_3 != null && this.ST_SG_3.ToUpper() == "A") this.PRE_COB_3 = (reajusteSeguro / 100M) * this.PRE_COB_3 + this.PRE_COB_3;
        //            if (this.ST_SG_4 != null && this.ST_SG_4.ToUpper() == "A") this.PRE_COB_4 = (reajusteSeguro / 100M) * this.PRE_COB_4 + this.PRE_COB_4;
        //            if (this.ST_SG_5 != null && this.ST_SG_5.ToUpper() == "A") this.PRE_COB_5 = (reajusteSeguro / 100M) * this.PRE_COB_5 + this.PRE_COB_5;
        //            if (this.ST_SG_6 != null && this.ST_SG_6.ToUpper() == "A") this.PRE_COB_6 = (reajusteSeguro / 100M) * this.PRE_COB_6 + this.PRE_COB_6;
        //        }
        //    }
        //}

        #endregion
    }

    #region classes antigas aux 

    [DBTable("IR_DADOS_PREPROD_SP_AUX")]
    class IRAuxiliar : IPersisteableEntity
    {
        public void SetaValor(decimal valor, int mes)
        {
            switch (mes)
            {
                case 1:
                {
                    Jan += valor;
                    break;
                }
                case 2:
                {
                    Fev += valor;
                    break;
                }
                case 3:
                {
                    Mar += valor;
                    break;
                }
                case 4:
                {
                    Abr += valor;
                    break;
                }
                case 5:
                {
                    Mai += valor;
                    break;
                }
                case 6:
                {
                    Jun += valor;
                    break;
                }
                case 7:
                {
                    Jul += valor;
                    break;
                }
                case 8:
                {
                    Ago += valor;
                    break;
                }
                case 9:
                {
                    Set += valor;
                    break;
                }
                case 10:
                {
                    Out += valor;
                    break;
                }
                case 11:
                {
                    Nov += valor;
                    break;
                }
                case 12:
                {
                    Dez += valor;
                    break;
                }
            }
        }

        [DBFieldInfo("ID", FieldType.PrimaryKeyAndIdentity)]
        public object ID { get; set; }

        [DBFieldInfo("IDProposta", FieldType.Single)]
        public int ContratoId { get; set; }
        [DBFieldInfo("IDProponente", FieldType.Single)]
        public int ProponenteId { get; set; }
        [DBFieldInfo("IDBeneficiario", FieldType.Single)]
        public int BeneficiarioId { get; set; }
        [DBFieldInfo("JAN", FieldType.Single)]
        public decimal Jan { get; set; }
        [DBFieldInfo("FEV", FieldType.Single)]
        public decimal Fev { get; set; }
        [DBFieldInfo("MAR", FieldType.Single)]
        public decimal Mar { get; set; }
        [DBFieldInfo("ABR", FieldType.Single)]
        public decimal Abr { get; set; }
        [DBFieldInfo("MAI", FieldType.Single)]
        public decimal Mai { get; set; }
        [DBFieldInfo("JUN", FieldType.Single)]
        public decimal Jun { get; set; }
        [DBFieldInfo("JUL", FieldType.Single)]
        public decimal Jul { get; set; }
        [DBFieldInfo("AGO", FieldType.Single)]
        public decimal Ago { get; set; }
        [DBFieldInfo("SETE", FieldType.Single)]
        public decimal Set { get; set; }
        [DBFieldInfo("OUT", FieldType.Single)]
        public decimal Out { get; set; }
        [DBFieldInfo("NOV", FieldType.Single)]
        public decimal Nov { get; set; }
        [DBFieldInfo("DEZ", FieldType.Single)]
        public decimal Dez { get; set; }
    }

    [DBTable("___rel")]
    class RelatorioAdriano : IPersisteableEntity
    {
        Object _id;
        Object _contratoId;
        String _numProposta;
        String _nomeTitular;
        String _idCobranca;

        [DBFieldInfo("id", FieldType.PrimaryKeyAndIdentity)]
        public Object ID
        {
            get { return _id; }
            set { _id = value; }
        }

        [DBFieldInfo("contratoid", FieldType.Single)]
        public Object ContratoID
        {
            get { return _contratoId; }
            set { _contratoId = value; }
        }

        [DBFieldInfo("numproposta", FieldType.Single)]
        public String NumProposta
        {
            get { return _numProposta; }
            set { _numProposta = value; }
        }

        [DBFieldInfo("nomeTitular", FieldType.Single)]
        public String NomeTitular
        {
            get { return _nomeTitular; }
            set { _nomeTitular = value; }
        }

        [DBFieldInfo("idcobranca", FieldType.Single)]
        public String IDCobranca
        {
            get { return _idCobranca; }
            set { _idCobranca= value; }
        }
    }

    [DBTable("___cobrancaEstudoAmilPadrao")]
    class CobrancaEstudoAmilPadrao : IPersisteableEntity
    {
        Object id;
        String contratoBeneficiarioId;
        String contratoNumeroMatricula;
        String beneficiarioNome;
        String logradouro, numero, complemento, bairro, cidade, uf, cep;
        String cobrancaId;
        String cobrancaValor;
        String cobrancasEmAberto;
        String intervaloCobrancas;
        Int32 propostaId, cobrancaParcela;

        [DBFieldInfo("id", FieldType.PrimaryKeyAndIdentity)]
        public Object ID
        {
            get { return id; }
            set { id = value; }
        }

        [DBFieldInfo("propostaId", FieldType.Single)]
        public int PropostaID
        {
            get { return propostaId; }
            set { propostaId = value; }
        }

        [DBFieldInfo("contratoBeneficiarioId", FieldType.Single)]
        public String ContratoBeneficiarioId
        {
            get { return contratoBeneficiarioId; }
            set { contratoBeneficiarioId = value; }
        }

        [DBFieldInfo("contratoNumeroMatricula", FieldType.Single)]
        public String ContratoNumeroMatricula
        {
            get { return contratoNumeroMatricula; }
            set { contratoNumeroMatricula = value; }
        }

        [DBFieldInfo("beneficiarioNome", FieldType.Single)]
        public String BeneficiarioNome
        {
            get { return beneficiarioNome; }
            set { beneficiarioNome = value; }
        }

        [DBFieldInfo("logradouro", FieldType.Single)]
        public String Logradouro
        {
            get { return logradouro; }
            set { logradouro = value; }
        }

        [DBFieldInfo("numero", FieldType.Single)]
        public String Numero
        {
            get { return numero; }
            set { numero = value; }
        }

        [DBFieldInfo("complemento", FieldType.Single)]
        public String Complemento
        {
            get { return complemento; }
            set { complemento = value; }
        }

        [DBFieldInfo("bairro", FieldType.Single)]
        public String Bairro
        {
            get { return bairro; }
            set { bairro = value; }
        }

        [DBFieldInfo("cidade", FieldType.Single)]
        public String Cidade
        {
            get { return cidade; }
            set { cidade = value; }
        }

        [DBFieldInfo("uf", FieldType.Single)]
        public String UF
        {
            get { return uf; }
            set { uf = value; }
        }

        [DBFieldInfo("cep", FieldType.Single)]
        public String CEP
        {
            get { return cep; }
            set { cep= value; }
        }

        [DBFieldInfo("cobrancaID", FieldType.Single)]
        public String CobrancaID
        {
            get { return cobrancaId; }
            set { cobrancaId = value; }
        }

        [DBFieldInfo("cobrancaValor", FieldType.Single)]
        public String CobrancaValor
        {
            get { return cobrancaValor; }
            set { cobrancaValor = value; }
        }

        [DBFieldInfo("cobrancaParcela", FieldType.Single)]
        public int CobrancaParcela
        {
            get { return cobrancaParcela; }
            set { cobrancaParcela = value; }
        }

        [DBFieldInfo("cobrancasEmAberto", FieldType.Single)]
        public String CobrancasEmAberto
        {
            get { return cobrancasEmAberto; }
            set { cobrancasEmAberto = value; }
        }

        [DBFieldInfo("intervaloCobrancas", FieldType.Single)]
        public String IntervaloCobrancas
        {
            get { return intervaloCobrancas; }
            set { intervaloCobrancas = value; }
        }
    }

    [DBTable("___conferenciaFatura")]
    class ConferenciaFatura : IPersisteableEntity
    {
        Object _id;
        String _operadora, estipulante, contratoAdmNumero, contratoAdmDescricao, contratoMatricula, contratoNumero, beneficiarioNome, beneficiarioCpf, _beneficiarioDataNascimento, planoDescricao, contratoAdmissao, contratoVigencia, beneficiarioSequencia, diavig;
        Decimal _valorNet;
        String _cobrancaGerado, _cobrancaPago, _idade, _cobrancaId;

        [DBFieldInfo("id", FieldType.PrimaryKeyAndIdentity)]
        public Object ID
        {
            get { return _id; }
            set { _id= value; }
        }

        [DBFieldInfo("operadora", FieldType.Single)]
        public String Operadora
        {
            get { return _operadora; }
            set { _operadora = value; }
        }

        [DBFieldInfo("estipulante", FieldType.Single)]
        public String Estipulante
        {
            get { return estipulante; }
            set { estipulante = value; }
        }

        [DBFieldInfo("contratoAdmNumero", FieldType.Single)]
        public String ContratoAdmNumero
        {
            get { return contratoAdmNumero; }
            set { contratoAdmNumero = value; }
        }

        [DBFieldInfo("contratoAdmDescricao", FieldType.Single)]
        public String ContratoAdmDescricao
        {
            get { return contratoAdmDescricao; }
            set { contratoAdmDescricao = value; }
        }

        [DBFieldInfo("contratoMatricula", FieldType.Single)]
        public String ContratoMatricula
        {
            get { return contratoMatricula; }
            set { contratoMatricula = value; }
        }

        [DBFieldInfo("contratoNumero", FieldType.Single)]
        public String ContratoNumero
        {
            get { return contratoNumero; }
            set { contratoNumero = value; }
        }

        [DBFieldInfo("beneficiarioNome", FieldType.Single)]
        public String BeneficiarioNome
        {
            get { return beneficiarioNome; }
            set { beneficiarioNome = value; }
        }

        [DBFieldInfo("beneficiarioCpf", FieldType.Single)]
        public String BeneficiarioCPF
        {
            get { return beneficiarioCpf; }
            set { beneficiarioCpf = value; }
        }

        [DBFieldInfo("beneficiarioNascimento", FieldType.Single)]
        public String BeneficiarioDataNascimento
        {
            get { return _beneficiarioDataNascimento; }
            set { _beneficiarioDataNascimento = value; }
        }

        [DBFieldInfo("planoDescricao", FieldType.Single)]
        public String Plano
        {
            get { return planoDescricao; }
            set { planoDescricao = value; }
        }

        [DBFieldInfo("contratoAdmissao", FieldType.Single)]
        public String ContratoAdmissao
        {
            get { return contratoAdmissao; }
            set { contratoAdmissao = value; }
        }

        [DBFieldInfo("contratoVigencia", FieldType.Single)]
        public String ContratoVigencia
        {
            get { return contratoVigencia; }
            set { contratoVigencia = value; }
        }

        [DBFieldInfo("beneficiarioSequencia", FieldType.Single)]
        public String BeneficiarioSequencia
        {
            get { return beneficiarioSequencia; }
            set { beneficiarioSequencia = value; }
        }

        [DBFieldInfo("diavigencia", FieldType.Single)]
        public String ContratoDiaVigencia
        {
            get { return diavig; }
            set { diavig = value; }
        }

        [DBFieldInfo("valorNet", FieldType.Single)]
        public Decimal ValorNet
        {
            get { return _valorNet; }
            set { _valorNet = value; }
        }

        [DBFieldInfo("cobrancaGerado", FieldType.Single)]
        public String CobrancaGerado
        {
            get { return _cobrancaGerado; }
            set { _cobrancaGerado = value; }
        }

        [DBFieldInfo("cobrancaoPago", FieldType.Single)]
        public String CobrancaPago
        {
            get { return _cobrancaPago; }
            set { _cobrancaPago= value; }
        }

        [DBFieldInfo("cobrancaId", FieldType.Single)]
        public String CobrancaID
        {
            get { return _cobrancaId; }
            set { _cobrancaId= value; }
        }

        [DBFieldInfo("idade", FieldType.Single)]
        public String Idade
        {
            get { return _idade; }
            set { _idade=value; }
        }
    }

    [DBTable("___tabelaPADRAOSP")]
    class LevantamentoAmilPADRAOVO : IPersisteableEntity
    {
        Object _id;
        int _contratoId;
        String _numeroMatricula;
        String _numeroContrato;
        String _titularNome;
        String _operadora;
        String _vigencia;
        String _cancelamento;
        String _temNaAmil;
        String _adimplente;

        [DBFieldInfo("id", FieldType.PrimaryKeyAndIdentity)]
        public Object ID
        {
            get { return _id; }
            set { _id = value; }
        }

        [DBFieldInfo("contratoid", FieldType.Single)]
        public Int32 IDProposta
        {
            get { return _contratoId; }
            set { _contratoId = value; }
        }

        [DBFieldInfo("contratomatricula", FieldType.Single)]
        public String MatriculaProposta
        {
            get { return _numeroMatricula; }
            set { _numeroMatricula= value; }
        }

        [DBFieldInfo("contratonumero", FieldType.Single)]
        public String NumeroProposta
        {
            get { return _numeroContrato; }
            set { _numeroContrato = value; }
        }

        [DBFieldInfo("titular", FieldType.Single)]
        public String TitularNome
        {
            get { return _titularNome; }
            set { _titularNome = value; }
        }

        [DBFieldInfo("contratooperadora", FieldType.Single)]
        public String Operadora
        {
            get { return _operadora; }
            set { _operadora = value; }
        }

        [DBFieldInfo("contratovigencia", FieldType.Single)]
        public String Vigencia
        {
            get { return _vigencia; }
            set { _vigencia = value; }
        }

        [DBFieldInfo("contratocancelamento", FieldType.Single)]
        public String Cancelamento
        {
            get { return _cancelamento; }
            set { _cancelamento= value; }
        }

        [DBFieldInfo("temNaAmil", FieldType.Single)]
        public String TemNaAmil
        {
            get { return _temNaAmil; }
            set { _temNaAmil = value; }
        }

        [DBFieldInfo("adimplente", FieldType.Single)]
        public String Adimplente
        {
            get { return _adimplente; }
            set { _adimplente = value; }
        }
    }

    [DBTable("____levantamentoFaixaEtaria")]
    class FaixaEtariaVO : IPersisteableEntity
    {
        Object _id;
        int _contratoId;
        String _numeroContrato;
        String _beneficiarioNome;
        String _beneficiarioIdade;
        String _beneficiarioSexo;
        String _operadora;
        String _estipulante;
        String _faixa;
        String _filial;

        [DBFieldInfo("id", FieldType.PrimaryKeyAndIdentity)]
        public Object ID 
        {
            get { return _id; }
            set { _id= value; }
        }

        [DBFieldInfo("idProposta", FieldType.Single)]
        public Int32 IDProposta
        {
            get { return _contratoId; }
            set { _contratoId= value; }
        }

        [DBFieldInfo("numeroProposta", FieldType.Single)]
        public String NumeroProposta
        {
            get { return _numeroContrato; }
            set { _numeroContrato= value; }
        }

        [DBFieldInfo("beneficiarioNome", FieldType.Single)]
        public String BeneficiarioNome
        {
            get { return _beneficiarioNome; }
            set { _beneficiarioNome= value; }
        }

        [DBFieldInfo("beneficiarioIdade", FieldType.Single)]
        public String BeneficiarioIdade
        {
            get { return _beneficiarioIdade; }
            set { _beneficiarioIdade= value; }
        }

        [DBFieldInfo("beneficiarioSexo", FieldType.Single)]
        public String BeneficiarioSexo
        {
            get { return _beneficiarioSexo; }
            set { _beneficiarioSexo= value; }
        }

        [DBFieldInfo("operadora", FieldType.Single)]
        public String Operadora
        {
            get { return _operadora; }
            set { _operadora= value; }
        }

        [DBFieldInfo("estipulante", FieldType.Single)]
        public String Estipulante
        {
            get { return _estipulante; }
            set { _estipulante= value; }
        }

        [DBFieldInfo("faixaEtaria", FieldType.Single)]
        public String FaixaEtaria
        {
            get { return _faixa; }
            set { _faixa= value; }
        }

        [DBFieldInfo("filial", FieldType.Single)]
        public String Filial
        {
            get { return _filial; }
            set { _filial= value; }
        }

        public void SetaSexo(Object sexo)
        {
            if (Convert.ToInt32(sexo) == 1)
                _beneficiarioSexo = "masculino";
            else
                _beneficiarioSexo = "feminino";
        }

    }

    #endregion


}